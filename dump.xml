<mediawiki xmlns="http://www.mediawiki.org/xml/export-0.11/" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mediawiki.org/xml/export-0.11/ http://www.mediawiki.org/xml/export-0.11.xsd" version="0.11" xml:lang="en">
  <siteinfo>
    <sitename>Minix Backup Wiki</sitename>
    <dbname>mediawiki</dbname>
    <base>https://wiki.iberty.cf/index.php/Main_Page</base>
    <generator>MediaWiki 1.36.1</generator>
    <case>first-letter</case>
    <namespaces>
      <namespace key="-2" case="first-letter">Media</namespace>
      <namespace key="-1" case="first-letter">Special</namespace>
      <namespace key="0" case="first-letter" />
      <namespace key="1" case="first-letter">Talk</namespace>
      <namespace key="2" case="first-letter">User</namespace>
      <namespace key="3" case="first-letter">User talk</namespace>
      <namespace key="4" case="first-letter">Minix Backup Wiki</namespace>
      <namespace key="5" case="first-letter">Minix Backup Wiki talk</namespace>
      <namespace key="6" case="first-letter">File</namespace>
      <namespace key="7" case="first-letter">File talk</namespace>
      <namespace key="8" case="first-letter">MediaWiki</namespace>
      <namespace key="9" case="first-letter">MediaWiki talk</namespace>
      <namespace key="10" case="first-letter">Template</namespace>
      <namespace key="11" case="first-letter">Template talk</namespace>
      <namespace key="12" case="first-letter">Help</namespace>
      <namespace key="13" case="first-letter">Help talk</namespace>
      <namespace key="14" case="first-letter">Category</namespace>
      <namespace key="15" case="first-letter">Category talk</namespace>
      <namespace key="3000" case="first-letter">Contributors</namespace>
      <namespace key="3001" case="first-letter">Contributors talk</namespace>
    </namespaces>
  </siteinfo>
  <page>
    <title>Main Page</title>
    <ns>0</ns>
    <id>1</id>
    <revision>
      <id>428</id>
      <parentid>143</parentid>
      <timestamp>2022-02-14T12:22:51Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>/* Project Information */ Add link to 3.4.0 wishlist</comment>
      <origin>428</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1992" sha1="j9goliw5xelmh2via8vbjyhwa1gpixf" xml:space="preserve">__NOTOC__
&lt;strong&gt;Welcome to Minix Backup Wiki&lt;/strong&gt;

This is a temporary mediawiki-based backup of [https://wiki.minix3.org official Minix 3 Wiki].

'''At the moment, you have to ask admin to create account for you if you want to edit pages'''.

== Documentation ==
* [[Wiki Guide]] - How to navigate and contribute to this wiki
* [[FAQ]] - Frequently asked questions about MINIX 3
* [[Getting Help]]
* [[Reporting Bugs]]

=== Development version (Master branch) ===
* [[Minix User's Guide]] - Start here if you are new to MINIX 3
* [[Minix Developer's Guide]] - How to hack on MINIX 3 itself

=== Current Release ===
* [[Minix User's Guide]]
* [[Minix Developer's Guide]]

== Project Information ==
* [[Goals]]
* [[Roadmap]]
* [[Releases]]
* [[Publications]]
* [[Wishlist]]
* [[Mascot]]
* '''[[Wishlist for 3.4.0]]'''

== Community ==
* [[How to Contribute]] - Getting involved with MINIX 3
* [[Student Projects]] - Candidate student projects (MSc, BSc, IPA)
* [[GSOC]] - Google Summer of Code projects
* [[Courses]] - University courses that teach MINIX 3

== Resources ==

* [https://www.minix3.org Website]
* [https://www.minix3.org/news News]
* [https://twitter.com/minix3 Twitter]
* [https://git.minix3.org/?p=minix.git Git repository]
* [https://github.com/Stichting-MINIX-Research-Foundation/minix/ GitHub page, including source code mirror, bug/issue tracker, and pull requests tracker]
* [https://groups.google.com/group/minix3 Google Group]
* [irc://irc.libera.chat/minix IRC general chat: #minix on Libera.chat] ([https://web.libera.chat/#minix Web version])
* [irc://irc.libera.chat/minix-support IRC end-user support: #minix-support on Libera.chat] ([https://web.libera.chat/#minix-support Web version])
* [irc://irc.libera.chat/minix-dev IRC development talk: #minix-dev on Libera.chat] ([https://web.libera.chat/#minix-dev Web version])
* [http://www.youtube.com/watch?v=bx3KuE7UjGA MINIX 3: a Modular, Self-Healing POSIX-compatible Operating System (Talk at FOSDEM 2010)]</text>
      <sha1>j9goliw5xelmh2via8vbjyhwa1gpixf</sha1>
    </revision>
  </page>
  <page>
    <title>User:Peter</title>
    <ns>2</ns>
    <id>2</id>
    <revision>
      <id>3</id>
      <timestamp>2021-07-25T21:30:05Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "My page"</comment>
      <origin>3</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7" sha1="in6kejldw4mpae12cb4pa1hyc3otppj" xml:space="preserve">My page</text>
      <sha1>in6kejldw4mpae12cb4pa1hyc3otppj</sha1>
    </revision>
  </page>
  <page>
    <title>Earth</title>
    <ns>0</ns>
    <id>3</id>
    <revision>
      <id>5</id>
      <parentid>4</parentid>
      <timestamp>2021-07-25T22:29:06Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <origin>5</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16" sha1="bvg5oz1pdt5c5j9yucsdkrxhll5dsen" xml:space="preserve">Mostly harmless.</text>
      <sha1>bvg5oz1pdt5c5j9yucsdkrxhll5dsen</sha1>
    </revision>
  </page>
  <page>
    <title>Missing BSD Features</title>
    <ns>0</ns>
    <id>5</id>
    <revision>
      <id>421</id>
      <parentid>11</parentid>
      <timestamp>2022-02-08T18:00:55Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>421</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="766" sha1="3csmdkihg6hzbqxfjwjpt038o210998" xml:space="preserve">Minix aims to support a modern BSD look and feel. This page documents features missing in Minix that you'd expect in a modern BSD but are missing in Minix.

* memory-mapped files (there is a minix_mmap() but it doesn't map files)
* [[Implementing Job Control|Job control]] (setpgid())
* TCP/IP API is partly compatible but lots of missing details
* setrlimit()
* rusage()
* threads
* [https://netbsd.gw.com/cgi-bin/man-cgi/apropos?sysctl++NetBSD-current sysctl]
* [https://netbsd.gw.com/cgi-bin/man-cgi?rc++NetBSD-current rc] - There currently are similarities, but also incompatibilities.
* [https://netbsd.gw.com/cgi-bin/man-cgi?send-pr+1+NetBSD-current send-pr] - This might change the current feedback cycle of public message -&gt; ignore / bug ticket.
* setregid()</text>
      <sha1>3csmdkihg6hzbqxfjwjpt038o210998</sha1>
    </revision>
  </page>
  <page>
    <title>Google Group Email Interface</title>
    <ns>0</ns>
    <id>6</id>
    <revision>
      <id>12</id>
      <timestamp>2021-08-26T20:22:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>imported googlegroup-emailinterface</comment>
      <origin>12</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="563" sha1="kd5z6l0omrla1n89b67hhgftwrzrnoo" xml:space="preserve">Google groups can be used like a mailing-list through its e-mail interface.

To subscribe to the Minix3 Google Group you send an e-mail to:

minix3+subscribe@googlegroups.com

You will receive an e-mail from Google and when you reply you are subscribed. From then on all the messages in the group will be send to your e-mail address.

To send a message to the group you send it to:

minix3@googlegroups.com

To respond to a message you just reply to the message within your mail program.

To unsubscribe you send an e-mail to:

minix3+unsubscribe@googlegroups.com</text>
      <sha1>kd5z6l0omrla1n89b67hhgftwrzrnoo</sha1>
    </revision>
  </page>
  <page>
    <title>How to Build a Cross Compiler</title>
    <ns>0</ns>
    <id>7</id>
    <revision>
      <id>402</id>
      <parentid>13</parentid>
      <timestamp>2022-02-07T18:04:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>402</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3966" sha1="bhennebqjzf3a5k0q33jlo4btru7p3l" xml:space="preserve">&lt;div round alert&gt;
This page describes a previous effort at cross compilation using GNU make. The currently supported method uses BSD make and is described in [[Cross Compiling]].
&lt;/div&gt;
This is a short how-to describing how to compile gcc cross compiler for sparc64 target (based on my previous work on L4 for sun4v)

It s a very basic cross compiler that can produce code that is supposed to run on a bare machine, for instance a OS kernel. To get a full xcompiler is a fairly complex task that can be handled by Crosstool which contains scripts for several host-target-gcc-glibc combinations. However, the sparc scripts are fairly outdated and there are none for gcc 4.x. We are going to build only the first stage of the cross compiler.

What do we need : Recent version of binutils and gcc

First, we have to compile the '''binutils''' which in turn will be use to compile the first stage of gcc:

&lt;pre&gt;
./configure --target=sparc64-unknown-linux-gnu \
          -enable-64-bit-bfd \
          -prefix=/opt/xgcc-sparc64/ \
          -program-prefix=sparc64-unknown-linux-gnu-
make
make install
&lt;/pre&gt;

 --target=sparc64-unknown-linux-gnu
makes the resulting compiler to generate machine code for various 64-bit as well as 32-bit sparc machines

 --enable-64-bit-bfd
If compiling on a 32-bit machine this option forces to generate compiler than can also emit 64-bit code. It would be otherwise excluded!!!

Other options are optional and determine how and where is the cross compiler installed on your system.

''sparc64-unknown-linux-gnu'' and ''sparc-unknown-linux-gnu'' are probably the same the important bit is to enable 64-bit BFD

Second, we will compile the first stage of the cross compiler :

&lt;pre&gt;
./configure --prefix=/opt/xgcc-sparc64/ \
          -target=sparc64-unknown-linux-gnu \
          -disable-bootstrap \
          -disable-threads \
          -with-long-double-128 \
          -disable-multilib \
          -with-newlib \
          -disable-nls \
          -enable-symvers=gnu \
          -enable-__cxa_atexit \
          -enable-languages=c,c++ \
          -disable-shared \
          -program-prefix=sparc64-unknown-linux-gnu-
make all-gcc
make install-gcc
&lt;/pre&gt;
The compilation will not bootstrap the compiler, will not include support for threads (we don't need this), will disable all sorts of libraries (we don't have them on a bare machine anyway) and enables '''C''' and '''C++''' (yes, L4 is written in C++)

 --prefix
must be the same as for binutils! The bin utils must be already installed in this path.

And here we go! You can now use the compiler on your (i386?) machine to generate binaries for spar64. To do that, use following options:

 CFLAGS += -mcpu=v9 -m64 -fno-builtin -ffreestanding -fno-stack-protector
 LDFLAGS += -dn -n -melf64_sparc
What do the options mean?

 -mcpu=v9 -m64
generates 64-bit code for sparc V9 (''v9 ''can be be substituted by ''niagara'' or ''niagara2'')

 -fno-builtin -ffreestanding
forces the compiler '''not''' to link with any internal libraries or standard/system libraries.

 -fno-stack-protector
newer versions of gcc can include some code to your program and link with extra libraries to detect stack corruptions. Gcc delivered as an ''Ubuntu'' package has this turned '''on '''by default and the turn off options is not documented in man pages! You could add the protecter hooks yourself, however, you would need to know how and when to initialize and use the %g7 register

 -dn -n -melf64_sparc
prohibits linking with standard shared libraries, page alignment of the sections in the output (e.g. wen LBA is 1M the output would contain about 1M of zeroes!!!) and genrates 64-bit ELF output.

To get a full cross compiler, you need to use the upper described process to compile '''glibc''' and use the basic cross compiler, glibc and linux config and headers to compile the full gcc and glibc compiler. You may try to change the crosstool scripts and hope for the best. Good luck ;-)</text>
      <sha1>bhennebqjzf3a5k0q33jlo4btru7p3l</sha1>
    </revision>
  </page>
  <page>
    <title>Univesity Courses Using Minix 3</title>
    <ns>0</ns>
    <id>8</id>
    <revision>
      <id>14</id>
      <timestamp>2021-08-26T20:43:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>imported courses</comment>
      <origin>14</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2657" sha1="a7l2gmofo2fveu2mcbv5mimx08o54bg" xml:space="preserve">* [https://www.cs.vu.nl/~bs/ Operating Systems Practical], [https://www.cs.vu.nl/ Vrije Universiteit, Amsterdam, The Netherlands]
* [https://nob.cs.ucdavis.edu/classes/ecs150-2008-04/ ECS 150: Operating Systems], [https://www.ucdavis.edu/ University of California, Davis, CA, USA]
* [https://www.cs.ucsb.edu/~ravenben/classes/170/ CS 170: Operating Systems], [https://www.cs.ucsb.edu University of California, Santa Barbara, CA, USA]
* [https://www.soe.ucsc.edu/classes/cmps111/ CMPS 111: Introduction to Operating Systems], [https://www.cs.ucsc.edu/ University of California, Santa Cruz, CA, USA]
* [https://www.cs.uga.edu/~maria/classes/4730-Fall-2009/ CSCI 4730/6730: Operating Systems], [https://www.cs.uga.edu University of Georgia, Athens, GA, USA]
* [https://www.cis.syr.edu/~wedu/Teaching/cis483/ CIS 483: Introduction to Computer &amp; Network Security], [https://www.ecs.syr.edu/ Syracuse University, Syracuse, NY, USA]
* [https://www.cis.syr.edu/~wedu/Teaching/cis644/ CSE 644: Internet Security], [https://www.ecs.syr.edu/ Syracuse University, Syracuse, NY, USA]
* [https://www2.hawaii.edu/~esb/2007spring.ics612/ ICS 612: Operating Systems], [https://www.hawaii.edu University of Hawaii at Manoa, Manoa, Hawaii, USA]
* [https://www.itee.uq.edu.au/~comp3301/ COMP3301/7308: Operating Systems Architecture], [https://www.itee.uq.edu.au/ The University of Queensland, Brisbane, Australia]
* [https://www.cs.waikato.ac.nz/genquery.php?linklevel=4&amp;linklist=CS&amp;linkname=All_Papers-6&amp;linktype=report&amp;listby=Paper_Number&amp;lwhere=unique_record_id=24&amp;children= COMP301: Operating Systems], [https://www.cs.waikato.ac.nz The University of Waikato, Hamilton, New Zealand]
* [https://faculty.qu.edu.qa/rriley/cmpt507 CMPT 507: Advanced Operating Systems], [https://www.qu.edu.qa/ Qatar University, Doha, Qatar]
* [https://apps.ep.jhu.edu/course-homepages/viewpage.php?homepage_id=2828 605.412: Operating Systems], [https://ep.jhu.edu Johns Hopkins University Engineering for Professionals, Baltimore, MD, USA]
* [https://github.com/rhiguita/so-exercicios A1SO1/A1S02: Operating Systems 1/2], [https://spo.ifsp.edu.br/ Federal Institute of Education, Science and Technology, Sao Paulo, SP, Brazil]
* [https://github.com/rhiguita/so-exercicios SISD: Distributed Systems], [https://fatecrl.edu.br/ Faculty of Technoly Rubens Lara, Santos, SP, Brazil]
* [https://portal.ifac.edu.br   COSSI: Operating Systems   Federal Institute of Education, Science and Technology, Acre, AC, Brazil]
* [https://raf.edu.rs/en/component/content/article/192-english/subjects/3349-operating-systems   CS 3349 Operating Systems], [https://raf.edu.rs/en/   School of Computing, Belgrade]</text>
      <sha1>a7l2gmofo2fveu2mcbv5mimx08o54bg</sha1>
    </revision>
  </page>
  <page>
    <title>Lance Driver Fix</title>
    <ns>0</ns>
    <id>9</id>
    <revision>
      <id>15</id>
      <timestamp>2021-08-26T20:51:06Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Import lancefix</comment>
      <origin>15</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4047" sha1="0nztq2uspllc47dx6913k9tb4ovelnj" xml:space="preserve">&lt;!&gt; This fix is only necessary for MINIX versions below 3.1.4.

In MINIX 3.1.3, the AMD Lance NIC device driver does not work. There are two reasons for that problem:

# The lance driver needs to be loaded within the first 16MiB of memory, for DMA purposes. The servers loaded before the lance driver add up to more than 16MiB, so that the lance driver falls outside that area.
# RS needs to have information about the lance driver, in order to grant it the right permissions. That information comes from "/etc/drivers.conf", where, until recently, no entry was present for the lance driver.

The following sections outline the details and solutions of those two issues. The result should be a working lance driver. You do need to '''reboot afterwards''', for the changes to take effect.

== Issue 1 ==

This issue will manifest itself by presenting you with the following error, at startup:

 LANCE: DMA denied because address out of range

=== Solution 1 ===

You can solve that problem by following the steps that are described [https://groups.google.com/group/comp.os.minix/browse_thread/thread/1a682ed4b7c661f4 here].

That fix is easier to do than the two hacks below -- they are obsolete!

----
The main memory hogs in the low 16MiB region are the caches of the various MFS server instances: there are four of them (for the ramdisk, "/", "/usr", and "/home"); and, each has about 5MiB of cache assigned to it. You can solve that problem either by recompiling MFS with a smaller cache, or by starting lance before at least two of the MFS instances. See below.

=== Solution 2 ===

To lower the size of the cache, you must edit NR_BUFS in "/usr/include/minix/config.h" -- the default is 1200 (the number of 4KiB block buffers), and recompile and restart MINIX3. Remember that'' make includes ''overwrites any changes in "/usr/include". See the "docs/UPDATING" file for more details about recompiling MINIX3.

=== Solution 3 ===

If you do not want to change the MFS cache size (or go through the trouble of recompiling MINIX3, for that matter), then you can follow these three steps instead:

# Copy "/usr/sbin/lance" to "/sbin".
#: &lt;pre&gt;cp /usr/sbin/lance /sbin&lt;/pre&gt;
#: Note that we have to start lance before the MFS instance for "/usr" is started, so a symbolic link will not do. Also note that, after recompiling and reinstalling MINIX3, you must repeat that step.
# Edit "/etc/rc" to start lance very early on.
#: &lt;pre&gt;vi /etc/rc&lt;/pre&gt;
#: Insert the following line right after the 9-line declaration of the up() function. That is, add this line ''after'' the closing ''}'' bracket of the ''up()'' block, but ''before'' the ''while getopts 'saf' opt'' line:
#: &lt;pre&gt;up lance -args "LANCE0=on" -period 5HZ&lt;/pre&gt;
#: Yes, that's a zero there. :)
# Remove ''lance'' from the list of drivers in "/usr/etc/rc", so that it won't be started twice.
#: &lt;pre&gt;vi /usr/etc/rc&lt;/pre&gt;
#: Look for the one line that contains "lance" (it's a list of network drivers), and remove the word "lance" from that line. The end result will look something like this:
#: &lt;pre&gt;for driver in rtl8139 fxp dpeth dp8390 orinoco&lt;/pre&gt;

== Issue 2 ==

You can fix the second issue by adding an entry for lance to "/etc/drivers.conf". This part is necessary for MINIX3 versions '''prior to revision 3170''' (July 22, 2008). That includes releases 3.1.3 and 3.1.3a. Since revision 3170, the lance entry is already there; so, if you track SVN, you can skip this step.

Add the following entry to your "/etc/drivers.conf" file:

&lt;pre&gt;
driver lance
{
        system
                UMAP            # 14
                IRQCTL          # 19
                DEVIO           # 21
                #SDEVIO         # 22
                TIMES           # 25
                GETINFO         # 26
                SAFECOPYFROM    # 31
                SAFECOPYTO      # 32
                SETGRANT        # 34
        ;
        pci device      1022/2000;
        uid     0;
};
&lt;/pre&gt;

It's probably easiest to start by making a copy of the entry of some other driver; and then, edit that.</text>
      <sha1>0nztq2uspllc47dx6913k9tb4ovelnj</sha1>
    </revision>
  </page>
  <page>
    <title>Documentation and Packages</title>
    <ns>0</ns>
    <id>10</id>
    <revision>
      <id>409</id>
      <parentid>405</parentid>
      <timestamp>2022-02-07T18:35:15Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>409</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2921" sha1="fctyq6banx8uz6sr73gwmndvc2dx5jx" xml:space="preserve">There are two areas where Minix has some catching up to do: documentation and packages. They provide many small projects, for which not much prior knowledge of Minix is required, which provide a good way to get started with Minix development, and the results of which would be highly valuable to the Minix project.

If you want to contribute, please pick a package or man-page below, put your name behind it, and see whether you can fix it. Please take on only one project at a time, so as not to block others who want to work on these projects.

Thanks for your help!

== Missing man-pages ==
Below is a list of man-pages that are missing. Only utility programs are listed currently, but functions of the MINIX API might be listed later. Please consult the source code when writing a man-page. Some utilities may have more, less, or different features than they do on other operating systems or in the POSIX specification. Make sure, however, that what is written in the man-page corresponds to the functionality in the version that is included in Minix.
{| class="wikitable sortable" border=1
! Man-page for           !! Person working on !! Status |
|-
| commands/devmand         ||                     ||         
|-
| commands/fix             ||   Jacob Adams       ||  Pull Request #41        
|-
| commands/rotate          ||   Jacob Adams       || Committed (0805ab8c)
|-
| commands/sprofalyze      ||   Jacob Adams       ||  Pull Request #70       
|-
| commands/sprofdiff       ||   Jacob Adams       ||  Pull Request #71       
|-
| commands/swifi           ||                     ||         
|-
| commands/writeisofs      ||                     ||         
|-
|}

== Process for the contribution of man-pages ==

Find a tool that's not documented or whose documentation could be improved 
Then just learn how it works and write the page. There are tons of examples in Minix already. 

Just submit it as a standard pull request. 

Make sure to put your manpage in the same folder as the tool it documents and set the MAN variable in the Makefile (see the Makefiles for tools with man pages for examples) 

Don't forget to add your new page to distrib/sets/lists/minix-man/mi

== Out of Date Wiki Pages ==
As minix grows and changes, the wiki pages that describe it also need to grow and change. To find pages that need updating, you can start by doing a search for "Stale" at [[Porting NetBSD Userland|this page]] in the text. Find a page to work on, bring the page up to date, and then remove the stale page notice.

== Packages ==

pkgsrc contains over 10,000 packages, but only a few thousand packages build and run out of the box on Minix. The goal is to get as many packages as possible working in Minix. A good way to get started is to try installing your favourite software, and fix any packages or dependencies that don't compile/work. There is a guide [[Pkgsrc Guide|here]] for contributing to pkgsrc.</text>
      <sha1>fctyq6banx8uz6sr73gwmndvc2dx5jx</sha1>
    </revision>
  </page>
  <page>
    <title>Frequently Asked Questions</title>
    <ns>0</ns>
    <id>11</id>
    <revision>
      <id>415</id>
      <parentid>411</parentid>
      <timestamp>2022-02-08T17:18:45Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix links</comment>
      <origin>415</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="16593" sha1="s4ypg2y6qaj7lungqzlqf64owojv1ye" xml:space="preserve">== General Questions ==
=== What is MINIX 3? ===
MINIX 3 is a small and free UNIX clone designed for very high reliability. It is especially well-suited for low-end PCs, resource-constrained systems, and embedded applications. It is available with all the source code, which makes it well-suited to classroom or self-study by people wanting to learn how an operating system works.

=== What hardware do I need to run MINIX 3? ===
See [[Requirements]].

=== Where can I get MINIX 3? ===
MINIX 3 can be downloaded from the MINIX 3 [https://www.minix3.org/download/ download page]. MINIX 3.1.0 is also distributed on a CD-ROM included with the book [https://vig.prenhall.com/catalog/academic/product/0,1144,0131429388,00.html Operating Systems Design and Implementation, 3/e] by Andrew S. Tanenbaum and Albert S. Woodhull.

=== Where can I get the MINIX 3 source code? ===

You can find the MINIX 3 source code in the /usr/src directory of your MINIX installation. You can also grab the code from our authoritative [https://git.minix3.org?p=minix.git git repository]. An official mirror is available on [https://github.com/Stichting-MINIX-Research-Foundation/minix GitHub].

=== Where can I get help with MINIX 3? ===
Post your question to our [https://groups.google.com/group/minix3 Google group], and we'll be glad to help.
If you are looking for extensive support, some of the core developers are [[Consultants|Consultants available for hire]].
=== I am a beginner. Where can I learn about MINIX 3 programming? ===
See the [[Minix Developer's Guide]] as a start.

You can also buy the MINIX3 book, which covers quite an old MINIX version, 3.1.0. Architecturally speaking, several things have changed since then -
but it's much easier to understand those changes once you know the basics, and the book covers all that.

=== Somebody must have seen my problem before. Is the newsgroup archived? ===
Yes. You can see the following archives:

* '''[https://groups.google.com/group/minix3 Google Group (currently used)]'''
* [https://groups.google.com/group/comp.os.minix Usenet (no longer used)]
* [https://listserv.nodak.edu/archives/minix-l.html Listserv (no longer used)]

=== A page I once saw is gone. Is there a way to find it? ===
Maybe. Try the [https://www.woodhull.com/newfaq/webarchiv.html Wayback machine].

=== Where can I find information about using MINIX 3 for teaching? ===
A good place to start is this [http://minix1.woodhull.com/teaching/ Teaching Web page].

=== Can I become a MINIX 3 developer? ===
If you have the requisite time, interest, and knowledge, you are welcome to join the MINIX 3 community. See the [[Minix Developer's Guide]] for some starting points.

=== How do I submit a patch? ===
* Do your work in git on the current master branch
* Submit it as a git commit, i.e. using a personal git repository

Alternatively, you can email a patch to the Google Group. You can use &lt;code&gt;git send-email&lt;/code&gt; or TopGit (&lt;code&gt;mail&lt;/code&gt;) for this.

=== Can you help me with my MINIX homework / lab assignment / I need to implement lottery scheduling / how do I add a system call? ===
Probably not. You're supposed to do it yourself, that's why it's homework / an assignment. Think about talking to your supervisor or classmates first. If you suspect a MINIX bug, verify it's present in the latest version and post details on how to reproduce it.

If you must ask questions, make them very specific. Read [http://www.catb.org/~esr/faqs/smart-questions.html|How To Ask Questions The Smart Way]. As in "how does the widget changing in the dinkling system work?", not "&lt;long source code paste&gt;, what's wrong with my dinkling system?" Or, worse, simply post your assignment, add 'help plz,' and not tell us it's an assignment.

== Legal Questions ==
=== What is the MINIX 3 license? ===
The MINIX 3 [https://git.minix3.org/index.cgi?p=minix.git;a=blob_plain;f=LICENSE;hb=HEAD license] is a clone of the Berkeley (BSD) license. In plain English, it says you can do whatever you like with the system provided that (1) you agree not to sue us under any conditions, and (2) you keep the credit lines in the source, documentation, and publicity unless other arrangements have been made. Specifically, you are free to modify the source code, redistribute it, incorporate it into commercial products with only the above restrictions.

=== Why didn't you use the GPL? ===
We feel the GPL is too restrictive. Companies that put a lot of money into further developing open-source software do not want to give it their competitors. Since MINIX 3 has clear applications in embedded systems, we felt the BSD license was more appropriate.

=== What is the relationship between MINIX and Linux? ===
MINIX was released in 1987 as a small easy-to-understand UNIX clone for use in courses teaching operating systems.  Linus Torvalds, then a student at the University of Helsinki, studied MINIX in an operating systems course and was sufficiently impressed that he bought a PC to run it.  He then used MINIX as a platform, guide, and inspiration to develop a MINIX clone, named Linux, which he released in 1991. Here is his [https://groups.google.com/group/comp.os.minix/msg/2194d253268b0a1b|announcement] of Linux.

=== Linus has been accused of stealing Linux from MINIX. Is that true? ===
No. Absolutely not. Ken Brown of the  [http://adti.net/|Alexis de Tocqueville Institution]  wrote a [http://www.adti.net/samizdat/brown.reply.june.04.html report], funded in part by Microsoft, claiming that Linus stole Linux from MINIX.  Brown's conclusion was that companies should not use Linux because the ownership of the intellectual property rights is unclear.  This is complete garbage.  While it is most unlikely that a 21-year-old student would have been capable of writing his own operating system had he not had the complete source code for a similar operating system available to use, study and modify, Linus wrote the initial version of the Linux code himself.  The Brown report and a  [https://www.cs.vu.nl/~ast/brown|response]  from the creator of MINIX was  [https://developers.slashdot.org/article.pl?sid=04/05/20/1240256&amp;amp;tid=8&amp;amp;tid=106 discussed in detail] on [https://www.slashdot.org/ Slashdot].

=== What license does included third-party software use? ===

The license of accompanying third-party software can be found in the software's LICENSE file, in its documentation, or in the headers of the software's source code. Information about the software and its source code can be found in the [https://git.minix3.org/|MINIX repository].

== Technical Questions ==
=== How do I boot the USB image? ===
First, USB images are a legacy offer which was provided specifically for MINIX 3.1.x. They do not work with the more recent 3.2.x releases, and are futile with 3.3.0 which does support native USB peripherals.

Write the USB image file to the USB device sector-by-sector (e.g. with ''dd''). In other words, don't write it to a FAT filesystem on the USB device, but write the file to it starting at the first sector (Sector 0). This will, of course, effectively wipe all other information that was stored on the USB device.

Then you can boot from the USB device, if your BIOS supports that.

=== Can I cross-compile it? ===
Of course! See [Cross Compiling].

=== Why don't you use GCC? ===

By default clang is used as the compiler on native MINIX installs because of its BSD license. GCC is available (install it with pkgin) and you can build the base system with it by setting CC=gcc. 

For cross-builds GCC is the default.

=== How do I change the network configuration after an install? ===
You can use the

&lt;pre&gt;
netconf
&lt;/pre&gt;
tool to select your network chip and configure your IP address automatically using DHCP, or manually by providing the address, netmask, gateway, and other information. That tool is limited to one network card only. More advanced settings have to be done by hand. To do that, edit "/etc/inet.conf". Usually, the format is:

&lt;pre&gt;
eth0 fxp 0 { default; };
&lt;/pre&gt;
where ''fxp'' is the name of the ethernet driver you want to start (it is the name of the process inet looks for, to talk to, for ethernet). Take a look at "/usr/etc/rc" to learn how ethernet drivers are started. Currently, the choices are:

&lt;pre&gt;
lance rtl8139 rtl8169 fxp e1000 dpeth dp8390 orinoco atl2 dec21140A
&lt;/pre&gt;
For details on inet.conf, please see the inet.conf manpage.

=== No network driver is detected under VMware ===
New VMware versions (starting workstation 8 it seems) try to give MINIX installs an e1000 driver instead of lance. Edit your .vmx file and change this line:

&lt;pre&gt;ethernet0.virtualDev = "e1000"&lt;/pre&gt;
to say "vlance" instead. Then re-run &lt;code&gt;netconf&lt;/code&gt; under Minix.
=== I can not get the Network to work using VMware, what should I do? ===

So how do they differ, the old version has NO network Driver specified in it's ".vmx" file so MINIX must try everything and chooses the Lance driver. It would be better if [8] worked but I found that a bug causes panics with the IRQs to be printed to the console every few seconds.

To get things working with VMware do this:

1. Download the latest ISO image from the download page, and use 7Zip (or other) to extract the ".iso".

2. Fire up VMware and create a new machine ("other" and "other 64 bit" DO work on 32-Bit WinXP).

3. Create one 16GB disk and populate it so it won't have to grow (and wreck havoc with defragmentation).

4. You can specify 1024 MB of memory (older versions of MINIX only use +880KB).

5. You can choose more than one processor; handy if you rebuild using gcc and 

&lt;pre&gt;
CONFIG_SMP=y 
CONFIG_MAX_CPUS=8"
&lt;/pre&gt;

6. You might as well add USB, a floppy, and parallel / serial ports.

7. Choose "NAT".

8. Boot your "Virtual Machine" to the ".iso" (or the BIOS if you want to make changes), install MINIX by typing "setup /usr". 

9. Use "non-expert Partitioning" (default) and set "/home" to 512K, that makes the last Partition within Minix's limits.

10. When it says to shutdown note the 'Boot Command' (it will likely be "boot d0p0"). DO NOT Re-boot, type "off" instead.

11. When Minix exits and you are back to VMware goto the Directory where you created your Machine.

12. Use "Notepad" and edit the ".vmx" file. 

Here is the "Trick": REMOVE the line that says (somthing similar to): ' ethernet0.virtualDev = "e1000" '

You might wish to remove all the '"ethernet" Lines' and just have this:
&lt;pre&gt;
ethernet0.present = "TRUE"
ethernet0.addressType = "generated"
ethernet0.generatedAddress = "00:xx:xx:xx:xx:xx"
ethernet0.generatedAddressOffset = "0"
ethernet0.connectionType = "nat"
&lt;/pre&gt;

Replace the line ' ethernet0.generatedAddress = "00:xx:xx:xx:xx:xx" ' with your old one.

12. Now start your Machine and type the "Boot Command" (likely "boot d0p0"), don't re-run the Installer by mistake ;) .

13. You can type "netconf" to configure Networking. If it scans the Adapters FAST then it did not work, look at "lspci".

If it scans the Adapters SLOWly then there should be a "*" next to [7] (Lance) so choose "7" and then "1" for "dhcp" .

14. Type "reboot".

15. Now you have a Machine that has many Peripherals, a nice 1/2 GB home and over 15GB of free space - with working Networking.

16. Use "pkgin update", "pkgin upgrade" to Update to the current "Release", if you want something that you can not get this way then they are in ftp://ftp.minix3.org/pub/minix/packages/3.1.9/i386/All/ (EG: subversion-base-1.6.9nb1.tgz)
and some of the 'original sources' seem to be in ftp://ftp.minix3.org/pub/minix/distfiles-backup/ .

17. Read this Wiki and [[Tracking Current]] for latest info.

Added by [[Contributors:Rob|Rob]].

=== Will MINIX be ported to ARM/MIPS/SPARC/x86-64/Raspberry Pi? ===

==== ARM ====

Yes. Porting to ARM is a top priority for the MINIX team.

The code is published in the current MINIX git master branch and the basics are working.
For information on how to get started, see the [[Minix on ARM]] wiki page.

We are initially targeting the [https://beagleboard.org/Products/BeagleBoard-xM BeagleBoard-xM], [https://beagleboard.org/Products/BeagleBone BeagleBone], and [https://beagleboard.org/Products/BeagleBone%20Black BeagleBone Black].

The target processor is the ARM Cortex-A8, which supports the ARM v7 instruction set.

==== Other ====

There are no plans at this time for other ports. We are focused on the MINIX/ARM port and providing excellent support for the hardware on the BeagleBoard-xM and BeagleBones. You can follow our progress at the [[Minix on ARM#Feature_Matrix|Minix/arm Feature Matrix]].
=== I want to port Minix to the ARM/MIPS/SPARC/x86-64 ===

That's great, but try something more basic first.

Want to help with the ARM port? After the initial release, help to get more of the device working (e.g. hardware support, help with getting crosscompiling packages working, reducing code duplication, there will no doubt be an endless list of things to do and fix still) would be more than welcome.
=== My SATA drive doesn't work with MINIX ===
* try using the AHCI driver.
* if not, i.e., in the default configuration (without AHCI), try changing the setting to "Legacy" or "Combined" in BIOS.

=== MINIX 3 claims to be POSIX compliant. What is POSIX? ===
See this [[POSIX and Minix|document on POSIX]].

=== How can I boot multiple operating systems on the same computer? ===
See [[Running Multiple Operating Systems]].

=== How do I boot MINIX3 from GRUB? ===
See [[Running Multiple Operating Systems#grub|Running Multiple Operating Systems]].

=== How can I avoid problems with the vol command and floppy disks? ===
See this [http://www.minix3.org/doc/vol.faq.html document on vol].

=== Is it possible to exchange data between file systems of different operating systems? ===
Yes. See this [https://www.minix3.org/doc/datxchng.html document on data exchange].

=== How do I view a draft man page that hasn't been installed yet? ===
Use

&lt;pre&gt;
nroff -man ''man_file'' | more
&lt;/pre&gt;
=== What is the performance of MINIX 3 like? ===
We made measurements of the performance of MINIX 3 (user-mode drivers) versus MINIX 2 (kernel-mode drivers) and MINIX 3 is 5-10% slower. We have not compared it to other systems because there are so many other differences. The biggest difference is that MINIX 3 represents about a handful man-year of work so far and other systems represent thousands of man-years of work and our priority has been reliability, not performance.

=== I get an error with pkgsrc saying NWIOTCPCONN: connection timed out ===

The latest development sources for Minix has a new ftp client that is
incompatible with the old ftp client that shipped with Minix 3.2.1.
pkgsrc was updated to use the new ftp client. So you have to rebuild
your system according to [[Tracking Current]],
or install with a newer snapshot iso.

=== I get an error with / openssh / svn / /dev/random ===
&lt;pre&gt;
openssh error: PRNG not seeded
svn error: SSL handshake failed due to lack of entropy
&lt;/pre&gt;

This is a problem with /dev/random. Specifically, the random number generation doesn't work.

See if it's the case:
&lt;pre&gt;
strings /dev/random
&lt;/pre&gt;
(ctrl+c to stop reading)

If you receive an error message, do:
&lt;pre&gt;
echo "&lt;insert random characters here&gt;" &gt; /dev/random
&lt;/pre&gt;

=== pkgin just tells me "nothing to do" ===
pkgin isn't very chatty about some things. Two main causes for this:
# pkgin didn't recognize the package name: try the exact full name including 'nb', e.g. ''pkgin in clang-3.1nb2'' instead of clang-3.1
# package database is confused. rebuild it with ''pkg_admin rebuild''.

== Running Minix 3 on a Virtual Machine ==
=== Can I run MINIX 3 on VMware? ===
Yes. See [[Running on VMware|Running Minix on VMWare]].

=== Can I transfer data between a MINIX 3 guest on VMware and the host? ===
See [[File Transfer]].

=== Can I use the Bochs emulator to run MINIX 3? ===
Yes. See [[Running on Bochs|Running MINIX on Bochs]].

=== Can I run MINIX 3 on top of Windows using Virtual PC? ===
Yes. See this [https://www.woodhull.com/newfaq/faq/pre-vpc.html document on MINIX and Virtual PC].

=== Can I run MINIX 3 in VirtualBox? ===
Yes. See [[Running on VirtualBox|Running MINIX on VirtualBox]].

===== It doesn't work =====

After booting the CD, if you see an error like

&lt;pre&gt;
A critical error has occurred while running the virtual machine and the machine execution has been stopped.
&lt;/pre&gt;

then you must enable hardware virtualization in vbox. (Settings -&gt; System -&gt; Acceleration -&gt; Enable VT-x/AMD-V.) If you can't,
please read the [[Running on VirtualBox#Workarounds|Workarounds for VirtualBox]].</text>
      <sha1>s4ypg2y6qaj7lungqzlqf64owojv1ye</sha1>
    </revision>
  </page>
  <page>
    <title>FAQ</title>
    <ns>0</ns>
    <id>12</id>
    <redirect title="Frequently Asked Questions" />
    <revision>
      <id>18</id>
      <timestamp>2021-08-26T21:46:16Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Nuff said</comment>
      <origin>18</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="40" sha1="pdymde8c6qej97qgthefy4ikgxvay4j" xml:space="preserve">#REDIRECT [[Frequently Asked Questions]]</text>
      <sha1>pdymde8c6qej97qgthefy4ikgxvay4j</sha1>
    </revision>
  </page>
  <page>
    <title>Minix ACK Assembly Language</title>
    <ns>0</ns>
    <id>13</id>
    <revision>
      <id>19</id>
      <timestamp>2021-08-27T07:03:40Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import ackassemblylanguage</comment>
      <origin>19</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4769" sha1="hdgd1odk828p5tsjry47ho6wwpqhblm" xml:space="preserve">&lt;div round alert&gt;
This page describes the assembly language(s) used in MINIX 1.6, MINIX 2.0 and MINIX 3.1. It is not relevant to recent (after 2010) releases of MINIX.&lt;/div&gt;

== What do the pseudo-ops in Minix assembly code mean? ==
An ACK assembly file can have a number of sections. Things
declared in the same section are collected together by the loader
in the order they are found in an assembly file and in the order
the object files are loaded together.
Sections get meaning once they are put in a Minix binary.
Section 0 (usually named ''.text'') contains program code and is
put in the code segment, section 1 (''.rom'') is read-only data
and is put in the data segment, and so are section 2 (''.data'')
for read-write data and section 3 (''.bss'') for read-write data
initialized to zero.
The ACK binary to Minix binary converter (''cv'') will
complain if there are nonzero objects in the ''.bss'' section,
but it doesn't care if there's code in ''.rom'', ''.data'', or
data in ''.text''.
With ''.define'' a label is turned into a global variable
that other files can use, otherwise it stays local to the assembly
file it is in. With ''.extern'' one can import a global label,
but the assembler seems to do that automatically anyway.
With ''.comm'' (or ''.lcomm'') you can put a label on a bunch of zeros. This
is useful in the ''.bss'' section. The difference
between "''.comm junk, 10''" and "''junk: .space 10''" only appears when
the label is made global: multiple ''common'' declarations are merged at
link-time, while multiple ''space''d variables will conflict.
With ''.align'' you can insert the number of zeros needed to
align ''.'' (the address where stuff is put) to a given
multiple. Objects bigger than a byte should be aligned to multiples
of 2 or 4 bytes. Otherwise it will be slow on 386 descendants,
and may cause alignment fault messages on a 486+.
With ''.data[124]'' you can assemble 1, 2 or 4 byte sized
numbers. With ''.ascii "xyz"'', and ''.asciz "xyz"'' you
can do the same as with ''.data1 120, 121, 122'' and ''.data1
120, 121, 122, 0''.

== In the code there are lines starting with ".sect". What do they mean? ==

At the beginning of the code there is a line: ".sect .text; .sect .rom; .sect .data; .sect .bss", or there is ".sect .text begtext:". In the code ".sect .text" shows up again. What do these mean? What is the explanation of the segments in Minix assembly code?

A new section name opens up a new section. By naming all
sections in the first line you can be sure that the names are tied
to the proper section numbers.

== How are comments indicated? ==
The comment character is '''''!'''''. The C preprocessor is run
on an assembly file if the very first character is a '''''#'''''. If
so, then the '''''/*... *''/''' comment characters also work,
because the C preprocessor removes C comments. The quote characters
'''''(', ")''''' are a bit of a problem, because the
preprocessor wants them to match. This is why you see ''''' &lt;nowiki&gt;''&lt;/nowiki&gt; (backquote)''''' used in comments sometimes where one would normally use a ''''' ' (single quote)'''''.

==  Inconsistency in syntax ==
&lt;pre&gt;
From: drminix@naver.com (Sam)
Subject: assembly syntax inconsistency in MINIX.
Date: 31 May 2004 19:42:42 -0700

I was reading two different MINIX assembly files, masterboot.s and
mpx386.s. I then came across some differences between the assembly
syntax used in each files.

In mpx386.s, each section starts with .sect followed by the section
name. For example, a text section starts with .sect .text

However in masterboot.s, a text section starts with just .text 

MASTERBOOT.S  |     MPX386.s
---------------------------------------
.text         |   .sect .text
.data         |   .sect .data

And also, the pound sign(#) is used to indicate an immediate data in
masterboot.s whereas using a pound sign(#) in mpx386.s gives you an
error.

I guess minix compiler understands both syntax. Can anyone tell me why
there are two different ways to start a section?
&lt;/pre&gt;
&lt;pre&gt;
From: kjb=733616@cs.vu.nl (Kees J Bot)
Subject: Re: assembly syntax inconsistency in MINIX.
Date: Tue, 1 Jun 2004 12:18:58 +0200

There's that, and there's this:

mov ax, #10         |     mov ax, 10
mov ax, variable    |     mov ax, (variable)

The syntax for the 16-bit assembler under the 16-bit version was changed
to be like Xenix or something.  I have no idea why.

The 32-bit assembler uses the syntax on the right, both with 8086 and
386 input.  I had to make an assembly syntax converter to allow this
assembler to process the Xenix syntax.  The -Was-ncc option tells the
compiler driver that the assembly input is the "new cc" syntax.  (Yes,
there's also an "old cc" syntax.  Luckily we buried that.)

Kees J. Bot
Modified 12 March 2003
&lt;/pre&gt;</text>
      <sha1>hdgd1odk828p5tsjry47ho6wwpqhblm</sha1>
    </revision>
  </page>
  <page>
    <title>ACPI</title>
    <ns>0</ns>
    <id>14</id>
    <revision>
      <id>21</id>
      <parentid>20</parentid>
      <timestamp>2021-08-27T07:07:24Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Remove missing header</comment>
      <origin>21</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1116" sha1="nxpkftqjpalv29g11hfzi8q4fvf8rf6" xml:space="preserve">Support for [https://en.wikipedia.org/wiki/Advanced_Configuration_and_Power_Interface ACPI] in Minix has 2 parts, in-kernel code and a userspace driver.

=== Kernel ===
The in-kernel code is used to locate the ACPI information in memory and export this to userland, discover IO APICs and all CPU in a multi-processor system.

=== Userspace ACPI driver ===
The userspace driver is based on the [https://www.acpica.org/ ACPI CA] library. The library covers the whole ACPI functionality which means that in theory Minix can uses any of the ACPI feature, the functionality is limited though.

* Currently the driver provides interface to discover PCI interrupts routing information only
* Does not register interrupt hooks to handle events

It is fairly easy to add interfaces to any other functions as need be. Minix does not have any use for this yet.

The main disadvantage of the ACPI driver is that it can access '''''any''''' system memory and IO ports which is a '''''possible vulnerability'''''. It is not possible to limit the memory acces in the sense of the isolation policies as implemented in current Minix.</text>
      <sha1>nxpkftqjpalv29g11hfzi8q4fvf8rf6</sha1>
    </revision>
  </page>
  <page>
    <title>Minix 3 USB Support</title>
    <ns>0</ns>
    <id>15</id>
    <revision>
      <id>23</id>
      <parentid>22</parentid>
      <timestamp>2021-08-27T07:15:58Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Remove unnecessary header</comment>
      <origin>23</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5028" sha1="43f8sqada3mg4ixsl25a5bf17x3hpdx" xml:space="preserve">We are using the driver portability layer called
[https://os.inf.tu-dresden.de/ddekit/ Device Driver Environment kit] to
provide support for USB host on the MINIX 3 operating system. The Device Driver
Environment was developed for reuse of legacy device drivers. It defines an
operating system agnostic kernel application programming interface (API) and
provides Linux 2.6.29 based legacy drivers for supporting USB-host among other
things. DDE with USB host support has been ported to MINIX 3 by Dirk Vogd.


== Functional decomposition ==



=== DdeKit ===


DDEKIT provides a BSD licensed abstraction layer for driver development. This
abstraction, defined in includes files, defines the following primitives: data
types, memory allocation, paging, threading, semaphores, timers, low level
hardware I/O, requesting interrupts and dma access. It is located inside the
MINIX3 source tree at /usr/src/minix/include/ddekit and implemented in
/usr/src/minix/lib/libddekit.


=== Dde-linux26 ===


The dde-linux26 is a GPLv2 package that uses ddekit host Linux device drivers.
Using ddekit it replaces key parts of the Linux device driver model to be able
to run drivers on a non Linux kernel. It contains large parts of the Linux
2.6.29 source code in the contrib directory and provide abstractions for a the
following type of drivers: common, block, common, net, partitions, scsi and usb.
This code only depends on ddekit and is not MINIX 3 specific.

== Dde-linux26-usb-drivers ==

The Dde-linux26-usb-drivers use dde-linux26 to implement an USB stack for MINIX.


=== USB host controller driver (USBD) ===


The USB host controller driver is a MINIX 3 service that talks to the USB host
controller hardware using established standards like EHCI and OHCI and mediates
access to USB devices by implementing a virtual host controller driver.


UsbStubDriver::
	For new device notification
UsbHostControllerDriver::
	MINIX bus driver implementation using usbcore
USBCORE::
	Linux library to implement host controllers
EHCI::
	Standard way of talking to the usb host controller
DDELinux::
	the support library for things like platform_device creation



=== USB class driver (mass storage/hid) ===


The USB drivers in MINIX3 will communicates with USB devices host controller
over a virtual host controller interface provided by USBD. The class drivers
uses the DDE kit and Linux drivers like SCSI to implement Their service.


UsbClassStorage::
	implements a minix interface like block device
DDE helpers::
	helpers like the  SCSI lib part in case of the USB mass storage class
VHCI::
	Virtual host controller as also used to provide usb over ethernet. This
	driver talks to USBD using grants and messages.


== Device manager (DEVMAN) ==


Devman is a device manager who's main goal is to enable hot-plugging of
hardware. Based on events from USBD and a configuration file it will create
device nodes and start or stop USB class drivers.

There are two parts to devman. One is a MINIX3 service and the second one is a userland daemon.


== Startup sequence for mass storage ==


The initialization is as follow

* The RC script starts the devman
* The RC script start devmand
* devmand read it's configuration and starts listening for events from devman
* Usbd is started via the extended RC scripts that look in /usr/pkg/etc/rc.d.
* The stub driver inside usbd notifies devman about new usb devices found
* devman exports this information over sysfs and devmand reads about a new configurations
* devman starts the mass_storage service based on it's configuration
* the mass_storage service binds to the interface over the virtual host controller
* After some time the device is ready to be mounted.

== Shutdown sequence ==


The shutdown sequence is the following
* umount usb file systems
* stop devmand ( also stops the running services like usb_storage)
* stop usbd
* umount /sys
* stop devman


== Running and developing ==


The device manager is located in the MINIX 3 sources but the remaining components are lotacted outside of this source tree and are referred from the pkgsrc tree. To get the code working go to /usr/pkgsrc/minix/dde-linux26-usb-drivers run bmake install and reboot.
To develop we suggest your first run bmake install and after that run bmake build-env in either the dde-linux26-usb-drivers or dde-linux26 directory. running "bmake &amp;&amp; bmake install" after that will directly install the libraries in the correct location.
The code for dde-linux26 and dde-linux26-usb-driver is hosted on git.minix3.org


== Updating the DDEKIT package ==

To perform an update of the code you need to do a few things:

* Get your changes in the dde git repositories
* Create a new set of dist files using  https://git.minix3.org/?p=dde-linux26-usb-drivers.git;a=blob;f=dist.sh;h=f38ebd1f544bc7548d890cb15abaf91042a2a340;hb=master
* Put the dist files in the repo
* in pkgsrc edit minix/dde-linux26/Makefile and dde-linux26-usb-drivers/Makefile
* and run bmake makesum in both directories
* Update the pkgsrc git repo</text>
      <sha1>43f8sqada3mg4ixsl25a5bf17x3hpdx</sha1>
    </revision>
  </page>
  <page>
    <title>Getting Help</title>
    <ns>0</ns>
    <id>16</id>
    <revision>
      <id>24</id>
      <timestamp>2021-08-27T07:21:26Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Import gettinghelp</comment>
      <origin>24</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3591" sha1="82qmmrmso50602xkf7lu65j3u1l3jns" xml:space="preserve">== Check the docs first ==

Take a look at the [[FAQ]] and the [[Minix User's Guide]] to see if your question has been answered. You should also check the [https://groups.google.com/group/minix3 Google Group archive].

== Post to the MINIX 3 Google Group ==

There is an active [https://groups.google.com/group/minix3 Google group] for discussion of MINIX 3, asking and answering questions, getting help, and other matters related to MINIX 3.

Anyone can read postings and archives by just going to the group's Website. However, to post a message, you have to register and log in. It is free and just takes a minute and we won't divulge your email address to anyone. The registration procedure is needed to keep automated spambots from posting to the group, a problem that we were having with the old USENET group.

== Be Detailed and Clear ==

When asking for help, please give a detailed description of the problem. Tell us what command(s) you were running when you encountered the issue. If possible, please try to reproduce your issue against GIT trunk. It may have been fixed already. If you can pin down the problem to a small, reproducible test case, that would also be very helpful.

Please try to write clearly. Please write in complete sentences. Please use proper punctuation and grammar. Please use proper capitalization, and break your email into paragraphs. Please don't use textspeak abbreviations. If you put some care and thought into your email, you are more likely to get a useful response. If English is not your native language, just make your best attempt.

When you post your message, please include the following information:

* A descriptive title
* MINIX version (e.g., 3.2.4)
* GIT commit (e.g., 9865aea)
* The nature of any changes you've made to the MINIX sources (e.g., I modified PM...)
* Package name/version, if relevant
* Your hardware platform (or the virtual machine emulator, if relevant)
* Description of the problem
* A simple recipe to reproduce the problem
* Expected Results - What you expected to happen
* Actual Results - What actually happened
* Any other relevant information. Err on the side of too much information, rather than too little

Please also see [https://www.chiark.greenend.org.uk/~sgtatham/bugs.html How to Report Bugs Effectively].

== Netiquette ==

When you post a message to the group, you are sending it to hundreds or thousands of people. Just as in the real world, not all speech is appropriate in all places. There are things you can say to your drinking buddies in a bar that might not go over so well if said out loud in a public place, such as a school, store, or church. Over the course of several decades, certain conventions have developed as to what is considered polite behavior on newsgroups and what is considered rude and boorish. There are even semiofficial guidelines in [https://www.ietf.org/rfc/rfc1855 RFC 1855] for what constitutes polite behavior.

However, if you are a newbie (newcomer), [https://www.ietf.org/rfc/rfc1855 RFC 1855] may be a bit much. The following guides may be helpful to newbies:

* [https://web.archive.org/web/20090102015105/http://www.imagescape.com/helpweb/news/newsnet.html Newsgroup Netiquette]
* [http://lipas.uwasa.fi/~ts/http/netiquet.html Why it is sensible to observe the Netiquette]

Also worth noting is that the Internet is like an elephant: it never forgets. If you make a stupid, bigoted, or irresponsible posting at 18, count on all your future employers finding it when you are 40 by looking at the [https://www.waybackmachine.org/ Wayback machine] and other places.</text>
      <sha1>82qmmrmso50602xkf7lu65j3u1l3jns</sha1>
    </revision>
  </page>
  <page>
    <title>Goals</title>
    <ns>0</ns>
    <id>17</id>
    <revision>
      <id>25</id>
      <timestamp>2021-08-27T07:22:10Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import goals</comment>
      <origin>25</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="802" sha1="ak61tccj38khfg8mil9tftq4n86ukdv" xml:space="preserve">MINIX 3 is a new open-source operating system designed to be highly reliable, flexible, and secure. It is loosely based somewhat on previous versions of MINIX, but is fundamentally different in many key ways. MINIX 1 and 2 were intended as teaching tools; MINIX 3 adds the new goal of being usable as a serious system on resource-limited and embedded computers and for applications requiring high reliability.

MINIX 3 is initially targeted at the following areas:

* Applications where very high reliability is required
* Single-chip, small-RAM, low-power, $100 laptops for Third-World children
* Embedded systems (e.g., cameras, DVD recorders, cell phones)
* Applications where the GPL is too restrictive (MINIX 3 uses a BSD-type license)
* Education (e.g., operating systems courses at universities)</text>
      <sha1>ak61tccj38khfg8mil9tftq4n86ukdv</sha1>
    </revision>
  </page>
  <page>
    <title>How to Contribute</title>
    <ns>0</ns>
    <id>18</id>
    <revision>
      <id>26</id>
      <timestamp>2021-08-27T07:26:25Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import howtocontribute</comment>
      <origin>26</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2650" sha1="s6zbdgns2gvhthabg04ggpzbvvz2h1l" xml:space="preserve">This page describes how you can contribute to MINIX.

== Finding a Project ==

See the [[Wishlist]] for areas where we could use help.

== Contributing Patches ==
Patches are pieces of code that solve an existing issue. In fact, patches describe the changes between a before and after state. Patches will need to be created against the latest development version of [https://git.minix3.org/?p=minix.git MINIX3 from Git] (or from the official [https://github.com/Stichting-MINIX-Research-Foundation/minix mirror on GitHub]).

We prefer patches in the form of [https://github.com/Stichting-MINIX-Research-Foundation/minix/pulls pull requests on GitHub]. If for some reason you are not able to create a GitHub pull request for your patch, you can send it to the [https://groups.google.com/group/minix3 MINIX3 Google Group] instead, but merging patches is a bit more work for us that way.

Also see the wiki page on [[Tracking Current|tracking MINIX3-current]].
== Contributing Packages ==

Send your pkgsrc patch to the [https://groups.google.com/group/minix3 MINIX 3 Google Group]. Before generating it, make sure you have updated your pkgsrc git repository. 

If you modified the program's source code, please send your MINIX-specific patch to the original authors of the program.

Also see [[Porting Guide]].

== MINIX License ==

MINIX 3 is licensed under the BSD license, so we ''absolutely require'' contributions to our base system, drivers, and the like, to be BSD-licensed. If you are porting code to MINIX from another OS, please port BSD-licensed code. For instance, if you are porting a driver to MINIX, you might start with a FreeBSD or NetBSD driver. There are a few exceptions in the MINIX3 base system, such as the external/ and gnu/ source tree subdirectories, which have their own rules in this regard. For example, any required GNU-licensed code must be downloaded on demand rather than be part of the actual base system. We follow NetBSD's lead here. In any case, the MINIX3 source code is to be free of license violations, and we will simply reject patches that introduce problems in that department.

On that note: we assume that unless specified otherwise, code that is submitted to us has the proper license (i.e., is BSD-licensed or directly compatible). In other words, we will not require explicit copyright sign-over for as long as the project is not getting into trouble over this. This is a "good faith" assumption that keeps the wheels turning right now.

The MINIX 3 ports use the BSD license for port metadata (build scripts, etc.), but modifications to the original program should use the license of the ported program.</text>
      <sha1>s6zbdgns2gvhthabg04ggpzbvvz2h1l</sha1>
    </revision>
  </page>
  <page>
    <title>Installing Minix 3</title>
    <ns>0</ns>
    <id>19</id>
    <revision>
      <id>273</id>
      <parentid>239</parentid>
      <timestamp>2021-09-10T20:39:07Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>/* Next Steps */ update link</comment>
      <origin>273</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9297" sha1="qd82ecd5kotwd6re5xs4awngm8gt710" xml:space="preserve">This page describes the process of installing MINIX on Intel PC.

For instructions on installing MINIX/arm, see [[Minix on ARM]].

== Getting MINIX ==

Download the CD-ROM installer image from the [https://www.minix3.org/download download page].

== Preparation &amp; Booting ==

Please make sure your system meets the [[Requirements|Installation Requirements]] first.

If you already have the CD-ROM (e.g., from the book), you can skip to steps 2.1.1 and 2.3, and then continue with section 3. But it is wise to check the [https://www.minix3.org/download download page] to see if a newer version is available.

If you're installing to a virtual machine, you can skip to step 2.4.

=== Creating a bootable CD-ROM ===

Decompress the downloaded file. You will get a CD-ROM image file with extension ''.iso''. The ''.iso'' file is a bit-for-bit CD-ROM image. Burn it to a CD-ROM disk to create a bootable MINIX CD-ROM. Please consult your CD burning program's documentation to learn how to burn ''ISO'' images to CD-ROM media.

If you are running Windows XP and do not have a CD-ROM burning program, take a look at [https://alexfeinman.brinkster.net/isorecorder.htm|ISO Recorder] for a free one and use it to create a CD image.

==== Booting from CD-ROM ====

Insert the CD-ROM into your CD-ROM drive and boot the computer from it. If the computer boots from the hard disk instead of the CD-ROM, boot again and enter the BIOS setup program to change the order of boot devices, putting the CD-ROM before the hard disk.

You may need to change the ''Boot Order'' in the BIOS so that the machine boots off the CD-ROM, as opposed to the hard disk.

If you're using SATA storage devices, then please follow the [[SATA|SATA Guide]].

=== Booting over the network ===

It is possible to boot your computer over network. This requires a host and a client computer. See the [[Booting with PXE|PXE Guide]] for details.

=== Partitioning your hard disk ===

You can boot the computer from your CD-ROM if you like and MINIX will start, but to do anything useful, you have to create a partition for it on your hard disk. But before partitioning, be sure to '''back up your data''' to an external medium such as a CD-ROM or DVD as a safety precaution, just in case something goes wrong. Your files are valuable; protect them.

Unless you are sure you are an expert on disk partitioning, it is strongly suggested that you read the tutorial on [[Disk Partitions|disk partitioning]]. If you already know how to manage partitions, create a contiguous chunk of free disk space that fits the [[Requirements|hardware requirements]] and your needs.

If you do not know how to manage partitions but have a partitioning program like ''Partition Magic'', use it to create a region of free disk space. Also make sure there is at least one primary partition (i.e., Master Boot Record slot) free. The MINIX ''setup'' script will guide you through creating a MINIX partition in the free space, which can be on either the first or second hard disk.

&lt;div round info&gt;
'''Warning:'''

If you make a mistake during disk partitioning, you can lose all the data on the disk, so be sure to back it up to CD-ROM or DVD before starting. Disk partitioning requires great care, so proceed with caution.
&lt;/div&gt;

By now you should have allocated some free space on your disk. If you have not done so yet, please do it now unless there is an existing partition you are willing to convert to MINIX.

=== Setting up a virtual machine ===

If you want to run MINIX on a virtual machine instead of natively, see the installation page for your VM of choice before reading this page:

* [[Running on VMware|VMware]]
* [[Running on Qemu (and KVM)|Qemu (and KVM)]]
* [[Running on Bochs|Bochs]]
* [[Running on Parallels|Parallels]]
* [[Running on VirtualBox|VirtualBox]]
* [[Running on VirtualPC 2007|Microsoft VirtualPC 2007]]

== Installing ==

These steps correspond to the steps on the screen.

=== Running the Setup script ===

When the ''login'' prompt appears, login as root. Press ''Enter'' when prompted for a password.

To start the installation of MINIX on the hard disk, type

&lt;pre&gt;
setup
&lt;/pre&gt;

After this and all other commands, be sure to type ENTER (RETURN). When the installation script ends a screen with a colon, hit ENTER to continue.

If the screen suddenly goes blank, press CTRL-F3 to select software scrolling (should only be needed on very old computers). Note that CTRL-key means depress the CTRL key and while holding it down, press "key."

=== Select keyboard type ===

When you are asked to select your national keyboard, do so. This and other steps have a default choice, in square brackets. If you agree with it, just hit ENTER. In most steps, the default is generally a good choice for beginners. The ''us-swap'' keyboard interchanges the CAPS LOCK and CTRL keys, as is conventional on UNIX systems.

=== Create or select a partition for MINIX ===

You will first be asked if you are an expert in MINIX disk partitioning. If so, you will be placed in the ''part'' program to give you full power to edit the Master Boot Record (and enough rope to hang yourself). If you are not an expert, press ENTER for the default action, which is an automated step-by-step guide to formatting a disk partition for MINIX.

==== Select a disk ====

An IDE controller may have up to four disks. The setup script will now look for each one. Just ignore any error messages. When the drives are listed, select one. and confirm your choice.

If you have two hard disks and you decide to install MINIX to the second one and have trouble booting from it, see [[Installation Troubleshooting]].

==== Select a disk region ====

Now choose a region to install MINIX into. You have three choices:

# Select a free region
# Select a partition to overwrite
# Delete a partition to free up space and merge with adjacent free space

For choices (1) and (2), type the ''region number''. For (3) type:

&lt;pre&gt;
delete
&lt;/pre&gt;

then give the region number when asked. This region will be overwritten and its previous contents lost forever.

==== Confirm your choices ====

You have now reached the point of no return. You will be asked if you want to continue. If you do, the data in the selected region will be lost forever. If you are sure, type:

&lt;pre&gt;
yes
&lt;/pre&gt;

and then ENTER. To exit the setup script without changing the partition table, hit ''CTRL-C''.

=== Reinstall choice ===

If you chose an existing MINIX partition, in this step you will be offered a choice between a Full install, which erases everything in the partition, and a Reinstall, which does not affect your existing ''/home'' partition. This design means that you can put your personal files on ''/home'' and reinstall a newer version of MINIX when it is available without losing your personal files.

=== Select the size of /home ===

The selected partition will be divided into three subpartitions: ''root'', ''/usr'', and ''/home''.

* ''/home'', will contain only your own personal files. Specify how much of the partition should be set aside for your files. You will be asked to confirm your choice.

* ''/usr'', contains most of the software, as well as all the optional packages. It is advised to give it several gigabytes if possible. It's size is computed as the remaining of space left on the MINIX partition, so the bigger ''/home'' is, the smaller ''/usr'' is.

=== Select a block size ===

Disk block sizes of 1-KB, 2-KB, 4-KB, and 8-KB are supported, but to use a size larger than 4-KB you have to change a constant and recompile the system. Use the default (4 KB) here.

=== Wait for files to be copied ===

Files will be automatically copied from the CD-ROM to the hard disk. Every file will be announced as it is copied. 

=== Select your Ethernet chip ===

You will now be asked which (if any) of the available Ethernet drivers you want installed. Network settings can be changed after installation. Please see [[Network Configuration]] for details.

=== Restart ===

When the copying is complete, MINIX is installed. Shut the system down by typing:

&lt;pre&gt;
poweroff
&lt;/pre&gt;

Always stop MINIX this way to avoid data loss as MINIX keeps some files on the RAM disk and only copies them back to the hard disk at shutdown time.

You can now remove any CD-ROM or floppy disk and turn off the computer. When you boot up again, you will be running MINIX.

&lt;div round tip&gt;
'''Virtual Machines'''

If you are running a virtual machine, you will need to unmount the ISO image and tell the VM to boot from the hard disk. See the installation page for your VM for how to do this.
&lt;/div&gt;

== Next Steps ==

Note! The MINIX installation does not install the things like X11 and GCC automatically. You have to do this after reboot. Type shutdown and reboot and then follow these instructions on Post installation.

Now that you've installed MINIX, you can go about configuring it. If you plan on booting multiple operating systems (i.e., you didn't install the MINIX boot loader to your Master Boot Record), you should read [[Running Multiple Operating Systems]].

You should also read [[Post Installation]] for some configuration tips and instructions on how to install packages. To do anything useful, you will need to install some packages as the base system is very barebones.</text>
      <sha1>qd82ecd5kotwd6re5xs4awngm8gt710</sha1>
    </revision>
  </page>
  <page>
    <title>Installing Binary Packages (Old Versions)</title>
    <ns>0</ns>
    <id>20</id>
    <revision>
      <id>28</id>
      <timestamp>2021-08-27T07:42:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import installingbinarypackageonoldreleases</comment>
      <origin>28</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2584" sha1="qh7he7a6g8m0z13r89kjo2nkpmd75m1" xml:space="preserve">&lt;div round alert&gt;
This page describes the packaging system used in early releases of MINIX 3.1. It is not relevant to recent (after 2008) releases of MINIX.&lt;/div&gt;

Minix 3.1.7 and below provides packman to manage binary packages. Newer releases uses pkgin and pkgsrc. See [[Installing Binary Packages]] for the details.

== Packman ==

To install new packages, you will use the ''packman'' program. '''You must run packman as ''root''.'''

Packman first will ask you if you want to update the package list via the network. If you have a working network connection, answer "'''Y'''".
&lt;pre&gt;
# packman
Checking for CD in /dev/c0d6p2.
Not found.
Update package list from network? (Y/n)
&lt;/pre&gt;
You can ignore the warning about not finding the CD if you plan on downloading packages over the network. Otherwise, you should insert a MINIX CD-ROM, and rerun ''packman''.

Packman then will show you this informational message:
&lt;pre&gt;
Showing you a list of packages using more. Press q when
you want to leave the list.
Press RETURN to continue..
&lt;/pre&gt;
Press RETURN.

Packman now will present to you a list of programs to install. You can scroll through that package list by using the SPACE bar, arrow keys, or VI-style navigation. Then, select the packages that you wish to install. Here are some examples of how you can list packages:
&lt;pre&gt;
Format examples: '3', '3,6', '3-9', '3-9,11-15', 'all'
&lt;/pre&gt;
/!\ Selecting ''all'' is not recommended, as there are many packages that would be installed, and they would require significant disk space.

After you've specified the packages that you want to install, packman will ask you if you want to install the sources for the given packages:
&lt;pre&gt;
Get source(s) too? (y/N)
&lt;/pre&gt;
You should select "'''N'''" here. The source packages are not any more downloadable from the minix3.org site.

Packman then will install the selected packages:
&lt;pre&gt;
Retrieving 11 (bash-3.0) from primary location into /usr/tmp/packages ..
Retrieved ok. Installing ..
Installed ok.

Showing you a list of packages using more. Press q when
you want to leave the list.
Press RETURN to continue..
&lt;/pre&gt;
Press RETURN. Packman then will allow you to install more packages. If you are done installing packages, hit the "'''q'''" key twice (once to exit out of the package listing, and once again to exit packman altogether).

== Dependencies ==
&lt;!&gt; Note: Packman does not handle dependencies; therefore, you will need to manage dependencies manually. For instance, ''gcc'' requires ''binutils'' and ''gcc-libs'', so you must install ''gcc-libs'', ''binutils'', and ''gcc''.</text>
      <sha1>qh7he7a6g8m0z13r89kjo2nkpmd75m1</sha1>
    </revision>
  </page>
  <page>
    <title>File:Raccoon.jpg</title>
    <ns>6</ns>
    <id>21</id>
    <revision>
      <id>29</id>
      <timestamp>2021-08-27T08:01:53Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>29</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T08:01:53Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Raccoon.jpg</filename>
      <src>https://wiki.iberty.cf/images/6/61/Raccoon.jpg</src>
      <size>23456</size>
      <sha1base36>j5gzktyseqjlid5iebltgoen142ilh9</sha1base36>
      <rel>6/61/Raccoon.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAgEASABIAAD/7RqAUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA
AQBIAAAAAQABOEJJTQQNAAAAAAAEAAAAeDhCSU0EGQAAAAAABAAAAB44QklNA/MAAAAAAAkAAAAA
AAAAAAEAOEJJTQQKAAAAAAABAAA4QklNJxAAAAAAAAoAAQAAAAAAAAACOEJJTQP1AAAAAABIAC9m
ZgABAGxmZgAGAAAAAAABAC9mZgABAKGZmgAGAAAAAAABADIAAAABAFoAAAAGAAAAAAABADUAAAAB
AC0AAAAGAAAAAAABOEJJTQP4AAAAAABwAAD/////////////////////////////A+gAAAAA////
/////////////////////////wPoAAAAAP////////////////////////////8D6AAAAAD/////
////////////////////////A+gAADhCSU0ECAAAAAAAEAAAAAEAAAJAAAACQAAAAAA4QklNBB4A
AAAAAAQAAAAAOEJJTQQaAAAAAABvAAAABgAAAAAAAAAAAAAAyAAAAJsAAAAHAHIAYQBjAGMAbwBv
AG4AAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAJsAAADIAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAADhCSU0EFAAAAAAABAAAAAM4QklNBAwAAAAAF+8AAAABAAAAVwAA
AHAAAAEIAABzgAAAF9MAGAAB/9j/4AAQSkZJRgABAgEASABIAAD/7gAOQWRvYmUAZIAAAAAB/9sA
hAAMCAgICQgMCQkMEQsKCxEVDwwMDxUYExMVExMYEQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMAQ0LCw0ODRAODhAUDg4OFBQODg4OFBEMDAwMDBERDAwMDAwMEQwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwMDAz/wAARCABwAFcDASIAAhEBAxEB/90ABAAG/8QBPwAAAQUBAQEBAQEA
AAAAAAAAAwABAgQFBgcICQoLAQABBQEBAQEBAQAAAAAAAAABAAIDBAUGBwgJCgsQAAEEAQMCBAIF
BwYIBQMMMwEAAhEDBCESMQVBUWETInGBMgYUkaGxQiMkFVLBYjM0coLRQwclklPw4fFjczUWorKD
JkSTVGRFwqN0NhfSVeJl8rOEw9N14/NGJ5SkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2N0dXZ3eH
l6e3x9fn9xEAAgIBAgQEAwQFBgcHBgU1AQACEQMhMRIEQVFhcSITBTKBkRShsUIjwVLR8DMkYuFy
gpJDUxVjczTxJQYWorKDByY1wtJEk1SjF2RFVTZ0ZeLys4TD03Xj80aUpIW0lcTU5PSltcXV5fVW
ZnaGlqa2xtbm9ic3R1dnd4eXp7fH/9oADAMBAAIRAxEAPwC1h1B/1ay3syZwa6x9oxnte1wuNlbj
M7GOcxwbtyan3f6L01U6PV005lLSX24z7mV3eo2WOa5xb6fplvud6TtlzvYpdQ6/1PKw/wBmXOec
YCuq572NiWFnpWtdU396vfuc9Rx6srFmq1geWmGXVvJJj6MVO9/t2qtYAuIvh/e0/wDRWnjMQRwD
i4LHFKx6j/WMv1cUjmZeBTdkdJyjdiY9212NZYLbK59T9YY0/rDKfZt9HJ/TKr9rvyM77Zh4zcXP
aP0+S02MY57S30rHUvDa2ZDPoP8A5z1FKzpXVMm6rKbj14ttwDpDvTdYH/TzHbXvf6dz/wCe2P8A
5dVa6bo31N6Xk4j8nLN46hY9zXXsvfNZafoUNGyl1e7/AE1CdU5AgWOt/osoOaQnEkxI+WfSV/1o
Oez6wbmNZ1KwG9jXNdvs3va+D6bm43tp9R9nv9Z7b6/9CxR+rPVuv41jrn9OyeoVXj2BrHgtMf8A
aey4Nxaan/4Tfb+l/sKv1b6q9b6X6uTiurzcPaQ4+mJ2j83Jpb+k2/8AC1er+/8Aolr/AFZ+tdNe
JXi2seyqkbRW5we9jQOabf8AtXi/+D0/9tpCMuIGcjp/LhX+zIyE+LiroD3/AEf7rqCv63dVIF5r
+r+GfpMpc3JzXdi313N+xYm5v59bct6n03p9OFY5+LU572n3Zj3vvvuaDtcy7LtNttlb437PZTVZ
9CtB6p9YLPt1eDisY+myn1nXPLg1wO9jWb2Nd6W22vZbX/SLfoenXX6lyF9VMi3Fpu6LVWGux3+v
h1vdzi2u3+yxg22vp3/5/wCjt9P9Ipr1XkEjsE/1gwW9SrIFQtyKf0lLbMmyisCP8Oyl/wBJrv3d
n/HVLz6u+ptRtdkPbcWbWipztoaAPTa5zj9P8/3ru+l49uLW2rIssyc+p0iy6tjcja4aY/ULaHX4
1+9r/wCe9Wv9F/pLal5zj41WVYcVwcG2GfTDdroD30Nrs/c9L0veosuMH6scuX9wGpcMtNW3ULnZ
DsjJfbRX6DrG2NPL27Ps2Pu3Nf6GRv8AekrmZjUsfjYTS62y63bTqXWCtoddlZhs+m308dlm1JM4
JcNafit+6z4eG4cW3F6vl+X5P7r/AP/Q4Sv6wfWYWln2nJeZJfXru0G6z83fXtZ+d/g/5xa+R1XL
sustw+qZIurLhRiPqNoue2x7Kaw2xjK3+rj/AGe3Jquo99l/qelZ/N09V1rpmRidPwXVwcgbqcu1
r3e/c712u32Dc+1u2z0rX/zf82r/AEfGF/V+n3VPJYy3dbWARqyuzdZr/wAK6vd9BR0L2A8kY4RM
OKgL3ADyl/1iz8j9D+0eqOvYbKcdorb6zt52+zZiV2XMZa2+307LqLtlX2er7N6HqPen6ydeFNtP
TerZ2S1t9du5lbrfZLPXu9R+ELq2/o3uqxNvoX0+tfd+l/QZXV35fUMjE6t1Hp9teDT0jMyK2Umr
1n5Dsev1LLcvLvt9T9Nvds9Jn6L/AIRXuk/W+o10YrsTJ+0ZHpPca9jmeplUP6lXXXvu9X0vRqu3
XWV/oP8ADf6RGJ6En9jL7OQRsgGjRAPy/wCN/eeMb1/62AhjOuZjqg71x+p7nlkG613qip7rKMep
3v8Ap436Sv7NVbXX7NfpH1fzOudFd1alzj1Jtr2tffWaKs2prvVxsttbmVtrstpt/R5DGbH2V/6W
zIuXRt+ueIMSnNGNlPoyP5v3450FLuoO9T9a/QWV4zNzq7P0m/8AR/4RaL/rFgsyOnUPZcH9Vr9S
qWAenNbr6qsre5rqrsj07a6KvfvuqsTqB3NrRGY1rv8A835nj+m9VdXbZTltOPkYjgL6bGyW6tdt
sZJ3V6MdW9iCOruy76WsrszOo2PEsdWyyBL35OHVZYz2Vu3Od9q/mf8ATLX+sWZ0fOxsnOzumZlF
3TB6d2Uz0N7C9uPZ9ltDMn9O1zc2j9G//h/SsZZWquFY7peXl4eO31Myh9NFtFxaP0dr2VU34/pP
rY7H9S3HZm3797LGV78WpM20vRcYSkLr+X8pPRUtsZW1jtoI/NYwNAP7rdpd/wBFef51zavrD1K2
l/0bbdpEHVz3OdrH0d+36P5/6T/BLoczrvVb+n33dOZXi1PoNuP1G9jtgrnbdkNqqtuyG2MpP2nD
9XF/SsZ6vpfmLlqD0uxtmP0q+6/FpqbQ3Jur2OtPp2erbUxx9RtDX112s37PT/m0ZGxoqIINHsl6
OL7OrWWWe65uDm+laSNoc2pu7br9Hbuq9RJWOlNa3MbitcfSsxc2suGmjabw5/8AW/m0kP0fqqvX
fg//0d76wMsHSHOn0633UtNpAIE2Ddz9FVul5NfT8ijqOaSzHY+9r3bN3uqF+zY5rt3r2+o/37f5
CP8AWKxzOkWUlwDbbagWOMAw9pLv7DVDFwsbNysXAMNrcbq7YAL2/ozYXV+uwttZfu9/s/MTZb6I
gT7cuHfXfu28jpPS7mPyMHIyn9L6xZbkZmHS6KrnBjn2+lvq+2M+0+ns9PHyKvVWV0LqXTyc7r77
KMfEysT08ivGb6l+AKjXh4lDK/TdY6l+O71H3Nxvsvq0LZ68aulYPT6bb3sqZ6tDLKmsZYN1NkXM
ZQKKa30N33M9LZ/N/o/0izcNvR7rb8/L6nTfm5eI/p5sqxjXW5tkbsnKoDrn5WTb+i/SOtoo9P8A
RpGJsUGbHkHAfcJ4jW3/ADv+j8zJ2D9VWV14GRlZmRVhbqzimprgGUtf0e2y5mLiMc6r9K7H+3td
61l9X6O/9R/QPs+rmR7r8zqd+TTdjUszLaN19V2M9jcbFbc7D9tr78ur122fz1t3/HKVeD0puR0z
DHUK3X9K9HGrbTQWZJtpc4W7Mtln6OrJY/Z1Op/2qnZ+mr9Gy5QjpFmFksd1Wp1ef1GvqjmvxnGD
upt+yvZ62yyp3p07vf8Azf2j+c/wRo9gkThXzybuZX9XcvH6xg5mdl0DPrb1TMrsrFT66qyyo2Y7
X4u/b+q1UPqf6936P9+zfZOrH+rnU8/G2ZGTk5P2ivqNTwz+ZN1YyGY9z2Ut9DHzqMX1X41/v/4r
1KFROH0Nzg/I6tU9+O1wrZXjvY1tXp+gzGfR6lnrYVFtONk49T/8Jifz136RE6dR0TCzcPIs6rU9
/Tqm41bq6HU2WNZS3F9HIuY9/wBrxP0f2v03Uv8ATyP5vJ9H9ClRvYK4o188rr6cWzg53pdD6hdh
vFtl2PTTi0tvMCzFdkPsuxcfJxGsvx2fZvRuxc671b6r6r8atBY+x2abbcm7IDKrKKrspwttLHbh
TRa79G67d+f7ffvXS/4x8Wq3AwrC2Lxk+k0mNWOY+21sfS9NvoMss2/uLmcOpl7tuQ9zKiRYGg6u
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
FSwdKKIWoFGwgqPE+3+vWolyIaD/ALU0bIM//9k=
      </contents>
    </upload>
  </page>
  <page>
    <title>The Raccoon Mascot</title>
    <ns>0</ns>
    <id>22</id>
    <revision>
      <id>31</id>
      <parentid>30</parentid>
      <timestamp>2021-08-27T08:05:10Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Peter moved page [[The Racoon Mascot]] to [[The Raccoon Mascot]] without leaving a redirect: Typo in name</comment>
      <origin>30</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="741" sha1="ktearbpuqnodzilbdxkxznem691ansc" xml:space="preserve">MINIX 3 has a mascot: a raccoon. The raccoon was chosen because raccoons are small, agile, intelligent, friendly -- and best of all -- eat bugs (at least, when there are no garbage cans available). And, being cute doesn't hurt either.
{| class="wikitable" border=1
|  [[File:Raccoon.jpg]]
|-
|}




The MINIX 3 raccoon was named '''Rocky Raccoon''' by Prof. Andrew Tanenbaum.
&gt; I’m inclined to call the mascot “Rocky Racoon” due to the alliteration and the suggestion that “Rocky” sounds spunky. It doesn’t relate to the software but neither do “Tux” or “Beastie.”
([https://groups.google.com/d/msg/minix3/SWCi8kLQFA8/bJxOWXLVFHEJ source]) - the MINIX 3 team subsequently settled on the more common spelling of "raccoon".</text>
      <sha1>ktearbpuqnodzilbdxkxznem691ansc</sha1>
    </revision>
  </page>
  <page>
    <title>Mascot</title>
    <ns>0</ns>
    <id>23</id>
    <redirect title="The Raccoon Mascot" />
    <revision>
      <id>32</id>
      <timestamp>2021-08-27T08:05:54Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Redirected page to [[The Raccoon Mascot]]</comment>
      <origin>32</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="32" sha1="370ghxl67j3m4hueadbq2oyyyovjxr6" xml:space="preserve">#REDIRECT [[The Raccoon Mascot]]</text>
      <sha1>370ghxl67j3m4hueadbq2oyyyovjxr6</sha1>
    </revision>
  </page>
  <page>
    <title>Minix Archive Collections</title>
    <ns>0</ns>
    <id>24</id>
    <revision>
      <id>33</id>
      <timestamp>2021-08-27T08:46:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Import minixarchivecollection</comment>
      <origin>33</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="506" sha1="h6dazahu8xhbhhvie52r45zpvj5t37i" xml:space="preserve">== Minix Archive Collections ==

A collections that was taken from the
[https://groups.google.com/group/minix3/ Minix] and [https://groups.google.com/group/comp.os.minix/topics comp.os.minix] groups.

== Minix Issues ==

* [https://groups.google.com/group/minix3/browse_thread/thread/69f07a9ce85a5a25 How to set the timezone?] (0906).

== Discussion ==

'''Question: Can this stuff be added to the [[FAQ]] and the [[Post Installation]] instead? It would probably easier for the user to find stuff there.'''</text>
      <sha1>h6dazahu8xhbhhvie52r45zpvj5t37i</sha1>
    </revision>
  </page>
  <page>
    <title>Minix Performance</title>
    <ns>0</ns>
    <id>25</id>
    <revision>
      <id>34</id>
      <timestamp>2021-08-27T08:47:44Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import minixperformance</comment>
      <origin>34</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1058" sha1="4brxnv8irqw29cv4vd8va59psk46u46" xml:space="preserve">This page is to collect observations and experiments related to performance of minix.

== Starting point ==

There are countless ways to talk about performance, so let's start with one simple case that is both relevant for our daily usage and displays terrible performance: gcc and clang on minix.

== Basic Observations ==

* Clang is significantly slower than gcc on minix, and it's supposed to be faster.
* There is high idle time when gcc and clang are executing, suggesting high i/o wait time

== Experiments ==

(Timing measurements to be done.)

* Run with huge primary cache: no more idle time. clang is still significantly slower than gcc though, and gcc still isn't very fast.
* Run with /usr/tmp, /tmp and /usr/src on ramdisks: almost no idle time any more.
* Marking unreferenced blocks as clean if they're dirty: happens but doesn't help much in real time.
* Defer evicting dirty blocks from the cache, prefering a clean block even if it's older in order to batch write operations: helps with reducing flushall() calls but not much in real time.</text>
      <sha1>4brxnv8irqw29cv4vd8va59psk46u46</sha1>
    </revision>
  </page>
  <page>
    <title>Networking Configuration</title>
    <ns>0</ns>
    <id>26</id>
    <revision>
      <id>35</id>
      <timestamp>2021-08-27T08:50:46Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import networkingconfiguration</comment>
      <origin>35</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3305" sha1="1w4u3nkqu7s4b4vpok35k2b99tu0tt7" xml:space="preserve">== Note about debugging your network configuration under virtualization ==

Most virtualization software offer many types of network virtualization.
For example, the QEMU default network configuration supports for example
http but not ICMP. Therefore testing your network connection with ping doesn't
work. 

The a good way to determine if your network connection is working or not
is invoking "pkgin up". If you get no errors, your connection works AND
you have updated the pkgin repo.


== Changing selected network card ==

The ''netconf'' utility allows one to change the networking configuration
from the options you selected when installing. It allows disable networking,
select a different network card (PCI cards are detected, if you have a 
non-PCI card you should find out what type of card you have first) and allows
one to enable or disable DHCP.

== Using a Static IP ==

Add the following lines to /etc/rc.net:

&lt;pre&gt;
ifconfig -I /dev/ip0 -n &lt;netmask&gt; -h &lt;ip_address&gt;
add_route -g &lt;gateway&gt;
&lt;/pre&gt;

Then add the following lines to ''/etc/hosts'':

&lt;pre&gt;
your.name.server &lt;name_server&gt;
&lt;/pre&gt;

== Supported Network Cards ==

The follow list is displayed by ''netconf'' of version Minix 3.1.7 (2010-07)

The drivers name is found after configuration in file /etc/inet.conf
{| class="wikitable sortable" border=1
| '''NIC Selection'''  || '''Corresponding Driver Name'''
|-
|  0. No Ethernet card (no networking)  || (n/a)
|-
|  1. Intel Pro/100  || fxp
|-
|  2. 3Com 501 or 3Com 509 based card  || dpeth
|-
|  3. Realtek 8139 based card (also emulated by KVM)  || rtl8139
|-
|  4. Realtek 8169 based card  || rtl8169
|-
|  5. Realtek 8029 based card (also emulated by Qemu)  || dp8390
|-
|  6. NE2000, 3com 503 or WD based card (also emulated by Bochs)  || dp8390
|-
|  7. AMD LANCE (also emulated by VMWare and VirtualBox)  || lance
|-
|  8. Intel PRO/1000 Gigabit  || e1000 
|-
|  9. Attansic/Atheros L2 FastEthernet || atl2 
|-
| 10. DEC Tulip 21140A in VirtualPC  || dec21140A 
|-
| 11. Different Ethernet card (no networking)  || (n/a) 
|-
|}

== LwIP ==

An alternative to the ''inet'' server is represented by the ''lwip'' server. This server is based on the [https://savannah.nongnu.org/projects/lwip/ lwip] stack. The stack is separated in the liblwip. The server itself is an implementation of the VFS-INET protocol, the sockets.

To use the lwip instead of inet, '''lwip=yes''' must be set in the boot monitor. You can edit the boot parameters by creating a local boot.cfg file and adding '''lwip=yes''' to the end of the '''menu=''' lines in that file. The update_bootcfg tool will apply your changes. Then, simply reboot to start using lwip.
&lt;pre&gt;
cp /etc/boot.cfg.default /etc/boot.cfg.local
vi /etc/boot.cfg.local
/bin/update_bootcfg
reboot
&lt;/pre&gt;

It is preferable to use ''lwip'' with static network configuration only as there are some problems with the current dhcp client as it uses some very inet-specific non-standard features. DHCP is likely to get the configuration, sometimes the local name server does not get the DNS configuration though. A good configuration for KVM is :

&lt;pre&gt;
ip      : 10.0.2.15
mask    : 255.255.255.0
gateway : 10.0.2.2
DNS     : 10.0.2.3
&lt;/pre&gt;

Be aware that it is '''necessary''' to use '''-I''' option with add_route if you are using lwip.</text>
      <sha1>1w4u3nkqu7s4b4vpok35k2b99tu0tt7</sha1>
    </revision>
  </page>
  <page>
    <title>Publications</title>
    <ns>0</ns>
    <id>27</id>
    <revision>
      <id>158</id>
      <parentid>36</parentid>
      <timestamp>2021-09-09T00:28:19Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>remove trailing double backslashes</comment>
      <origin>158</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15641" sha1="nw2bty56cl8t75xllxrhfqmsmg1lbse" xml:space="preserve">== Book ==
* Operating Systems: Design and Implementation 3/e, Tanenbaum, A.S. and Woodhull, A.S., Upper Saddle River, NJ: Prentice Hall, 2006.


== Research papers ==

=== Conference ===

* [https://www.minix3.org/docs/conf/systor-2014.pdf Towards a Flexible, Lightweight Virtualization Alternative], Moolenbroek, D.C. van, Appuswamy, R., and Tanenbaum, A.S., Proc. Seventh Int'l Systems and Storage Conf. (SYSTOR '14), pp. 1--7, Haifa Israel, June 2014.
* [https://www.minix3.org/docs/conf/edcc-2014.pdf On the Soundness of Silence: Investigating Silent Failures Using Fault Injection Experiments], Kouwe, E. van der, Giuffrida, C., and Tanenbaum, A.S., Proc. 10th European Dependable Computing Conf. (EDCC '14), pp. 118--129, Newcastle, U.K., May 2014.
* [https://www.minix3.org/docs/conf/hase-2014.pdf Evaluating Distortion in Fault-Injection Experiments], Kouwe, E. van der, Giuffrida, C., and Tanenbaum, A.S., Proc. 15th IEEE Int'l Symp. on High Assurance Systems Eng. (HASE '14), Miami, FL, Jan. 2014 (Best Paper Award).
* [https://www.minix3.org/docs/conf/icpads-2013.pdf File-Level, Host-Side Flash Caching with Loris], Appuswamy, R., Moolenbroek, D.C. van, Santhanam, S., and Tanenbaum, A.S., Proc. 19th Int'l Conf. on Parallel and Distributed Systems (ICPADS '13), pp. 34--42, Seoul, Korea, Dec. 2013.
* [https://www.minix3.org/docs/conf/prdc-2013a.pdf  Transaction-Based Process Crash Recovery of File System Namespace Modules], Moolenbroek, D.C. van, Appuswamy, R., and Tanenbaum, A.S., Proc. Pacific Rim Int'l Symp. of Dependable Computing (PRDC '13), pp. 338--347, Vancouver, B.C., Canada, Dec. 2013.
* [https://www.minix3.org/docs/conf/prdc-2013.pdf  EDFI: A Dependable Fault Injection Tool of Dependability Benchmarking Experiments], Giuffrida, C., Kuijsten, A., and Tanenbaum, A.S., Proc. Pacific Rim Int'l Symp. of Dependable Computing (PRDC '13), pp. 31--40, Vancouver, B.C., Canada, Dec. 2013.
* [https://www.minix3.org/docs/conf/lisa-2013.pdf Back to the Future: Fault-tolerant Live Update with Time-traveling State Transfer], Giuffrida, C., Iorgulescu, C., Kuijsten, A., and Tanenbaum, A.S., Proc. Large Installation System Admin. (LISA '13), pp. 89--104, Washington, D.C., Nov.  2013 (Best student paper award).
* [https://www.minix3.org/docs/conf/dsn-2013.pdf Practical Automated Vulnerability Monitoring Using Program State Invariants], Giuffrida, C., Cavallaro, L., and Tanenbaum, A.S., Proc. 43rd Int'l Conf. on Dependable Systems and Networks (DSN '13), pp. 1--12, Budapest, Hungary, June 2013.
* [https://www.minix3.org/docs/conf/atc-2013.pdf When Slower Is Faster: on Heterogeneous Multicores for Reliable Systems], Hruby, T., Bos, H., and Tanenbaum, A.S., Proc. Ann. Tech. Conf. (ATC '13), pp. 255--266, San Jose, CA, June 2013.
* [https://www.minix3.org/docs/conf/msst-2013.pdf Cache, Cache Everywhere, Flushing All Hits Down the Sink: On Exclusivity in Multilevel, Hybrid Caches], Appuswamy, R., Moolenbroek, D.C. van, and Tanenbaum, A.S., Proc.  of the 29th IEEE Symp. on Massive Storage Systems and Technologies (MSST '13), pp. 1--14, Long Beach, CA, May 2013.
* [https://www.minix3.org/docs/conf/ladc-2013.pdf Battling Bad Bits with Checksums in the Loris Page Cache], Moolenbroek, D.C. van, Appuswamy, R., and Tanenbaum, A.S., Proc. Sixth Latin American Symp. on Dependable Computing (LADC '13), pp. 68--77, Rio de Janeiro, Brazil, April 2013 (Best Paper Award).
* [https://www.minix3.org/docs/conf/asplos-2013.pdf Safe and Automatic Live Update for Operating Systems], Giuffrida, C., Kuijsten, A., and Tanenbaum, A.S., Proc. Arch. Prog. Lang. Operating Systems 2013 (ASPLOS '13), pp. 279--292, Houston, TX, March 2013.
* [https://www.cs.vu.nl/~giuffrida/papers/usenixsec-2012.pdf Enhanced Operating System Security Through Efficient and Fine-grained Address Space Randomization], Giuffrida, C., Kuijsten, A. and Tanenbaum, A.S., Proc. 21st USENIX Security Symp. (USENIX Sec '12), pp. 40--55, Bellevue, WA, Aug, 2012.
* [https://www.minix3.org/theses/dsn2012.pdf Keep Net Working - On a Dependable and Fast Networking Stack], Hruby, T., Vogt, D., Bos, H., and Tanenbaum, A.S., Proc. 42nd Annual IEEE/IFIP Int'l Conf. on Dependable Systems and Networks (DSN '12), Boston, MA, June 2012
* [https://www.minix3.org/docs/loris/NAS2012.pdf Integrated System and Process Crash Recovery in the Loris Storage Stack], Moolenbroek, D.C. van, Appuswamy, R. and Tanenbaum, A.S., Proc. Seventh IEEE Int'l Conf. on Networking, Architecture, and Storage (NAS '12), pp. 1--10, Xiamen, Fuijan, China, June 2012.
* [https://www.minix3.org/docs/loris/MSST2012.pdf Integrating Flash-based SSDs into the Storage Stack], Appuswamy, R., Moolenbroek, D.C. van and Tanenbaum, A.S., Proc. 28th IEEE Conf. on Mass Storage Systems and Technologies (MSST '12), pp. 1--12, Pacific Grove, CA, May 2012.
* [https://www.minix3.org/docs/loris/NAS2011.pdf Efficient, Modular Metadata Management with Loris], Van Heuven van Staereling, R., Appuswamy, R., Moolenbroek, D.C. van, and Tanenbaum, A.S., Proc. Sixth IEEE Int'l Conf. on Networking, Architecture, and Storage (NAS '11), pp. 278--287, Dalian, Liaoning, China, July 2011.
* [https://www.minix3.org/docs/loris/MSST2011.pdf Flexible, Modular File Volume Virtualization in Loris], Appuswamy, R., Moolenbroek, D.C. van, and Tanenbaum, A.S., Proc. 27th IEEE Conf. on Mass Storage Systems and Technologies (MSST '11), pp. 1--14, Denver, CO, May 2011.
* [https://www.minix3.org/docs/loris/PRDC2010.pdf Loris - A Dependable, Modular File-Based Storage Stack], Appuswamy, R., Moolenbroek, D.C. van, and Tanenbaum, A.S., Proc. 16th IEEE Pacific Rim Int'l Symp. on Dependable Computing (PRDC '10), pp. 165--174, Tokyo, Dec. 2010.
* [https://www.minix3.org/docs/jorrit-herder/ladc09.pdf Dealing with Driver Failures in the Storage Stack], Herder, J.N., Moolenbroek, D.C. van, Appuswamy, R., Wu, B., Gras, B, and Tanenbaum, A.S., Proc. Fourth Latin-American Symp. on Dependable Computing (LADC '09), pp. 119--126, João Pessoa, Paraíba, Brazil, Sep. 2009 (Best Paper Award).
* [https://www.minix3.org/docs/jorrit-herder/dsn-dccs09.pdf Fault Isolation for Device Drivers], Herder, J.N., Bos, H., Gras, B., Homburg, P., and Tanenbaum, A.S., Proc. 39th Annual IEEE/IFIP Int'l Conf. on Dependable Systems and Networks (DSN '09), pp. 33--42, Lisbon, Portugal, July 2009.
* [https://www.minix3.org/docs/jorrit-herder/prdc08.pdf Countering IPC Threats in Multiserver Operating Systems], Herder, J.N., Bos, H., Gras, B., Homburg, P., and Tanenbaum, A.S., Proc. 14th IEEE Pacific Rim Int'l Symp. on Dependable Computing (PRDC '08), pp. 112--121, Taipei, Taiwan, Dec. 2008
* [https://www.minix3.org/docs/jorrit-herder/rtns08.pdf Enhancing a Dependable Multiserver Operating System with Temporal Protection via Resource Reservations], Mancina, A., Herder, J.N., Gras, B., Tanenbaum, A.S., and Lipari, G., Proc. 16th Int'l Conf. on Real-Time and Network Systems (RTNS '08), Rennes, France, Oct. 2008 (Best Paper Award).
* [https://www.minix3.org/docs/jorrit-herder/dsn-dccs07.pdf Failure Resilience for Device Drivers], Herder, J.N., Bos, H., Gras, B., Homburg, P., Tanenbaum, A.S., Proc. 37th Annual IEEE/IFIP Int'l Conf. on Dependable Systems and Networks (DSN '07), pp. 41--50, Edinburgh, U.K., June 2007.
* [https://www.minix3.org/docs/jorrit-herder/edcc06.pdf Construction of a Highly Dependable Operating System], Herder, J.N., Bos, H., Gras, B., Homburg, P., Tanenbaum, A.S., Proc. 6th European Dependable Computing Conf. (EDCC '06), pp. 3--12, Coimbra, Portugal, Oct. 2006.
* [https://www.minix3.org/docs/jorrit-herder/acsac06.pdf Reorganizing UNIX for Reliability], Herder, J.N., Bos, H., Gras, B., Homburg, P., Tanenbaum, A.S., Proc. 11th Asia-Pacific Computer Systems Architecture Conf. (ACSAC '06), pp. 81--94, Shanghai, China, Sep. 2006.
* [https://www.minix3.org/docs/jorrit-herder/asci06.pdf The Architecture of a Fault-Resilient Operating System], Herder, J. N., Bos, H., Gras, B., Homburg, P., and Tanenbaum, A. S., Proc. 12th ASCI Conf. (ASCI '06), pp. 74--81, Lommel, Belgium, June 2006.

=== Workshop ===
* [https://www.minix3.org/docs/workshop/sfma-2014.pdf Scheduling of Multiserver System Components on Over-provisioned Multicore Systems], Hruby, T., Bos, H., and Tanenbaum, A.S., Proc. Fourth Workshop on Systems for Future Multicore Architectures (SFMA '14), Amsterdam, April 2014.
* [https://www.minix3.org/docs/workshop/hotdep-2013.pdf Techniques for Efficient In-memory Checkpointing], Vogt, D., Giuffrida, C., Bos, H., and Tanenbaum, A.S., Proc. of the Ninth Workshop on Hot Topics in System Dependability (HotDep '13), Art. 12, Farmington, PA., Nov. 2013.
* [https://www.minix3.org/docs/workshop/sfma-2013.pdf Heterogeneous Multicores: When Slower is Faster], Hruby, T., Bos, H., and Tanenbaum, A.S., Proc. Third Workshop on Systems for Future Multicore Architectures (SFMA '13), Prague, April 2013.
* [https://www.minix3.org/docs/workshop/hotswup-2012.pdf Safe and Automated State Transfer for Secure and Reliable Update], Giuffrida, C. and Tanenbaum, A.S., Proc. Fourth Int'l Workshop on Hot Topics in Software Upgrades (HotSWUp'12), Zurich, June 2012.
* [https://www.minix3.org/docs/loris/HotDep2011.pdf Integrated End-to-End Dependability in the Loris Storage Stack], Moolenbroek, D.C. van, Appuswamy, R., and Tanenbaum, A.S., Proc. Seventh Workshop on Hot Topics in System Dependability (HotDep'11), pp. 165--170, Hong Kong, China, June 2011.
* [https://www.cs.vu.nl/~giuffrida/papers/hotdep-2010.pdf We Crashed, Now What?], Giuffrida, C., Cavallaro, L., and Tanenbaum, A.S., Proc. Sixth Workshop on Hot Topics in System Dependability (HotDep '10), pp. 1--8, Vancouver, BC, Canada, Oct. 2010.
* [https://www.minix3.org/docs/loris/HotStorage2010.pdf Block-level RAID is dead], Appuswamy, R., Moolenbroek, D.C. van, and Tanenbaum, A.S., Proc. Second Workshop on Hot Topics in Storage and File Systems (HotStorage '10), Boston, June 2010.
* [https://www.cs.vu.nl/~giuffrida/papers/hotswup-2009.pdf Cooperative Update: a New Model for Dependable Live Update], Giuffrida, C., and Tanenbaum, A.S., Proc. Second Int'l Workshop on Hot Topics in Software Upgrades (HotSWUp'10), pp. 1--6, Orlando, FL, Oct. 2009.
* [https://www.minix3.org/docs/jorrit-herder/eurosys-aw06-talk.pdf Reincarnation of Dead Device Drivers], Herder, J.N., Proc. First EuroSys Authoring Workshop, Leuven, Belgium, April 2006.
* [https://www.minix3.org/docs/jorrit-herder/eurosys-dw05-talk.pdf Design and Implementation of a Reliable Operating System], Herder, J.N. Proc. First EuroSys Doctoral Workshop, Brighton, England, Oct. 2005.

=== Journal ===

* [https://www.springerlink.com/openurl.asp?genre=article&amp;id=doi:10.1007/s11241-009-9086-5 Enhancing a Dependable Multiserver Operating System with Temporal Protection via Resource Reservations], Mancina, A., Herder, J.N., Gras, B., Tanenbaum, A.S., and Lipari, G., Real-Time Systems Journal, vol. 43, no. 2, pp. 177--210, Oct. 2009.
* [https://csdl2.computer.org/persagen/DLAbsToc.jsp?resourcePath=/dl/mags/co/&amp;toc=comp/mags/co/2006/05/r5toc.xml&amp;DOI=10.1109/MC.2006.156 Can We Make Operating Systems Reliable and Secure?], Tanenbaum, A.S., Herder, J.N., and Bos, H., Tanenbaum, A.S., Herder, J.N., and Bos, H., IEEE Computer, vol. 39, no. 5, pp. 44--51, May 2006 (Cover Feature).

=== Magazine ===

* [https://www.minix3.org/docs/login-2010.pdf MINIX 3: Status Report and Current Research], Tanenbaum, A.S., Appuswamy, R., Bos, H., Cavallaro, L., Giuffrida, C., Herder, J., Hruby, T., Kouwe, E. van der, and Moolenbroek, D. van, USENIX ;login:, vol. 35, no. 3, pp. 7--13, June 2010.
* [https://www.minix3.org/docs/login-2007.pdf Roadmap to a Failure-Resilient Operating System], Herder, J.N., Bos, H., Gras, B., Homburg, P., and Tanenbaum, A.S., USENIX ;login:, vol. 32, no. 1, pp. 14--20, Feb. 2007.
* [https://www.minix3.org/docs/jorrit-herder/osr-jul06.pdf MINIX 3: A Highly Reliable, Self-Repairing Operating System], Herder, J.N., Bos, H., Gras, B., Homburg, P, and Tanenbaum, A.S., ACM SIGOPS Operating Systems Review, vol. 40, pp. 80--89, July 2006.
* [https://www.minix3.org/docs/login-2006.pdf Modular System Programming in MINIX 3], Herder, J.N., Bos, H., Gras, B., Homburg, P, and Tanenbaum, A.S., USENIX ;login:, vol. 31, no. 2, pp. 19--28, April 2006.

== Ph.D. theses ==
* [https://www.minix3.org/theses/Raja_Appuswamy_PhD_thesis.pdf Building a File-Based Storage Stack: Modularity and Flexibility in Loris] (Raja Appuswamy's Ph.D. thesis, 2014)
* [https://www.minix3.org/theses/Cristiano_Giuffrida_PhD_thesis.pdf Safe and Automatic Live Update] (Cristiano Giuffrida’s Ph.D. thesis, 2014) 
* [https://www.minix3.org/theses/herder_phd_thesis.pdf Building a Dependable Operating System] (Jorrit Herder's Ph.D. thesis, 2010)
* [https://hdl.handle.net/10289/2607 Block-Based Distributed File Systems] (Tony McGregor, DPhil thesis, 1997)

== Master's theses ==
* [https://www.minix3.org/theses/Calin_Iorgulescu_Master_Thesis.pdf Safe and Automatic Live Update for Unix Applications] (Calin Iorgulescu's master's thesis, 2013)
* [https://www.minix3.org/theses/priescu_thesis_2012.pdf Efficient Use of Heterogeneous Multicore Architectures in Reliable Multiserver Systems] (Valentin Gabriel Priescu's master's thesis, 2012)
* [https://www.minix3.org/theses/kuijsten-polymorphic-os.pdf Polymorphic Operating Systems] (Anton Kuijsten's master's thesis, 2012)
* [https://www.minix3.org/docs/Implementing.MINIX.On.The.Single.Chip.Cloud.Computer.pdf Implementing Minix on the Single Chip Cloud Computer] (Niek Linnenbank's master's thesis, 2011)
* [https://www.minix3.org/theses/kouwe-qemu.pdf Porting the QEMU Virtualization Software to MINIX 3] (Erik van der Kouwe's master's thesis, 2009, [https://www.few.vu.nl/~vdkouwe/doc/msc-thesis-cs-presentation-erik-van-der-kouwe.pdf slides] also available)
* [https://www.minix3.org/theses/veerman-dynamic-updates.pdf Dynamic Updates and Failure Resistance for the Minix File Server] (Thomas Veerman's master's thesis, 2009)
* [https://www.minix3.org/theses/moolenbroek-multimedia-support.pdf Multimedia Support for MINIX 3] (David van Moolenbroek's master's thesis, 2007)
* [https://www.minix3.org/theses/gerofi-minix-vfs.pdf Design and Implementation of the MINIX Virtual File System] (Balazs Gerofi's master's thesis, 2006)
* [https://www.minix3.org/theses/alting-powerpc-port.pdf A Port of the MINIX OS to the PowerPC Platform] (Ingmar Alting's master's thesis, 2006)
* [https://www.minix3.org/theses/meurs-profiling-tools.pdf Building Performance Measurement Tools for the MINIX 3 Operating System] (Rogier Meurs' master's thesis, 2006)
* [https://www.minix3.org/theses/herder-true-microkernel.pdf Towards a True Microkernel Operating System] (Jorrit Herder's master's thesis, 2005)
== Bachelor's theses ==
* [https://www.minix3.org/theses/ahmad-cc-performance.pdf MINIX 3 C Compiler Performance] (Feisal S. Ahmad's bachelor's thesis, 2008) ([https://www.minix3.org/theses/ahmad-cc-performance_appendix.pdf appendix])
* [https://www.minix3.org/theses/smit-finding-hot-spots.pdf Finding hot spots in MINIX 3] (Jens de Smit's bachelor's thesis, 2008)

== Other publications ==
* [https://www.minix3.org/theses/kelly-xen.pdf Porting MINIX to Xen] (Ivan Kelly's course project, 2006) ([https://wiki.bleurgh.com/MinixOnXen project wiki])
* [https://www.minix3.org/theses/linnenbank-ipa.pdf Implementing the Intel Pro/1000 on MINIX 3] (Niek Linnenbank's project, 2009)
* [https://www.minix3.org/docs/scheduling/report.pdf User Mode Scheduling in MINIX 3] (Björn Patrick Swift's project, 2010) 
* [https://www.minix3.org/docs/szekeres-iommu.pdf IOMMU driver for MINIX 3] (Adriana Szekeres' project, 2011)</text>
      <sha1>nw2bty56cl8t75xllxrhfqmsmg1lbse</sha1>
    </revision>
  </page>
  <page>
    <title>Reporting Bugs</title>
    <ns>0</ns>
    <id>28</id>
    <revision>
      <id>37</id>
      <timestamp>2021-08-27T08:58:39Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Import reportingbugs</comment>
      <origin>37</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="389" sha1="ibipzhic1539w98kcali53mscj0due7" xml:space="preserve">This page describes the process of reporting a bug. 

== How to report ==

If you've found a bug,
please open an issue at https://github.com/Stichting-MINIX-Research-Foundation/minix/issues.

The bug will have a bigger chance of being solved (faster) if
# you provide a good description;
# even better, you provide a good (minimal) way to reproduce it
# even better, you provide a solution</text>
      <sha1>ibipzhic1539w98kcali53mscj0due7</sha1>
    </revision>
  </page>
  <page>
    <title>Resources</title>
    <ns>0</ns>
    <id>29</id>
    <revision>
      <id>38</id>
      <timestamp>2021-08-27T09:01:33Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import resources</comment>
      <origin>38</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2337" sha1="koiwict4zmsthfud3f9flpej11pneax" xml:space="preserve">This page lists various MINIX resources.

== Official MINIX 3 Resources ==

* [https://www.minix3.org MINIX 3 website]
* [https://groups.google.com/group/minix3 MINIX 3 google group]
* [https://groups.google.com/group/minix-dev MINIX 3 development google group]
* [https://github.com/Stichting-MINIX-Research-Foundation/minix MINIX 3 on GitHub, including source code mirror, issues (our bug tracker) and pull requests]
* [irc://irc.libera.chat/minix MINIX 3 general chat IRC: #minix on Libera Chat] ([https://web.libera.chat/#minix Webchat interface to Libera Chat])
* [irc://irc.libera.chat/minix-support MINIX 3 support IRC: #minix-support on Libera.Chat] ([https://web.libera.chat/#minix-support Webchat interface to Libera.Chat])
* [irc://irc.libera.chat/minix-dev MINIX 3 development IRC: #minix-dev on Libera.Chat] ([https://web.libera.chat/#minix-dev Webchat interface to Libera Chat])
* [https://git.minix3.org/?p=minix.git MINIX 3 git repository]
* [https://www.minix3.org/news MINIX 3 news]
* [https://twitter.com/minix3 MINIX 3 twitter]
* This wiki!

== pkgsrc Resources ==
* [https://www.pkgsrc.org/ pkgsrc Home]
* [https://www.netbsd.org/docs/pkgsrc/ The pkgsrc guide]
* [irc://irc.libera.chat/pkgsrc #pkgsrc IRC channel on Libera.Chat] ([https://web.libera.chat/#pkgsrc Webchat interface to Libera Chat])

== Other MINIX 3 Resources ==

* [https://users.sosdg.org/~qiyong/mxr/source/ MINIX 3 source code browser (LXR - contributed by qiyong)]
* [https://en.wikipedia.org/wiki/MINIX_3 MINIX 3 on Wikipedia]
* [https://www.osnews.com/story/15960/Introduction-to-MINIX-3 "An introduction to MINIX 3" by Andrew Tanenbaum]
* [https://www.freesoftwaremagazine.com/articles/minix  An interview with Andrew Tanenbaum about MINIX 3]
* [https://www.minix3.ru/articles/Tanenbaum_interview_en.html  An interview with Andrew Tanenbaum for Russian MINIX 3 community]
* [https://www.minix3.ru www.minix3.ru - The unofficial Russian MINIX 3 website]

== MINIX 2 Resources ==

* [https://groups.google.com/group/comp.os.minix Comp.os.minix archive (no longer used)]
* [https://minix1.woodhull.com/ MINIX 2 support site maintained by Albert Woodhull]
* [https://www.os-forum.com/minix/net/ MINIX Network Service Documentation]
* [https://www.os-forum.com/minix/boot/ MINIX Boot Monitor Documentation]
* [https://www.minix-vmd.org/ Minix-vmd]</text>
      <sha1>koiwict4zmsthfud3f9flpej11pneax</sha1>
    </revision>
  </page>
  <page>
    <title>Roadmap</title>
    <ns>0</ns>
    <id>30</id>
    <revision>
      <id>315</id>
      <parentid>39</parentid>
      <timestamp>2021-09-11T12:46:21Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>/* LONG-TERM PROJECTS */ fix link</comment>
      <origin>315</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2454" sha1="lznhc081ncz63gotwzer2k5100xva7k" xml:space="preserve">&lt;div round info&gt;
'''Stale page'''

This page is not being actively maintained.
&lt;/div&gt;

Here is the (tentative) MINIX 3 roadmap. It shows the things people are working on or we would like people to be working on. The projects are divided into three rough categories. Near-term projects are well under way and should be completed within a matter of months. Medium-term projects are just getting started and might take longer or shouldn't take that long once a volunteer is found. Long-term projects will take at least 6 months, probably more, before being finished.

An asterisk (*) after a feature name means that somebody is currently working on it. If you want to take on an unassigned project, first post to query to the [https://groups.google.com/group/minix3|Google newsgroup] to see if anyone else is interesting in working with you.

If there are projects not on this list that you would like done, please add them to the [Wishlist]. Even better, would be to do the project yourself and then announce it.

== NEAR-TERM PROJECTS ==

* System - GUI: Implementing X.org (porting modular X) [[Wishlist#Xorg]] (*)
* Adding support for many more video cards (*)
* Development: Enhancing the modularity/dependability (ex: isolation profiles, component restart)
* Development: Fixing usability
* Development: Enhancing documentation (including this wiki)

== MEDIUM-TERM PROJECTS ==

* Runtime: Implementing a multicore kernel (*)
* Runtime: Implementing a [[Tickless Kernel|tickless kernel]]
* Runtime: Implementing Kernel threads
* Development: Implementing performance monitoring (do tools)
* Development: Implementing bandwidth usage monitoring for real-time applications
* Development: Implementing stress testing
* Portability: Porting MINIX 3 to other embedded systems. ex: PowerPC
* Portability: Porting MINIX 3 to lowcost computer. ex: One Laptop Per Child (OLPC)

== LONG-TERM PROJECTS ==

* Runtime: [[GSOC 2011|FUSE file system]] (*)
* Runtime: FAT-16 file system
* Runtime: Kaffe
* Front office: Firefox

== TO BE PLANNED ==
* Put u-boot on our git repository (we changed the default configuration)
* Add some form of version management for u-boot (sha1sum based?)

=== Developer satisfaction ===
* test setup
* Run a selected amount of test on the emulator and bare hardware
* Write more tests
* ARM: Fixing tests
* ARM: go over skipped tests on ARM again

=== Maintenance ===
* publish sd-images and iso's on website for every  master build.</text>
      <sha1>lznhc081ncz63gotwzer2k5100xva7k</sha1>
    </revision>
  </page>
  <page>
    <title>Testing pkgsrc</title>
    <ns>0</ns>
    <id>31</id>
    <revision>
      <id>42</id>
      <timestamp>2021-08-27T09:20:46Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import testingpkgsrc</comment>
      <origin>42</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6845" sha1="7dm1gi9va35lk0muaia1kif5a13bvau" xml:space="preserve">&lt;div round info&gt;
This document was written in 2011 and is now just for reference. It will not be updated. The TODO is outdated, but do not change it, this would not help. See the [[Minix User's Guide|user guide]] to use pkgsrc, and the [[Minix Developer's Guide|developer's guide]] if you want to play with the various facets of pkgsrc and its content.
&lt;/div&gt;

== Testing pkgsrc on Minix ==

=== About this page ===
This page describes how to build packages with pkgsrc. It is intended for people who would like to help port packages and develop pkgsrc further. If you just want to install binary packages, you should read [[Installing Binary Packages]]. While this page also describes basic usage, more information can be found at [https://www.netbsd.org/docs/pkgsrc|pkgsrc guide].

=== Prerequisites ===
==== Regular way ====
You need a minix system installed with a post-pkgsrc .iso (a 3.1.8 development version), see [https://www.minix3.org/download/ the download page]. This comes with pkgsrc support in the base system, and pkgin (the binary package manager) pre-installed. This is necessary to bootstrap pkgsrc functionality (e.g. building packages).

pkgsrc is self-hosting, i.e. you should need no packages from packman in order to compile or install pkgsrc packages. Instructions for checking out and building Minix trunk can be found on the [[Tracking Current|tracking current]] wiki page.

==== Bootstrapping binary packages after source-upgrading older systems ====
If you have source-upgraded, i.e. have pkg_add, etc., installed, you can bootstrap your system to install binary packages by installing pkgin as a binary like so:

&lt;pre&gt;
# pkg_add ftp:''ftp.minix3.org/pub/minix/packages/3.1.9/i386/All/pkgin-0.3.3.1nb1.tgz
&lt;/pre&gt;
=== Setting up pkgsrc on Minix ===
This section is about the /usr/pkgsrc source tree, needed if you want to compile or contribute packages, or patches. If you just want binary packages, see later sections.

Required for this step: git. Install it with

&lt;pre&gt;
# pkgin in scmgit-base
&lt;/pre&gt;
To set up the pkgsrc tree:

&lt;pre&gt;
# cd /usr
# make pkgsrc-create
&lt;/pre&gt;
Note: this takes more than 400Mb of hard disk space (as of January 7th, 2011)

To update the pkgsrc tree in the future:

&lt;pre&gt;
# cd /usr
# make pkgsrc-update
&lt;/pre&gt;
=== Compiling a package ===
All pkgsrc operations should be done with bmake.

To build a package (misc/figlet in this example) you need to cd to that directory and do a make install

&lt;pre&gt;
# cd /usr/pkgsrc/misc/figlet
# bmake install
&lt;/pre&gt;
This installs figlet in /usr/pkg

=== Working with binary packages ===
==== pkgin ====
This is the recommended binary package UI. See [[Installing Binary Packages]] for more info.

Newer 3.1.8 cdrom images include pkgin pre-installed. Do a 'pkgin up' (for update) to get started.

==== pkgsrc binary installing interface ====
There is a small number of binary packages that have been uploaded and can be installed with the rudimentary pkgsrc interface. From a package dir, type 'make bin-install,' like so:

&lt;pre&gt;
# cd /usr/pkgsrc/misc/figlet
# bmake bin-install
===&gt; Binary install for figlet-2.2.2nb1
=&gt; Installing figlet-2.2.2nb1 from /usr/pkgsrc/packages/All;ftp:''ftp.minix3.org/pub/minix/packages/3.1.8/i386/All
figlet-2.2.2nb1: rebuilding run-time library search paths database
figlet-2.2.2nb1 successfully installed.
&lt;/pre&gt;
To see which binary packages are available, see [ftp://ftp.minix3.org/pub/minix/packages/3.1.8/i386/ the Minix binary package repository for 3.1.8/i386].

=== Packages that currently compile on Minix ===

Over 150 packages currently compile on Minix.  The most complete and up to date list can be found in [https://git.minix3.org/?p=pkgsrc.git;a=blob;f=minix/limited_list.pbulk;hb=refs/heads/minix-master /usr/pkgsrc/minix/limited_list.pbulk].

=== Porting other packages ===
Quite a few packages that compile on Minix do not build within pkgsrc as Minix specific patches are missing. We will use devel/ncurses as an example to illustrate the process of creating patches in pkgsrc format

We need to first install pkgdiff which contains the tools required to make patches in pkgsrc format.

'''Note 1:''' devel/ncurses has already been worked on.

'''Note 2:''' Compiling pkgdiff, will compile perl and gzip as dependencies, If you want to avoid this, install perl and gzip from packman

&lt;pre&gt;
# cd pkgtools/pkgdiff
# bmake install
&lt;/pre&gt;
Now extract and apply existing patches to the source

&lt;pre&gt;
# cd /usr/pkgsrc/devel/ncurses
# bmake patch
&lt;/pre&gt;
Packages are extracted and built by default in /usr/tmp/work.

&lt;pre&gt;
# cd /usr/pkgsrc/work/devel/ncurses/work
# ls
...
ncurses-5.7
...
&lt;/pre&gt;
Here you will find the extracted and patched version of ncurses. Now apply any minix specfic changes to the source code. Minix specific changes for several packages can be found in the [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=/trunk/bigports/ bigports] repository.

&lt;!&gt; '''Before changing a file, backup the original version with an added .orig suffix. If you use pkgvi (part of  pkgdiff) to edit the file, this gets done automatically. If you don't backup with the right suffix, mkpatches  below doesn't work.''' &lt;!&gt;

You can build the source in the work directory by typing 'make minix'. Repeat until it builds and works.

Now build the package

&lt;pre&gt;
# cd /usr/pkgsrc/devel/ncurses
# bmake
&lt;/pre&gt;
Since packages found in pkgsrc are generally newer than the ones in bigports, you might need to make a few more changes.

Once the package builds successfully, it's time to make patches:

&lt;pre&gt;
# cd /usr/pkgsrc/devel/ncurses
# mkpatches -d patches
# rm patches/*.orig
# bmake mdi
&lt;/pre&gt;
the new patches are now installed in /usr/pkgsrc/devel/ncurses/patches. See man mkpatches for details. It is a good idea to manually inspect them.

bmake mdi updates the distinfo file. If you don't run make mdi the command "make" doesn't recognize the new patches.

'''Note''': pkgsrc modifies gnu configure scripts and makefiles. So when you do mkpatches, it  is likely that the created patches have these changes, these need to be removed.

Make sure everything works fine with the new set of patches:

&lt;pre&gt;
# bmake clean
# bmake
&lt;/pre&gt;
=== Submitting changes and reporting bugs ===
Currently you just mail them to me: gautam (at) minix3 (dot) org.

== Pkgsrc TODO items ==
=== Packages we have from pkgsrc but that need to pass testsuites too ===
* Gcc
* Binutils
* Git
* Subversion

=== Packages we need but don't have yet ===
* clang+llvm
* python
* zsh
* nvi
* wget
* GNU coreutils
* emacs
* e2fsprogs
* OSS

== Volunteer Pkgsrc ==

A secondary pkgsrc repository has been created to allow volunteers to contribute to pkgsrc directly. It is currently experimental as its relationship to the primary pkgsrc repository has yet to be determined.

To read more, please see [[Volunteer pkgsrc]].</text>
      <sha1>7dm1gi9va35lk0muaia1kif5a13bvau</sha1>
    </revision>
  </page>
  <page>
    <title>Tickless Kernel</title>
    <ns>0</ns>
    <id>32</id>
    <revision>
      <id>43</id>
      <timestamp>2021-08-27T09:21:31Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import tickless</comment>
      <origin>43</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="746" sha1="njvtogep67muqllvwao04xyha324f3z" xml:space="preserve">Traditionally, the MINIX kernel and other kernel used a periodic timer for each CPU. This scheme suffers from several issues including being periodic at a fixed rate, doing a lot of things during each interrupt, polluting the callout data structures with a lot of unnecessary callouts which either do not fire or get rearmed frequently. Making the kernel tickless has several advantages, the most prominent being more efficient CPU usage because of less clock cycles being wasted in servicing periodic timer interrupts even when there is no callout to expire at that instant. Consequently, the processor can stay quiescent for longer durations and only be woken up if there is an actual timer to be expired, resulting in lesser power consumption.</text>
      <sha1>njvtogep67muqllvwao04xyha324f3z</sha1>
    </revision>
  </page>
  <page>
    <title>Volunteer pkgsrc</title>
    <ns>0</ns>
    <id>33</id>
    <revision>
      <id>391</id>
      <parentid>44</parentid>
      <timestamp>2022-02-07T14:19:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>391</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4112" sha1="cbbxkddmm32nm2jbyisbok9zn1towoz" xml:space="preserve">== About ==

A secondary pkgsrc repository has been created on [https://github.com/pikpik/minix-pkgsrc GitHub] to allow volunteers to contribute to pkgsrc directly. It is currently experimental as its relationship to the primary pkgsrc repository has yet to be determined.

== Care to Contribute? ==

'''1.''' [[Testing pkgsrc|Orient yourself]] with pkgsrc

'''2.''' [https://github.com/ Create an account] and [http://help.github.com/set-up-git-redirect add SSH keys at GitHub]

'''3.''' [https://help.github.com/fork-a-repo/ Fork] the [https://github.com/pikpik/minix-pkgsrc/ minix-pkgsrc repository from pikpik's] to your own repository on GitHub

This saves your time and network bandwidth by downloading the repository only once.

'''4.''' Download your pkgsrc repository

First, download the official pkgsrc.

&lt;pre&gt;
$ cd /usr

$ make pkgsrc-create
&lt;/pre&gt;

Then, add your repository as a remote repository.

&lt;pre&gt;
$ cd /usr/pkgsrc

$ git remote add unofficial git://github.com/you/minix-pkgsrc.git

$ git fetch unofficial

$ git branch unofficial-minix-master unofficial/minix-master
&lt;/pre&gt;

&lt;!&gt; Note: If you use ''%%https:''%%'' in place of ''%%git:''%%'' and have an SSL-related problem when you fetch, then please use the following steps to install SSL certificates.

&lt;pre&gt;
$ cd /usr/pkgsrc/security/mozilla-rootcerts

$ bmake install

$ cd /usr/pkg/etc/openssl/certs

$ mozilla-rootcerts extract

$ mozilla-rootcerts rehash
&lt;/pre&gt;

'''5.''' Check-out the minix-master branch locally

&lt;pre&gt;
$ git checkout unofficial-minix-master
&lt;/pre&gt;

'''6.''' Create a new branch from it to host your work

&lt;pre&gt;
$ git branch my-package-branch

$ git checkout my-package-branch
&lt;/pre&gt;

'''7.''' Push this branch to your remote repository

&lt;pre&gt;
$ git push unofficial my-package-branch
&lt;/pre&gt;

This will create the reference work for others to test and later include in the volunteer pkgsrc.


'''8.''' Hack locally, commit, test, pkglint, etc.

Instructions for building packages can be found on the [[Testing pkgsrc]] page.

'''9.''' Push up the ongoing work for other people to test it

&lt;pre&gt;
$ git push unofficial my-package-branch
&lt;/pre&gt;

'''10.''' Let people on the mailing list know about it

Please include in your message the name of the branch and the public address to your repository.


'''11.''' Periodically merge changes from minix-master into your branch

&lt;pre&gt;
$ git pull unofficial-minix-master

$ git checkout my-package-branch

$ git merge unofficial-minix-master
&lt;/pre&gt;

This eases later work, and also will grab the good work done elsewhere on the dependencies. ;-)


'''12.''' Continue testing and pushing your local branch up to your repository

'''13.''' When your branch is ready, open an issue on [https://github.com/pikpik/minix-pkgsrc/issues the issue tracker of the volunteer pkgsrc]

&lt;pre&gt;
Title: Ready for testing: my-package-port by [you]

Hi,

I've ported [package], and my branch "my-package-branch" is ready for testing at: https://github.com/[you]/minix-pkgsrc.git

Thanks
&lt;/pre&gt;

When the committee agrees with the current state of the package as published in your GitHub repository, they will copy the branch into the volunteer pkgsrc repository and prepare it for inclusion into the official pkgsrc.


== Maintaining Branches ==

As upstream changes from the official pkgsrc repository become available, updating your repository allows your changes to merge cleanly in the future.

'''1.''' Update the official branch

&lt;pre&gt;
$ git checkout minix-master

$ cd /usr

$ make pkgsrc-update
&lt;/pre&gt;

'''2.''' Make your unofficial branch identical to the official one

&lt;pre&gt;
$ cd /usr/pkgsrc

$ git checkout unofficial-minix-master

$ git rebase minix-master
&lt;/pre&gt;

'''3.''' Merge changes from either the official or unofficial branch into your own

&lt;pre&gt;
$ git checkout my-package-port

$ git merge unofficial-minix-master
&lt;/pre&gt;

== Volunteer Pkgsrc Committee ==

To be added as a collaborator/contributor:

# Create a [https://github.com/ Github] account.
# Create a new issue requesting commit access.

Issue Tracker: https://github.com/pikpik/minix-pkgsrc/issues

More to come...</text>
      <sha1>cbbxkddmm32nm2jbyisbok9zn1towoz</sha1>
    </revision>
  </page>
  <page>
    <title>Assembly Language Programming</title>
    <ns>0</ns>
    <id>34</id>
    <revision>
      <id>418</id>
      <parentid>45</parentid>
      <timestamp>2022-02-08T17:54:54Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Learning Assembly Language */ Fix links</comment>
      <origin>418</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1146" sha1="ca4z63s772j325z1gz9nk39kux5fdif" xml:space="preserve">Assembly can be a frightening experience, even for well-seasoned C coders.  These resources are here to be of use to anyone wanting to work with assembly in Minix.

=== Learning Assembly Language ===
Main Page: [[Learning Assembly Language]]

These are resources to aid users in learning assembler as it relates to Minix.  Note: the prerequisite for this is knowing C.  If you do not already know C, you'll save yourself many headaches by doing this first.

* '''Use the compiler''' - Write a simple C program that demonstrates what you want to do, then translate it to assembly with:''$ cc -S myprogram.c''
* '''Dr. Paul Carter’s Assembly Tutorial''' - http://drpaulcarter.com/pcasm/
* Intel 64 and IA-32 Architectures Software Developer’s Manuals - https://www.intel.com/products/processor/manuals/
* Other Resources (see [[Learning Assembly Language]])

=== Examples ===
These are just some examples of assembly for Minix.

* '''Use the compiler''' - Write a simple C program that demonstrates what you want to do, then translate it to assembly with:''$ cc -S myprogram.c''
* Appendix B from OSDI - http://www.minix3.org/doc/AppendixB.html</text>
      <sha1>ca4z63s772j325z1gz9nk39kux5fdif</sha1>
    </revision>
  </page>
  <page>
    <title>BeagleBone</title>
    <ns>0</ns>
    <id>35</id>
    <revision>
      <id>46</id>
      <timestamp>2021-08-27T09:38:43Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import bbcapes</comment>
      <origin>46</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3343" sha1="2zrxwyktv86b47ikopa2bschvunwl2a" xml:space="preserve">This guide walks you through the steps of developing support for a new BeagleBone Capes (expansion board). The current version of this guide documents the features used in git commit '''60a61df''' and later. If you update this document because of changes to MINIX 3, please mention the commit ID of the change in the wiki comment.


== Overview ==

Supporting new capes in Minix is fairly straight forward. One simply needs to develop drivers for the devices on the cape, determine the name of the cape stored on the cape's EEPROM, drop a start-up script into ''/usr/src/etc/rc.capes/'', and let the build system know about the new file.

== Determining the Cape Name ==

Each proper cape has an EEPROM on-board connected to the 3rd I2C bus with slave address 0x54, 0x55, 0x56, or 0x57. The address should be configurable via DIP switches or jumpers. The EEPROM has a lot of information on it about the cape (part number, manufacturer, serial number, pinmux, power usage, and more). The ''/usr/etc/rc'' script uses the name of the cape from the EEPROM to call the right script in ''/etc/rc.capes/'' to load the drivers and do any other configuration for the cape. Therefore, you need to know the name of the cape exactly as it is stored in the EEPROM. You can find this information in the documentation for the board, from [https://beaglebonecapes.com/ BeagleBoneCapes.com], or by reading the name off of the chip.

The following command will print the name of the board with any trailing periods removed.
&lt;pre&gt;
eepromread -i -f /dev/i2c-3 -a 0x54 | \
  sed -n 's/^PART_NUMBER     : \(.*\)$/\1/p' | \
  sed -e 's/\.*$''g'
&lt;/pre&gt;

== Creating the rc Script ==

Once you know the name of the cape, you will need to create a script which will be installed into ''/etc/rc.capes/''. The script will have the same name as the cape and should do start-up tasks like create device files, start drivers, and start any other programs needed by the cape.

Here's an example rc script for the weather cape. ''/usr/src/etc/rc.capes/BB-BONE-WTHR-01''
&lt;pre&gt;
#!/bin/sh
#
# Start-up script for the BeagleBone Weather cape.

# TSL2550 Ambient Light Sensor
test -e /dev/tsl2550b3s39 | (cd /dev &amp;&amp; MAKEDEV tsl2550b3s39)
/bin/service up /usr/sbin/tsl2550 -dev /dev/tsl2550b3s39 \
	-label tsl2550.3.39 -args 'bus=3 address=0x39' &amp;&amp; echo -n " tsl2550"

# SHT21 Temperature and Humidity Sensor
test -e /dev/sht21b3s40 | (cd /dev &amp;&amp; MAKEDEV sht21b3s40)
/bin/service up /usr/sbin/sht21 -dev /dev/sht21b3s40 \
	-label sht21.3.40 -args 'bus=3 address=0x40' &amp;&amp; echo -n " sht21"

# BMP085 Temperature and Pressure Sensor
test -e /dev/bmp085b3s77 | (cd /dev &amp;&amp; MAKEDEV bmp085b3s77)
/bin/service up /usr/sbin/bmp085 -dev /dev/bmp085b3s77 \
	-label bmp085.3.77 -args 'bus=3 address=0x77' &amp;&amp; echo -n " bmp085"

daemonize tcpd http /usr/share/beaglebone/weather/weatherstation.lua
&lt;/pre&gt;

== Adding the rc script to md.evbarm ==

The build system keeps a list of installed files. You need to tell the build system about any new files you wish to install. This is done by adding a line to ''distrib/sets/lists/minix/md.evbarm''. You don't need to change any Makefiles to install the rc script as anything in ''/usr/src/etc/rc.capes/'' will be installed automatically.

''/usr/src/distrib/sets/lists/minix/md.evbarm'':
&lt;pre&gt;
./etc/rc.capes/BB-BONE-WTHR-01         minix-sys
&lt;/pre&gt;</text>
      <sha1>2zrxwyktv86b47ikopa2bschvunwl2a</sha1>
    </revision>
  </page>
  <page>
    <title>Minix and pkgsrc</title>
    <ns>0</ns>
    <id>36</id>
    <revision>
      <id>85</id>
      <parentid>47</parentid>
      <timestamp>2021-08-27T14:38:45Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* TODO */ typo</comment>
      <origin>85</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5739" sha1="qj727tylc1a7xzgdjliba2pypwvdu5q" xml:space="preserve">pkgsrc has an advanced system to build each package in isolation of the world except for its stated dependencies. This is a good thing and helps package maintenance tremendously. It makes bulk building a little harder. In keeping with its philosophy, the new style (pbulk style building) requires bootstrapping a new pkgsrc instance (i.e. new prefix that is normally /usr/pkg), e.g. /usr/pbulk. The bulk build process needs to work in /usr/pkg, but that's where your currently installed packages live. So we backup the old tools from /usr/pkg and then restore them after. There are a few other things that need to happen, so we created a script to automate the process.

For more info on pbulk style bulk builds, see the following resources:
* [https://www.netbsd.org/docs/pkgsrc/bulk.html#bulk.pbulk pbulk section in the pkgsrc guide]
* [https://www.dragonflybsd.org/docs/developer/PbulkBuilding/ DragonFlyBSD pBulk Building Guide]
* [https://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/doc/HOWTO-pbulk?rev=1.7&amp;content-type=text/x-cvsweb-markup&amp;only_with_tag=MAIN pbulk HOWTO]

== pbulk.sh ==

As for the minix specifics, there are a few steps that involve some variables that shouldn't be made up on the spot all the time, so there is a script in pkgsrc that takes care of this for Minix. The script is /usr/pkgsrc/minix/pbulk.sh It executes the build in several phases detailed below. Through the use of command line options, you can run any phase individually with the ''--phase-name'' argument or run them all with the ''--all'' argument.
* ''fetch'' - runs ''bmake fetch'' for every package in limited_list.pbulk.
* ''bootstrap'' - a new pkgsrc instance is bootstraped into /usr/pbulk using /usr/pkgsrc/bootstrap/bootstrap
* ''backup'' - as mentioned above, the bulk build process will clobber your current package source installation if you aren't careful. This phase backs up your /usr/pkg directory as well as your package database.
* ''bin-kit'' - bootstraps a binary kit used by pbulk.
* ''build'' - executes the bulk build.
* ''restore'' - restores system's original /usr/pkg and the package database.
* ''all'' - executes all of the above steps in order (except fetch).

== Configuration ==

We are going to run the pbulk process ''in a minix chroot jail.'' This has a few advantages:
* Sterile, reproducible environment of building
* Easy to automatically make an up-to-date userland (except for the image of course) to test compiling in
* The pbulk process wipes out /usr/pkg, which is tricky to keep a live machine working on (sshd etc.), but in a jail that's no problem.

This needs quite a lot of disk space though. At least 3GB extra for the jail currently.

== Bulk Build In Jail ==

Assuming pkgsrc is created in /usr/pkgsrc:
&lt;pre&gt;
# cd /usr/pkgsrc/minix/
# sh pbulk-jail.sh -A
&lt;/pre&gt;

This will invoke /usr/src/tools/release.sh, use git to checkout the latest version of the minix tree, build it in a jail
hierarchy at /usr/pbulk-jail, copy the host pkgsrc tree there to re-use its objects, and retrieve the latest pkgsrc tree from the pkgsrc repository, and invoke pbulk.sh --all in the chrooted jail.

When the script finishes, you'll have some packages in /usr/pkgsrc/packages/ in the jail. Note, the bootstrapping and binary kit creation takes a while. To do a bulk build of just the misc/figlet package from scratch takes over an hour.

== Running the above on a separate filesystem ==

The pbulk-jail script will mkfs and mount a new filesystem for the jail if you want; use the -d option to specify a device, and the jail script will umount it, '''mkfs it''', and mount it, and build a jail on it etc.
&lt;pre&gt;
# sh pbulk-jail.sh -d/dev/c0d0p2s3 -A
&lt;/pre&gt;

The script will automatically customize the jail directory name based on the devname, so starting multiple bulk builds at on different filesystems is ok.

== Bulk build customisation ==

In the jail, there are several opportunities to customize the build. You can decide which packages to attempt building by listing them in /usr/pkgsrc/minix/limited_list.pbulk. You can set various pbulk parameters (package upload location, reports, etc.) in /usr/pkgsrc/minix/pbulk.conf. pbulk.conf is installed to /usr/pbulk/etc/pbulk.conf during the bootstrap step, so if you want to do further modifications later, be sure to edit /usr/pbulk/etc/pbulk.conf. The various /usr/pkgsrc/minix/mk.conf* files can be edited as well.

There isn't good support for saving your customisations though, so you can't update the pkgsrc tree and keep your edits easily currently.

== TODO ==

* An automated system that, from any OS, runs a qemu, using the qemu builds a new minix from current git, then runs that .iso to install a Minix, then boots into that minix, then fetches the latest pkgsrc tree, and does the above to bulk-build all known-good packages, and produces pretty html status overviews of it so we can make sure this process, and known-good packages, don't break by base system or pkgsrc changes. And if they do, see in which minix git / pkgsrc commit things were still OK.

* Have multiple such instances be able to work together to do parallel pbulk builds. There are several approaches that could be used:
** [https://code.google.com/p/distcc/ distcc] - distributes the compilation tasks across several systems. Another tool that works well in combination with distcc is [https://ccache.samba.org/ ccache]. Note, some packages might not support parallel make (i.e. MAKEOPTS="-j2" or higher).
** pbulk slaves - within pbulk itself there is support for multiple slave machines. The upstream sources rely on NFS for this, but we have some local changes which try to replicate the files with rsync. Last time this was tried, it didn't work but maybe it can be made to work.</text>
      <sha1>qj727tylc1a7xzgdjliba2pypwvdu5q</sha1>
    </revision>
  </page>
  <page>
    <title>Coding Style</title>
    <ns>0</ns>
    <id>37</id>
    <revision>
      <id>48</id>
      <timestamp>2021-08-27T09:50:33Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import codingstyle</comment>
      <origin>48</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4134" sha1="1d21x84e77wbp0kpot09snbloolxee7" xml:space="preserve">Minix is standardizing on the netbsd coding style (based on [https://en.wikipedia.org/wiki/Kernel_Normal_Form KNF (Kernel Normal Form)]) for new code. Mostly because the NetBSD import trend makes this the logical choice for a standard.

The canonical reference is [https://git.minix3.org/?p=minix.git;a=blob;f=share/misc/style;hb=HEAD in the ''git'' tree], also available as  '''''/usr/share/misc/style''''' in your MINIX machine, and '''''share/misc/style''''' in your source tree.

== Older coding style ==

This is for reference only, to see what was once considered beautiful. Do not use these principes in new code.

The policy on the eventual migration from this style to KNF has not been decided yet.

From AST's [https://groups.google.com/group/comp.os.minix/msg/d1170250f03dbf3b&amp;usg=AFQjCNFcPMJ7uZjoEnBdgoRpC1cEaXO4Xw comp.os.minix post] about style:

&lt;pre&gt;
We haven't had a good religious war since the discussion about the PDP-11 
memory management unit.  Let's give this a try.  There was a recent posting 
of cb (C beautifier).  I am not going to use it because it does not beautify. 
It uglifies, and cu is already taken.  The MINIX kernel, FS, and MM are all 
below.  If anyone feels like writing a cb that makes all program adhere to the 
book style, that would be great.  Other cbs need not apply.  For more details, 
look in the book.  There are 250 pages of examples there.

SAMPLE FUNCTION 
struct inode *get_inode(dev, numb) 
dev_nr dev;                     /* device on which inode resides */ 
inode_nr numb;                  /* inode number */ 
{ 
/* Find a slot in the inode table, load the specified inode into it, and 
* return a pointer to the slot.  If 'dev' == NO_DEV, just return a free slot. 
*/ 
  register struct inode *rip, *xp; 
  int k, mark; 
  /* Search the inode table both for (dev, numb) and a free slot. */ 
  xp = NIL_INODE; 
        if (rip-&gt;i_dev == dev &amp;&amp; rip-&gt;i_num == numb) { 
                /* This is the inode that we are looking for. */ 
                rip-&gt;i_count++; 
                return(rip);    /* (dev, numb) found */ 
        } else { 
                xp++; 
                count++; 
                if (count &gt; N) limit = 1; 
        } 
  for (rip = &amp;inode[0]; rip &lt; inode[MAX]; rip++) { 
        if (rip-&gt;i_num == 0) { 
                mark = 1; 
                k = rip - inode; 
        } 
  } 
} 

 1. Function types (e.g., struct inode *) are written on the same line as the 
    function name. 
 2. No spaces before or after parentheses in functions or calls. 
 3. One space after commas in argument lists. 
 4. Each is described by a short comment starting at tab stop 4 (col 33). 
 5. Open curly brace is on a separate line following the argument list; 
 6. Each function starts with a comment in the form of one or more complete 
      Multiline comments all contain vertically aligned asterisks. 
 7. Include a blank line after the initial comment. 
 8. All declarations come next.  No inner declarations, e.g. {int x; ...}. 
 9. A blank line after the last declaration. 
10. Initial indentation is two spaces.  Subsequent indentation is at tab stops. 
    This reduces the chance of exceeding 80 characters on a line. 
11. Function bodies are divided into logical sections.  Each section begins 
    with a capitalized full sentence.  Sections are separated by blank lines. 
12. Short if statements are included on a single line. 
13. Long if statements contain the { on the first line.  The closing } is 
    aligned with the if.  If both the then and else parts are multistatement, 
    the } else { is on one line and aligned with the if. 
14. Use { } to enclose any complex statement, even if not required, as in 
    the for statement above. 
15. Where useful, include short comments at the end of statements.  These 
    comments are not whole sentences and do not begin with capital letters. 
    They start at tab stop 4 (col 33) where possible.  They should fit on 
    the line and never run beyond column 80. 
16. In general, leave a space around operators like +, ==, &lt; etc. 
17. Use parentheses to enclose arguments in return statements. 
&lt;/pre&gt;</text>
      <sha1>1d21x84e77wbp0kpot09snbloolxee7</sha1>
    </revision>
  </page>
  <page>
    <title>Commit Messages</title>
    <ns>0</ns>
    <id>38</id>
    <revision>
      <id>49</id>
      <timestamp>2021-08-27T09:51:44Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import commitmessages</comment>
      <origin>49</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="322" sha1="k89wnbhx1z22i0fmid2a1f8sklkmiik" xml:space="preserve">* One title line, of maximum 52 characters

The following lines are optional, if the title is complete enough.

* One blank line
* Please wrap your commits at 72 characters. You may use fmt(1) to do this for you.

TIP: If you use VIM as your commit editor, those limits are shown when you have syntax highlighting enabled.</text>
      <sha1>k89wnbhx1z22i0fmid2a1f8sklkmiik</sha1>
    </revision>
  </page>
  <page>
    <title>Contributions</title>
    <ns>0</ns>
    <id>39</id>
    <revision>
      <id>50</id>
      <timestamp>2021-08-27T09:58:49Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>imported contributions</comment>
      <origin>50</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="973" sha1="4q5l1z2mqqu7ne8dacx4ew89e1swtgh" xml:space="preserve">This page keeps track of new patches.

/!\ This is probably temporary.

== From the Mailing List ==

Please link to posts about patches below. Accepted ones can be deleted.

{| class="wikitable" border=1
|  Where &amp; What 
|-
|  [https://groups.google.com/group/minix3/browse_thread/thread/5c5686fb35beb8fd] || release.sh configuration and options makeover
|-
|  [https://groups.google.com/group/minix3/browse_thread/thread/c62c18974e186842] || Dialog package and graphic installer using dialog
|-
|  [https://groups.google.com/group/minix3/browse_thread/thread/ca38259870b9ff7] || patch to solve server/apfs/buffer.c put_block function
|-
|  [https://groups.google.com/group/minix3/browse_thread/thread/33f4f8ec871b27fc] || patch for tildes in Spanish keymap, also asked for in [https://groups.google.com/group/minix3/browse_thread/thread/229eab024bce2f37] 
|-
|  [https://groups.google.com/group/minix3/browse_thread/thread/48c38dedd3167649] || Question regarding VM 
|-
|}</text>
      <sha1>4q5l1z2mqqu7ne8dacx4ew89e1swtgh</sha1>
    </revision>
  </page>
  <page>
    <title>CPU Manuals</title>
    <ns>0</ns>
    <id>40</id>
    <revision>
      <id>51</id>
      <timestamp>2021-08-27T10:00:35Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import cpureferencemanuals</comment>
      <origin>51</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2634" sha1="ng899jfpsd7yraxq9ylrcvjzxkuo8mu" xml:space="preserve">== INTEL Manuals ==

The Intel Corporation provides many useful documents on the

[https://www.intel.com/content/www/us/en/processors/architectures-software-developer-manuals.html Pentium 4 Processor Technical Documentation page]. 

Especially useful for helping you to understand the machine dependent
code of MINIX 3 on an IBM-PC compatible machine will be the
Manuals
section.  As of October 2016 the following manuals are available as PDF files
(read with Adobe Acrobat or Ghostview):

* Intel 64 and IA-32 Architectures Optimization Reference Manual
* Intel 64 and IA-32 Architectures Software Developer's Manual Documentation Changes
* Intel 64 and IA-32 Architectures Software Developer's Manual Volume 1: Basic Architecture
* Intel 64 and IA-32 Architectures Software Developer's Manual Volume 2A, 2B, 2C and 2D: Instruction Set Reference, A-Z
* Intel 64 and IA-32 Architectures Software Developer's Manual Volume 3A, 3B, 3C and 3D: System Programming Guide

These are all downloadable as PDF files in various combinations (read with Adobe Acrobat or
Ghostview).  A CD-ROM containing the complete set of manuals is no longer available, but official print copies can be ordered from [https://www.lulu.com/spotlight/IntelSDM Lulu].


== AMD Manuals ==

All AMD processors for IBM-PC have the same IA-32 architecture as Intel
processors.  The differences are in multimedia technology, where AMD
processors have 3DNOW! and other things...  And the next AMD processor
(x86-64) will be different, but still compatible with IA-32.  So, the
Intel docs will also help you understand and program for AMD
processors.  But, AMD provides manuals too -- they are available at the

[https://developer.amd.com/resources/developer-guides-manuals/ AMD64 Architecture Tech Docs]

page.  These AMD manuals were available as of October 2016:

* AMD64 Architecture Programmer's Manual Volume 1: Application Programming
* AMD64 Architecture Programmer's Manual Volume 2: System Programming
* AMD64 Architecture Programmer's Manual Volume 3: General-Purpose and System Instructions
* AMD64 Architecture Programmer's Manual Volume 4: 128-Bit and 256-bit Media Instructions
* AMD64 Architecture Programmer's Manual Volume 5: 64-Bit Media and x87 Floating-Point Instructions
* Compiler Usage Guidelines for AMD64 Platforms Application Note
* Software Optimization Guide for AMD64 Processors

Note that the syntax of the assembly language used in MINIX 3 is different from
Intel's. The MINIX 3 syntax is consistent with assembly languages used by other 
UNIX-derived systems. Other links on the page point to articles describing assembly language syntax.</text>
      <sha1>ng899jfpsd7yraxq9ylrcvjzxkuo8mu</sha1>
    </revision>
  </page>
  <page>
    <title>Minix Developer's Guide</title>
    <ns>0</ns>
    <id>41</id>
    <revision>
      <id>138</id>
      <parentid>127</parentid>
      <timestamp>2021-09-07T17:59:47Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>/* MINIX 3 Old Developers Guide Table of Contents */ fix link again</comment>
      <origin>138</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5004" sha1="2ywosm8mtlz9co5cgnw94syz9gjqwal" xml:space="preserve">The Developers Guide provides information on how to hack on MINIX 3. If you're new to MINIX 3 development, you should start here.

== Newcomers/beginners ==

# ''' Introduction '''
## [[Cross Compiling|Cross-compiling MINIX 3]]
## [[Rebuilding System|Compiling MINIX 3]]
# ''' Developing MINIX 3 '''
## [[Overview of MINIX 3 architecture]]
## [[Programming in MINIX 3]]
## [[Tracking Current]]
## [[Test Suite]]
# ''' Contributing '''
## [[Using Git]]
## [[Coding Style]]
## [[Commit Messages|Commit Message Format]]
## [[Wishlist|Ideas for volunteers to work on]]

== Tutorials ==

# [[Live Update|Live update and rerandomization]]
# [[Driver Programming|Device Driver Programming in MINIX 3]]
# [[Debugging|Debugging tips - Serial out, GDB]]
# [[Adding New Kernel Call|Adding a new Kernel Call]]
# [[Performance Measurement|Performance measurement]]
# [[Eclipse Tutorial|Using Eclipse in MINIX 3 with Remote Explorer]]
# [[GCOV|Using GCOV to gather service code coverage info]]
== Reference documentation ==

# ''' Micro-kernel '''
## [[Overview of Minix 3 Micro Kernel]]
## [[Kernel API|Kernel system calls API]]
## [[Memory Grants|Memory grants]]
## [[Message Passing|Message passing]]
# ''' Drivers '''
## [[Drivers Overview|Overview of Minix 3 drivers]]
## [[Block Device Protocol|The Block Device protocol]]
## [[Data Link Protocol|The Data Link (inet-ethernet) protocol]]
## [[I2C Device Protocol|The I2C Device Protocol]]
## [[RTC Protocol|The RTC Protocol]]
# ''' Servers '''
## [[Overview of Minix Servers|Overview of MINIX 3 servers]]
## [[VM Internals]]
## [[VFS Internals]]
# ''' Userland '''
## [[Overview of Minix Userland]]
## [[Porting Guide|Guide to Porting Software]]
## ''' Minix-specific '''
### [[Useful Tools|Useful tools specific to MINIX 3]]
## ''' NetBSD '''
### [[Porting NetBSD Userland]]
### [[Porting NetBSD Step by Step|Step by Step porting Guide for NetBSD userland]]
## ''' pkgsrc'''
### [[Pkgsrc Guide]]
### [[Minix and pkgsrc|Bootstrapping and bulk-building with Pkgsrc]]
### [[Syncing Pkgsrc|Syncing the MINIX 3 pkgsrc Repository with Upstream]]
### [[Pkgsrc upstreaming|Pkgsrc Upstreaming]]
### [[Pkgsrc on ARM|Pkgsrc on ARM (not yet working)]]
# ''' Machine-dependent '''
## ''' i386 '''
### [[CPU Manuals|X86 CPU Reference Manuals]]
## ''' ARM '''
### [[Minix on ARM|Building MINIX 3 for ARM]]
### [[Test Suite]]
### [[Testing Minix on ARM|Testing Minix/arm]]
# ''' Miscellaneous '''
## [[Early Boot]] - technical details of kernel getting loaded and its memory layout
## [[From Power-on to the Login Prompt|From power-on to the login prompt...]]
## [[Magic Debug Keys|Magic debugging keys]]

== MINIX 3 Old Developers Guide Table of Contents ==

As discussed on [https://groups.google.com/forum/#!topic/minix3/3Pe2KYxfqHE minix3], here is the old developers guide table of contents:

# '''Programming'''
## [[Useful Tools|Useful tools specific to MINIX 3]]
## [[Driver Programming|Device Driver Programming in MINIX 3]]
## [[I2C Device Driver Programming|I2C Device Driver Programming in MINIX 3]]
## [[I2C /dev Interface]]
## [[BeagleBone|Adding support for new BeagleBone Capes]]
## [[Eclipse Tutorial|Using Eclipse in MINIX3 with Remote Explorer]]
## [[POSIX and MINIX 3]]
## [[Programming in MINIX 3]]
## [[CPU Manuals|X86 CPU Reference Manuals]]
## [[Performance Measurement]]
## [[Adding New Kernel Call|Adding a new Kernel Call]]
## [[Debugging|Debugging tips - Serial out, GDB]]
## [[GCOV|Using GCOV to gather servers code coverage info]]
# '''Rebuilding the System'''
## [[Tracking Current]]
## [[Rebuilding System|Rebuilding the System]]
## [[Cross Compiling|Crosscompile MINIX]]
## [[Minix on ARM|Building MINIX for ARM]]
## [[Test Suite]]
## [[Testing Minix on ARM|Testing Minix/arm]]
# '''API Documentation'''
## [[Minix API|The MINIX 3 API]]
## [[Kernel API|The Kernel API]]
## [[VFS-FS Protocol|The VFS-FS protocol]]
## [[Data Link Protocol|The Data Link (inet-ethernet) protocol]]
## [[Block Device Protocol|The Block Device protocol]]
## [[I2C Device Protocol|The I2C Device Protocol]]
## [[RTC Device Protocol|The RTC Protocol]]
## [[DataStore|The DataStore API]]
## [[SEF|The System Event Framework (SEF)]]
## [[VTreeFS|The VTreeFS library]]
## [[VM calls]]
# '''Internals'''
## [[From Power-on to the Login Prompt|From power-on to the login prompt...]]
## [[Early Boot]] - technical details of kernel getting loaded and its memory layout
## [[VM Internals]]
## [[VFS Internals]]
## [[I2C Internals]]
## [[EDID Reading]]
## [[Userspace scheduling]]
# '''Writing or Porting Software'''
## [[Porting Guide|Guide to Porting Software]]
## [[Porting Guide|Porting NetBSD Userland]]
## [[Pkgsrc Guide]]
## [[Minix and pkgsrc|Bootstrapping and bulk-building with Pkgsrc]]
## [[Syncing Pkgsrc|Syncing the Minix pkgsrc Repository with Upstream]]
## [[Pkgsrc upstreaming|Pkgsrc Upstreaming]]
# '''Source Code'''
## [[Using Git]]
## [[Coding Style]]
## [[Commit Messages|Commit Message Format]]
# '''TODO'''
## [[Wishlist|Ideas for volunteers to work on]]</text>
      <sha1>2ywosm8mtlz9co5cgnw94syz9gjqwal</sha1>
    </revision>
  </page>
  <page>
    <title>Cross Compiling</title>
    <ns>0</ns>
    <id>42</id>
    <revision>
      <id>177</id>
      <parentid>176</parentid>
      <timestamp>2021-09-09T17:45:14Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Install dependencies */ fix formatting</comment>
      <origin>177</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7292" sha1="qgc7qz6mtlryai73gcr9dast7cp3uxa" xml:space="preserve">&lt;div round info&gt;
'''Note:'''

This is for cross-compiling MINIX from another Unix-like system. To build MINIX from within MINIX, [[Rebuilding System|check this page]] instead.
&lt;/div&gt;

Cross-compilation is the act of building MINIX from another operating system. Since MINIX now uses the build.sh framework from NetBSD, cross-compilation should work on most mainstream UNIX-compatible systems. A build compatibility table is available at the end of this document.

== Install dependencies ==

Before attempting to cross-compile MINIX, you need a working C toolchain, Git and some additional software on your host platform.

For Debian-based operating systems, run the following command as super-user:

&lt;pre&gt;
# apt-get install build-essential curl git zlibc zlib1g zlib1g-dev
&lt;/pre&gt;

'''Note''': Also on Ubuntu, if you get an error stating that "'/lib/cpp' fails sanity check", you need to install the GNU C++ compiler:

&lt;pre&gt;
$ sudo apt-get install g++
&lt;/pre&gt;

'''Note''': On FreeBSD and Minix ([[Minix on ARM|compiling for ARM on x86, e.g.)]], if you get a message along the lines of "Skipping image creation: missing tool 'mcopy'", please install the emulators/mtools package.

== Getting the sources ==

Once the required tools are installed, the next step is to obtain the sources. Run the following commands in a terminal:

&lt;pre&gt;
$ mkdir minix
$ cd minix
$ git clone git://git.minix3.org/minix src
$ cd src
&lt;/pre&gt;

NOTE: The releasetools script will generate object files and put them //outside// the source directory; i.e., if you've cloned to ~/minix/src/ and build from there, things will start showing up in ~/minix/ as an artifact of the build process.

== Cross-building for x86 ==

It's time to build MINIX itself. There are some wrapper scripts that will build ready-to-boot images from scratch (i.e. just the minix source tree) for either x86 or ARM. These scripts produce a lot of output and will take a while to complete the first time - a cross-toolchain based on LLVM is built from scratch.

&lt;pre&gt;
$ bash ./releasetools/x86_hdimage.sh 
[..]
Writing Minix filesystem images
 - ROOT
 - USR
 - HOME
Part     First         Last         Base      Size       Kb
  0      0/000/00     0/000/07         0         8        4
  1      0/000/08    64/000/07         8    131072    65536
  2     64/000/08  1856/000/07    131080   3670016  1835008
  3   1856/000/08  1984/000/07   3801096    262144   131072
To boot this image on kvm:
[..]
&lt;/pre&gt;

A command line for running the result in a KVM virtual machine is printed at the end of the process.

== Cross-building for ARM ==

A similar procedure exists for ARM. Please see [[Minix on ARM]] for much more information.

== Using build.sh directly ==

Please refer to NetBSD's documentation on build.sh for details.

From a source directory:

&lt;pre&gt;
$ sh build.sh -mi386 -O ../build tools
&lt;/pre&gt;

Please note that by default, the build.sh script will output the built objects to ''/usr/obj'', so make sure it exists. Alternatively, use as above the "-O" option to redirect the output to somewhere else. When this process is completed, you'll have a ../build/tooldir.&lt;something&gt; directory. The &lt;something&gt; is roughly equivalent to

&lt;pre&gt;
$ echo ''uname -s''-''uname -r''-''uname -m''
&lt;/pre&gt;

Among the tools that are built are ''gcc'', ''binutils'', and ''gmake''. The sources for these tools are not provided by us. Instead, they are downloaded on-the-fly as tarballs from the minix webserver

=== Building world ===

The next step is to actually build MINIX:

&lt;pre&gt;
$ sh build.sh -mi386 -O ../build -U distribution
&lt;/pre&gt;

This process will create a ../build/destdir.i386 directory that holds the built distribution of MINIX. 

Other useful options for qemu are &lt;code&gt;-monitor telnet::4444,server,nowait&lt;/code&gt; (to access some interesting internal state by telnet) and &lt;code&gt;-serial stdio&lt;/code&gt; - for convenient debug output over 'serial.'

== Compiling things without build.sh ==

To run make in the cross-environment, i.e. to rebuild a tool (host target) or minix item (minix target), without running the full build.sh procedure all over again, use nbmake-i386, a make wrapper that sets all the right environment. First expand your $PATH to include it:

&lt;pre&gt;
$ PATH=$PATH:OBJDIR/tooldir.OS-VERSION-ARCH/bin/
$ cd SRCDIR/tools
$ nbmake-i386 clean
$ nbmake-i386
&lt;/pre&gt;
will rebuild all the tools. After that you can e.g.

&lt;pre&gt;
$ cd zic
$ nbmake-i386 clean
$ nbmake-i386
&lt;/pre&gt;

to just rebuild zic. As you can tell if you set MAKEVERBOSE=2, tools/zic/ will invoke cc (to run on the host platform), whereas nbmake-i386 will invoke i486--netbsdelf-gcc from your tools dir if you run it in usr.sbin/zic/, so a Minix-targeted binary is produced.

=== Caveats ===

The ''build.sh'' is tailored towards NetBSD and as such not all features make sense for MINIX. For example, we don't have a kernel configuration file. Also, you can't use ''build.sh'' for native builds on MINIX at the time of this writing. You can consult ''build.sh'''s documentation by invoking:

&lt;pre&gt;
$ sh build.sh
&lt;/pre&gt;

But know that not all operations and options are supported. For example, we only support the ''distribution'' build operation. You can't generate iso images with the ''build.sh'' script.

=== Build flags for build.sh ===

It is possible to tweak the build using build flags. Here are some you might find useful.
{| class="wikitable"
! Option name
! value
! example
! Description
|-
|COPTS
|c flags
|COPTS=-g
|'''c''' compiler '''opt'''ions
|}

=== Build flags for nbmake ===

It is also possible to tweak when building separate components using nbmake-i386

{| class="wikitable"
! Option name
! value
! example
! Description
|-
|MAKEVERBOSE
|[1]
|MAKEVERBOSE=2
|Instruct make to be more verbose
|}


==== Mounting a MINIX disk image on Linux ====

1. Load the loop kernel module, or adapt kernel command line:

&lt;pre&gt;
$ modprobe loop max_part=15
&lt;/pre&gt;

or add to your kernel commandline : '''max_part=15'''

2. Setup a loopback device to point to your disk image:

&lt;pre&gt;
$ losetup /dev/loop0 minix.img
&lt;/pre&gt;

3. (Optional) list the available partitions:

&lt;pre&gt;
$ dmesg | tail
&lt;/pre&gt;

or use

&lt;pre&gt;
$ ls /dev/loop0*
&lt;/pre&gt;

4. Mount the desired partition somewhere

&lt;pre&gt;
$ mount /dev/loop0p5 /mnt
&lt;/pre&gt;

== Build compatibility ==

{| class="wikitable"
! Host platform
! Version
! Buildable MINIX architectures
! Version
! Updated
! Notes
|-
| Ubuntu x86 32-bit
| 14.04
| x86 32-bit / ARMv7
| 3.4.0rc
| 2016-02
|
|-
| Ubuntu x86 64-bit
| 14.04
| x86 32-bit / ARMv7
| 3.4.0rc
| 2016-02
|
|-
| Arch Linux x86 32-bit
|
| x86 32-bit
| 3.2.1
| 2013-08
|
|-
| Arch Linux x86 64-bit
|
| x86 32-bit / ARMv7
| 3.2.1
| 2013-08
|
|-
| Mac OS X Lion x86 64-bit
|
| x86 32-bit / ARMv7
| 3.2.1
| 2013-08
|
|-
| Mac OS X Maverick x86 64-bit
|
| x86 32-bit / ARMv7
| 3.3.0
| 2014-10
|
|-
| FreeBSD x86 32-bit
| 10-CURR.
| x86 32-bit / ARMv7
| 3.2.1
| 2013-08
|
|-
| FreeBSD x86 64-bit
| 10-CURR.
| x86 32-bit / ARMv7
| 3.2.1
| 2013-08
|
|-
| Windows Subsystem for Linux 64-bit
| 10.14393
| x86 32-bit / ARMv7
| 3.4.0rc
| 2016-08
|
|-
| Debian x86 32-bit
| 8.8.0
| x86 32-bit
| 3.3.0
| 2017-05
|
|-
| Debian x86 64-bit
| 10.9.0
| x86 32-bit / ARMv7
| 3.4.0rc
| 2021-03
| Apply [https://github.com/Stichting-MINIX-Research-Foundation/minix/pull/301 this] patch
|}</text>
      <sha1>qgc7qz6mtlryai73gcr9dast7cp3uxa</sha1>
    </revision>
  </page>
  <page>
    <title>Rebuilding System</title>
    <ns>0</ns>
    <id>43</id>
    <revision>
      <id>56</id>
      <timestamp>2021-08-27T11:56:06Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import rebuildingsystem</comment>
      <origin>56</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2494" sha1="j7ujqorbl5wkqkn2dbtzuv1j5vvja88" xml:space="preserve">&lt;div round info&gt;
'''Note:'''

This is for building MINIX from within MINIX. To cross-compile MINIX from another Unix-like system, [[Cross Compiling|check this page]] instead.
&lt;/div&gt;

== Rebuilding World ==
The easiest way is to execute ''make build''. It will rebuild and install the operating system, as well as all the utilities.

Supposing you [[Tracking Current|have the MINIX source code]] under the ''/usr/src'' directory, these commands

&lt;pre&gt;
$ su
# cd /usr/src
# make build
&lt;/pre&gt;

will create the necessary directories, proceed to install the new includes, create the necessary ''.depend'' files then build and install the new libraries; and then, create the necessary ''.depend'' files then build and install the commands and the system (servers, drivers, and kernel), and finally install it as a new image ready for reboot.

''make build'' does nothing with configuration (''/etc'') files. Sometimes, it might be necessary to get new or updated ''/etc'' files. There is no automated procedure for that, though. Compare files in ''src/etc'' and ''/etc'', and see if any updates have happened. Especially, an outdated ''/etc/system.conf'' (or ''/etc/drivers.conf'') file can cause all sorts of problems.

In some instances, some necessary commands will have to be updated before, in order to make the new compiling work. Therefore, if ''make build'' fails unexpectedly, revise the ''docs/UPDATING'' document for instructions along the lines of running ''make -C usr.bin/foobar &amp;&amp; make -C usr.bin/foobar install''. Then, ''make build'' again.

== Rebuilding the Kernel Only ==
&lt;!&gt; In general, you should follow the process in "Rebuilding World".

&lt;pre&gt;
$ su
# cd /usr/src/releasetools   # this directory contains tools that make creating and installing the kernel easier
# make hdboot         # this installs the kernel to your hard disk
&lt;/pre&gt;

=== Other Build Targets ===
Type

&lt;pre&gt;
$ cd /usr/src/releasetools
$ make
&lt;/pre&gt;
to see the various options available.

== BSD Make Documentation ==

* http://netbsd.gw.com/cgi-bin/man-cgi?make++NetBSD-current
* http://www.opengroup.org/onlinepubs/009695399/utilities/make.html

Useful switches:
* &lt;code&gt;bmake -d m&lt;/code&gt; (Debug Output: The making of each target: what target is being examined; when it was last modified; whether it is out-of-date; etc)
* &lt;code&gt;bmake -d s&lt;/code&gt; (Debug Output: The application of suffix-transformation rules.)
* &lt;code&gt;bmake -n&lt;/code&gt; (Display commands that would be executed, but don't actually run them.)</text>
      <sha1>j7ujqorbl5wkqkn2dbtzuv1j5vvja88</sha1>
    </revision>
  </page>
  <page>
    <title>Overview of MINIX 3 architecture</title>
    <ns>0</ns>
    <id>44</id>
    <revision>
      <id>58</id>
      <timestamp>2021-08-27T12:00:30Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import overviewofminixarchitecture</comment>
      <origin>58</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4559" sha1="9pllto0mcorb7klgv77dsv733b7xnb4" xml:space="preserve">Minix 3 is a POSIX-compatible operating system. It is a micro-kernel running a collection of multiple user-mode server processes providing services to user-land programs and users.

The goal of its architecture is to achieve [[Reliability|high reliability]] by running (almost) everything as user-mode processes, observing the principle of least authority by limiting what each process has access to and what they can do.

== Micro-kernel ==

The micro-kernel is the core of Minix. It handles low-level functionality such as interrupts, scheduling, a primitive form of processes and inter-process communication (IPC).

This is the only component of Minix that runs in kernel mode, thus only the micro-kernel has full access to the bare metal (hardware peripherals, memory-management unit, physical address space...).

=== Message passing ===

The micro-kernel provides a form of inter-process communication called message passing, in which messages are exchanged to communicate to the rest of the system. The messages themselves are fixed-size 64 bytes buffers.

=== Memory grants ===

To transfer larger amounts of data, memory grants allow processes to grant other processes indirect read and/or write access to well-defined memory regions of its virtual address space. The grants are managed by the process that emitted them and the kernel performs the act of reading/writing upon request. The memory grant credentials (4 byte identifiers) are exchanged by message passing.

=== Kernel system calls ===

Kernel system calls are provided to allow access to message passing, memory grants and the hardware to the rest of the system. They are provided by the micro-kernel and are specific to Minix. In particular, they are not to be confused with POSIX system calls, which are implemented at a higher abstraction level.

System calls (and thus message passing and memory grants) are subject to strict permissions checking. A process is limited by which system calls it is allowed to make, to whom it may send messages and which memory grants it has access to. Any unauthorized action is met with a error code saying no permission. 

== User-mode server processes ==

On top of the micro-kernel is running a collection of server processes that offer services to the rest of the system. Those processes run in user mode and thus lack the authority to directly access hardware or memory that doesn't belong to them. They use system calls to interact with other processes and hardware through the micro-kernel.

In Minix everything but the micro-kernel is a user process, however server processes are conceptually divided in two layers.

=== Drivers ===

The drivers are processes who handle a specific hardware component. Each of those processes has access through the micro-kernel to its hardware resources (input/output ports, interrupts).

Examples of processes belonging in this layer are mass storage (floppy disk, hard disk, CD/DVD/Blu-Ray/tape drive...), network card, printer and serial port drivers.

=== Servers ===

The servers are processes offering services to the rest of the system. To do so, they use driver processes, the micro-kernel or other servers to perform the requests they receive. Servers do not have access to hardware resources like drivers do.

Examples of servers are the virtual memory, virtual file system, actual file systems, network stack and data store servers.

== User-land ==

The user-land is the collection of processes, libraries, files and components that the users of the operating system use to get work done. User-land processes are processes just like drivers and servers, but unlike those they do not have specific privileges. To access facilities such as the file system or the network, they perform requests to servers. The application programming interface (API) provided at the lowest layer is POSIX, a set of common system calls (not the Minix micro-kernel ones) and libraries functions all Unix and Unix-like operating systems share.

Since Minix 3.2.0, most of the user-land is imported from NetBSD, with Minix-specific utilities mostly for administrating the servers and drivers. In a sense, Minix is now a reimplementation of the NetBSD user-land on top of a micro-kernel and now looks familiar to BSD users and developers.

Minix is provided with a base system mostly identical to the NetBSD one. Extra software and utilities is usually installed via pkgin, which is a binary package manager for pkgsrc, the huge collection of programs and libraries ports available on NetBSD and other operating systems.</text>
      <sha1>9pllto0mcorb7klgv77dsv733b7xnb4</sha1>
    </revision>
  </page>
  <page>
    <title>Programming in MINIX 3</title>
    <ns>0</ns>
    <id>45</id>
    <revision>
      <id>59</id>
      <timestamp>2021-08-27T12:05:27Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import programminginminix</comment>
      <origin>59</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6591" sha1="hvxtow0xm2ro1ur2nk2c76vbe17g1mn" xml:space="preserve">This document covers some of the technical issues about using MINIX 3 and writing
code for it.
==  How can I learn to program in C?  ==

The first edition of Andy Tanenbaum's '''''Operating Systems Design
and Implementation''''' included an ''Introduction to C''. Alas, with a much bigger Minix 2.0 there was no room for this in the '''''OSDI 2nd ed'''''.  It's also a bit out of date, as
it describes the original version of C (often referred to as "K&amp;amp;R C")
defined in the 1978 first edition of '''''The C Programming
Language''''' by Brian Kernighan and Dennis Ritchie.  The 1988
second edition describes "ANSI C" or "Standard C" which is the
reference language for implementing POSIX, although the POSIX standard
allows "Common Usage C" using pre-standard features.  After the
'''''OSDI 2nd ed.''''' text, a copy of ''The C Programming
Language, 2nd ed.'' is the most useful book you can own to
understand or program in Minix.


==  In addition to C, what else do I need to know to program in the Minix environment?  ==

A classic book is Brian Kernighan and Rob Pike's '''''Unix
Programming Environment''''', unfortunately now out of print, but
check Amazon.com or other sources of used books.  This book emphasizes
the use of small programs that do parts of large jobs, and suggests
starting with shell scripts, replacing standard commands in the script
with custom C programs as needed until the overall system is able to do
the job at hand well enough.  The same authors' newer book '''''The
Practice of Programming''''' (1999) is also of interest, although
probably not as useful to a beginning programmer. W. Richard Stevens' 
'''''Advanced Programming in the UNIX(R) Environment''''' is 
another book with a wealth of information about how to use the resources 
provided by a Unix-like environment, but it also is not a beginner's book. 


==  How about shell script programming?  ==

The Minix shell, '''ash''', is similar to '''bash''', the standard
shell in most Linux distributions.  A series of articles on 
[https://www.ibm.com/developerworks/library/l-bash/ Bash by example]
is well worth a look, although not everything is applicable to Minix.
If you are willing to buy a big book the '''''Unix Power Tools'''''
compendium (Shelley Powers, Jerry Peek, and numerous other authors and
contributors) gives lots of hints on using Unix shells and commands and
has several chapters on scripts.  Hint: the current edition of
'''''Unix Power Tools''''' is the 3rd.  If you find a discounted
2nd edition at 1/3rd of the price you may find this an attractive
bargain.  The information doesn't go stale, and for the Minix
text-based console environment an older reference may be good enough.
==  How about those strange Makefile?  ==

Since 3.1.7, MINIX3 switched to use the *BSD make system;
besides making the import of *BSD utilities and libraries easier,
it is also the same system as used under the hood in [[Testing pkgsrc|pkgsrc]].

An advantage of this system are the individual Makefiles, which syntax is much simpler,
since all the complexity is moved into a centralized set of *.mk files
stored in ''/usr/share/mk/''. A typical Makefile looks like
&lt;pre&gt;
#	$OpenBSD: Makefile,v 1.3 2007/05/29 18:24:56 ray Exp $

PROG=	diff
SRCS=	diff.c diffdir.c diffreg.c xmalloc.c

.include &lt;bsd.prog.mk&gt;
&lt;/pre&gt;

For an introduction to BSD make system, including advanced features,
you can read the "tutorial" written by the author, Adam de Boor, for the 4.4BSD system here [https://ftp.freebsd.org/pub/FreeBSD/doc/en/books/pmake/ pmake].

==  I hear a lot about security problems, any hints on secure programming?  ==

Even though at the start you may think that your programs on your
little non-networked Minix system will never be a security threat, it
is a good idea to learn a little bit about secure programming early in
your programming career. 

A useful reference is the [www.dwheeler.com/secure-programs/Secure-Programs-HOWTO/index.html Secure Programming for Linux and Unix HOWTO] by David A. Wheeler.


==  What programming languages and compilers are supported by Minix?  ==

The Minix operating system itself and the various utilities and
programs that are part of the Minix distribution are written in
'''C''', and the distribution includes a C compiler.

Here is a non-exhaustive list of languages and compilers available :
* '''C''' : '''clang''' is the default
* '''Fortran''' : '''f2c''' from pkgsrc
* '''Lua''' : inherited from NetBSD
* '''Perl''' : '''perl''' from pkgsrc
* '''Python''' : '''python27''' from pkgsrc
* '''Shell''' : Bourne Shell is the default

==  Why is OS support needed for MMX or floating point math?  ==
This answer was extracted from a comment on comp.os.minix:
&lt;pre&gt;
From: kjb=733301@cs.vu.nl (Kees J Bot)
Subject: Re: MMX/3DNow support was RE: MINIX Development?
Date: Wed, 23 Jul 2003 20:15:03 +0200

This is really a hardware floating point issue, because the MMX
registers share the FP registers.  This was done so that MMX unaware
OSes can still support MMX programs, because when they save and restore
the FP registers then the MMX state is also saved and restored if that
happens to be what the FP registers are used for.

This saving and restoring is what Minix doesn't do.  So if two processes
use FP/MMX then a context switch from one to the other will clobber the
FP state of both.

What is needed to make this work is a trap handler that reacts to the
use of FP, so that Minix can save the FP state of the process that
last used FP and load the FP state of the current process.  On a context
switch Minix merely sets the "don't use FP" bit in some register.

Costs?  One FP interrupt handler, some FP save/restore/setup code, some
memory per process to store the FP state into, and some memory to store
the FP state when a user process catches a signal.  (Not sure about the
signal business, much check with Philip.)  This isn't much work, we can
simply take Minix-vmd's code, but I haven't seen any need yet.  Minix
has to use software FP as distributed, or it won't run on your old 386,
so Minix itself doesn't need it.

Anyone here who wants to use Minix for some heavy number crunching?  If
so then I could be persuaded to add an ENABLE_FPU to the next release,
by default off.  I don't care about MMX, that's way too exotic for Minix.
&lt;/pre&gt;

==  Is there an assembly syntax inconsistency in MINIX?  ==
A: Assembly language files for Minix sometimes use inconsistent syntax. 
The question was discussed in [http://minix1.woodhull.com/faq/asysyn.html this exchange on the comp.os.minix newsgroup]
during May and June, 2004.</text>
      <sha1>hvxtow0xm2ro1ur2nk2c76vbe17g1mn</sha1>
    </revision>
  </page>
  <page>
    <title>Tracking Current</title>
    <ns>0</ns>
    <id>46</id>
    <revision>
      <id>149</id>
      <parentid>60</parentid>
      <timestamp>2021-09-07T22:16:41Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>149</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6488" sha1="rhvq05rljgh0wkjh2h7fdc8q29nusyn" xml:space="preserve">== What does it mean? ==
Public releases are done at certain milestones; but development is continuous. Currently, all MINIX 3 sources are kept in a [//git.minix3.org Git repository]. A [//github.com/Stichting-MINIX-Research-Foundation/minix GitHub] mirror is also available.

The state of all of the newest versions of the files in the master Git repository (called 'minix', branch 'master') is called 'current', after a BSD convention. You can update your own MINIX 3 installation with those sources; and get a 'current' system. Doing that regularly in the context of MINIX could be called 'tracking current'.

''Tracking current'' consists of first obtaining the current sources, and then recompiling them. The host machine compiling the system is assumed to be a machine running MINIX.  And, of course, running your system! This document explains how to obtain and run current.

It does assume a network connection. If you don't have one on your MINIX machine, perform the git steps elsewhere, copy the 'src' hierarchy to ''/usr/src'' on your MINIX machine, and follow the steps from there, as normal.

== Warning ==
Here be dragons! Finding unexpected bugs and incompatibilities is "par for the course" when tracking current. By and large, you are on your own if anything goes wrong; although, you always can try to ask for help in the newsgroup. Good bug reports, however -- if it comes to that -- are very welcome.

It's a great way to give new code early exposure; so, everyone who wants to is encouraged to give it a try.
== Install the Latest Snapshot ==
Due to lack of developer time, tracking current is only supported from the latest snapshot of Minix.
You can find the latest snapshot [//download.minix3.org/iso/snapshot/ here]
&lt;div center round important&gt;Special emphasis for the current state of affairs: if you want to track current, '''do not''' start from the 3.3.0 release. It '''will not''' work. Instead, start from one of the 3.4.0 release candidates on the snapshot page.&lt;/div&gt;
== Obtaining the Sources from the Git repository ==
* You'll be grabbing a new "/usr/src" tree, which will contain Git metafiles also.
* Obtain the toolkit from pkgin_sets
&lt;pre&gt;
# pkgin up
# pkgin_sets
calculating dependencies... done.
[..]

proceed ? [y/N] y
&lt;/pre&gt;
* Do the git clone of the trunk of the source:
&lt;pre&gt;
# cd /usr
# git clone git:''git.minix3.org/minix src
Cloning into src...
&lt;/pre&gt;
* &lt;!&gt; '''Read ''src/docs/UPDATING'' for any tips you might need.''' &lt;!&gt;

Now, you have the "bleeding edge" of sources installed under "/usr/src", and you can update to a later bleeding edge by saying,

&lt;pre&gt;
# cd /usr/src
# git pull
&lt;/pre&gt;
at any time in the future.

== Recompiling the System ==

=== /etc files ===

'''Make build''' upgrades some but not all ''etc files''. This means that any change you did to the updated configuration files will not survive to the build process. The normal way to customise locally is to store your changes in a ''.local'' configuration file which is then read by the system; not all configuration files provide such hooks however.

Sometimes, it might be necessary to update a locally-managed /etc file, like for example to add a new user to ''/etc/master.password''. There is no automated procedure for that, though. Compare the files in "/usr/src/etc" and "/etc", and see if any updates have happened. This kind of things are typically commented in src/docs/UPDATING.

Now that the MINIX project has switched to using the NetBSD project infrastructure to build the system, much of the work is automatic.

The procedure to rebuild after a Git checkout is as follows:

&lt;pre&gt;
# cd /usr/src
# make build
&lt;/pre&gt;
That will create the necessary .depend files, and then proceed to install the new includes, build and install the new libraries, build and install the commands (linked with the new libraries), and then rebuild the system (servers, drivers, and kernel), and install it as a new ''current'' ready-to-boot system.

=== Incremental build ===

The above procedure is conservative and does a full clean and rebuild, which can take a long time. If you are confident your build can be done incrementally, invoke it like so:
&lt;pre&gt;
# cd /usr/src
# make build MKUPDATE=yes
&lt;/pre&gt;

=== Specific tools missing ===

Sometimes a new version of some upgraded tool is needed, or some operation should be performed for the automatic build to succeed. This is announced as new entries at the top of ''src/docs/UPDATING'', usually with the commands you need to type or the points you should be attentive to.

'''Please read ''src/docs/UPDATING'' before building a newer current system.''' 

== Rebooting ==
Your new system has been installed as '''/boot/minix_latest''', which is the default system the monitor will boot. After the build finishes, reboot your system by typing (as ''root''):

&lt;pre&gt;
# reboot
&lt;/pre&gt;

When you see the boot monitor's menu, either choose to boot the ''custom'' MINIX, or just wait three seconds -- the monitor automatically will boot the latest revision that it sees. (Rebuilding the system creates a custom version of MINIX! So, you don't want to boot the original version.)

If all goes well, your new system will come up normally. If something goes so wrong that you can't boot, you can boot your previous image manually using the boot monitor menu: all the system images stored in subdirectories of ''/boot/minix'' are given a separate entry in the menu, as well as the system used when installing for the first time which is stored under ''/boot/minix_default''. You can also proceed manually: select the option to ''Drop to boot prompt'' and then issue the following commands:

&lt;pre&gt;
&gt; load_mods /boot/&lt;minix_old&gt;/mod*
&gt; multiboot /boot/&lt;minix_old&gt;/kernel rootdevname=&lt;device&gt;
&lt;/pre&gt;

where ''&lt;minix_old&gt;'' refers to the directory containing your previous MINIX system, and ''&lt;device&gt;'' refers to the device containing the root file system, usually ''c0d0p0s0''.

If you still have problems then, it could be because the (new) userland is messed up, or the new userland is incompatible with the old image. In rare cases or big upgrades, that can happen. Depending on your MINIX expertise, you'll be able to fix it by, for instance, booting from CD, and recompiling your old (saved) source tree, or simply reinstalling.

== Problems? ==
If you have problems you can't solve, you can try to post to the newsgroup. The "you're on your own" disclaimer notwithstanding, the object of the exercise is to find problems in MINIX.</text>
      <sha1>rhvq05rljgh0wkjh2h7fdc8q29nusyn</sha1>
    </revision>
  </page>
  <page>
    <title>Test Suite</title>
    <ns>0</ns>
    <id>47</id>
    <revision>
      <id>61</id>
      <timestamp>2021-08-27T12:13:48Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import testsuite</comment>
      <origin>61</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="728" sha1="14dqqsduktgg88avfus6mtykvwpbacc" xml:space="preserve">The MINIX 3 sources include a test suite in ''minix/tests''. Primarily, it tests POSIX conformance. This page describes how to run the test suite.

== Compile the test suite within MINIX 3 ==

Supposing you have [[Using Git|cloned the Minix source code]] in ''/usr/src'', type at the command prompt (#) 

&lt;pre&gt;
# cd /usr/src/minix/tests
# make
# make install
&lt;/pre&gt;

and wait until it completes all the compilations. The tests will be installed in ''/usr/tests/minix-posix/''.

== Run the test suite ==

To test the system, type

&lt;pre&gt;
# cd /usr/tests/minix-posix
# ./run
&lt;/pre&gt;

to run the test programs.

'''Note''': the full test set will be performed only when you are root, so you should start the ''./run'' script as root.</text>
      <sha1>14dqqsduktgg88avfus6mtykvwpbacc</sha1>
    </revision>
  </page>
  <page>
    <title>Using Git</title>
    <ns>0</ns>
    <id>48</id>
    <revision>
      <id>62</id>
      <timestamp>2021-08-27T12:30:26Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import usinggit</comment>
      <origin>62</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19020" sha1="n57lxjh6qsjqyevqvm0wsoa5yvfctn0" xml:space="preserve">This page will give you a quickstart guide to git and the MINIX 3 git workflow.

A general Git quickstart site: [https://gitready.com gitready.com].

== Git Basics ==
Git is a distributed version control system. As such, you don't just checkout a specific revision of your project as in subversion. Instead, you make a clone of the entire repository, including all history. You can 'commit' changes locally to your repository, but will need to 'push' them if you want your changes into a remote repository or, in our case, the main minix git repository. The workflow is that you edit files as normal, use 'git add' to add files, and 'git commit' to commit to your locally cloned repository. To push your changes to the master repository, do a 'git push.'

== Installing Git ==
Git is available in pkgsrc. You can install git by running the following command as root:

&lt;pre&gt;
# pkgin up
# pkgin in git-base
&lt;/pre&gt;
If you would like to clone the MINIX 3 repository on a non-MINIX platform, please see the [https://git-scm.com/book/en/v2/Getting-Started-Installing-Git Pro Git book].

== Configuring Git ==
Now, you will need to set your git config so that your full name and email address (that git will use in commit messages) are correct.

&lt;pre&gt;
$ git config --global user.name "John Doe"
$ git config --global user.email "johndoe@minix3.org"
&lt;/pre&gt;
&lt;!&gt; '''Note: MINIX 3 developers should ideally use their minix3.org email addresses.'''

We want to rebase branches on pull, so do:

&lt;pre&gt;
$ git config --global branch.autosetuprebase always
&lt;/pre&gt;
If you cloned your repository before setting this option, you must re-clone it. Or you can set this manually in the per-repo config, but that syntax isn't described here.

Also, useful:

&lt;pre&gt;
$ git config --global color.ui auto
&lt;/pre&gt;
This will create a .gitconfig in your home directory. If you would like to send patches via email, the following snippet will also be useful. You can also use 'git config' to set each variable.

&lt;syntaxHighlight lang="ini"&gt;
[sendemail]
        smtpuser = john.doe@gmail.com
        smtpserver = smtp.gmail.com
        smtpserverport = 587
        smtpencryption = tls
&lt;/syntaxHighlight&gt;
Please consult the Git documentation for more information.

Also, git relies on the local date and time being correct to make sensible commit messages; so please check your time and timezone are sensible.

== Cloning the repository ==
The following two sections contain instructions for developers with direct git access, and for community members. To be clear: most people do ''not'' have direct git access. If you are not sure whether you have access, please see the instructions for community members.

=== For community members ===
Community members can clone like so:

&lt;pre&gt;
$ git clone git:''git.minix3.org/minix
&lt;/pre&gt;
Then, you can push changes to gitorious, github, etc. Please see the github and gitorious docs for more info.

To clone the developer repos, you would do the following. This step is optional. You only need to do it if you you want to use one of the developer repos.

&lt;pre&gt;
$ cd minix
# Add developer repo as a git remote
$ git remote add minix-sandbox git:''git.minix3.org/minix-sandbox
# Fetch the remote minix-sandbox repo's contents
git fetch minix-sandbox
# Create a tracking branch called "sandbox" that tracks the "sandbox" branch in the minix-sandbox repository
# and checkout the local "sandbox" branch
git checkout --track minix-sandbox/sandbox
&lt;/pre&gt;

=== For developers with direct git access ===

If you have been given access to (or own) a developer repository, you would do the following to use it. Replace minix-sandbox with a repository that actually exists.

&lt;pre&gt;
$ cd minix
# Add personal repo as a git remote
$ git remote add minix-sandbox git@git.minix3.org:minix-sandbox
# Fetch the remote minix-sandbox repo's contents
git fetch minix-sandbox
# Create a tracking branch called "sandbox" that tracks the "sandbox" branch in the minix-sandbox repository
# and checkout the local "sandbox" branch
git checkout --track minix-sandbox/sandbox
&lt;/pre&gt;
So, you will create a branch in your local repository called "sandbox." This branch will track the "sandbox" branch in the remote repository minix-sandbox. See [https://git.minix3.org/?p=minix-sandbox.git;a=summary minix-sandbox on gitweb].

== Basic Git Workflows ==

=== Creating a Topic Branch ===
First, you will create a topic (short-lived) branch for your work. The branch will be named ''bug_fix''. This branch is a local branch. It does not exist on the remote repository unless you explicitly tell git to create a branch in the remote repository.

&lt;pre&gt;
$ cd minix
# checkout the sandbox branch first, so bug_fix branch will be based on sandbox
$ git checkout sandbox
$ git checkout -b bug_fix
&lt;/pre&gt;
&lt;!&gt; '''Note: you should create a new branch for every bug/feature/experiment/idea you have. Branches are cheap. We want to keep the public branches in your repositories (e.g., the "master" branch in the main repo, the "sandbox" branch in minix-sandbox repo, the "smp" branch in minix-smp repo) pristine, so please use a local (private) topic branch.'''

=== Committing to Your Local Repo ===
Now, you can edit files using your text editor of choice. When you want to add a new file, you will type:

&lt;pre&gt;
# Edit some files
$ vim blah.c
# Create a new file
$ touch file1
# Add the new file to your local git repository
$ git add file1
&lt;/pre&gt;
Before you commit, you should review your changes by doing:

&lt;pre&gt;
$ git diff
&lt;/pre&gt;
Then, you can commit to your local repository using:

&lt;pre&gt;
$ git commit -a -m"commit message"
&lt;/pre&gt;
For git beginners, you should use the '-a' flag for 'commit'. It allows you to ignore git's staging area. Once you become more familiar with git, you'll come to appreciate the staging area.

&lt;!&gt; '''Note: The first line of your commit message should describe your change in a small sentence (50 chars or less). Add more details after one newline. Wrap the commit at 72 characters.'''

You can examine your commit by doing:

&lt;pre&gt;
$ git show
&lt;/pre&gt;
=== Updating Your Branch ===
To update your local sandbox branch with changes from the main repo:

&lt;pre&gt;
# update local master branch with contents from remote repo
$ git checkout master
$ git pull --rebase

# Merge the master branch into your local sandbox branch
$ git checkout sandbox
$ git merge master
&lt;/pre&gt;
&lt;!&gt; '''Note: This must be a merge. Otherwise, the SHA1 hashes will change, and it will cause problems if you push this branch.'''

To update your branch with changes from the developer repo:

&lt;pre&gt;
# update sandbox with contents from remote repo
$ git checkout sandbox
$ git pull --rebase

# rebase your changes on top of the new commits from sandbox
$ git checkout bug_fix
$ git rebase sandbox
&lt;/pre&gt;
&lt;!&gt; '''Note: You can rebase here, since you will not be pushing the bug_fix topic branch.'''

=== Pushing Changes to Your Developer Repo ===
Once you're done editing your branch, you can merge it into the 'sandbox' branch and push to the remote repo's 'sandbox' branch:

&lt;pre&gt;
# checkout the sandbox branch and merge in your changes
$ git checkout sandbox
# merge bug_fix branch into sandbox, collapsing all commits
$ git merge --squash bug_fix
# Now commit the changes
$ git commit -a -m"Commit message"
# See what the commit looks like
$ git show
# Before you push, see which commits you're about to push
$ git log minix-sandbox/sandbox..sandbox
# dry-run of git push to make sure everything's ok
$ git push --dry-run
# push to the sandbox branch in the remote repo
$ git push
&lt;/pre&gt;
Note: this will collapse all the changes in your 'sandbox' branch into one commit to master.

If the push fails, it's most likely because your local 'sandbox' branch is out of date. You can update master by doing:

&lt;pre&gt;
$ git pull --rebase
$ giet push
&lt;/pre&gt;

=== Pushing Changes to the Main Repo ===

Pushing changes to the main minix repository directly is '''not possible'''. Instead, we use a reviewing system for patches, which are automatically pushed to the main repository once approved. Right now, for developers without direct access to the gerrit reviewing system, we request that you create a [https://github.com/Stichting-MINIX-Research-Foundation/minix/pulls pull request on the MINIX3 GitHub page]. Someone with the appropriate access will then do the rest for you. Thank you!

== Merging ==
Fast-forwards. What's that? Well, it's a simple concept but you can't really tell from the name. It's just a word for a set of commits that can be applied to someone else's current state by simply replaying them, i.e. without merging. The changes are a pure extension. If you pull someone else's changes in, and you have no locally committed changes, then that pull will simply be a fast-forward. More significantly, if you want to push your own changes, but you're pushing to a place that has diverged, i.e. received commits since you started making your local commits, git will complain if the change does not result in a fast-forward, i.e. the change has to be merged with the other change. Do this by pulling over the new changes, then pushing again, effectively rebasing your working copy. Put simply, pull has the power to merge (it's fetch + merge), push does not.

== Committing ==
To commit, use ''git commit -a'', which is the equivalent of svn commit, i.e adding and committing changes in all tracked files:

Once you become more comfortable with git, you can skip the '-a' and make full use of the staging area. The staging area is where you stage your current commit before it is actually committed to the repository. If you change or add files in/to a working directory, 'git commit' still won't do anything. You have to explicitly say 'git add' to added files and changed files. Then they get added to the staging area, and you can commit them. This also means there are is no single 'svn diff' equivalent, something I use quite a lot to see 'what am i about to commit.' There are two git diffs: 'git diff' shows you the differences between your working copy and the staging area, i.e. the difference between your working copy and the staged copy. 'git diff --staged' shows you what *staged* changes there are between the Staging Area and the latest commit, i.e. what you are about to commit.  Most of the time the staging area and the current commit will have the same copies.  You will probably use 'git diff' to find out what changes you have made to the working copy, then 'git add' to put those changes into the Index, then 'git commit' to put those changes into a new commit.

If you want to get something unstaged, do 'git reset.' If you want to get the original file back before your changes, do 'git checkout &lt;file&gt;.'

If you want to modify a commit, you can use:

&lt;pre&gt;
# Redo a commit (if you forgot a file, for instance)
$ git commit -a -m"Awesome commit" --amend
# Undo a commit (leaving changes in working tree)
$ git reset HEAD^
&lt;/pre&gt;
= Inspecting Your Git Repository =
If you want to inspect the repository, you can use 'git log':

&lt;pre&gt;
# Standard log
$ git log
# Also shows a diffstat
$ git log --stat
# Also shows the patch
$ git log -p
# Shorter history (shows first line of commits)
$ git log --summary
# Another format
$ git whatchanged
&lt;/pre&gt;
You can use 'git diff' to see what local changes you've made:

&lt;pre&gt;
# Diff your local tree against the last commit
$ git diff
# Diff your staged changes against the last commit
$ git diff --staged
&lt;/pre&gt;
To find out what branches are in your repository:

&lt;pre&gt;
# List only local branches
$ git branch
# Also list remote branches
$ git branch -a
&lt;/pre&gt;
You can search the repository using 'git grep':

&lt;pre&gt;
# grep entire repo
$ git grep kernel_call
# grep only subdir
$ git grep kernel_call ./kernel
&lt;/pre&gt;
== Git Policies and Recommendations ==
* Don't work on the master branch or any public branches directly. Create a local branch instead, so you can keep the public branches clean.

* Don't rebase commits that you've pushed to a public repository. That is, on long-lived feature branches (e.g., sandbox), you shouldn't rebase against other branches.

* Don't make unnecessary merge commits. Always do a ''git pull --rebase''

* Don't use 'git push --force'

* Don't commit extraneous whitespace. Before you do a commit, you should do a 'git diff' and make sure you don't see any red.

* Use the commit message format from Pro Git, especially the part about the first line being only 50 characters or less:

&lt;pre&gt;
Short (50 chars or less) summary of changes

More detailed explanatory text, if necessary.  Wrap it to about 72
characters or so.  In some contexts, the first line is treated as the
subject of an email and the rest of the text as the body.  The blank
line separating the summary from the body is critical (unless you omit
the body entirely); tools like rebase can get confused if you run the
two together.

Further paragraphs come after blank lines.

 - Bullet points are okay, too

 - Typically a hyphen or asterisk is used for the bullet, preceded by a
   single space, with blank lines in between, but conventions vary here
&lt;/pre&gt;
* Use your minix3.org email address when committing.

== Git web interface and Mirrors ==

There is git web interface at https://git.minix3.org.

There are also automatic mirrors on github.com:
* MINIX: https://github.com/Stichting-MINIX-Research-Foundation/minix.git
* PKGSRC: https://github.com/Stichting-MINIX-Research-Foundation/pkgsrc.git

There are also manually updated mirrors on repo.or.cz:

* URLs: git://repo.or.cz/minix.git and http://repo.or.cz/r/minix.git
* URLs: git://repo.or.cz/minix-pkgsrc.git and https://repo.or.cz/r/minix-pkgsrc.git
* URLs: git://github.com/minix3/minix.git and https://github.com/minix3/minix.git
* URLs: git://github.com/minix3/pkgsrc.git and https://github.com/minix3/pkgsrc.git

TODO: Add gitorious mirror
== Granting Commit Access ==
We are using gitosis to do our account management for developers and those who need commit access to our repostiories. Gitosis is a very thin layer between git on unix and providing read/write access to many other users. Not even the Gitosis admin(s) need unix access in order to add/remove users and groups, add git repositories, and manage access. Users are identified by ssh keys. Gitosis is controlled by cloning and committing to its config file and keyfile directory.

If you have access (i.e. a Gitosis admin has added your keyfile, and has given your key Gitosis admin powers), clone the Gitosis config and update it like so. The example is adding someone's keyfile. The git repository syntax implies ssh. the unix user is always Gitosis, and users are identified using which ssh keys were used to connect.

&lt;pre&gt;
$ git clone git@git.minix3.org:gitosis-admin
$ cd gitosis-admin
$ cp ~/user1.pub keydir
$ vi gitosis.conf
(refer to this user as 'user1' in adding him to groups or repository lines)
$ git add keydir/user1.pub gitosis.conf
$ git commit
$ git push
&lt;/pre&gt;
For more information: https://wiki.archlinux.org/index.php/Gitosis

= Making Your Own Private Repository =
To keep your personal working branches easily stored in more than once place, it is suggested to do this in your own repository ([https://book.git-scm.com/3_distributed_workflows.html git book chapter here]). You can easily rebase your work on the master one, and merge your changes with master.

To do this in Gitosis, add a repository in gitosis.conf and let the minix group write to it, in this example minix-beng. Change into this:

&lt;syntaxHighlight lang="ini"&gt;
[group minix]
members = @gitosis-admin
writable = pkgsrc minix minix-beng
&lt;/syntaxHighlight&gt;
And add this:

&lt;syntaxHighlight lang="ini"&gt;
[repo minix-beng]
daemon = yes
description = Ben's repo
owner = Ben
&lt;/syntaxHighlight&gt;
Now, to fill your repository with the master repository, do this:

&lt;pre&gt;
$ git clone git@git.minix3.org:minix
$ cd minix
&lt;/pre&gt;
To tell git about your remote repository and push the contents of the minix3-beng branch there:

&lt;pre&gt;
$ git remote add minix-beng git@git.minix3.org:minix-beng
$ git push minix-beng master
&lt;/pre&gt;
Now, you have your own repository.

== Advanced Git ==
=== Mailing Patches ===
Use 'git send-email' or TopGit'

=== Rebasing ===
For local branches that you will not be pushing, you can rebase your changes against master. This will preserve a linear history.

&lt;pre&gt;
$ git checkout beng
$ git rebase master
&lt;/pre&gt;
Doing countless little experimental commits, e.g. to save your work remotely before doing a risky experiment, which would look messy in svn, is no problem; you can always rewrite history and clean up the commit history squeaky clean (i.e. reorder commits, merge commits together, take a commit right out) before merging your work with master. The swiss army chainsaw of commit editing is [https://www.kernel.org/pub/software/scm/git/docs/git-rebase.html git rebase]. See especially git rebase -i. But see also the warning about this changing commit id's - you can only do this if you're the only user of your branch.[https://www.kernel.org/pub/software/scm/git/docs/user-manual.html#problems-With-rewriting-history problems with rewriting history].

== TopGit ==
!TopGit is recommended. See the [http://repo.or.cz/w/topgit.git?a=blob;f=README TopGit Readme] and this [http://blog.grogmaster.com/2008/12/topgit-means-never-having-to-wait-for.html TopGit workflow].

Basic workflow:

* tg create wip/&lt;patch_name&gt;
* Edit .topmsg (Will become commit message and your patch email) and .topdeps (list all patches/topic branches this patch depends upon)
* git commit -a -m"inital patch version"
* Keep modifying your patch and making commits
* To update your branch from master, do a tg update (TopGit will recursively update all branches this branch depends upon)
* To mail out your patch: tg mail
* To push to the main repo: tg export submit/&lt;patch_name&gt; (This will collapse the branches like --squash)
* Then, git checkout master
* git merge submit/&lt;patch_name&gt;
* git push

== Further Reading ==
If you want to learn more about git, check out the [https://progit.org Pro Git book] and the [https://gitcasts.com|Gitcast Videos].  If you want to really get how git works under the hood, you should read [https://ftp.newartisans.com/pub/git.from.bottom.up.pdf Git From the Bottom Up].

Here's the full list of git resources: 

* [//schacon.github.com/git/everyday.html Everyday GIT With 20 Commands Or So]
* [//git.wiki.kernel.org/articles/g/i/t/GitSvnCrashCourse_512d.html Git-SVN Crash Course]
* [//book.git-scm.com Git Book]
* [//schacon.github.com/git/user-manual.html Git User’s Manual]
* [//schacon.github.com/git/gittutorial.html A Tutorial Introduction to Git: Part One]
* [//schacon.github.com/git/gittutorial-2.html A Tutorial Introduction to Git: Part Two]
* [//eagain.net/articles/git-for-computer-scientists Git for Computer Scientists]
* [//www-cs-students.stanford.edu/~blynn/gitmagic Git Magic]
* [//progit.org/book Pro Git]
* [//ftp.newartisans.com/pub/git.from.bottom.up.pdf Git From the Bottom Up]
* [//gitcasts.com Gitcasts]</text>
      <sha1>n57lxjh6qsjqyevqvm0wsoa5yvfctn0</sha1>
    </revision>
  </page>
  <page>
    <title>Wishlist</title>
    <ns>0</ns>
    <id>49</id>
    <revision>
      <id>235</id>
      <parentid>63</parentid>
      <timestamp>2021-09-10T16:41:57Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Beginner-level Tasks */ fix link</comment>
      <origin>235</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2217" sha1="mh9a1iqprmy4aebojgjilh5ragwyd1s" xml:space="preserve">This page is for if you're looking for projects.

This page is not for if you want others to do projects.

== This Wiki ==
* An improved FAQ (by going through the newsgroup archives to find common questions)
* More documentation for developers
* Fix wiki formatting
* Improve / Update Stale pages

=== Beginner-level Tasks ===
* Change all K&amp;R-style function declarations to ANSI-style declarations
* Write missing ''man'' pages (see [[Documentation and Packages]])
* Port missing [[Porting NetBSD Userland|NetBSD userland utilities]]

=== Intermediate-level Tasks ===
* Change the system to generate and support MINIX3 installation CDs with one single isofs-mountable partition (worked on, see [https://github.com/Stichting-MINIX-Research-Foundation/minix/pull/63 pull request])
=== Kernel ===
* Single image boot (e.g. put kernel and modules in a single file and integrate parameter). owner: beng (load addresses disapear, possible to boot pxe, allow to create large ramdisk, no need for duplication  of kernel parameters, faster TFTP boot, possibility to boot MINIX using the uboot boot command, use ATAG (to get amount of memory from boot loader), Allow to create self updating system e.g. put an sd-image let MINIX boot and write the MMC card)
* Code deduplication, move pagetable etc.
* Allow to build different builds using the same source tree
* Make eMMC work on the BBB (Make it use 8 bit mode)
* ARM: Test MMC
* ARM: implement ASID/context-id register usage to reduce TLB flushes. owner: beng

=== Drivers ===
* USB-storage
* Bluetooth
* Filesystems (XFS, ZFS, NTFS, btrfs, ext3/4, ...)
=== Architecture ===
We have a few problems here:
* ARM: Drivers currently need to grant them self access to memory regions
* system.conf will not scale for multiple platforms

* Community related/needs design:
* We should have a nice and easy demo for handling GPIO and other things. First could be to write a small example app and post it on the
# Ideally we should also rewrite the GPIO lib to communicate with a server.
* Debugging tutorials  (magic keys)

=== Luxury (?) items to remember ===
* single-step execution (for e.g. STEP ptrace) on ARM

=== Related pages ===

[[Wishlist (David)|David's TODO/wish list]]</text>
      <sha1>mh9a1iqprmy4aebojgjilh5ragwyd1s</sha1>
    </revision>
  </page>
  <page>
    <title>Live Update</title>
    <ns>0</ns>
    <id>50</id>
    <revision>
      <id>426</id>
      <parentid>403</parentid>
      <timestamp>2022-02-13T07:53:25Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Sync with upstream</comment>
      <origin>426</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="124424" sha1="6k1wnzz1q1mucy767li69hxwab067hj" xml:space="preserve">MINIX3 now has support for live update and rerandomization of its system services. These features are based on LLVM bitcode compilation and instrumentation in combination with various run-time extensions. Live update and rerandomization support is currently fully functional, although still in an experimental state, not enabled by default, and available for x86 only. This document describes the basic idea, provides instructions on how to enable and use the functionality, provides more in-depth information for developers, and lists open issues and further reading material.

== Introduction ==

This section contains a high-level overview of the live update and rerandomization functionality.

=== Live update ===

A live update is an update to a software component while it is active, allowing the component's code and data to be changed without affecting the environment around it. The MINIX3 live update functionality allows such updates to be applied to its '''system services''': the usermode server and driver processes that, in addition to the microkernel, make up the operating system. As a result, these services can be be updated at run time without requiring a system reboot. There is no support for live updating the microkernel or user applications at this time.

The live update procedure can be summarized as follows. The component responsible for orchestrating live updates is the RS (Reincarnation Server) service. When RS applies an update to a particular system service, it first brings that service to a stop in a known '''quiescence''' state, ensuring that the live update will not interfere with the service's normal operation, by exploiting the message-based nature of MINIX3. A new instance of the service is created. This new instance performs its own '''state transfer''', copying and adjusting all the relevant data from the old instance to itself. If the state transfer succeeds, the new instance continues to run, and the old instance is killed. If the state transfer fails, RS performs a '''rollback''': the new instance is killed, and the system resumes execution of the old instance. In order to maintain the illusion to the rest of the system that there only ever was one service process, the process slots of the old and the new instance are swapped before the new instance gets to run, and swapped back upon rollback.

The MINIX3 live update system allows updates to all system services. Those include the RS service itself, and the VM (Virtual Memory) service. The VM service can be updated with severe restrictions only, however. The system also supports '''multicomponent''' live updates: atomic live updates of several system services at once, possibly including RS and/or VM. In principle, this allows for an atomic live update of the entire MINIX3 service layer.

The state transfer aspect of live update relies heavily on compile-time and in particular link-time instrumentation of system services. This instrumentation is implemented in the form of LLVM "optimization" passes, which operate on LLVM bitcode modules. In most cases, these passes are run after (initial) program linking, by means of the LLVM Link-Time Optimization (LTO) system. Thus, in order to support live update and rerandomization, the system must be compiled using LLVM bitcode and with LTO support. The LLVM pass that performs the static analysis and link-time instrumentation for live update is called the '''magic pass'''. 

In addition, live updates require runtime support for state transfer in each service. For this reason, system services are relinked with a library that provides all the run-time functionality which ultimately allow a new service instance to perform state transfer from its old instance. This library is called the '''magic runtime library''' or ''libmagicrt''. Together, the magic pass and runtime library make up the '''magic framework'''.

=== Live rerandomization ===

Live rerandomization consists of randomizing the internal address space layout of a component at run time. While the concept of ASR or ASLR - Address Space (Layout) Randomization - is well known, most implementations are rather limited: they perform such randomization only once, when starting a process; they merely randomize the base location of entire process regions, for example the process stack; and, they apply the concept to user processes only. In contrast, the MINIX3 live rerandomization can randomize the address space layout of operating system services, as often as desired, and with fine granularity. In order to achieve this, the live rerandomization makes use of live updates.

The fundamental approach consists of a two-step process. First, new versions of the service program are generated, using link-time randomization of various parts of its program binary. Ideally, this would be done at run time; due to various limitations, MINIX3 currently only supports pregenerated randomized binaries of system services. Then, at runtime, the live update system is used to update from one randomized version of each service to another.

The randomization of binaries is done with another link-time pass, called the '''asr pass'''. The magic runtime library implements various runtime aspects of ASR rerandomization during live update.

== Users guide ==

In this section, we explain how to set up a MINIX3 system that supports live update and rerandomization, and we describe how to use the new functionality when running MINIX3.

=== Setting up the system ===

We cover all the steps to set up a MINIX3 system that is ready for live update and rerandomization. For now, it requires crosscompilation as well as an additional build of the LLVM source code. The procedure is for x86 targets only.

The current procedure has been tested only from '''Linux''' as host platform, and may require minor adjustments on other host platforms. We provide a few additional instructions for those other platforms, but these may currently not be complete. Please feel free to add more instructions to this page, and/or open GitHub issues for other platforms and link to them from here.

After setting up an initial environment, the first step is to obtain the MINIX3 source code. After that, the next step is to build an LLVM toolchain with LTO support, which is needed because the regular MINIX3 crosscompilation LLVM toolchain does not include LTO support (yet - we are working on this). Once the LTO-supporting toolchain has been built, the final step is to build the MINIX3 sources, with extra flags to enable magic instrumentation and possibly ASR rerandomziation.

Once these steps have been completed successfully for the first time, one can later update the MINIX3 source and then rebuild the system. The LTO-supporting toolchain need not be rebuilt unless we upgrade the LLVM source code itself.

We will now go through all steps in detail. At the end of this section, there is also a summary of the commands to issue.

All of the commands in this section are to be performed on the crosscompilation host system rather than on MINIX3. None of the commands, except the Linux-specific ''sudo apt-get'' example in the first subsection, require more than ordinary user privileges.

==== Setting up the environment ====

The initial step is to set up a crosscompilation environment. General information about setting up a crosscompilation environment can be found on the [[Cross Compiling|crosscompilation page]]. As one example, the reference platform used to test the instructions in this document was the developer desktop edition of Ubuntu 14.04, a.k.a. ''ubuntu-14.04.2-desktop-i386.iso'', with the following extra packages installed:

 $ sudo apt-get install curl clang binutils zlibc zlib1g zlib1g-dev libncurses-dev qemu-system-x86

The MINIX3 build system uses one single directory in which to place all its files. This directory is one level up from the root of the MINIX3 source directory. Thus, it is advisable to create this containing directory at a location known to have enough free hard disk space. Here we use ''/home/user/minix-liveupdate'' as an example, but the location is entirely up to you. The containing directory will end up having one subdirectory for the MINIX3 source code (called ''minix-src'' in this document), one subdirectory for the LLVM LTO toolchain (called ''obj_llvm.i386''), and one subdirectory for the crosscompilation tool chain and compiled objects (called ''obj.i386''). Thus, the ultimate directory structure will look like this:

 /home/user/minix-liveupdate/minix-src
 /home/user/minix-liveupdate/obj_llvm.i386
 /home/user/minix-liveupdate/obj.i386

You have to choose a location for the containing directory, and create it yourself. The three subdirectories should be created automatically as part of the following steps. However, it has been reported that on some platforms (e.g., FreeBSD), some or all of these directories have to be created manually; this can be done with nothing more than a few basic ''mkdir'' commands. In terms of disk space usage, expect to be needing a bare minimum of '''30GB''' for the combination of these three subdirectories, with a recommended '''40GB''' of available space.

==== Obtaining or updating the MINIX3 source code ====

The first real step is to fetch the MINIX3 source code. Other wiki pages cover this in more detail, but the simplest approach is to check out the sources from the main MINIX3 repository using [[Using Git|git]]:

 $ cd /home/user/minix-liveupdate
 $ git clone git:''git.minix3.org/minix minix-src

This will create a ''minix-src'' subdirectory with the latest version of the MINIX3 source code.

Later on, a newer version of the source code can be pulled from the MINIX3 repository:

 $ cd /home/user/minix-liveupdate/minix-src
 $ git pull

In both cases, the next step is now to build the source code.

==== Building the LTO toolchain ====

The second step is to build the LLVM LTO infrastructure, if it has not yet been built before. Eventually, this will be done automatically as part of the regular build. For now, we have a script that can perform the build, called ''generate_gold_plugin.sh''. It is located in the ''minix/llvm'' subdirectory of the MINIX3 source tree. The basic procedure therefore consists of the following steps (but read this entire section first):

  $ cd /home/user/minix-liveupdate/minix-src/minix/llvm
  $ ./generate_gold_plugin.sh

On some platforms, it may be needed to specify the C/C++ compiler and/or the name of the GNU make utility, which can be done as follows:

  $ CC=clang CXX=clang++ MAKE=make ./generate_gold_plugin.sh

On FreeBSD and similar platforms, one may have to ensure that GNU make is installed (typically as ''gmake'') first, and pass in ''MAKE=gmake'' to point to it.

This step may take several hours. It can be sped up by supplying a number of parallel jobs, through a ''JOBS=n'' variable:

  $ JOBS=8 ./generate_gold_plugin.sh

As stated before, after this command has finished successfully, it need not be reissued until LLVM is upgraded in the MINIX3 source tree. This is a rare event which is typically part of a larger resynchronization with NetBSD code, and we will clearly announce such events. When this happens, it may be advisable to remove the entire ''obj_llvm.i386'' directory as well as any files in ''minix-src/minix/llvm/bin'', before rerunning the generate_gold_plugin.sh script.

==== Building the system ====

The third step consists of building the system and generating a bootable image out of it. When run for the first time, this step will also build the regular (non-LTO) crosscompilation toolchain. The first run may therefore (also) take several hours. The build procedure is just like regular MINIX3 crosscompilation, differing in only two aspects.

First, the appropriate build variables must be passed in to enable the desired functionality. In order to build the system with live update support through magic instrumentation, the build system must be invoked with the ''MKMAGIC'' build variable set to ''yes''. This will perform a bitcode build of the entire system, and perform magic instrumentation on all system services.

In order to build the system with ASR instrumentation, the build system must be invoked with the ''MKASR'' build variable set to ''yes''. This will automatically enable magic instrumentation, perform ASR randomization on all system services, and pregenerate a number of ASR-rerandomized service binaries for each service. This number can be controlled with an additional ''ASRCOUNT=n'' build variable, where the ''n'' value must be between 1 and 65536 (inclusive). The default ''ASRCOUNT'' is 3.

Second, in order to build a hard disk image suitable for use by the resulting bitcode builds, the ''x86_hdimage.sh'' script must be invoked with the '''-b''' flag. This will enlarge the generated image to account for the larger binaries, and enable inclusion of ASR-rerandomized binaries if necessary.

These two aspects can be covered in a single build command. The following short procedure will build a hard disk image with magic instrumentation:

  $ cd /home/user/minix-liveupdate/minix-src
  $ BUILDVARS="-V MKMAGIC=yes" ./releasetools/x86_hdimage.sh -b

In order to speed up the build, a number of parallel jobs may be supplied. It is typically advisable to use as many jobs as there are hardware threads of execution (i.e., CPU cores or hyperthreads) in the system:

  $ JOBS=8 BUILDVARS="-V MKMAGIC=yes" ./releasetools/x86_hdimage.sh -b

It may be necessary to ensure that clang is used as the compiler:

  $ CC=clang CXX=clang++ JOBS=8 BUILDVARS="-V MKMAGIC=yes" ./releasetools/x86_hdimage.sh -b

Also, some platforms may not be able to compile the compiler toolchain for the target platform due to running out of memory. In that case, it is possible to build an image that does not come with its own compiler toolchain, by passing in the ''MKLLVMCMDS=no'' build variable. This build variable can also be used simply to speed up the compilation procedure.

  $ BUILDVARS="-V MKMAGIC=yes -V MKLLVMCMDS=no" ./releasetools/x86_hdimage.sh -b

In order to build an image with ASR randomization, including four additional ASR-rerandomized versions of each system service, use the following build variables:

  $ BUILDVARS="-V MKASR=yes -V ASRCOUNT=4" ./releasetools/x86_hdimage.sh -b

Obviously, all variables shown above can be combined as appropriate. The author of this document has used the following command line on several occasions:

  $ CC=clang CXX=clang++ JOBS=4 BUILDVARS="-V MKASR=yes -V ASRCOUNT=2 -V MKLLVMCMDS=no" ./releasetools/x86_hdimage.sh -b

After the first run, the build system will perform recompilation of only the parts of the source code that have changed, and should not take nearly as long to run as the first time. In case of unexpected problems when rebuilding, it may be necessary to throw away the previously generated objects and rebuild the MINIX3 source code in its entirety. This can be done by going to the top-level ''obj.i386'' directory and deleting all files and directories in there, except the ''tooldir.{yourplatform}'' subdirectory. Fully rebuilding the MINIX3 source code will take longer than an incremental rebuild, but since the crosscompilation toolchain is left as is, it will still be nowhere close as long as the first run.

As explained in more detail on the [[Cross Compiling|crosscompilation page]], it is also possible to rebuild particular parts of the system without going through the entire "make build" process. This involves the use of the ''nbmake-i386'' tool and generally requires a good understanding of the compilation process.

==== Running the image ====

The x86_hdimage command produces a bootable MINIX3 hard disk image file. The generated image file is called ''minix_x86.img'' and located in the root of the MINIX3 source tree - ''minix-src'' in our examples. Once an image has been generated, it can be run. The most convenient way to run the image is to use '''qemu/KVM'''. This can be done using the command as given at the end of the x86_hdimage output.

While explaining the use of qemu is beyond the scope of this document, it may be useful to look into the ''-append'', ''-curses'', and ''-serial file:..'' qemu command line arguments. The following command line will launch qemu with KVM support (remove ''&lt;nowiki&gt;--enable-kvm&lt;/nowiki&gt;'' to disable KVM support), a curses-based user interface, and system output redirected to a file named ''serial.out'':

  $ cd /home/user/minix-liveupdate/minix-src
  $ (cd ../obj.i386/destdir.i386/boot/minix/.temp &amp;&amp; qemu-system-i386 --enable-kvm -m 256 -kernel kernel -initrd "mod01_ds,mod02_rs,mod03_pm,mod04_sched,mod05_vfs,mod06_memory,mod07_tty,mod08_mib,mod09_vm,mod10_pfs,mod11_mfs,mod12_init" -hda ../../../../../minix-src/minix_x86.img -curses -serial file:../../../../../minix-src/serial.out -append "rootdevname=c0d0p0 cttyline=0")

Extra [[Boot Monitor|boot options]] can be supplied in the (space-separated) list that follows the ''-append'' switch. For example, adding '' rs_verbose=1'' will enable verbose output in the RS service, which is highly useful for debugging issues with live update.

==== Summary ====

The following commands can be used to obtain and build a MINIX3 system that supports live update and live rerandomization, including three alternative rerandomized versions of all system services, in addition to the randomized standard ones:

  $ export CC=clang CXX=clang++ JOBS=8
  $ cd /home/user/minix-liveupdate
  $ git clone git:''git.minix3.org/minix minix-src
  $ cd minix-src/minix/llvm
  $ ./generate_gold_plugin.sh
  $ cd ../..
  $ BUILDVARS="-V MKASR=yes -V MKLLVMCMDS=no" ./releasetools/x86_hdimage.sh -b

The entire procedure will typically take about 30GB of disk space and several hours of time.

Sometime later, the following steps can be used to update the installation to a newer MINIX3 version:

  $ cd /home/user/minix-liveupdate/minix-src
  $ git pull
  $ CC=clang CXX=clang++ JOBS=8 BUILDVARS="-V MKASR=yes -V MKLLVMCMDS=no" ./releasetools/x86_hdimage.sh -b

In contrast to the initial run, the entire update procedure should take no more than an hour.

=== Using live update ===

Once an instrumented MINIX3 system has been built and started, it should be ready for live updates. MINIX3 offers two scripts that make use of the live update functionality: one for testing the infrastructure, and one for performing runtime ASR rerandomization. In addition, the user may perform live updates manually. In this section, we cover both parts.

The commands in this section are to be run within MINIX3, rather than on the host system. They must be run as root, because performing a live update of a system service requires superuser privileges. These two things are reflected by the ''minix#'' prompt used in the examples below.

==== Pre-provided scripts ====

The MINIX3 distribution comes with two scripts that can be used to test and use the live update and rerandomization functionality. The first one is ''testrelpol''. This script may be used for basic regression testing of the MINIX3 live update infrastructure. The second one is ''update_asr''. This command performs live rerandomization of system services at runtime.

===== Infrastructure testing: testrelpol =====

The MINIX3 test suite has a test script that tests the basic MINIX3 crash recovery and live update functionality. The script is called '''testrelpol''' and can be found in ''/usr/tests/minix-posix'':

  minix# cd /usr/tests/minix-posix
  minix# ./testrelpol

For its live update tests, this script does ''not'' use the magic framework for state transfer at all. Instead it uses '''identity transfer''' which performs a basic memory copy between the old and the new instance. As a result, the testrelpol script should succeed whether or not services are instrumented. However, it may not work reliably on MINIX3 systems that are not built for magic instrumentation (i.e., built with neither ''MKMAGIC=yes'' nor ''MKASR=yes'').

===== Live rerandomization: update_asr =====

As we have shown before, the ''MKASR=yes'' host-side build variable performs the ''build-time'' preparation of a MINIX3 system for live rerandomization. Complementing this, the ''run-time'' side of the live rerandomization is provided by means of the '''update_asr''' command. The update_asr command will update system services to their next pregenerated ASR-rerandomized version, using a cyclic system. Live rerandomization is not automatic, and thus, the MINIX3 system administrator is responsible for running the update_asr command at appropriate times.

By default, the update_asr command performs one round of ASR rerandomization, updating each service to its next version:

  minix# update_asr

By default, this command will report errors only. More verbose information can be shown using the ''-v'' switch:

  minix# update_asr -v

For further details about this command, see the update_asr(8) manual page.

Aside from providing actual security benefits, the update_asr script is the '''most complete test''' of the live update and rerandomization functionality at this time. It uses the magic framework for state transfer, with full relocation of all state, and it applies the runtime ASR features. As of writing, it runs in the default qemu environment without any errors or subsequent issues.

The only aspect that is not tested with this command, is whether ASR rerandomization is ''effective'', that is, whether all parts of service address space were properly randomized by the asr pass. After all, ASR rerandomization between identical service copies works just as well, but provides substantially fewer security guarantees. Developers working on the asr pass are encouraged to verify its effectiveness manually, for example using nm(1) on generated service binaries on the host side.

==== Live update commands ====

RS can be instructed to perform live updates through the minix-service(8) command, specifically through its '''minix-service update''' subcommand. This command is also used by the automated scripts. For a full overview of the command's functionality, please see the minix-service(8) manual page as well as the command's output when it is run with no parameters.

In its most fundamental form, the ''minix-service update'' command will update a running service, identified by its label, to a new version provided as an on-disk binary file. It is however also possible to tell RS to update the service into a copy of itself. In addition, various flags and options can be used for fine-grained control of the live update action. The basic syntax to perform a live update on a single system service is as follows:

  minix# minix-service [flags] update [self|&lt;binary&gt;] -label &lt;label&gt; [options]

Through various combinations of this command's parameters, MINIX3 basically supports four types of updates, representing increasingly challenging conditions for the overall live update infrastructure in general, and state transfer in particular. We will now go through all of them, and explain how they can be performed. For more details regarding what is actually going on below the surface, please consult the developers guide section of this document.

===== Identity transfer =====

The first update type is '''identity transfer'''. In this case, the service is updated to an identical copy of itself, with all functions and static data in the new instance located at the exact same addresses as the old instance. Identity transfer bluntly copies over entire memory sections at once, thus requiring no instrumentation at all. This makes it suitable for testing of the MINIX3-specific side of the live update infrastructure, hence its use in the ''testrelpol'' script. Identity transfer is the default of the minix-service(8) command when "self" is given instead of a path to a new binary:

  minix# minix-service update self -label pm

This will perform an identity transfer of the PM service. Identity transfer should work for literally all MINIX3 system services. As mentioned, it is guaranteed to work only when the system was built with ''MKMAGIC=yes'', although it will mostly work on systems built without magic support as well. It works regardless of whether the target service was instrumented with the magic framework (or ASR).

If the live update is successful, the minix-service(8) command will be silent, but RS will print a system message that the update succeeded:

  RS: update succeeded

If the system was started on qemu with ''OUT=F'', this message will end up in ''serial.out''. Otherwise, the message should show up in the MINIX3 system log (''/var/log/messages'') and possibly on the first console.

If the live update fails, RS should print an error to the system log, and minix-service(8) will complain. In order to debug such failures, it may be useful to enable verbose mode in RS, buy starting the system with ''rs_verbose=1'' as shown earlier.

===== Self state transfer =====

The second update type is '''self state transfer'''. Self state transfer also performs an update of a service into an identical copy of itself, but instead uses the state transfer functionality of the magic framework. Thus, self state transfer requires that the service be instrumented properly. This update type can be used to test whether a service's state can be transferred without problems. Please note that many of the points covered here also apply to the remaining two update types, as all three are using the state transfer of the magic framework.

Self state transfer is performed by supplying the ''-t'' flag along with "self" to the minix-service update command:

  minix# minix-service -t update self -label pm

This command will perform self state transfer of the PM service. The libmagicrt state transfer routine in the new service instance will print additional system messages while it is running. Upon success, the system output will look somewhat like this:

  total remote functions: 57. relocated: 54
  total remote sentries: 186. relocated normal: 84 relocated string: 101
  total remote dsentries: 5
  st_data_transfer: processing sentries
  st_data_transfer: processing dsentries
  st_data_transfer: processing sentries
  st_data_transfer: processing dsentries
  st_state_transfer: state transfer is done, num type transformations: 0
  RS: update succeeded

If the state transfer routine is not able to perform state transfer successfully, it will print messages that start with ''[ERROR]''. RS will then roll back the service to the old instance, and both RS and minix-service(8) will report failure. Self state transfer should succeed for all MINIX3 system services that have been built with bitcode and instrumented with libmagicrt and the magic pass. As of writing, there are no system services for which self state transfer is known to result in ''[ERROR]'' lines and subsequent live update failure. However:

* It is possible that new changes to system services, and even usage scenarios which we have not yet tested, do result in state transfer errors. Such errors should be resolved. The developers guide further below contains information on how to resolve some of these errors.

* Currently, one service is not built with bitcode, namely the memory driver. It is therefore also not instrumented. An attempt to perform self state transfer on any service that is not instrumented will result in a "Function not implemented (error 78)" error. For services other than the memory driver, this is usually a good indication that a step was missed during the build phase.

* Some services have no state to transfer, in which case their new instances will perform a fresh start instead of state transfer. In that case, live update with self state transfer will succeed, but not print the state transfer system messages shown above. This is the case for the IS (Information Server) and readclock.drv services, for example.

* Some services may only be updated once brought into a specific state of quiescence, because the default quiescence state is not sufficiently restrictive. In that case, the user must specify an alternative quiescence state explicitly, through the minix-service(8) ''-state'' option. This currently applies to all services that make use of userspace threads, namely the VFS, ahci, and virtio_blk services. These services must be updated using quiescence state 2 (''request free'') rather than state 1 (''work free''):

&lt;pre&gt;
  minix# minix-service -t update self -label vfs -state 2
&lt;/pre&gt;

Omitting the appropriate state parameter may result in a crash of the service after live update. At the moment, the update_asr(8) script has hardcoded knowledge about these necessary states. None of this is great, and we will be working towards a situation where the default state will not result in a crash - see the section on open issues further below.

* State transfer may be slow, and RS applies a rather strict default timeout for live updates. Therefore, it may sometimes be necessary to set a longer timeout in order to avoid needless failures. This can be done through the ''-maxtime'' option to minix-service(8):

&lt;pre&gt;
  minix# minix-service -t update self -label vfs -state 2 -maxtime 120HZ
&lt;/pre&gt;

The maximum time is specified in clock ticks by default, but may be given in seconds by appending "HZ" to the timeout. The latter may sound confusing and it is, but the original idea was supposedly that the number of seconds is multiplied by the system's clock frequency, also known as its HZ setting. The above example allows the live update of VFS to take up to two minutes.

===== ASR rerandomization =====

The third update type is '''ASR rerandomization'''. Like self state transfer, ASR rerandomization uses the magic framework to perform state transfer. In this case, the service performs state transfer into a rerandomized version of the same service. This involves specifying the path to a rerandomized ASR binary to the minix-service(8) command, as well as the ''-a'' flag. The ''-a'' flag tells the new instance to enable the run-time parts of rerandomization during the live update.

&lt;pre&gt;
  minix# minix-service -a update /service/asr/pm-1 -progname pm -label pm
&lt;/pre&gt;

In a system that has been built with ASR rerandomization, the (randomized) base service binaries are located in ''/service'' and the (randomized) alternative service binaries are located as numbered files in ''/service/asr''. As mentioned before, the update_asr(8) command can be used to perform these updates semi-automatically.

Compared to self state transfer, ASR rerandomization comes with one extra restriction: the VM service cannot be subjected to forms of state transfer more complicated than self state transfer. For this reason, VM is also skipped by the update_asr(8) command. We will explain the restrictions regarding the VM service in the developers guide.

===== Functional update =====

The final update type is a '''functional update'''. Compared to self state transfer, ASR rerandomization relocates code and more data. However, for ASR rerandomization, there are still fundamentally no differences between the old and the new version of the service. In contrast, in the case of a functional update, the service performs state transfer into a new program. While this new program is typically highly similar, it may be different from the running service in various ways.

In terms of the minix-service(8) command, such functional updates can be performed by simply using ''minix-service update'' with a new binary. For example, one could test a new version of the UDS (UNIX Domain Sockets) service, without installing it into ''/service'' yet, and without affecting its open sockets:

&lt;pre&gt;
  minix# minix-service update /usr/src/minix/net/uds/uds -label uds
&lt;/pre&gt;

The possibility of actual differences between the old and new service versions adds an extra dimension for the state transfer. Additional state transfer problems can be expected in this case, and must be dealt with accordingly. The developers guide will (eventually) elaborate on this point.

Similarly, depending on the nature of the update, the update action may require a specific state of quiescence. Taking UDS as an example, an update may change file descriptor transfers over sockets, in which case the update may impose that no file descriptors be in flight at the time of the update. The old instance of the service must support this as a custom quiescence state. This custom state can then be specified through the ''-state'' option of the ''service update'' command.

Since the live update functionality is relatively new for MINIX3, we do not yet have much experience with the practical side of performing functional updates to services. This document will be expanded as we gain more insight into the common usage patterns of live update. Stay tuned!

===== Multicomponent updates =====

From the user's perspective, updating multiple services at once is not much more complex than updating a single service. First, a number of '''minix-service update''' commands should be issued, just as before, but each with the ''-q'' flag added:

  minix# minix-service -q -t update /service/pm -label pm
  minix# minix-service -q -t update /service/vfs -label vfs -state 2

Then, the entire update can be launched with the '''minix-service sysctl upd_run''' command:

&lt;pre&gt;
  minix# minix-service sysctl upd_run
&lt;/pre&gt;

The RS output will be much more verbose in this case. Note that timeouts are still to be specified on a per-service basis, rather than for the entire update at once. If necessay, any queued ''minix-service update'' commands may be canceled with the '''upd_stop''' subcommand:

&lt;pre&gt;
  minix# minix-service sysctl upd_stop
&lt;/pre&gt;

This will cancel the entire multicomponent live update action.

== Developers guide ==

This part of the document provides in-depth information for developers. We start with information for system service developers, explaining how to support live update for a newly written service. This requires limited understand of the details of the live update infrastructure, and is therefore a somewhat separate section.

The rest of the developers guide is targeted towards people who maintain the live update infrastructure. We first cover some of the theoretical and practical aspects of the live update approach and infrastructure on MINIX3. We then elaborate on several practical aspects related to state transfer using the magic framework, including how to prevent and resolve state transfer issues.

=== Writing a service ===

This section is for writers of system services. We cover two aspects: general requirements for live updates, and specifying custom live update quiescence states.

==== General requirements ====

In by far most cases, allowing future live updates on a new service requires '''no action at all''' from the service developer. That is, if the service has been written properly, it can also be updated. Specifically, a service can be updated if it meets these conditions:

# It uses the System Event Framework (SEF) API throughout the service;
# It has one main message processing loop;
# It performs all its initialization in SEF initialization callback routines;
# It does not suffer from specific state transfer issues.

The first three points are required for all services in any case, and are not specific to live update. These points are therefore covered better on other pages, in particular those on [[Driver Programming|programming device drivers on MINIX3]] and the [[System Event Framework|System Event Framework API]] (warning: currently outdated). We do explain the reason behind these three points in detail later on.

Only the fourth point is specific to live update, and is relevant only to a small subset of services. This point is covered in more detail in the "State transfer in practice" section below. Specifically, as a service developer, you will want to verify that your new service does not suffer from potential issues with long-running memory grants, userspace threads, and physically unmovable memory. Then, you will want to test '''self state transfer''' on your service, and resolve any state transfer errors that come up. Only in these cases does the SEF live-update API (that is, the sef_*_lu_*(3) calls) become relevant. We do not elaborate on most of the SEF API in this document.

==== Custom quiescence states ====

In certain cases, a service may have to meet custom requirements before it is allowed to be updated. This depends on both the service and the update. We previously gave an example regarding the UDS service and transferring file descriptors before. As another example, an update that affects message protocols may have to ensure that the service has no outstanding requests to other services using that protocol. As yet another example, certain drivers may want to avoid being updated while certain types of DMA are ongoing, etcetera.

It is up to the writer of the service to implement any such custom quiescence states, assigning a number to each of them. It is then up to the system administrator to supply such a state with the ''minix-service update'' command, using the ''-state &lt;number&gt;'' option. Some of the quiescence states are predefined; others must be defined by the service developer explicitly. The following states are defined:

* State '''1''' (''SEF_LU_STATE_WORK_FREE''): work free. This state ensures that the service is not currently performing any work. The fact that the service is being prepared at the time of verifying the quiescence state implies that it is not doing any other work, and thus, SEF is hardcoded to accept updates in this state. The service developer can not override the check for this state.
* State '''2''' (''SEF_LU_STATE_REQUEST_FREE''): request free. This state ensures that the service is not currently processing any requests from other services. The state is not valid by default, and may be implemented by the service writer.
* State '''3''' (''SEF_LU_STATE_PROTOCOL_FREE''): protocol free. This state ensures that the service is not currently engaged in any protocol exchange with other services. The state is not valid by default, and may be implemented by the service writer.
* State '''4''' to '''6''': predefined states for specific purposes. These states are handled entirely by RS and SEF, and not relevant for service developers.
* State '''7''' and higher (''SEF_LU_STATE_CUSTOM_BASE''+''n''): custom states. These states may be used by services to define their own custom states. The namespace is per-service, so each service may define its custom states with numbers starting from 7 (''SEF_LU_STATE_CUSTOM_BASE+0'').

Thus, a service writer may want to implement states 2, 3, and/or any additional states starting from 7. This involves two necessary parts, and a third optional part.

First, the service must use the sef_setcb_lu_state_isvalid(3) SEF API call to specify a callback routine which specifies whether a particular state is valid for the service. In order to allow for states 2 and 3, but not any custom states, the standard sef_cb_lu_state_isvalid_standard(3) SEF callback routine may be given:

&lt;syntaxHighlight lang="c"&gt;
  sef_setcb_lu_state_isvalid(sef_cb_lu_state_isvalid_standard);
&lt;/syntaxHighlight&gt;

The service would typically issue this call before calling sef_startup(3). In order to allow for additional custom states, a custom callback routine must be supplied:

&lt;syntaxHighlight lang="c"&gt;
sef_setcb_lu_state_isvalid(my_state_isvalid);
&lt;/syntaxHighlight&gt;

This routine has the signature ''int my_state_isvalid(int state, int flags)'', and will be called when a live update is initiated through minix-service(8). As its most important parameter, ''state'' is the requested quiescence state. The ''flags'' parameter contains update flags and is typically unused. The routine must return ''TRUE'' if the state is valid for the service, and ''FALSE'' otherwise. Most services will want to allow the standard states as well as any custom states:

&lt;syntaxHighlight lang="c"&gt;
#define MY_CUSTOM_STATE_0 (SEF_LU_STATE_CUSTOM_BASE+0)
#define MY_CUSTOM_STATE_n (SEF_LU_STATE_CUSTOM_BASE+n)
  
return SEF_LU_STATE_IS_STANDARD(state) || (state &gt;= MY_CUSTOM_STATE_0 &amp;&amp; state &lt;= MY_CUSTOM_STATE_n);
&lt;/syntaxHighlight&gt;

Second, the service must use the sef_setcb_lu_prepare(3) SEF API call to specify a callback routine which verifies whether the service accepts a live update for a particular state, typically also before calling sef_startup(3):
&lt;syntaxHighlight lang="c"&gt;
sef_setcb_lu_prepare(my_lu_prepare);
&lt;/syntaxHighlight&gt;

This routine has the signature ''int my_lu_prepare(int state)'', and will be called when a live update is initiated through minix-service(8), after ensuring the given state is valid. Again, ''state'' is the requested quiescence state. The function must return ''OK'' if the live update can proceed in this state, and ''ENOTREADY'' otherwise. It should check the standard states and/or any custom states, typically in a switch statement.

Third, the service may optionally provide a quiescence state debugging function through the sef_setcb_lu_state_dump(3) SEF API call. The given callback routine has the signature ''int my_lu_state_dump(int state)'' and should use the sef_lu_dprint(3) printf-like function to print information about the given quiescence state and its current internal state as appropriate, using newline-terminated lines.

=== What is where ===

We now get into the details of the live update infrastructure. For many parts of the story, it may be useful to take a look at the actual source code as well. In this section we give a quick overview of what parts of the source code are where, and what they do.

The LLVM instrumentation passes are located in ''minix/llvm'' of the MINIX3 source code, along with generate_gold_plugin.sh script described in the users guide. The following relevant LLVM passes are located in ''minix/llvm/passes'':

* The '''WeakAliasModuleOverride''' pass resolves a particular issue with weak symbols being used in assembly code. TODO

* The '''sectionify''' pass is used to tag certain functions and data of bitcode modules as belonging to a certain section. Its main purpose is to tag certain parts of the compiled code such that the magic pass (see below), in a subsequent run over the same code, will treat the tagged parts as special. For example, it is used to ignore all variables in the libc malloc code for state transfer, for reasons explained later.

* The '''magic''' pass performs link-time static analysis and instrumentation of system services. It is responsible for supplying libmagicrt (see below) with the necessary information to allow for state transfer at runtime, by including descriptions of data types, global variables, and other information, in the service module. In addition, it is responsible for replacing certain function calls in the module, in particular memory management functions, with calls to wrappers in libmagicrt. This allows for runtime tracking of dynamically allocated memory objects.

* The '''asr''' pass performs randomization of the service binary, for example by rearranging functions, basic blocks within functions, and data, adding padding between those, and letting functions allocate stack padding. The ASR pass does not deal with randomization of dynamically allocated objects. Instead, it passes some settings on to libmagicrt.

In addition to the passes, the following pieces of system functionality are especially important for live update:

* The magic runtime library, '''libmagicrt''', is the runtime component of system services. It implements the actual state transfer routine, which uses both the information embedded in the service by the magic pass, and the tracking information it has gathered about dynamically allocated memory objects at run time. It also implements that actual runtime tracking. Furthermore, libmagicrt implements the aforementioned runtime part of the ASR functionality. For example, libmagicrt can add extra padding when performing memory allocations. The magic runtime library is located in ''minix/lib/libmagicrt''.

* The glue between system services and libmagicrt is implemented as part of the '''System Event Framework''' (SEF) library routines. These routines also handle the communication between the system service and RS. Use of SEF is compulsory for all system services. The SEF code is part of '''libsys'''. Its implementation can be found in the ''minix/lib/libsys/sef*.c'' files.

* The source code of '''RS''', the Reincarnation Server, is located in ''minix/servers/rs''. RS uses live update functionality implemented in the kernel, located in ''minix/kernel'', and VM, located in ''minix/servers/vm''.

=== The infrastructure ===

We now elaborate on various MINIX3-specific aspects that are important to understand regarding live update. We describe the live update procedure, show the consequences of the quiescence approach, list the properties of various process memory sections, describe the two supported types of state transfer, and elaborate on the exceptions to the general model for various core system services.

==== The update procedure ====

We first describe the live update procedure in more depth.

In general, properly achieving ''quiescence'' is one of the main challenges for a live update system. For example, if a live update changes the implementation of a particular function, the component being updated must not be executing that function at the time of the live update - if it is, the live update will most likely result in a crash of the component. In MINIX3, the quiescence issue is resolved in a way that leaves little room for problems, by exploiting MINIX3's message-based nature. In essence, all the MINIX3 services consist of a main message loop that repeatedly receives a message and processes this message. MINIX3 supports no kernel threads, and thus, the MINIX3 services have no internal CPU-level concurrency. As a result, a message can be used to enforce quiescence.

MINIX3 live updates are orchestrated by the RS (Reincarnation Server) service. The administrator of the system first compiles a new version of the service into an executable on disk, and then instructs RS to update a particular running system service into the new version, through the minix-service(8) utility. RS starts by loading the new version of the service as a new service process, without letting it run. Thus, there are temporarily two instances of the service: the old instance, which is still running, and the new instance, which contains the new code but not yet any of the necessary state.

RS then asks the old instance of the service to prepare to be updated, by sending a &lt;u&gt;prepare&lt;/u&gt; request message to it. At the moment that the service receives and processes the preparation message, it is by definition in a known state, as it cannot also be doing something else at the same time. While this is a good start for quiescence, the service may have to meet additional requirements regarding its current activity, depending on the service and the type of live update. The administrator provides the intended ''quiescence state'' for the live update when starting the update, and the service itself determines whether or not it is ''ready'' when handling the &lt;u&gt;prepare&lt;/u&gt; message. If the service decides that it does not meet the given quiescence requirements, the live update is aborted.

However, if the old instance does meet the requirements, it acknowledges that it is ready by sending a &lt;u&gt;ready&lt;/u&gt; message to RS, blocking on receipt of a reply from RS. Thus, the old instance is effectively stopped in a known state. In order to maintain the externally visible state (most importantly, the communication endpoint) of the service being updated, the process slots of the old and the new service instances are swapped. The new instance, now in the original process slot, is then allowed to run. Upon startup, the new instance finds out from RS that it is the new instance of an old, stopped process, and attempts to perform state transfer from this old process into itself.

State transfer requires transfer of all individual pieces of data from the old to the new process, possibly to a new location. This is performed by the magic framework. In a nutshell, the magic state transfer approach relies on having a full view of all the individual pieces of data that make up the process, along with type information about the data, including for example structure layouts and types of pointers. For static data, this information is generated by the magic pass through static analysis performed at compile time, and included with the service binary. For dynamic data, the information is collected and maintained by the magic runtime library attached to the service. The end result is that the state transfer framework knows about all global variables and functions, and for each pointer, what type of data the pointer points to.

This knowledge, in addition to full access to the memory of the old instance through a special memory grant, allows the libmagicrt state transfer procedure in the new instance to iterate over all data of the old process. This procedure recursively follows any pointers it encounters, and ''pairs'' each piece of data with the corresponding piece of data in the new process, copying over and adjusting (as necessary) the data for the new layout as necessary. In certain cases, the state transfer system may not be able to pair all pieces of data, or deal with all pointers. In that case, state transfer fails. Annotations in the service source code, as well as custom data transfer methods, can be provided in order to aid the state transfer process.

Regardless of whether state transfer succeeded or failed, the new instance sends the result of the state transfer to RS using an &lt;u&gt;init&lt;/u&gt; request message. If state transfer succeeded, RS allows the new instance to continue to run, and kills the process of the old instance. If the state transfer fails, RS again swaps the process slots of the old and the new instance, allows the old instance to run again, and kills the new instance. In both cases, RS communicates the result to the minix-service(8) utility as well, ultimately letting the system administrator know about the outcome of the live update.

For multicomponent live updates, all affected services are first brought into the ''ready'' state, after which they are all updated. Any service failing to get ready in the preparation phase will cause an abort of the entire update, and any service failing the state transfer phase causes a rollback of the entire update.

Updating the RS and VM components requires various deviations from the procedure sketched above. In addition, support for live updating the VM service is limited. We elaborate on these points later on.

==== The quiescence model ====

We describe the quiescence model in a bit more detail, in order to make two points: 1) the implementation of system services must follow a basic standard structure in order to allow for live update, and 2) the process stack is and can be disregarded for the purpose of state transfer.

The following piece of pseudocode represents a simplified and flattened version of the general structure of each system service:

&lt;pre&gt;
main:
	# initialization
	receive INIT message from RS
	if INIT message requests a FRESH start:
		perform service initialization
	if INIT message requests a LIVE UPDATE start:
		perform state transfer
	send result of performed action to RS

        # there should be nothing else here

	# the main message loop
	while true:
		receive message
		if message from RS and message is PREPARE:
			# for simplicity, we are always ready
			send READY message to RS
			receive response message from RS
			# if we get here, the live update has failed
			continue
		handle message
&lt;/pre&gt;

As can be seen, the service's initialization code starts by learning from RS what type of initialization it should perform.
This can be either ''fresh'' initialization of the system service, or state transfer for the purpose of live update (for simplicity we disregard crash recovery). If the service is started anew, typically during system boot, it will perform the service initialization. Such fresh initialization typically consists of initializing global variables, performing initialization-only procedures, etcetera. In contrast, if a new service instance is started for the purpose of live update, it will skip the fresh initialization and instead perform state transfer from the old instance.

In practice, all interaction with RS is implemented in the System Event Framework (SEF) library code. The service-specific actions such as the fresh initialization action are implemented as callbacks from SEF. In the case of fresh initialization, the service is to provide a callback function to SEF using the sef_setcb_init_fresh(3) API call. The default state transfer action for a ''live update'' start does not require code in the actual service at all.

If the service has initialization code that is called outside of the "fresh initialization" procedure, for example at the "there should be nothing else here" point, then this code will also be called in case of a live update, possibly undoing the effects of the state transfer. Therefore, services must perform initialization only from the designated initialization routines.

After either type of initialization, the service will enter the main message loop, where it will repeatedly receive a message and handle that message. If the received message is a &lt;u&gt;prepare&lt;/u&gt; request from RS, then the service is about to be updated, and it sends a &lt;u&gt;ready&lt;/u&gt; message to RS, blocking until it gets a response. If the live update is successful, this old instance will never get a response, and instead be killed.

As can be seen, in terms of the process stack of the service, the execution path from main() to the point where the service gets blocked receiving the &lt;u&gt;ready&lt;/u&gt; response from RS (let's call this the ''quiescence point'') is short and simple. As a result, if the state transfer procedure restored the new instance's stack and program counter to continue from the quiescence point, the result would essentially be the same as not doing so: in both cases, the new service would end up at the start of the message loop. Therefore, the MINIX3 state transfer approach chooses to disregard the execution context of the old process, thus obviating the need to transfer the stack altogether. This is viable only due to the well defined quiescence model.

However, it is possible that the functions leading up to the quiescence point, including the main message loop, have local variables on the stack that maintain long-running state. For example, the main() function could maintain a counter for the number of messages received so far. The values of such variables will be lost during the live update. If this were a major issue, the live update framework could be made to instrument the stack as well, but this could come at great cost since instrumenting only the stack of functions leading up to the quiescence point would be difficult. In practice, not having essential long-running variables in main() is rather simple, and we have not seen problems so far.

==== Process sections ====

The address space of a process is typically made up of various memory sections with different purposes, and MINIX3 system services are no different. There are important differences between various sections when it comes to state transfer.

* The new instance's '''text''' section is already as it should be: it contains the new code which has been loaded for the new instance by RS.
* The new instance's '''data''' section is initialized as though the service just started, and the state in this section must be transferred from the old service.
* As explained in the previous section, the '''stack''' section of the old instance can be ignored altogether, instead letting the new instance naturally reconstruct the stack by going through the regular process starting procedure to get back into main() and the message loop.
* The new instance will have an empty '''heap''' section. Its state transfer procedure will have to use the brk(2) system call in order to request heap memory for itself so that it can transfer the heap state from the old service.
* For the memory-mapped pages that make up the old instance's '''mmap''' section, things are slightly different: MINIX3 ensures that the new instance automatically inherits a copy-on-write version of all memory-mapped pages. Thus, the new instance will automatically have the old instance's memory-mapped pages mapped into its address space. For some pages, copy-on-write mappings are not possible. This is the case with memory-mapped I/O and for memory used for DMA transfers. Such pages are mapped with full sharing between the two instances.

For a live update of the VM service, the last two points are different. We describe the exceptions for VM in a later section.

With this situation as a given, MINIX3 allows for two forms of state transfer: identity transfer, and state transfer by the magic framework. These forms of state transfer are covered in the next two sections.

==== Identity transfer ====

The simple case is identity transfer. Identity transfer is a minimal state transfer approach that can only transfers state from an old instance to a new instance of exactly the same service, that is, a process with exactly the same address space layout and functionality. Identity transfer is also supported when the target service has not been instrumented, and in fact even when the system has not been compiled using LLVM bitcode altogether.

Since new instance is a newly started copy of the same service, it already has a text section that is identical to the old instance. As described, the stack section need not be transferred, and the mmap section is inherited automatically.

Therefore, identity transfer is concerned with the data and heap sections only. The new instance's identity transfer procedure starts by copying over the old instance's entire data section to itself. This includes the variable that contains the size of the old instance's heap (''_brksize''). The identity transfer procedure then calls brk(2) to allocate a heap for itself which is just as large, and copies over the old instance's entire heap section it itself as well. The identity transfer procedure is implemented in the System Event Framework (SEF) as part of libsys.

If the system is not built with ''MKMAGIC=yes'', which means that ''_MINIX_MAGIC'' is not defined, then the mmap section of the process is not well delineated and may in fact overlap with other memory areas. This is intentional, as it ensures that for such a set-up, the address space layout of services is not unnecessarily restricted and services can use the full address space for, say, a page cache. However, as a result, some memory-mapped areas may not be mapped into the new process, possibly leading to segmentation fault after the live update. Therefore, even identity transfer is not expected to be reliable on a system ''not'' built with ''MKMAGIC=yes''. Eventually, MINIX3 should be changed to use another approach for transferring memory-mapped regions to the new process altogether, which is either not based on ranges or not the default at all. See also the section on open issues in this document.

==== Magic state transfer ====

The other case is state transfer by the magic framework. This type of state transfer is used by the ''self state transfer'', ''ASR rerandomization'', and ''functional update'' update types as covered in the users guide. This form of state transfer relies on the magic pass and library to implement instrumentation and runtime support for state transfer. Again, state transfer is performed by the new instance of the service, using full access to the address space of its old instance.

The magic framework's state transfer procedure transfers data objects one by one. This includes all ''static'' objects. In this context, an object may for example be one global variable. The actual transfer of an object is not a simple memory copy; it involves analyzing any pointers in the object and adjusting these pointers as appropriate to match the address layout of the new instance.

The state transfer procedure also transfers ''dynamic'' data objects, which are located in the heap and mmap sections of the old instance. In essence, the procedure recreates the heap and mmap sections during the state transfer, by allocating new heap or mapped memory for each dynamic object, and then transferring its actual contents. This again includes pointer analysis and adjustment. Here, one object is one piece of memory created by a call to malloc(3) or mmap(2), for example.

Since MINIX3 already transfers the mmap section to the new instance automatically, the state transfer framework starts by unmapping all memory-mapped areas that it knows it will recreate. However, since some memory areas (the aforementioned memory-mapped I/O and DMA memory) cannot be recreated by the magic framework, these are not destroyed and recreated. These areas are called ''special'', ''out-of-band'' memory. The service has to tell the magic runtime library about special memory areas. For the two common ways of allocating such memory, alloc_contig(3) and vm_map_phys(2), this is done automatically by libsys.

Out-of-band memory is seen as opaque, physically and virtually unmovable memory, and ignored entirely for the purpose of state transfer. Thus, if a piece of out-of-band memory contains a pointer to a piece of memory that is ''not'' marked as out-of-band, this pointer will be missed during state transfer. For the aforementioned (memory-mapped I/O and DMA) memory types, this is not a problem.

The default of inheriting the entire mmap section leads to the situation that if the magic framework misses any memory-mapped areas for any reason, these will effectively translate to a memory leak in the new instance. Currently, one such memory leak is addressed explicitly: the page directory that is allocated with mmap(2) internally by the libc malloc code.

The state transfer procedure may fail if its analysis is not successful, in which the system will roll back to the old instance, and the live update fails. It is then up to the programmer to deal with such problems. This may involve annotating source code, for example to instruct the state transfer procedure to ignore certain pointers, or to copy over certain data as is. It may involve adding special state transfer routines to libmagicrt, which deal with fundamentally problematic cases such as unions. In rare cases, it may involve adapting source code to avoid state transfer problems. We discuss all this in more detail later.

In the case of self state transfer, all static objects will have the same location in both the old and the new instance. However, due to their dynamic recreation, the addresses of dynamic objects may change during self state transfer.

In the case of ASR rerandomization, not just the dynamic part, but also the static part of the address space will have objects that are relocated between the old and the new instance. In addition, ASR rerandomization permutes the order in which the old instance's dynamic objects are allocated in the new instance. Finally, the asr pass may insert padding which may expose wrong assumptions about alignment of various buffers. Thus, while live rerandomization is a security feature, in practice it may expose not only additional problems with state transfer, but also bugs in the service itself.

In the case of a functional update, the new instance may be fundamentally different from the old instance. Unlike the previous cases of state transfer, such live updates may involve functions and global variables that are added or removed, thus causing problems in the ''pairing'' part of the state transfer. The programmer may have to provide explicit state transfer routines in order to deal with these problems.

==== Exceptions for services ====

While MINIX3 allows all of its services to be updated, certain services require special exceptions to allow for live updates, because they are crucial to the live update process itself. These services are RS and VM. This section elaborates on the exceptions made for RS and VM, and explains why VM in particular cannot be updated arbitrarily.

===== The RS service =====

TODO

===== The VM service =====

MINIX3 has limited support for performing a live update of the VM (Virtual Memory) service. There are two reasons why VM is a special case. First, VM provides essential memory management and page fault handling functionality to the other system services. Thus, the live update must ensure that none of that functionality is required during the course of a live update that includes VM. Second, VM's core data structures include page tables. If these page tables are changed during a live update, it may be impossible to perform a proper rollback.

During normal operation, VM may allocate memory for itself. VM has both a heap and dynamic pages, implementing special local versions of brk(2) and mmap(2) to support this. In particular, page tables are stored in dynamically allocated memory, effectively in VM's mmap section. For VM, the live update procedure must therefore include the transfer of such dynamic state from the old to the new VM instance.

Since page tables cannot simply be copied, they are made visible to the new instance by mapping the old instance's dynamic memory ranges directly into the new instance's address space. That means that any changes made to the dynamic data structures by the new instance (page tables included) becomes visible to the old instance after a rollback. However, the two instances do each have their own static memory (i.e., text and data sections, as well as a preallocated stack). Thus, any changes to dynamic memory made by the new instance, would create a potential mismatch between the static and dynamic memory in the old instance after rollback.

Therefore, in order to allow for rollback, VM must not make any changes to its dynamic memory during the live update. That also means that it may not allocate memory during the live update, not for other processes and not for itself. This situation leads to the following exceptions:

* First and foremost, since the new VM instance essentially inherits the old instance's dynamic memory, the dynamic memory must be ignored by the state transfer framework. For this reason, at startup, VM tells libmagicrt that its entire dynamic memory region consists of special, out-of-band data. As a result, any pointers in this region will not be analyzed or adjusted by the state transfer procedure. This is a good thing, as changes to such pointers would not be undone after a rollback. However, the main consequence is that if the static memory layout of the VM process changes, any pointers in dynamic memory that point to static memory will become invalid. Therefore, updates to VM are limited to the '''identity transfer''' and '''self state transfer''' update types.
* Another effect of the automatic dynamic memory inheritance is that dynamic memory allocations need and must not be tracked. Therefore, dynamic memory allocation functions are not instrumented in VM at all, requiring an instrumentation override. This override also requires the need to disable some other instrumentation features, such as the aforementioned libc malloc page directory exception. The features are disabled during VM's linking process, through special statements in its Makefile.
* After a rollback, the old VM instance still has to perform a small number of corrective actions to undo changes made by the new instance. These actions are however kept to a minimum. In the future, more extended non-transparent rollback may be the key to allowing more invasive live updates to the VM service.
* The state transfer procedure requires some temporary memory to do its job. Since it cannot allocate such memory directly, an ''initialization buffer'' is preallocated in the new VM instance, and the state transfer procedure uses this buffer instead of allocating memory dynamically.
* RS requests VM to preallocate (''pin'') RS's memory before starting a live update, so that RS will not require VM's functionality during the live update.
* For multicomponent live update operations that include VM, all memory-modifying actions are performed before, rather than during, the actual live update operation, using special preparation requests sent by RS to VM. The memory of all new instances is also preallocated in order to avoid memory allocation and pagefaults during the live update. The old VM instance is the last process that is made ready for the update, and the new VM instance is the first process that gets to run right after.
* Despite the pinning, the new VM instance may have to handle brk(2) system calls coming from other new service instances that are all part of the same multicomponent live update. IPC filters are used to ensure that the new VM instance gets requests only from the other services in this group, and not from any other running services. Note that VM does not make any changes to its dynamic memory while handling a brk(2) call. Also, since all memory is preallocated, the VM instance should never get any pagefaults or handle-memory requests for other services' new instances; such requests are blocked by the IPC filters as well. If they do occur, they should result in a timeout of the entire multicomponent live update.

Overall, it should be clear that live update for the VM service is rather brittle. Eventually, a full revision of the live update approach for VM will have to reveal whether some or all of the current restrictions can be lifted.

=== State transfer in practice ===

In this section, we elaborate on some of the practical details of the state transfer of the magic framework, mainly aiming to allow developers to resolve real-world state transfer failures.

We do ''not'' get into most of the theoretical side of the state transfer, and we skip over many other practical details. Interested readers are advised to read the published work of Cristiano Giuffrida - see the "Further reading" section at the bottom of this document.

==== Some basics and terminology ====

The magic framework keeps track of each ''static'' object of data using a '''sentry''' ("state entry") data structure. The framework keeps track of each ''dynamic'' object of data using a '''dsentry''' ("dynamic state entry") data structure, which itself has an embedded ''sentry'' data structure. The magic pass installs libmagicrt wrappers around memory allocation routines so that it can allocate extra memory to store the dsentry metadata right before the actual memory object. Special, out-of-band memory regions are maintained in '''obdsentry''' ("out-of-band dynamic state entry") data structur. Since no extra memory can be allocated next to the actual memory object in this case, obdsentries themselves are (currently) stored as static data as part of libmagicrt's own state.

The magic framework also uses the concept of a '''selement''' ("state element"), which is a particular element within a state entry; for example, it can be one particular field in a structure. State is transferred one element at a time. If the state transfer procedure encounters a problem, it will report about the state element that is causing the problem.

Each pointer in the service process is expected to point a data type known to libmagicrt. All the possible data types that can be used by the service are enumerated through static analysis by the magic pass, and stored in a '''type''' table as part of the instrumented service. It may happen that one data type is cast to another, either in the source code of the service or as a result of the LLVM compilation and linking process. As a result, while the static analysis may conclude that a pointer is for one type, runtime state transfer may find that the pointer was (for example) allocated for another type. Normally, such mismatches would cause state transfer to fail, but casting makes this a legitimate case. Therefore, the magic framework has the notion of '''compatible types''': if type A is cast to type B anywhere, type A is marked as a compatible type for type B, and finding type A when transferring data of supposed type B will not result in state transfer failure. The magic pass adds a list of compatible types to the service binary as well, all for use by libmagicrt at state transfer time.

==== Annotation ====

In particular the analysis part of state transfer may not always succeed, for a variety of reasons. In particular, the state transfer framework has problems with unknown pointers, unions, and more generally cases of ambiguity. Such issues can often be resolved by the programmer through annotation in source code, which instructs the state transfer framework what to do with a particular variable. A variable can be annotated by prefixing either its type name (through ''typedef'') or its variable name with the annotation prefix followed by an underscore (e.g., ''noxfer_foo''). The following annotation prefixes are supported by the magic framework.

* '''noxfer''': No Transfer. This annotation will prevent transfer of the state altogether, instead zeroing out the memory in the new instance. As an example, the noxfer annotiation can be used in cases where analysis is failing (e.g., in unions) and the new instance will never be using the old instance's data anyway. A practical example where it is used is the ''message'' type. This data type contains a complicated union, and the quiescence model typically ensures that transferring this state is not necessary, as the service being updated is not involved in processing a message at the time of the update.
* '''ixfer''': Identity Transfer. This annotation will copy the data over as is, without performing analysis on the memory. As an example, the ixfer annotation can be used for pointer values that should not be analyzed as pointers, for instance because they are pointers into another address space. A practical example where it is used is a process table copied in from another service. Such process tables typically contain external pointers, which will be unused by the local service. Some other values may still be needed after state transfer, which is why ixfer is used rather than noxfer.
* '''cixfer''': Conditional Identity Transfer. This annotation will cause the state transfer framework to try to interpret and transfer the value as a pointer, and fall back to identity transfer if this fails. As an example, the cixfer annotation can be used for variables which may contain either a pointer or a number value which is never a valid pointer, making the variable effectively a union of the two types. A practical example where it is used is a callback value, which is of type ''void *'' but may be used to store a small integer as well.
* '''pxfer''': Pointer Transfer. This annotation forces a value to be interpreted as a pointer, and transferred accordingly. As an example, the pxfer annotation may be used when a pointer value is stored in an integer type. The pxfer annotation may also be used for a union of (differently typed) pointers. Thus, in some cases, a union-of-structures can be split up into a union of non-pointers and one or more unions of pointers, marking the non-pointer union with ''ixfer'' and the pointer union(s) with ''pxfer''. This is indeed how ''pxfer'' is currently used in practice as well.
* '''sxfer''': Structure Transfer. This annotation forces a union that consists of structures, to be interpreted as one single structure, and transferred accordingly. The annotation requires that the fields of the structures making up the union all line up. For example, if the first field of one structure in the union is an integer value, then the first field of all other structures in the union must be an integer value as well. If the second field is a pointer in one structure, it must be a pointer in all of them, etcetera. The sxfer annotation can be used to resolve state transfer issues with unions that consist of nearly-identical structures. The programmer must line up the structure's fields as appropriate when annotating the union as sxfer.

The transfer exception is applied to the type (or variable) with the annotation. For example, a noxfer typedef for a pointer to a structure will refrain from transferring that pointer:

&lt;syntaxHighlight lang="c"&gt;
  typedef struct foo * noxfer_foo_ptr_t; /* annotate the pointer */
  
  struct foo my_foo_struct; /* the structure will be transferred */
  noxfer_foo_ptr_t my_foo_pointer = &amp;my_foo_struct; /* the pointer will not be transferred */
&lt;/syntaxHighlight&gt;

However, a pointer to a noxfer typedef'ed structure will be transferred; the contents of the structure will not:

&lt;syntaxHighlight lang="c"&gt;
  typedef struct foo noxfer_foo_t; /* annotate the structure */
  
  noxfer_foo_t my_foo_struct; /* the structure will not be transferred */
  noxfer_foo_t * my_foo_pointer = &amp;my_foo_struct; /* the pointer will be transferred */
&lt;/syntaxHighlight&gt;

It is possible to enable debugging flags in libmagicrt such that it will print more details on how it handles annotated exceptions: in ''minix/lib/libmagicrt/include/st/callback.h'', change ''ST_CB_DEFAULT_FLAGS'' from ''(ST_CB_PRINT_ERR)'' to ''(ST_CB_PRINT_ERR|ST_CB_PRINT_DBG)''. The debugging statements will be sent to the system log, and have a ''[DEBUG]'' prefix.

==== Custom state transfer routines ====

Custom state transfer routines can be used in cases where annotation does not suffice.

TODO

There is currently one example case where a custom state transfer routine is used, namely for the ''dsi_u'' union in the ''struct data_store'' structure which is used by the Data Store (DS) service and defined in ''minix/servers/ds/store.h''. The custom state transfer routine is located in ''minix/lib/libmagicrt/magic_ds.c'', and provides the state transfer process with information as to which of the union's fields should be transferred.

==== Preventing state transfer issues ====

In some cases, small adjustments must be made to a service in order to prevent issues with state transfer. These types of issues will not result in failure of the state transfer procedure; instead, they may result in a crash of the new instance after a seemingly successful live update. We cover three topics: memory grants, userspace threads, and physically unmovable regions.

===== Memory grants =====

One potential issue concerns memory grants. Each service has a memory grant table, which is an array of all the memory grants that allow other processes to read and/or write the service's memory. If the service has any grants active at the time of a live update, the grants should in theory be adjusted in accordance with any relocation of the memory pointed to by the grants.

However, the main union of the grant structure (''cp_grant_t'', defined in ''minix/include/minix/safecopies.h'') is currently marked as ''ixfer'', meaning it will be transferred as is. This is not a problem for grants that point to memory ''outside'' the process being updated, and that means that indirect and magic grants pose no problem for state transfer. It is however a problem for grants that point to memory ''inside'' the process being updated, that is, for '''direct grants'''.

For this reason, for a service that may potentially have direct grants active at the time of the live update, its writer has two options: 1) implement a custom state transfer routine for the ''cp_grant_t'' structure in libmagicrt, thus resolving the problem described in this entire section altogether, or 2) prevent live updates of the service whenever the service has active memory grants. The first option is preferred. In any case, the potential consequence of doing neither is that the service ends up suffering from arbitrary memory corruption after a live update, since the transferred direct grant will point to the wrong memory location.

The live update system itself actually relies on the presence of a long-running direct grant, which provides access of the process's full address space to the process itself. The new instance uses this grant during a live update to access the memory contents of the old instance. Since the grant provides access to the process's entire address space, it does not suffer from the problem above.

===== Userspace threads =====

Userspace threads pose a problem for state transfer as well. We have previously explained that the process stack of the old instance can be disregarded by the state transfer procedure because it is "naturally" recreated in the new instance. The same does not apply to the stacks of userspace threads, since stack variables are not tracked at run time: even though the threads' stacks are transferred to the new instance by the magic framework, they are seen as blobs of (typically) memory-mapped character arrays. The result is that any pointers on these stacks will not be known to libmagicrt and thus not be transferred properly. In addition, thread context (CPU register) state will typically be stored as an array of integers, and similarly end up being skipped by the state transfer procedure. The result is that while state transfer may (appear to) succeed, the service will crash after completion of the live update.

At this time, the recommended solution is for the service to shut down all threads explicitly before starting state transfer, and to recreate the threads both after successful live update and as part of a rollback. The service may refuse to be updated if any of its threads are in use and cannot be shut down. The last point requires that the service supply a custom callback routine to SEF to perform that check for a quiescence state other than the default, through sef_setcb_lu_prepare(3). In order to allow the use of a nondefault state, a sef_setcb_lu_state_isvalid(3) callback routine must be supplied as well. For VFS and libblockdriver, we have chosen the following approach:

* Before SEF startup, the call ''sef_setcb_lu_state_isvalid(sef_cb_lu_state_isvalid_standard)'' is used to mark all standard quiescence states as valid, including ''SEF_LU_STATE_REQUEST_FREE'' and ''SEF_LU_STATE_PROTOCOL_FREE''.
* At the same time, a custom callback function is set using sef_setcb_lu_prepare(3). When SEF calls this function with either the ''SEF_LU_STATE_REQUEST_FREE'' or the ''SEF_LU_STATE_PROTOCOL_FREE'' state, the function will first check whether all worker threads are idle. If they are not, it will return a failure, aborting the live update. If they are, it will shut them down and report success.
* Similarly, a custom callback function is set using sef_setcb_lu_state_changed(3). When SEF calls this function with the ''old'' state being either ''SEF_LU_STATE_REQUEST_FREE'' or ''SEF_LU_STATE_PROTOCOL_FREE'', the function recreates the worker threads. This ensures that worker threads are recreated in the old instance upon a rollback.
* Finally, the service supplies its own state transfer hook using sef_setcb_init_lu(3). This function will first call the normal state transfer function using SEF_CB_INIT_LU_DEFAULT(), returning an error if state transfer failed. If state transfer succeeded however, and the preparation state given in ''info-&gt;prepare_state'' was either ''SEF_LU_STATE_REQUEST_FREE'' or ''SEF_LU_STATE_PROTOCOL_FREE'', then it continues by recreating the worker threads. This ensures that the new instance has worker threads before it leaves the state transfer phase.

The result of this approach is that updates must be invoked with ''-state 2'' (''request free'') or ''-state 3'' (''protocol free'') in order to guarantee proper state transfer. As a sidenote, none of these issues are a problem for identity transfer, which should continue to work even with ''-state 1'' (''work free'', the default).

===== Physically unmovable regions =====

Another case where the programmer may have to ensure that state transfer does not result in problems that will surface only after the live update, is when a service uses memory areas that are physically unmovable. Such memory areas are typically in use for DMA purposes. If the state transfer procedure changes the physical location of the buffers, DMA may be performed from or to the original physical location, resulting in garbage and possibly arbitrary memory corruption. Such DMA areas must be marked as special out-of-band memory in libmagicrt, and unmarked when freed, using the sef_llvm_add_special_mem_region(3) and sef_llvm_del_special_mem_region(3) SEF calls. This is done automatically by the alloc_contig(3) and free_contig(3) wrapper routines, but must be done explicitly for memory allocated in different ways.

However, this is only necessary if DMA can happen across a live update. In cases where it is known that no DMA can possibly be ongoing during the live update, the regions are not actually physically unmovable, and therefore need not be marked as such. For example, this is the case for the file system buffer cache implemented in libminixfs. This library allocates and manages buffers without using physically contiguous memory and alloc_contig(3), instead using mmap(2) directly and requesting DMA I/O in page-sized chunks (in order to avoid DMA issues on ARM). Therefore, it would be affected by the above problem, were it not for the fact that all its block I/O calls are synchronous. Any future introduction of more asynchrony will turn this situation into a real problem for live update, though.

As we mentioned before, memory-mapped I/O poses a similar problem. However, the only way to map such I/O memory is currently through the vm_map_phys(2) and vm_unmap_phys(2) calls, of which the libsys wrappers automatically call the special-memory marking/unmarking functions as well.

==== Resolving state transfer errors ====

If the magic state transfer procedure encounters problems, it will report failure, with details written to the system log entries using an ''[ERROR]'' prefix. In this section, we cover a number of common reasons for state transfer to fail in practice, including some example errors and workarounds.

===== Dangling pointers =====

In order to know how to transfer a piece of memory, the magic runtime library must know about the data type associated to that piece of memory. If no type information is known for a piece of memory, it cannot be transferred. There are various reasons why libmagicrt might not have type information about a piece of memory. The simplest one is a case of a '''dangling pointer''': a pointer that used to be valid at some point, but no longer is, because the memory pointed to has been deallocated. While the actual program may know not to use that particular pointer anymore, the state transfer routine does not have such knowledge. A typical error resulting from a dangling pointer may look like this, with some important parts of the output highlighted:

* '''[ERROR]''' uncaught ptr with violations. Current state element:
* SELEMENT: &lt;pre&gt;(parent=sbuf.1900354961, num=1, depth=0, address=0xdfb760a8, '''name'''='''sbuf'''.1900354961, type=TYPE: (id=53   , name=, size=4, num_child_types=1, type_id=10, bit_width=0, flags(ERDIVvUP)=01010000, values=%%''%%, type_str=i8/'''char%%*%%'''))&lt;/pre&gt;
* SEL_ANALYZED: &lt;pre&gt;(num=1, type=ptr, flags(DIVW)=1110, '''value'''='''0x080cb49f''', trg_name=, trg_offset=0, trg_flags(RL)=D0, trg_selements=(#1|0: 1|p=SELEMENT: (parent=???, num=0, depth=0, address=0x00000000, name=???, type=TYPE: (id=0    , name='''UNKNOWN_TYPE''', size=0, num_child_types=0, type_id=4, bit_width=0, flags(ERDIVvUP)=10000000, values=%%''%%, type_str=UNKNOWN_TYPE/UNKNOWN_TYPE))))&lt;/pre&gt;
* SEL_STATS: &lt;pre&gt;(type=ptr, trg_flags(RL)=D0, ptr_found=1, '''unknown_found=1''', violations=1)&lt;/pre&gt;

In this case, the global variable '''sbuf''' (suffixed with a tag to make its name unique) is a char* pointer to location 0x080cb49f. Since the magic runtime library knows no type information about this target (''trg'') memory location, it marks the location with the placeholder type UNKNOWN_TYPE and aborts state transfer because an unknown type was found. Another example:

* '''[ERROR]''' uncaught ptr with violations. Current state element:
* SELEMENT: &lt;pre&gt;(parent=inode.3951291702, num=80, depth=2, address=0xdfbe3210, '''name'''='''inode.3951291702/4/i_data''', type=TYPE: (id=61   , name=, size=4, num_child_types=1, type_id=10, bit_width=0, flags(ERDIVvUP)=01010000, values=%%''%%, type_str=i8/'''char%%*%%'''))&lt;/pre&gt;
* SEL_ANALYZED: &lt;pre&gt;(num=80, type=ptr, flags(DIVW)=1110, '''value'''='''0x08108098''', trg_name=, trg_offset=0, trg_flags(RL)=H0, trg_selements=(#1|0: 1|p=SELEMENT: (parent=???, num=0, depth=0, address=0x00000000, name=???, type=TYPE: (id=0    , name='''UNKNOWN_TYPE''', size=0, num_child_types=0, type_id=4, bit_width=0, flags(ERDIVvUP)=10000000, values=%%''%%, type_str=UNKNOWN_TYPE/UNKNOWN_TYPE))))&lt;/pre&gt;
* SEL_STATS: &lt;pre&gt;(type=ptr, trg_flags(RL)=H0, ptr_found=1, '''unknown_found=1''', violations=1)&lt;/pre&gt;

In this case, the '''i_data''' field of the fifth element ('''/4/''') of the global '''inode''' structure, also a char* pointer, is pointing to address 0x08108098 which is unknown to libmagicrt. The pointer address typically allows one to determine what kind of memory it is, by means of the memory sections of the process. In this particular example, the address was somewhat higher than the service's data end, thus suggesting the memory pointed to is heap memory. This matched with the source code of the service (PFS, the Pipe File Server), which dynamically allocates and frees the i_data buffers using malloc(3) and free(3).

It is up to the programmer of the service to ensure that the state transfer routine will not attempt to transfer a dangling pointer. This can be as simple as zeroing out the pointer after use, which is usually good practice anyway:

  free(rip-&gt;i_data);
  rip-&gt;i_data = NULL;

That is the solution that we applied in both cases.

===== External pointers =====

A similar problem occurs when a process has a pointer that is only valid in the address space of another process, or possibly the kernel. Unlike dangling pointers, such external pointers are never valid, and thus do not need to be transferred as pointers. The magic framework must be instructed to that end, for example using ''noxfer'' annotation. However, external pointers often end up in the local address space as a result of copying in entire structures at once (we already gave process tables as an example), in which case it may be necessary to use ''ixfer'' rather than ''noxfer''. For example, the ProcFS (/proc File System) service has several instances of the following construction:

&lt;syntaxHighlight lang="c"&gt;
  typedef struct mproc ixfer_mproc_t;
  static ixfer_mproc_t mproc;
&lt;/syntaxHighlight&gt;

In some cases, it may make more sense to zero out pointers instead. In other cases, we have changed code to retrieve not entire kernel tables but only specific values, or to use the kernel-mapped pages instead of copies of kernel structures to retrieve values. The magic runtime library already ignores pointers into kernel space (that is, 0xf0000000 and higher) altogether.

Theoretically it is possible that remote pointers end up being valid in the local address space by sheer luck. In known cases of copying in external pointers, it is best to not to rely on failures in the magic framework, but rather annotate the code in a proactive manner.

===== Weak symbols =====

If a service uses weak symbols, the code and data pointed to by these weak symbols may not be included in the linked service object at the time that the instrumentation passes are run. These weak symbols will be resolved and included only after the instrumentation stage. This results in the situation that some of the code and data that is part of the service, will not have been analyzed by the magic pass. The result is a range of possible state transfer failures, including cases where pointers end up pointing to unknown static memory and cases where memory allocation is not properly instrumented, ultimately leading to pointers to unknown dynamic memory.

The following example is from the DS service, where its use of the weak aliases for regcomp(3) and regfree(3) resulted in regcomp's malloc(3) calls not being instrumented:

* '''[ERROR]''' uncaught ptr with violations. Current state element:
* SELEMENT: &lt;pre&gt;(parent=ds_subs.1944246923, num=9, depth=3, address=0xdfbe6108, name='''ds_subs.1944246923/0/regex/re_g''', type=TYPE: (id=18   , name=, size=4, num_child_types=1, type_id=10, bit_width=0, flags(ERDIVvUP)=00000000, values=%%''%%, type_str=opaque*))&lt;/pre&gt;
* SEL_ANALYZED: &lt;pre&gt;(num=9, type=ptr, flags(DIVW)=1110, '''value'''='''0x08111000''', trg_name=, trg_offset=0, trg_flags(RL)=, trg_selements=(#1|0: 1|p=SELEMENT: (parent=???, num=0, depth=0, address=0x00000000, name=???, type=TYPE: (id=0    , name='''UNKNOWN_TYPE''', size=0, num_child_types=0, type_id=4, bit_width=0, flags(ERDIVvUP)=10000000, values=%%''%%, type_str=UNKNOWN_TYPE/UNKNOWN_TYPE))))&lt;/pre&gt;
* SEL_STATS: &lt;pre&gt;(type=ptr, ptr_found=1, '''unknown_found=1''', violations=1)&lt;/pre&gt;

In this case, the pointer '''ds_subs[0].regex.re_g''' ended up pointing to the unknown heap-section value of 0x08111000. We worked around this issue by forcing DS to use the targets of the weak aliases, _regcomp and _regfree, rather than their original names, using Makefile hacks.

===== Code used only in libmagicrt =====

If the magic runtime library itself uses other library modules, for example from libc, and these modules are not already used by the service itself anyway, then the bitcode linker may not include them in the linked object on which the instrumentation passes are run. Again, this may result in various failures, and unknown pointers in particular:

* '''[ERROR]''' uncaught ptr with violations. Current state element:
* SELEMENT: &lt;pre&gt;(parent=_ctype_tab_, num=1, depth=0, address=0xdfb760a8, '''name'''='''_ctype_tab_''', type=TYPE: (id=204  , name=, size=4, num_child_types=1, type_id=10, bit_width=0, flags(ERDIVvUP)=11000000, values=%%''%%, type_str=i16/unsigned short*))&lt;/pre&gt;
* SEL_ANALYZED: &lt;pre&gt;(num=1, type=ptr, flags(DIVW)=1110, '''value'''='''0x0809ccb6''', trg_name=, trg_offset=0, trg_flags(RL)=, trg_selements=(#1|0: 1|p=SELEMENT: (parent=???, num=0, depth=0, address=0x00000000, name=???, type=TYPE: (id=0    , name='''UNKNOWN_TYPE''', size=0, num_child_types=0, type_id=4, bit_width=0, flags(ERDIVvUP)=10000000, values=%%''%%, type_str=UNKNOWN_TYPE/UNKNOWN_TYPE))))&lt;/pre&gt;
* SEL_STATS: &lt;pre&gt;(type=ptr, ptr_found=1, '''unknown_found=1''', violations=1)&lt;/pre&gt;

In this particular failure case, the global '''_ctype_tab_''' variable pointed into another global variable, at location 0x0809ccb6 the data section. The other global variable was invisible to the magic pass, so no '''sentry''' object could be created for it. As a result, libmagicrt did not know about the target of the pointer. The _ctype_tab_ variable itself was used by the ''&lt;ctype.h&gt;'' isalpha(3) (etc) set of macros from within libmagicrt. We worked around this issue by putting our own replacement set of macros in libmagicrt instead.

===== Assembly code =====

Yet another case that leads to invisibility of certain aspects is the direct inclusion of assembly code. Assembly code is machine code, not bitcode, and thus, the bitcode instrumentation passes will have problems processing them. Needless to say, the use of assembly code should be minimal throughout the source code. In cases where it cannot be avoided, custom solutions have to be found for any resulting state transfer problems. Fortunately, much of the assembly in use by services these days is the result of optimized str*(3) and mem*(3) functions, which require no special treatment for the purpose of state transfer.

===== Incompatible types =====

Finally, we describe one class of state transfer failures which are the result of shortcomings in the magic instrumentation framework itself. LLVM bitcode has the notion of an '''opaque''' data type. The opaque data type is used for data of which the type has been declared but not defined, typically as a result of forward declarations of structures (''struct foo;''). Instead of resolving these types after they have been instantiated, LLVM tends to cast between various data types which are identical except for the presence of opaque pointers. As a result, opaque pointers may show up in various places in linked bitcode.

The magic pass should mark all these practically identical data types as ''compatible types''. However, due to the fact that the casts can take rather complex forms, this is not always happening. The result is that in some cases, state transfer may fail because libmagicrt erroneously detects an incompatibility between a pointer type and the type of data being pointed to. As an example, the following state transfer error was reported during state transfer of the PM service:

* '''[ERROR]''' uncaught ptr with violations. Current state element:
* SELEMENT: &lt;pre&gt;(parent=timers.515278380, num=1, depth=0, address=0xdfb760a8, '''name'''='''timers'''.515278380, type=TYPE: (id=96   , name=, size=4, num_child_types=1, type_id=10, bit_width=0, flags(ERDIVvUP)=01000000, values=%%''%%, '''type_str'''={ $minix_timer tmr_next \2, tmr_exp_time i32/long unsigned int, '''tmr_func opaque%%*%%''', tmr_arg { (U) $ixfer_tmr_arg_t ta_int i32/int } }*))&lt;/pre&gt;
* SEL_ANALYZED: &lt;pre&gt;(num=1, type=ptr, flags(DIVW)=1110, value=0x08147460, trg_name=mproc, trg_offset=274616, trg_flags(RL)=D0, trg_selements=('''#2'''|0: '''1'''|o=SELEMENT: (parent=mproc, num=0, depth=0, address=0x08147460, name='''mproc/143/mp_timer''', type=TYPE: (id=38   , name=minix_timer, size=16, num_child_types=4, type_id=9, bit_width=0, flags(ERDIVvUP)=00000000, values=%%''%%, names='minix_timer_t|minix_timer', '''type_str'''={ $minix_timer tmr_next { $minix_timer tmr_next \2, tmr_exp_time i32/long unsigned int, tmr_func hash_3792421438/*, tmr_arg { (U) $ixfer_tmr_arg_t ta_int i32/int } }*, tmr_exp_time i32/long unsigned int, '''tmr_func hash_3792421438/%%*%%''', tmr_arg { (U) $ixfer_tmr_arg_t ta_int i32/int } })), '''2'''|o=SELEMENT: (parent=mproc, num=0, depth=0, address=0x08147460, name=mproc/143/mp_timer/tmr_next, type=TYPE: (id=37   , name=, size=4, num_child_types=1, type_id=10, bit_width=0, flags(ERDIVvUP)=00000000, values=%%''%%, '''type_str'''={ $minix_timer tmr_next \2, tmr_exp_time i32/long unsigned int, '''tmr_func hash_3792421438/%%*%%''', tmr_arg { (U) $ixfer_tmr_arg_t ta_int i32/int } }*))))&lt;/pre&gt;
* SEL_STATS: &lt;pre&gt;(type=ptr, trg_flags(RL)=D0, ptr_found=1, '''other_types_found=1''', violations=1)&lt;/pre&gt;

In this case, the analysis failed on the global '''timers''' variable. The analysis dump shows that two matching types ('''#2''') were found, both associated with the '''mproc[143].mp_timer''' structure field, but neither type matched the type of the pointer. A closer look at the textual representations of the pointer type (the '''type_str''' of the primary ''selement'') and of the data types (the ''type_str'' of the target ''selement''s) reveals that there is only one difference between the two: the '''tmr_func''' field of the structure type to which the ''timers'' variable should point is an '''opaque''' pointer, whereas the same ''tmr_func'' field of the target structures is a particular function pointer (to a function referred to as '''hash_3792421438'''). The remainder of the types are the same.

The type strings are somewhat difficult to read. The asterisk at the end of a { structure } block indicates a pointer to this structure. In this case, the ''timers'' variable is a pointer to a '''minix_timer_t''' structure. The '''\n''' notation indicates type recursion of the type '''n''' levels up. In the type string of ''timers'', the '''\2''' after the '''tmr_next''' field indicates that it is again a pointer to ''minix_timer_t'': one type level up is the structure itself, two type levels up is the pointer to the ''minix_timer_t'' structure. In this case there are no three levels up, but in other cases three levels up could for example be a pointer to a pointer to a structure, etcetera. Although irrelevant in this case, the name of each structure is prefixed with a dollar sign, and '''(U)''' denotes a union.

In this case, the analysis failed because it foudn different, incompatible, and therefore '''other''' types, even though the opaque pointer and the function pointer were really the same field types. A look at the corresponding declarations in ''minix/include/minix/timers.h'' shows that there is indeed a forward declaration of ''struct minix_timer'' which is the cause of LLVM's link-time introduction of casts. We resolved this case by extending the casting analysis of the magic pass to include casts of structures through function prototypes.

The following example also resulted from the same forward declaration of MINIX3 timer structures, this time in the sched (scheduling) service:

* '''[ERROR]''' uncaught ptr with violations. Current state element:
* SELEMENT: &lt;pre&gt;(parent=sched_timer.29458437, num=4, depth=1, address=0xdfbe70b0, '''name'''='''sched_timer.29458437/tmr_func''', type=TYPE: (id=17   , name=tmr_func_t, size=4, num_child_types=1, type_id=10, bit_width=0, flags(ERDIVvUP)=00000000, values=%%''%%, type_str='''opaque%%*%%'''))&lt;/pre&gt;
* SEL_ANALYZED: &lt;pre&gt;(num=4, type=ptr, flags(DIVW)=1110, value=0x08048dc0, trg_name='''balance_queues'''.29458437, trg_offset=0, trg_flags(RL)=T0, trg_selements=(#1|0: 1|o=SELEMENT: (parent=???, num=0, depth=0, address=0x08048dc0, name=???, type=TYPE: (id=119  , name=, size=1, num_child_types=0, type_id=4, bit_width=0, flags(ERDIVvUP)=11000001, values=%%''%%, type_str='''hash_3792445575/'''))))&lt;/pre&gt;
* SEL_STATS: &lt;pre&gt;(type=ptr, trg_flags(RL)=T0, ptr_found=1, '''other_types_found=1''', violations=1)&lt;/pre&gt;

In this case, the type mismatch was not between two structures that differed in opaque fields, but between two function pointers themselves: the function pointer in '''sched_timer.tmr_func''', and the function it is pointing to, '''balance_queues'''. Registering these types as compatible would result in much more complexity in the magic pass, and likely still not resolve the more general problem of opaque pointers. This is currently one of the open issues, and we believe that another approach would be more viable; see below. In this particular case, it turned out that the sched service did not need to use timers at all, and we simplified it by getting rid of its use of timers altogether. Obviously, adapting the actual functionality of a service to allow for state transfer is not always an option, nor is it generally the right approach: the core code of system services should not have to be (re)written specifically to allow for state transfer.

== Open issues ==

In this section, we describe what we believe are currently the main open issues related to live update. For most issues, no active development is ongoing. We therefore invite any interested parties to work on resolving these issues, and welcome both inquiries and updates regarding the current status on both the [https://groups.google.com/forum/#!forum/minix3 MINIX3 newsgroup] and [info@minix3.org info@minix3.org].

This section is roughly sorted by order of importance, starting with the most important issues.

=== The build system ===

As shown in the setup part of the users guide, the live update functionality requires that a a separate instance of the LLVM toolchain be built. Unlike the standard toolchain, this separate instance is suitable for Link-Time Optimization (LTO). It is built by ''minix/llvm/generate_gold_plugin.sh'', and placed in ''obj_llvm.i386''. The exact same LLVM 3.6.1 source code is used to compile both the LTO-enabled toolchain and the additional regular crosscompilation toolchain in ''obj.i386'', using the exact configuration flags. The separate compilation is necessary only because of a problem with makefiles.

NetBSD uses its own set of makefiles to build imported code using its own build system. MINIX3 imports this system, and thus also uses the NetBSD set of makefiles to build the LLVM toolchain. The problem is that these makefiles do not operate in the same way as LLVM's own set of makefiles, resulting in certain parts of the LLVM toolchain being built in a different way. The separate LLVM LTO toolchain build does use LLVM's own makefiles, thereby generating some missing pieces that are required for the live update instrumentation.

The solution here is to adapt the NetBSD set of makefiles to build LLVM in a way that is closer to LLVM's own makefiles, thereby generating all the necessary parts of the toolchain without the need to build LLVM twice.

As part of this, the generated instrumentation passes should not be placed in the ''minix/llvm/bin'' subdirectory of the source MINIX3 tree. Instead, they should end up in an appropriate subdirectory of ''obj.i386'', thereby keeping the source directory clean.

=== Instrumentation ===

A number of shortcomings in our instrumentation passes currently lead to potential problems at run time.

==== Type unification ====

As shown in the developers guide, the magic instrumentation pass is not always capable of establishing that two different data types are in fact compatible, resulting in state transfer errors at run time. The main cause of these issues lies in LLVM's use of the '''opaque''' placeholder data type. We described the practical results of this in the earlier "Incompatible types" section.

This problem is a product of circumstances. Between LLVM 2.x and LLVM 3.x, a significant change was made in LLVM regarding the way that types are handled. In a nutshell, rather than unifying various instances of the same data type at compile time, LLVM 3.x keeps these instances as separate types, instead using bit casting between the types to resolve the resulting incompatibilities at link time. More details about this change can be found in the LLVM blog post 
[//blog.llvm.org/2011/11/llvm-30-type-system-rewrite.html LLVM 3.0 Type System Rewrite] by Chris Lattner.

However, the magic framework was written for LLVM 2.x, and as a result, this problem was dealt with as an afterthought. The combination of the wildly varying forms that these bit casts can take, and the limited support for processing the bit casts in the magic pass, has created the situation that not all cases of identical types are properly registered as ''compatible types''. As of writing, this has not yet been a real problem, but it is likely to become a problem in the future.

We believe that the right solution would be the introduction of a new '''type unification pass'''. This pass would unify all effectively-identical types in the module at link time, eliminating redundant types and bitcasts in the module. The pass could then be run before the magic pass. This would not only resolve the complete problem, but also free the magic pass of the burden to provide a complete system for enumerating compatible types. As a beneficial side effect, there would be a reduction in the amount of type state that needs to be included with the service, and a reduction in effort needed by libmagicrt to search through compatible types.

==== ASR skipping libmagicrt ====

The ASR pass currently exempts all of the magic runtime library from rerandomization. This is highly problematic for the overall effectiveness of ASR: libmagicrt is in principle linked with all system services, thus providing any attacker with a well known, large, unrandomized set of code and data for use in an attack on any running service.

The exact reasons as to why this exception was made are currently unknown. However, if possible, this overall limitation should be resolved by either removing the exception or at least narrowing it to the exact scope of the problem.

=== Memory management ===

The MINIX3 memory management, implemented in the VM service, currently has a number of significant limitations and missing features. Some of its problems are relevant for live update only. Other problems are merely becoming more visible as a result of enabling or using live update functionality.

==== Region transfer issues ====

As we already mentioned earlier, the transfer of memory-mapped pages requires that these pages be in a strictly delineated address range. This range may not overlap with any of the process's other sections' address ranges. The range is hardcoded globally, and thus, defined much more strictly than necessary for most service processes. Moreover, the definition indiscriminately affects all processes, including application processes. The result is that if the system is built with live update support, all processes are severely restricted in how much of their address space they can use for memory-mapped regions. Conversely, if the system is not built with live update support, even identity transfer may fail.

Another problem mentioned before, is the bulk transfer of all pages in the process's mmap section, regardless of whether the state transfer framework knows about them. This could easily lead to memory leaks due to transfer of untracked pages.

We believe that both points could be resolved with a system that does not automatically transfer memory-mapped pages from the old to the new instance, but rather performs such transfer on demand, so that the (identity or magic) state transfer routine can determine exactly what memory to transfer.

==== Out-of-memory issues ====

MINIX3 currently does not deal well with running out of memory. Most system services do not have preallocated pages in their heap, stack, and mmap sections. This may create major issues in low-memory situations. For example, if a service attempts to use an extra page of stack while the system has no free memory, the service will be killed, possibly taking down the entire system with it. Beyond VM freeing cached file system data when it runs out of memory, any sort of infrastructure to deal with this general problem is completely absent.

The live update and rerandomization support is making this situation even more problematic. The magic runtime library uses extra dynamic memory, and is not particularly careful about using preallocated memory where necessary. The ASR functionality increases memory usage even further. For example, its stack padding feature requires a considerable amount of extra stack space. The result is that there is now an increasingly large number of scenarios where out-of-memory conditions result in failure of running system services, and possibly the entire system.

Even though certain services should be rewritten to deal more gracefully with cases of dynamic memory allocation failure, the example of faulted-in stack pages illustrates that this is not a viable option in general. There has been a partial attempt to prepare file system service's buffer caches for having their memory stolen by VM at run time, but its implementation is, where present, deeply flawed, and will likely be removed altogether soon. Instead, we believe that the easiest solution for this problem is to let VM reserve a certain amount of memory exclusively for satisfying page faults and page-handling requests involving memory in system services.

In the meantime, it can be expected that '''test64''' of the MINIX3 test set - the test case that tests one particular scenario of running out of memory - will causes test or system failure in an increasing number of cases. It may have to be removed from the default set of tests in the short term.

==== Contiguous/DMA memory ====

In addition, MINIX3 does not deal with running out of physically contiguous memory at all. Some services require blocks of physically contiguous memory for DMA purposes. VM currently has no way to recombine fragmented blocks of free memory into larger physically contiguous ranges. In addition, some services require memory that is located in the lower 1MB or 16MB of the physical system memory. The support in VM for obtaining memory in those ranges is very limited as well. Both of these cases may result in the inability for a system service to obtain its needed resources if it is not started immediately at system bootup time.

These problems are not particularly important for live update, since the new instance will inherit special memory from its old memory by default. They are important for crash recovery however, and they are known to cause failures in the ''testrelpol'' test set on occasion.

==== Page protection ====

Finally, support for setting or enforcing page protection bits is mostly missing in VM as well. The live update integration has resulted in one particular case where this is now a problem. The MINIX3 userspace threading library, libmthread, inserts a guard page at the bottom of each thread stack in order to detect stack overruns. The guard page was originally created by unmapping the bottom page of the stack, thus leaving an unmapped hole there. This approach worked, but was not ideal: the hole could potentially be filled by a separate one-page allocation later, thereby subverting the intended protection.

Since libmagicrt performs extra memory allocations, this problem is a bit more relevant for live update. For this and other reasons, the libmthread code was changed to reallocate the guard page with ''PROT_NONE'' protection instead. Theoretically, this should work fine. In practice, since VM does not implement support for protection, the guard page is now simply an additional stack page. Thus, as of writing, the libmthread guard page functionality is broken.

Ideally, this issue would be resolved by implementing proper support for page protection in VM, including for example an implementation of mprotect(2).

=== Runtime infrastructure ===

We now list a number of other issues concerning the MINIX3 runtime infrastructure side of live update.

==== Default states ====

The case of userspace threads has shown that it may be not just useful, but actually ''necessary'' for certain services to provide their own handlers for checking, entering, and leaving a custom state of quiescence. These services may crash if the default quiescence state is used for a live update instead of the custom state. The result is the requirement that not just users, but also scripts - the update_asr(8) script in particular - be aware of specific services requiring custom quiescence state. This is inconvenient and dangerous.

The default quiescence state is currently hardcoded in the minix-service(8) utility, in the form of ''DEFAULT_LU_STATE'' in ''minix/commands/minix-service/minix-service.c''. Instead, we believe that the service should be able to specify its own default quiescence state, possibly using an additional SEF API call. It is not yet clear whether RS would need to be aware of the alternative quiescence state. If not, the translation from a pseudo-state to the real state could take place entirely in the service's own SEF routines. Otherwise, the SEF may have to send the default state as extra data to RS at service initialization time.

==== Policy redundancy ====

While the following issue is relevant more for crash recovery than for live update, it is included here because it affects the infrastructure supporting the ''testrelpol'' script.

Each service effectively knows what its own crash recovery policy should be. Separately, procfs has a policy table with an entry for each service in ''minix/fs/procfs/service.c'', containing the same crash recovery policy information, for export to userland and ''testrelpol'' in particular. This is effectively redundant information.

Ideally, each service would communicate its policy to RS. That information can then be used by procfs to expose the policy information to userland, thus eliminating the redundancy.

==== Live update of VM ====

Earlier in this document, we have described the limitations of performing live updates on the VM service, as well as the reasons behind these limitations. Despite a large number of exceptions that allow VM to be updated at all, the resulting situation is that VM can still not be subjected to any meaningful type of update.

It is unclear whether all these limitations are fundamental, however. We believe it may be possible to restructure the VM live update facilities to resolve at least some of the limitations. For example, it might be possible to store the pagetables in a separate memory section, and make actual copies of all or most other dynamic memory in VM. The out-of-band region could then be limited to the pagetable memory, thus allowing for relocation of at least static memory. Furthermore, more explicit rollback support in the old VM instance might even allow changes to VM's own pagetable, thereby possibly allowing dynamic memory allocation during the live update. It remains to be seen whether any of this is possible in practice.

==== Timed retries of safecopies ====

If process A is being updated, process B should temporarily not make use of process A's grants, because during the live update, those grants may be inaccessible, invalid, etcetera. The kernel currently has a simple way to enforce that rule, by responding to process B's safecopy kernel call with an ''ENOTREADY'' error response whenever process A is being updated. The service-side libsys implementation of sys_*safecopy*(2) automatically suspends the calling service for a short while (using tickdelay(3)) and then retries the safecopy. This shortcut approach works, but it is not ideal: it should not be the responsibility of system services to determine when the safecopy can be retried again, and the approach could lead to starvation.

Instead, the kernel should block the caller of a safecopy call for the duration of its target's live update procedure, retrying the safecopy operation and unblocking the caller only once the target is no longer being updated. A proper implementation of this functionality requires several cases to be covered: indirect grants, either the granter or the grantee being terminated or having its process slots swapped, etcetera. As a possible simplification, the kernel could internally retry the safecopy operation more often than necessary, since the caller would simply remain blocked if the retried safecopy operation hits a case of live update again.

==== Copying asynsend tables ====

In a very specific scenario, the kernel performs a memory copy of the entire asynsend table between two processes of which the slots are being swapped. Although it is not yet clear which exact circumstances cause the need for this memory copy, the actual copy action relies on very specific conditions which are not fully validated before the copy action. Thus, this is a rather dangerous kernel feature.

A rather long comment in ''minix/lib/libsys/sef_liveupdate.c'' elaborates on the specifics of this case, and suggests why RS may be the only affected service. If the comment is correct, it may be possible to engineer another solution for RS in particular, and remove the copy hack from the kernel.

=== Other issues ===

A number of miscellaneous issues remain. The first issue, regarding performance, is a relatively important issue. The other issues listed in this section are relatively minor.

==== Performance ====

The performance of various parts of the live update infrastructure is not fantastic. This is true for both the instrumentation passes and, more importantly, the run-time functionality. As one of the effects, live update operations may have to be given a lenient timeout in order to succeed. In fact, state transfer currently takes too long to consider automatic runtime ASR rerandomization as a realistic option.

We have not yet looked into the causes of the poor performance. Part of it may be due to the extra memory allocations performed by libmagicrt, but that is only a guess. This issue is therefore rather open ended. Statistical profiling may provide at least some hints.

==== Grant table transfer ====

Currently, the safecopy memory grant tables of system services are transferred as is: the main union of the ''cp_grant_t'' structure as defined in ''include/minix/safecopies.h'' is marked as '''ixfer'''.
In some scenarios, however, it is possible that during a service's live update, the service has grants allocated for remote services. For direct grants (of type ''CPF_DIRECT''), ''cp_direct.cp_start'' is actually a pointer into the local address space. The identity transfer therefore prevents this local pointer from being updated. Especially with ASR, there is a risk that after the live update, the grant points to arbitrary memory within the updated service. In the worst case, a remote user of the grant may end up overwriting this arbitrary memory in the updated service.

To resolve this, the grant structure should not be using '''ixfer''' for its main union. This probably means that a custom state transfer routine for the grant structure must be written, so as to use a pointer transfer only for ''CPF_DIRECT'' grants.

The same does ''not'' apply to magic grants (of type ''CPF_MAGIC''), as ''cp_magic.cp_start'' is an address in a remote process, which is either a userland process or a system process blocked on a call to VFS (as of writing, only VFS can use magic grants at all), and thus never subject to live update while the magic grant is active.

==== Testrelpol failure ====

If the ''testrelpol'' script is run a number of times in a row, it will start to fail on the crash recovery tests for unclear reasons. We know that this is a test script failure rather than an actual failure. We suspect that it is caused by RS's default exponential backoff algorithm for crash recovery causing timeouts in ''testrelpol''. If that is the case, it should be possible to change ''testrelpol'' to disable the exponential backoff using existing minix-service(8) flags.

==== Libmagicrt asserts ====

The implementation of the magic runtime library currently relies on asserts being enabled. We have changed its Makefile so that asserts should be enabled regardless of build system settings, but this is merely a workaround. Instead, libmagicrt should function properly (and, in particular, fail properly) regardless of whether asserts are enabled.

==== VM fork warning ====

During live update and crash recovery, the following VM error may be seen:

 VM: cannot fork with physically contig memory

The error indicates that it is currently not possible to mark physically contiguous memory as copy-on-write, which is true. However, the error may occur during a live update, when VM copies over the memory-mapped pages of a service's old instance to the new instance. The error is therefore not the result of a fork(2) call. In addition, the error code thrown by the function producing the error message, is ignored by its caller, with as result that the reference count of the contiguous memory range is increased anyway, which is exactly what needs to happen for live update operations. Thus, during live updates, this error is both misleading and meaningless. However, we have to review whether it is still useful to keep around the error for other scenarios.

==== State transfer prefixes ====

State transfer makes exceptions based on name prefixes. Some of these name prefixes are overly broad. For example, it is possible that the current exception of the prefix ''st_'' also ends up matching certain variables in actual service code by accident. At the very least, all exception prefixes should start with ''magic_''.

== Further reading ==

The following publication covers the MINIX3 live update architecture, design, and implementation, and provides more details on various theoretical and practical aspects.

* Cristiano Giuffrida, [https://www.minix3.org/theses/Cristiano_Giuffrida_PhD_thesis.pdf Safe and Automatic Live Update], Ph.D. thesis, 2014</text>
      <sha1>6k1wnzz1q1mucy767li69hxwab067hj</sha1>
    </revision>
  </page>
  <page>
    <title>Driver Programming</title>
    <ns>0</ns>
    <id>51</id>
    <revision>
      <id>373</id>
      <parentid>152</parentid>
      <timestamp>2022-02-07T09:53:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Sync with upstream</comment>
      <origin>373</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25498" sha1="r8crnyzefiftkk1s72ofrvspyx4ceep" xml:space="preserve">== Introduction ==
This tutorial helps you to get started with programming device drivers on Minix in C. A device driver is a computer program which interacts with real hardware components. For example, the computer which you use now to read this web page has a device driver for the display monitor. Another example is the disk driver, which reads and writes raw data from disk(s) in your computer. Clearly, computer systems would be useless without good device drivers.

== Requirements ==
Developing a device driver requires programming skills and knowledge of the target device(s). On Minix, device drivers are programmed in the C language. In this tutorial we assume that you know the basics of the C programming language, and that you have a working Minix system, &gt; version 3.2.1.

== Getting Started ==
The following sections contain step-by-step instructions to try out programming simple device drivers.

'''Please note that while this page may be slightly outdated, an up-to-date version of the hello driver is part of the MINIX3 source tree.''' You can find it in /usr/src/minix/drivers/examples/hello. The rest of this document will assume that the driver is not yet there, and will take you through the steps to create the driver yourself. Example 1 shows how to set up the infrastructure and create a very basic working driver process. Example 2 extends it into a simple character driver. The MINIX3 source tree's hello.c corresponds to the second example.

=== Example 1: Hello, World ===
Let's try the most simple driver possible first -- the Hello World device driver. It has only one task: print a hello message on startup, and then terminate. :-)

First create a directory in the Minix source tree to place the source code of our driver. As root, execute:

&lt;pre&gt;
# cd /usr/src/minix/drivers/examples
# mkdir hello
# cd hello
&lt;/pre&gt;
To compile the device driver, we need a [https://en.wikipedia.org/wiki/Make_(software) Makefile]. You can use the following code as your Makefile to compile the driver:

''Makefile'':

&lt;syntaxHighlight lang="make"&gt;
# Makefile for the hello driver.
PROG=   hello
SRCS=   hello.c

FILES=${PROG}.conf
FILESNAME=${PROG}
FILESDIR= /etc/system.conf.d

DPADD+= ${LIBCHARDRIVER} ${LIBSYS}
LDADD+= -lchardriver -lsys

MAN=

.include &lt;minix.service.mk&gt;
&lt;/syntaxHighlight&gt;
Then, create a C program file with the hello world program:

''hello.c'':

&lt;syntaxHighlight lang="c"&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;minix/syslib.h&gt;

int main(int argc, char '''argv)
{
    sef_startup();

    printf("Hello, World!\n");
    return EXIT_SUCCESS;
}
&lt;/syntaxHighlight&gt;
Ignore the sef_startup() call for now. We'll explain its purpose later.

In addition, we must create the ''hello.conf'' file. It contains the permissions for the service. Each device driver typically only needs to access one real hardware device, and uses a few functions provided by Minix. To give our simple hello try-out driver enough permissions to experiment with, create ''hello.conf'' with:

''hello.conf'':

&lt;pre&gt;
service hello
{
        system
                UMAP            # 14
                IRQCTL          # 19
                DEVIO           # 21
        ;
        ipc
                SYSTEM PM RS LOG TTY DS VM VFS
                pci inet amddev
                ;
    uid 0;
};
&lt;/pre&gt;

Now try to see if everything compiles correctly:

&lt;pre&gt;
# make clean
# make
# make install
&lt;/pre&gt;

If you did not receive any errors, it is time to try and run the device driver. Starting, stopping and restarting device drivers must be done using the '''minix-service(8)''' command. To start the hello program, enter the following command:

&lt;pre&gt;
#minix-service up /service/hello
Hello, World!
RS: restarting /service/hello, restarts 0
&lt;/pre&gt;
And what a surprise, it displays the ''Hello, World!'' message :-) in the kernel log. Check with writing the contents of /var/log/messages. Stop the driver with:

&lt;pre&gt;
#minix-service down hello
&lt;/pre&gt;
We received another message as well from the so-called ''Reincarnation Server'' (RS). In Minix as a [https://en.wikipedia.org/wiki/Microkernel microkernel], device drivers are separate programs which send and receive message to communicate with the other operating system components. Device drivers, like any other program, may contain bugs and could crash at any point in time. The Reincarnation server will attempt to restart device drivers when it notices they are abruptly killed by the kernel due to a crash, or in our case when they exit(2) unexpectedly. You can see the Reincarnation Server in the process list as '''rs''', if you use the '''ps(1)''' command. The Reincarnation Server sends keep-a-live messages to each running device driver on the system periodically, to ensure they are still responsible and not i.e. stuck in an infinite loop.

So how do we deal with this? We let our hello driver reply to the keep-a-live messages, so RS will correctly detect it is still running. Fortunately, as we will see in the next example, there is a library ''libchardriver'' on Minix. This library takes care of various tasks common to all character drivers. For example, it performs the communication with the Reincarnation Server and the operating system components transparently.

In contrast, one functionality that is directly exposed to the device driver developer is the initialization protocol. When a new device driver (or any other system service) is started, RS will send the driver an initialization message with information on how to initialize properly. The driver is expected to reply back with OK (initialization completed successfully) or with an error (initialization failed). In the former case, RS will assume the new device driver has been started correctly. In the latter case, RS will immediately shut down the driver without attempting to restart it. The user will be informed  with a message on the console. Fortunately, the initialization protocol is completely hidden in the [[SEF|System Event Framework (SEF)]] that exposes library calls to let developers handle initialization in an easy and effective way.

At the very beginning of the code in main() the developer has to register one or more initialization callbacks and then let [[SEF]] do the rest by calling ''sef_startup()''. This is the reason why we inserted a call to ''sef_startup()'' in the code above. Each callback is nothing but a function that receives initialization data as input and returns a status code to determine the result of the initialization process. As of now, developers can register callbacks for three types of initializations: ''fresh ''(when a service is started the first time), ''live update'' (when a service is dynamically updated to a new version), ''restart ''(when a service is restarted after a crash or a controlled restart).

=== Example 2: /dev/hello ===
In this example we will extend the hello driver and re-implement it using ''libchardriver''. Instead of just printing a hello on startup, we now want to use a device file ''/dev/hello'' to read the Hello World message. Each character and block driver is associated with a ''major'' device number. Thus, we need to pick a free major device number for the device--one that is not already in use for another device driver. We will use the major ID 17 in this example, which is assigned to the hello driver as it is (see ''minix/dmap.h''). We start by making the /dev/hello file:

&lt;pre&gt;
# mknod /dev/hello c 17 0
&lt;/pre&gt;

This command creates a '''c'''haracter device with major number 17 and minor number 0 (the minor number is not important for the hello driver), named /dev/hello.

You can reuse the Makefile from Example 1. Now create the ''hello.h'' header file:

''hello.h'':

&lt;syntaxHighlight lang="c"&gt;
#ifndef __HELLO_H
#define __HELLO_H

/* The Hello, World! message. */
#define HELLO_MESSAGE "Hello, World!\n"

#endif /* __HELLO_H */
&lt;/syntaxHighlight&gt;
As you can see, it contains a pre-processor macro for the message. Now place this source code in the ''hello.c'' file:

''hello.c'':

&lt;syntaxHighlight lang="c"&gt;
#include &lt;minix/drivers.h&gt;
#include &lt;minix/chardriver.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;minix/ds.h&gt;
#include "hello.h"

/*
 * Function prototypes for the hello driver.
 */
static int hello_open(devminor_t minor, int access, endpoint_t user_endpt);
static int hello_close(devminor_t minor);
static ssize_t hello_read(devminor_t minor, u64_t position, endpoint_t endpt,
    cp_grant_id_t grant, size_t size, int flags, cdev_id_t id);

/* SEF functions and variables. */
static void sef_local_startup(void);
static int sef_cb_init(int type, sef_init_info_t *info);
static int sef_cb_lu_state_save(int, int);
static int lu_state_restore(void);

/* Entry points to the hello driver. */
static struct chardriver hello_tab =
{
    .cdr_open	= hello_open,
    .cdr_close	= hello_close,
    .cdr_read	= hello_read,
};

/* State variable to count the number of times the device has been opened.
 * Note that this is not the regular type of open counter: it never decreases.
 */
static int open_counter;

static int hello_open(devminor_t UNUSED(minor), int UNUSED(access),
    endpoint_t UNUSED(user_endpt))
{
    printf("hello_open(). Called %d time(s).\n", ++open_counter);
    return OK;
}

static int hello_close(devminor_t UNUSED(minor))
{
    printf("hello_close()\n");
    return OK;
}

static ssize_t hello_read(devminor_t UNUSED(minor), u64_t position,
    endpoint_t endpt, cp_grant_id_t grant, size_t size, int UNUSED(flags),
    cdev_id_t UNUSED(id))
{
    u64_t dev_size;
    char *ptr;
    int ret;
    char *buf = HELLO_MESSAGE;

    printf("hello_read()\n");

    /* This is the total size of our device. */
    dev_size = (u64_t) strlen(buf);

    /* Check for EOF, and possibly limit the read size. */
    if (position &gt;= dev_size) return 0;		/* EOF */
    if (position + size &gt; dev_size)
        size = (size_t)(dev_size - position);	/* limit size */

    /* Copy the requested part to the caller. */
    ptr = buf + (size_t)position;
    if ((ret = sys_safecopyto(endpt, grant, 0, (vir_bytes) ptr, size)) != OK)
        return ret;

    /* Return the number of bytes read. */
    return size;
}

static int sef_cb_lu_state_save(int UNUSED(state), int UNUSED(flags)) {
/* Save the state. */
    ds_publish_u32("open_counter", open_counter, DSF_OVERWRITE);

    return OK;
}

static int lu_state_restore() {
/* Restore the state. */
    u32_t value;

    ds_retrieve_u32("open_counter", &amp;value);
    ds_delete_u32("open_counter");
    open_counter = (int) value;

    return OK;
}

static void sef_local_startup()
{
    /*
     * Register init callbacks. Use the same function for all event types
     */
    sef_setcb_init_fresh(sef_cb_init);
    sef_setcb_init_lu(sef_cb_init);
    sef_setcb_init_restart(sef_cb_init);

    /*
     * Register live update callbacks.
     */
    sef_setcb_lu_state_save(sef_cb_lu_state_save);

    /* Let SEF perform startup. */
    sef_startup();
}

static int sef_cb_init(int type, sef_init_info_t *UNUSED(info))
{
/* Initialize the hello driver. */
    int do_announce_driver = TRUE;

    open_counter = 0;
    switch(type) {
        case SEF_INIT_FRESH:
            printf("%s", HELLO_MESSAGE);
        break;

        case SEF_INIT_LU:
            /* Restore the state. */
            lu_state_restore();
            do_announce_driver = FALSE;

            printf("%sHey, I'm a new version!\n", HELLO_MESSAGE);
        break;

        case SEF_INIT_RESTART:
            printf("%sHey, I've just been restarted!\n", HELLO_MESSAGE);
        break;
    }

    /* Announce we are up when necessary. */
    if (do_announce_driver) {
        chardriver_announce();
    }

    /* Initialization completed successfully. */
    return OK;
}

int main(void)
{
    /*
     * Perform initialization.
     */
    sef_local_startup();

    /*
     * Run the main loop.
     */
    chardriver_task(&amp;hello_tab);
    return OK;
}
&lt;/syntaxHighlight&gt;
Let's try to understand what the above code does. First, it has several #include lines for the required prototypes and functions used in the program. Then, it declares a ''struct chardriver''. This structure is filled with [//en.wikipedia.org/wiki/Callback_(computer_science) callback] functions which will be invoked by ''libchardriver'' at runtime. It has callback functions for performing open, read, write and close operations on the device driver. Most of the action happens in the ''hello_read'' function. It used the ''sys_safecopyto'' function to copy the HELLO_MESSAGE string from the device driver program, to the user program reading from /dev/hello. The operating system will then on behalf of the device driver take care of properly copying the bytes between the two programs. An Input/Output vector ''iov'' is used by the ''sys_safecopyto'' function to describe the memory address for storing bytes and number of requested bytes by the user application.

In the ''main()'' function there are only two simple calls. ''sef_local_startup()'' is called at the very beginning to register [[SEF]] callbacks and then complete initialization. In ''sef_local_startup()'' the same function ''sef_cb_init_fresh()'' is registered as a callback for all the supported initialization types. This means that the initialization code executed when the driver starts will be always the same regardless of the device driver starting fresh, after a live update, or after a restart.

In ''sef_local_startup() ''we have also registered callbacks for live update events. A live update event is triggered by RS when a new version of a system service is available. At that point, RS sends a message to the old version of the service asking to prepare for a particular state as required by the update. The service will decide whether to accept the update state requested or reject the update otherwise. In the former case, the service commits itself to prepare for the update and reply back to RS when the target state has been reached. Only at that point, RS installs the update and the new version can be initialized from the state where the old version left off. Fortunately, the live update protocol is hidden in the [[System Event Framework]] and the driver developer does not have to be concerned with all the details. To support live update for a system service, the developer should only register callbacks to let [[SEF]] know what to do when a live update request comes along. The most important callback types for live update are ''state_isvalid'' and ''prepare''. A ''state_isvalid ''callback must be registered to tell [[SEF]] what update states should be accepted. A'' prepare ''callback is, in contrast, called every time a system service is given a chance to prepare to update (after an update request has been accepted). The callback must take the target state as input and return OK only if the service is ready for the requested update.

The hello driver is completely stateless and we can support live update starting from any state and let RS perform the update at the first possible chance. To accomplish this, we register two predefined callback implementations for the ''state_isvalid'' and ''prepare ''callback types. These are the library functions implemented within the [[SEF]] framework ''sef_cb_lu_state_isvalid_standard'' and ''sef_cb_lu_prepare_always_ready'', respectively. The callback ''sef_cb_lu_state_isvalid_standard ''accepts any standard live update state and the callback ''sef_cb_lu_prepare_always_ready'' always reports that the service is ready to be updated. When the device driver is not stateless, the developer has to provide appropriate implementations for these two callback types to support standard states and possibly some other custom states defined for the driver. The currently defined standard states are ''SEF_LU_STATE_WORK_FREE'' (the service is not doing any work), ''SEF_LU_STATE_REQUEST_FREE'' (the service has no pending request), ''SEF_LU_STATE_PROTOCOL_FREE'' (the service is not involved in a protocol).

Finally, the ''main()'' function executes ''chardriver_task()'' to let ''libchardriver'' start processing user requests and invoke our driver callback functions.

Now compile the program again using the same commands as in example 1, and start the driver with the '''service(8)''' command. We supply ''-dev /dev/hello'' to indicate that the newly started driver is responsible for the major device identified by /dev/hello - namely, major 17, which we picked earlier.

&lt;pre&gt;
# service up /usr/sbin/hello -dev /dev/hello
Hello, World!
&lt;/pre&gt;
Bingo! No more restarts from the Reincarnation Server. Now try to see if we can read the Hello World message using a device file.

We can simply use '''cat(1)''' to read from the hello device:

&lt;pre&gt;
# cat /dev/hello
hello_open()
hello_read()
hello_read()
hello_close()
Hello, World!
#
&lt;/pre&gt;
If you get the message above, the hello driver works!''' :D '''

Now let's try to restart the driver with the '''service(8)''' command to simulate a failure:

&lt;pre&gt;
# service refresh hello
Hello, World!
Hey, I've just been restarted!
# cat /dev/hello
hello_open()
hello_read()
hello_read()
hello_close()
Hello, World!
#
&lt;/pre&gt;
Finally, let's try it with a live update. Make the following change to the ''hello.h'' header file:

''hello.h'':

&lt;syntaxHighlight lang="c"&gt;
#ifndef __HELLO_H
#define __HELLO_H

/* The Hello, World! message. */
#define HELLO_MESSAGE "Hello, New World!\n"

#endif /* __HELLO_H */
&lt;/syntaxHighlight&gt;
Now recompile it and update the driver with the '''service(8)''' command:

&lt;pre&gt;
# make clean 
# make
# make install
# service update /service/hello -state 1    # request an update state where no work is in progress (i.e. SEF_LU_STATE_WORK_FREE=1)
Hello, New World!
Hey, I'm a new version!
# cat /dev/hello
hello_open()
hello_read()
hello_read()
hello_close()
Hello, New World!
#
&lt;/pre&gt;
As expected, the driver is updated live and the new version immediately takes over.

Hello, New World! B)

== Device Drivers in the Real World ==

=== Example 3: CMOS System Clock ===
Now let's try to write a device driver for a real hardware component in your computer, like the RTC clock. This device keeps track of the system time, and has a very simple I/O interface. Remember from the Introduction that writing device drivers is not only about programming, but also about understanding the hardware itself? Then before you continue, read these documents about the RTC:

* '''[https://wiki.osdev.org/CMOS OSDev]'''
* '''[https://ivs.cs.uni-magdeburg.de/~zbrog/asm/cmos.html CMOS Map]'''
* '''[https://www.freescale.com/files/microcontrollers/doc/data_sheet/MC146818.pdf MC146818 (Optional)]'''

Let's try to modify the hello driver we wrote in example 2, so we can use ''/dev/time'' to read the current system time from the RTC. You can reuse the Makefile from previous examples if you want. First create a header file with the needed definitions:

''time.h'':

&lt;syntaxHighlight lang="c"&gt;
#ifndef __TIME_H
#define __TIME_H

/* Major ID of /dev/time. */
#define TIME_MAJOR  17

/* Base I/O port of the CMOS. */
#define CMOS_PORT   0x70

/* Data field offsets of the RTC in CMOS. */
#define RTC_SECONDS      0
#define RTC_MINUTES      2
#define RTC_HOURS        4
#define RTC_DAY_OF_WEEK  6
#define RTC_DAY_OF_MONTH 7
#define RTC_MONTH        8
#define RTC_YEAR         9

/* RTC Registers and Flags. */
#define RTC_STATUS_A     10
#define RTC_STATUS_B     11
#define RTC_UIP          0x80
#define RTC_BCD          0x04

#endif /* __TIME_H */
&lt;/syntaxHighlight&gt;
Now place this C program in ''/usr/src/minix/drivers/examples/time'':

''time.c'':

&lt;syntaxHighlight lang="c"&gt;

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;minix/ds.h&gt;
#include &lt;minix/chardriver.h&gt;

#include "time.h"

/* Function prototypes for the time driver. */
int time_open(devminor_t minor, int access, endpoint_t user_endpt);
int time_close(devminor_t minor);
int time_read  (devminor_t minor, u64_t position, endpoint_t endpt,
        cp_grant_id_t grant, size_t size, int flags, cdev_id_t id);

int cmos_read_byte (int offset);
unsigned bcd_to_bin (unsigned value);
void time_from_cmos (char *buffer, int size);

/* SEF functions and variables. */
void sef_local_startup (void);
int sef_cb_init_fresh (int type, sef_init_info_t *info);

/* Entry points to the time driver. */
struct chardriver time_tab =
{
    cdr_open = time_open,
    cdr_close = time_close,
    cdr_read = time_read,
};

int time_open(devminor_t minor, int access, endpoint_t user_endpt)
{
    printf("time_open()\n");
    return OK;
}

int time_close(devminor_t minor)
{
    printf("time_close()\n");
    return OK;
}

int cmos_read_byte(int offset)
{
    uint32_t value = 0;
    int r;

    if ((r = sys_outb(CMOS_PORT, offset)) != OK)
    {
        panic("sys_outb failed: %d", r);
    }
    if ((r = sys_inb(CMOS_PORT + 1, &amp;value)) != OK)
    {
        panic("sys_inb failed: %d", r);
    }
    return value;
}

unsigned bcd_to_bin(unsigned value)
{
    return (value &amp; 0x0f) + ((value &gt;&gt; 4) * 10);
}

void time_from_cmos(char *buffer, int size)
{
    int sec, min, hour, day, mon, year;

    /*
     * Wait until the Update In Progress (UIP) flag is clear, meaning
     * that the RTC registers are in a stable state.
     */
    while (!(cmos_read_byte(RTC_STATUS_A) &amp; RTC_UIP))
    {
        ;
    }
    /* Read out the time from RTC fields in the CMOS. */
    sec  = cmos_read_byte(RTC_SECONDS);
    min  = cmos_read_byte(RTC_MINUTES);
    hour = cmos_read_byte(RTC_HOURS);
    day  = cmos_read_byte(RTC_DAY_OF_MONTH);
    mon  = cmos_read_byte(RTC_MONTH);
    year = cmos_read_byte(RTC_YEAR);

    /* Convert from Binary Coded Decimal (BCD), if needed. */
    if (cmos_read_byte(RTC_STATUS_B) &amp; RTC_BCD)
    {
        sec  = bcd_to_bin(sec);
        min  = bcd_to_bin(min);
        hour = bcd_to_bin(hour);
        day  = bcd_to_bin(day);
        mon  = bcd_to_bin(mon);
        year = bcd_to_bin(year);
    }
    /* Convert to a string. */
    snprintf(buffer, size, "%04d-%02x-%02x %02x:%02x:%02x\n",
             year + 2000, mon, day, hour, min, sec);
}

ssize_t time_read(devminor_t minor, u64_t position, endpoint_t endpt,
        cp_grant_id_t grant, size_t size, int flags, cdev_id_t id)
{
    int bytes, ret;
    char buffer[1024];

    printf("time_read()\n");

    /* Retrieve system time from CMOS. */
    time_from_cmos(buffer, sizeof(buffer));

    bytes = MIN(strlen(buffer) - (int) position, size);

    if (bytes &lt;= 0)
    {
        return OK;
    }

    ret = sys_safecopyto(endpt, grant, 0, (vir_bytes) buffer + position, bytes);

    if(ret != OK) return 0;

    return bytes;
}

void sef_local_startup()
{
    /* Register init callbacks. */
    sef_setcb_init_fresh(sef_cb_init_fresh);
    sef_setcb_init_lu(sef_cb_init_fresh);      /* treat live updates as fresh inits */
    sef_setcb_init_restart(sef_cb_init_fresh); /* treat restarts as fresh inits */

    /* Register live update callbacks. */
    sef_setcb_lu_prepare(sef_cb_lu_prepare_always_ready);         /* agree to update immediately when a LU request is received in a supported state */
    sef_setcb_lu_state_isvalid(sef_cb_lu_state_isvalid_standard); /* support live update starting from any standard state */

    /* Let SEF perform startup. */
    sef_startup();
}

int sef_cb_init_fresh(int type, sef_init_info_t *info)
{
    /* Initialize the time driver. */
    return(OK);
}

int main(int argc, char '''argv)
{
    /* Perform initialization. */
    sef_local_startup();

    /* Run the main loop. */
    chardriver_task(&amp;time_tab);
    return OK;
}



&lt;/syntaxHighlight&gt;

Let's write a Makefile to describe our executable and conf file:

&lt;syntaxHighlight lang="make"&gt;
# Makefile for the time driver.
PROG=   time
SRCS=   time.c

FILES=${PROG}.conf
FILESNAME=${PROG}
FILESDIR=/etc/system.conf.d

DPADD+= ${LIBCHARDRIVER} ${LIBSYS}
LDADD+= -lchardriver -lsys

.include &lt;minix.service.mk&gt;
&lt;/syntaxHighlight&gt;

Now we need to give the new time device driver access to the CMOS ports 0x70 and 0x71 using the ''time.conf'' file mentioned in the Makefile. Putting it in /etc/system.d/ lets service read it. This is the contents:

&lt;pre&gt;
service time
{
    io
        0x70:2;
        system
                UMAP            # 14
                DEVIO           # 21
        ;
        ipc
                SYSTEM PM RS LOG TTY DS VM VFS
                pci inet amddev
                ;
    uid 0;
};
&lt;/pre&gt;
To read a byte from the CMOS, a program needs to first write the offset which is requests to read to the address''' [https://en.wikipedia.org/wiki/Port-mapped_I/O I/O port]''', 0x70. Then it can read the data byte from I/O port 0x71. The''' '''time driver uses this mechanism to read the appropriate fields from the CMOS to retrieve the system time, and then outputs it as a string in the same way as we did in example 2.

Let's give it a try:

&lt;pre&gt;
# make
    compile  time/time.o
       link  time/time
# make install
    install  /service/time
    install  /etc/system.conf.d/time
# service up /service/time -dev /dev/time
# cat /dev/time 
2014-09-10 15:48:21
# date
Wed Sep 10 15:48:32 GMT 2014
&lt;/pre&gt;
Congratulations, you just wrote your first real device driver on Minix 3!''' :-) '''You can verify that the driver correctly reads the time by using the''' ''''''date(1)'''''' '''command.

=== Example 4: RS232 Serial Port ===
== Feedback ==
Finished the tutorial?''' :-) '''Tell us''' [https://groups.google.com/group/minix3/browse_thread/thread/aa17a4c6f891a585 what you think]. '''</text>
      <sha1>r8crnyzefiftkk1s72ofrvspyx4ceep</sha1>
    </revision>
  </page>
  <page>
    <title>Debugging</title>
    <ns>0</ns>
    <id>52</id>
    <revision>
      <id>424</id>
      <parentid>67</parentid>
      <timestamp>2022-02-08T18:04:27Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>424</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3170" sha1="9436uc8g51c7fjjkafj36mwtukut6lg" xml:space="preserve">Unfortunately that is a lot of what you do while programming. This page collects some tips.

== Serial in/out ==

For debugging and diagnostics, it is smart to always have serial out enabled to another machine (whether in a VM or not). It becomes easy to log your own in-kernel/-driver/-server printf()s, and to interrogate the system about its state. See [[Serial Out]] for full details.

== GDB from the outside ==

GDB within Minix isn't fully supported.

It is very convenient to debug Minix itself by attaching GDB to an emulator running it. VM-specific examples and general instructions follow.

== Example 1: qemu/kvm ==

* In short, let the linaro qemu start with the gdbserver (-s is a convenient shorthand for -gdb tcp::1234).
* Add -S if you don't want it to start executing right away, i.e. start as if it were in a breakpoint.
* Then attach to it with a gdb running elsewhere (''there'' in the following).

== Example 2: VMware ==

* Edit the .vmx file describing your virtual MINIX to append the following

&lt;pre&gt;
debugStub.listen.guest32 = "TRUE"
debugStub.hideBreakpoints = "TRUE" # Allows gdb breakpoints to work
	# really, prevent VMware (and GDB) to write INT3 into guest memory
#debugStub.listen.guest32.remote = "TRUE"
	# Allows debugging from a different computer / VM instead of localhost.
	# The IP for remote debugging will be that of the host.
#monitor.debugOnStartGuest32 = "TRUE"
	# Breaks into debug stub on first instruction (warning: in BIOS!)
	# This will halt the VM at the very first instruction at 0xFFFF0,
	# you could set the next breakpoint to break *0x7c00 to break
	# when the bootloader is loaded by the BIOS
&lt;/pre&gt;

== Emulator independant ==

Once you did the above

* Start the virtual machine
* Connect the external gdb to listening host on port 8832
 (gdb) target remote localhost:8832

Then you can already start following the thing ''here'', instruction by instruction.
* Have the executables you want debugged available there, so you can load them so gdb knows its symbols (and source line numbers if compiled with -g). then you have source line info.
* Compiling executables (and their libraries) you want debugged with -g helps a lot - it gives more source code line info and less weird optimization things happen. Specify ''DBG=-g'' on the make line to enable this, verify it does what you want by adding ''MAKEVERBOSE=2''.
* Load the executables' symbols into gdb so stacktraces etc. can be decoded nicely.
* Virtual addresses are usually not unique, so setting breakpoints and such won't work unless you specifically compile the executable you are interested in to be linked at a unique location. This already is true for the kernel of course.

== Making addresses unique ==

Setting breakpoints and watchpoints is easier if all addresses are unique. But because the same virtual address space is shared between many processes, this isn't usually true. To make your process get loaded at a unique location, tell the linker to link it to a high address. To do that, add ''-Wl,-Ttext=0x800000'' to the gcc link command line. E.g. in the VFS Makefile:

 LDADD+=        -lsys -ltimers -lexec -lmthread -Wl,-Ttext=0x800000</text>
      <sha1>9436uc8g51c7fjjkafj36mwtukut6lg</sha1>
    </revision>
  </page>
  <page>
    <title>Adding New Kernel Call</title>
    <ns>0</ns>
    <id>53</id>
    <revision>
      <id>68</id>
      <timestamp>2021-08-27T13:32:29Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import newkernelcall</comment>
      <origin>68</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3358" sha1="ftf2fouc2sskswds7fdv27leayvqv1h" xml:space="preserve">''(Working Draft)''

This tutorial helps you to add a new kernel call in MINIX. Let's say your new kernel call is called ''sample''.

1. Add the prototype of your kernel function do_sample() in the file: ''/usr/src/minix/kernel/system.h'' 
&lt;syntaxHighlight lang=c&gt;
...
int do_sample(struct proc *caller, message *m_ptr);

#endif  /* SYSTEM_H */
&lt;/syntaxHighlight&gt;
2. Write the implementation of do_sample() in its own source file: ''/usr/src/minix/kernel/system/do_sample.c'' 
&lt;syntaxHighlight&gt;
#include "kernel/system.h"
#include &lt;minix/endpoint.h&gt;

/*===========================================================================*
*                                do_sample                                  *
*===========================================================================*/
int do_sample(struct proc *caller_ptr, message *m_ptr)
{
        return(OK);
}
&lt;/syntaxHighlight&gt;
3. Add do_sample.c to the Makefile for compilation: ''/usr/src/minix/kernel/system/Makefile.inc'' 
&lt;syntaxHighlight lang="make"&gt;
# Makefile for system library implementation
.include &lt;bsd.own.mk&gt;

.PATH:  ${.CURDIR}/system
SRCS+=  \
        do_fork.c \
        do_exec.c \
...

        do_statectl.c \
        do_sample.c
&lt;/syntaxHighlight&gt;
4. Map SYS_SAMPLE to do_sample() in the system call table: ''/usr/src/minix/kernel/system.c'' 
&lt;syntaxHighlight lang="c"&gt;
...
  map(SYS_STATECTL, do_statectl);       /* let a process control its state */
  map(SYS_SAMPLE, do_sample);           /* your kernel call */
...
&lt;/syntaxHighlight&gt;
5. Add a prototype for the sys_sample function in the file: ''/usr/src/minix/include/minix/syslib.h'' 
&lt;syntaxHighlight lang="c"&gt;
...
int sys_sample(unsigned flags, endpoint_t proc_ep);
...
&lt;/syntaxHighlight&gt;
6. Add the call number for sys_sample to the call vector and increment its dimension: ''/usr/src/minix/include/minix/com.h'' 
&lt;syntaxHighlight lang="c"&gt;
...
#  define SYS_PADCONF (KERNEL_CALL + 57)       /* sys_padconf() */
#  define SYS_SAMPLE    (KERNEL_CALL + 58)      /* sys_sample() */


/* Total */
#define NR_SYS_CALLS    59      /* number of kernel calls */
...
&lt;/syntaxHighlight&gt;
7. Add the SAMPLE service to the system tab: ''/usr/src/minix/commands/service/parse.c''; build the updated system tab and install it with ''make; make install'' from ''/usr/src/minix/commands/service''/ 
&lt;syntaxHighlight lang="c"&gt;
...
struct
{
        char *label;
        int call_nr;
} system_tab[]=
{
...
        { "PADCONF",             SYS_PADCONF },
        { "SAMPLE",             SYS_SAMPLE },
        { NULL,         0 }
};
...
&lt;/syntaxHighlight&gt;
8. Write your implementation of the function sys_sample in a new file: ''/usr/src/minix/lib/libsys/sys_sample.c'' 
&lt;syntaxHighlight lang="c"&gt;
#include "syslib.h"

int sys_sample(unsigned flags, endpoint_t proc_ep)
{
        message m;

        return(_kernel_call(SYS_SAMPLE, &amp;m));
}
&lt;/syntaxHighlight&gt;
9. Add sys_sample.c to the ''/usr/src/minix/lib/libsys/Makefile'', and install it in ''/usr/lib/${MACHINE_ARCH}'' with ''make install''. 
&lt;syntaxHighlight lang="make"&gt;
# Makefile for libsys

LIB=            sys

SRCS+=  \
...
        sys_sample.c \
...
&lt;/syntaxHighlight&gt;
10. Test the new kernel call with a [[Driver Programming|hello driver]] in ''/usr/src/minix/drivers/sample_test''.
11. Rebuild the kernel and install it with ''make; make install'' from ''/usr/src/releasetools''.</text>
      <sha1>ftf2fouc2sskswds7fdv27leayvqv1h</sha1>
    </revision>
  </page>
  <page>
    <title>Performance Measurement</title>
    <ns>0</ns>
    <id>54</id>
    <revision>
      <id>69</id>
      <timestamp>2021-08-27T13:43:41Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import performance</comment>
      <origin>69</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4987" sha1="6hghug0t56lsremgxbg5fbob033ebl6" xml:space="preserve">== Measuring Performance in Minix ==

This page documents some features in Minix for measuring where the system is spending its time. If you are interested in optimising the system, this is the first thing to do.

== top ==

First question is: is the time i/o time or cpu time? A simple way to see whether the system is working as hard as it can is 'top.' Then look at the 'idle' time. Example:

&lt;pre&gt;
CPU states:  19.14% user,  22.76% system,  32.03% kernel,  26.07% idle
&lt;/pre&gt;

The cpu has been idle for 26% of the time, so optimising code for cpu efficiency might be less useful than finding out why the system is blocking.

== Statistical Profiling ==

To measure where the CPU is spending its time without having to change the source code, you can turn on statistical profiling in the kernel. For more information, see [[Statistical Profiling]].

== Code instrumentation ==

If you want to find out how many cycles a particular block of codes takes, use the TIME_BLOCK macro in &lt;timers.h&gt;. Simply place it around a piece of code like so:
&lt;pre&gt;
TIME_BLOCK(assert(ptr);)
&lt;/pre&gt;
and this will periodically print out a summary of the executed code using printf() (i.e. to stdout for user programs, and the console for system processes and kernel). It looks like this:
&lt;pre&gt;
/usr/src/lib/libsys/asynsend.c:136,2477,427,1058031,0.0002%
&lt;/pre&gt;
The fields are: file-line,executions,mean cycles per execution,total cycles,percentage of real time spent there

This is wall-time of course, so you can also measure blocking things such as waiting for an interrupt in the i/o driver.

If you're measuring many different bits of code (such as.. all asserts to see if any are too 'hot'), aggregate the total number of cycles per instance to get better statistics.

&lt;pre&gt;
awk -F, '{ totals[$1] += $4; total += $4;} END { for(k in totals) { print k, totals[k], totals[k]*100/total; } }'
&lt;/pre&gt;
The biggest spenders are:
&lt;pre&gt;
sort -rn +1 | awk '{ cum += $3; print $1, $2, $3, cum; }'
&lt;/pre&gt;
e.g.:
&lt;pre&gt;
slaballoc.c:415 35661436700 5.69854 5.69854
slaballoc.c:295 35442880232 5.66361 11.3621
/usr/src/servers/vm/arch/i386/pagetable.c:700 18634118063 2.97765 14.3398
region.c:372 17549949879 2.8044 17.1442
slaballoc.c:484 17381610920 2.7775 19.9217
slaballoc.c:337 17007185712 2.71767 22.6394
region.c:374 16000833123 2.55686 25.1962
region.c:373 15592228182 2.49157 27.6878
slaballoc.c:327 15497846925 2.47649 30.1643
/usr/src/servers/vm/arch/i386/pagetable.c:673 15425901084 2.46499 32.6293
&lt;/pre&gt;
i.e. the top 10 asserts (this measurement didn't include kernel asserts) account for 33% of all spent assert time.

== Benchmarking ==

Meaningful benchmarking is tricky. Things to consider are cache effects, deferred i/o, timer resolution, statistical significance, and so on. In Minix we are mostly concerned with doing measurements before and after an optimisation, so we can see its effects given a certain benchmark. Minix ships with a 'worldstone' benchmark script that automates much of this process for you - see its manpage for details. By default it runs 'make clean,' 'make all' 5 times and measures the times this takes (as compiling is much of what we do on minix, this is a popular benchmark) using the cpu cyclecounter (for optimal resolution and easy parsing) and prints these to a logfile. These logfiles can be fed to ministat directly to analyse for min, max, median, mean and stddev elapsed time values, and to compare two datasets to report for statistically significant difference.

Example of two worldstone runs fed to ministat, in src/servers:
&lt;pre&gt;
# worldstone
[..]
1. 2. 3. 4. 5. Done.
Time measurements logfile is time.master.worldstone.log.
Config file is .worldstone.21501.
# worldstone
[..]
1. 2. 3. 4. 5. Done.
Time measurements logfile is time.master.worldstone.log.next.
Config file is .worldstone.21501.
# ministat time.master.worldstone.log time.master.worldstone.log.next
x time.master.worldstone.log
+ time.master.worldstone.log.next
+--------------------------------------------------------------------------------+
|                                                           +                    |
|+         x  x x                  +         x              +         +         x|
|   |___________M|_______________A___________A______________M__|_________|       |
+--------------------------------------------------------------------------------+
    N            Min            Max         Median            Avg         Stddev
x   5    27161806509    27258328426    27169649200  27193155863.8  41020150.7714
+   5    27148582405    27244754550    27230223357  27210093689.2  38710394.3698
No difference proven at 95.0% confidence
&lt;/pre&gt;
Ministat reports the datasets are not statistically significantly different. Which is just as well, as they are the same experiment. But you get the idea.

== References ==
[https://www.minix3.org/doc/meurs_thesis.pdf|Building Performance Measurement Tools for the MINIX 3 Operating System] by Rogier Meurs, August, 2006</text>
      <sha1>6hghug0t56lsremgxbg5fbob033ebl6</sha1>
    </revision>
  </page>
  <page>
    <title>File:Eclipsetutorial1.jpg</title>
    <ns>6</ns>
    <id>55</id>
    <revision>
      <id>71</id>
      <timestamp>2021-08-27T13:53:57Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>71</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:53:57Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial1.jpg</filename>
      <src>https://wiki.iberty.cf/images/0/01/Eclipsetutorial1.jpg</src>
      <size>25108</size>
      <sha1base36>jfqx2v1tcum9sig6pj0n0mgtysfwfw0</sha1base36>
      <rel>0/01/Eclipsetutorial1.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCACWAwsDASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD2+iii
gBD95P8AfX+YrRrOP3k/31/mK0aACmmOMnJRSfcU6igBojRTlUUH2FDRRt95FP1FOooAaqKn3VA+
gp1FFABRRRQAVn2eiadYf2f9mt/L/s+0Nla/Ox8uE7Mryef9UnJyfl68nOf47/5J54l/7BV1/wCi
mry2wkXws/gm+8P2ca3E/hee61K3gXaJ9lsrxu6r1YyZG48nPWgD1G68D+Hb2xhsp7BzbRWi2IjW
5lQNAoIVG2sN4GTjdkgkkc81oyaJp0v2nfb5+03cV7L87fNNF5exuvGPJj4HB28g5OfIR498UxaJ
fSR6ml5L/wAI7ba2JxBGPs0jSgPBgLggru+9lhg80uk/E3xBqviiwsRKY7bWdUjn04mFM/2erzLI
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
/wB8H/GjbN/z0j/74P8AjUlFAEe2b/npH/3wf8aNs3/PSP8A74P+NSUUAR7Zv+ekf/fB/wAaNs3/
AD0j/wC+D/jUlFAEe2b/AJ6R/wDfB/xo2zf89I/++D/jUlFAEe2b/npH/wB8H/GjbN/z0j/74P8A
jUlFAEe2b/npH/3wf8aNs3/PSP8A74P+NSUUAR7Zv+ekf/fB/wAaNs3/AD0j/wC+D/jUlFAEe2b/
AJ6R/wDfB/xo2zf89I/++D/jUlFAEe2b/npH/wB8H/GjbN/z0j/74P8AjUlFAEe2b/npH/3wf8aA
JsjLoR3wh/xqSigAooooAKKKKAM+iiigBD95P99f5itGiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAppU5zvYe3Ht7f5zR
RQAgRhj94x/L29vb9aaYnJ/18g+gX/CiigD/2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial2.jpg</title>
    <ns>6</ns>
    <id>56</id>
    <revision>
      <id>72</id>
      <timestamp>2021-08-27T13:54:10Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>72</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:54:10Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial2.jpg</filename>
      <src>https://wiki.iberty.cf/images/d/d8/Eclipsetutorial2.jpg</src>
      <size>94399</size>
      <sha1base36>fammv02qq0xtiaf95jdd389l9psl8jj</sha1base36>
      <rel>d/d8/Eclipsetutorial2.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCALcAlIDASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBuo6yv
iy4kvdReWWydybWzZiscaDIUlQcb8E5PPUgHGBWcbTw2GKm0twRwRuP+NYlmWFlBhiB5a9/au50f
StPHh6e4ks1nvLp5NsjwtII8MRgYU46Z9a+jtTo0o2j2OCEHVlJyb0MEWnhs/wDLnb/99H/GpP7M
0H/oHw/mf8ap6lps1uWlKhYx1AtpkH5sgX9apbn/ALzfnW0PZzV1EitDktZs2f7M0H/oHw/mf8aP
7M0H/oHw/mf8a6O10uPXbf4e6XczTRwXC6lvMTAN8rBhyQe4rOsNE0W8ttCvJdSmtINUtbl0S5mW
PdLE4ULvwQgbOeQcYxzXP9YoJtSVrX6ev+QvZVHqmZv9maD/ANA+H8z/AI0f2ZoP/QPh/M/41t3+
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
S6s5JbzWdOvJbZy4uV8toN2xNuGjCRBi4OAQy4z09JoooAKKKKACiiigAooooAKKKKACiiigAooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAK4fTv+PG3/AOua/wAhXcVw+nf8eNv/ANc1/kKA
Lkn/ACw/6+Yf/Ri1j+Lv+SZL9LL/ANHRVsSf8sP+vmH/ANGLWP4u/wCSZL9LL/0dFV0/jRMvhZ84
3X/H3N/10b+dFF1/x9zf9dG/nRRU+N+oR+FHtvwa/wBXqP8A162v/oU1em6TPDa6VeXFxLHDBFcX
DySSMFVFDsSSTwABzmvMvg1/q9R/69bX/wBCmr1HQf8Ajzn/AOvub/0M1df+IxU/hRHY+LPDep3k
dnYeINKu7qTOyGC9jkdsAk4UHJwAT+FXtTleDSryaNtrxwOyn0IUkVi+HfAfhzwrqmo6jo+nR29x
fvlyOka8ZSMfwIWG7A7n0VQNy/ga6066t0xvlhdFz0yQRWJZy91rHhrT5zbah4pgtbpApeGfV/Ld
cgEZUuCMgg/jW1pEsbzyi3u2ubR4IZ4pDMZQwcvyrZOQQAR2rNufDuiahObnUPBdrd3TBRJPPa20
jvgADLM2TwAPoK1tMtfImcx2Qs7ZYIoIYAEAVU3cAKSAMMAB7UAZMmr3f2qaMXLAGVkGFX5AJ0j4
464Y9c0iavefaokN0xCSRoRsX94GuHjO7j+6o6Y5rQbw1aNPcS+fcBpiW4ZcIS4kyvH95Qec0L4a
tFnt5fPuS0RDEFlxIRIZAW4/vMTxisqcZqtzSfu2/G/+Qv8Al3brcoeNNUOmJoobW/7FtbrUDDc3
mYRtT7PM4GZVZRl0QdPbvVLT/FKWMOoTnUp9f0uF7SOC9hWJnkmmlMZjBjCI20mI5Az856kV0uo6
Z9vvtJufO8v+z7trnbtz5mYZYtuc8f63Oefu475BrOmf2vYx23neVsu7a53bd2fJmSXbjI67MZ7Z
zz0rUZRPiq3S/S1ksb2MB4oZ5mEZjt5pQpSJ8OTuO9B8oZfmHPNIvi20fW7bTVs70rc3UtpDdhF8
lpY0dpBnduGPLZeRyemQCQy68MSXGrTTrfKlhc3cF9cWxgy7TQ+XsKybvlX91HkbTnb1GawLWzvH
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
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVy/wAQ/wDkSrv/
AK7W3/o+Ouorl/iH/wAiVd/9drb/ANHx1dP40TL4WfM11/x9zf8AXRv50UXX/H3N/wBdG/nRRU+N
+oR+FHtvwa/1eo/9etr/AOhTV6pXlfwa/wBXqP8A162v/oU1eqVdf+IxU/hQUUUViWFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABXL/EP/kSrv8A67W3/o+Ouorl/iH/AMiVd/8AXa2/9Hx1dP40TL4WfM11
/wAfc3/XRv50UXX/AB9zf9dG/nRRU+N+oR+FHtvwa/1eo/8AXra/+hTV6pXlfwa/1eo/9etr/wCh
TV6pV1/4jFT+FBRRRWJYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFF
FABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFcv8Q/+RKu/+u1t/wCj466iuX+I
f/IlXf8A12tv/R8dXT+NEy+FnzNdf8fc3/XRv50UXX/H3N/10b+dFFT436hH4Ue2/Br/AFeo/wDX
ra/+hTV6pXlfwa/1eo/9etr/AOhTV6pV1/4jFT+FBRRRWJYUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
Fcv8Q/8AkSrv/rtbf+j466iuX+If/IlXf/Xa2/8AR8dXT+NEy+FnzNdf8fc3/XRv50UXX/H3N/10
b+dFFT436hH4Uez/AAhhkljv9lzLDi1tc+WFOfmm67ga9P8Asc//AEErr/vmL/4ivNvg1/q9R/69
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
TZpGSsj/2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial3.jpg</title>
    <ns>6</ns>
    <id>57</id>
    <revision>
      <id>73</id>
      <timestamp>2021-08-27T13:54:18Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>73</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:54:18Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial3.jpg</filename>
      <src>https://wiki.iberty.cf/images/0/0a/Eclipsetutorial3.jpg</src>
      <size>87973</size>
      <sha1base36>4dr2lzqrm6p3x4p5zxqw54r3ozf0148</sha1base36>
      <rel>0/0a/Eclipsetutorial3.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAMtAnQDASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBuo6yv
iy4kvdReWWydybWzZiscaDIUlQcb8E5PPUgHGBWcbTw2GKm0twRwRuP+NYlmWFlBhiB5a9/au50f
StPHh6e4ks1nvLp5NsjwtII8MRgYU46Z9a+jtTo0o2j2OCEHVlJyb0MEWnhs/wDLnb/99H/GpP7M
0H/oHw/mf8ap6lps1uWlKhYx1AtpkH5sgX9apbn/ALzfnW0PZzV1EitDktZs2f7M0H/oHw/mf8aP
7M0H/oHw/mf8a6O10uPXbf4e6XczTRwXC6lvMTAN8rBhyQe4rOsNE0W8ttCvJdSmtINUtbl0S5mW
PdLE4ULvwQgbOeQcYxzXP9YoJtSVrX6ev+QvZVHqmZv9maD/ANA+H8z/AI0f2ZoP/QPh/M/41t3+
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
ubBYryRY4m+zl2HlhtjBioyCD1PrU3wa/wBXqP8A162v/oU1dPqHw/sNQ1XWL19S1KJNZES39rE8
YjmWNdqrkoXUYznDDOTRX/iMKfwoxdS+KsOkWOkme0gkurrR01WdZrpbcBCB8keQd7k7sJxnHWrM
PjTU7vx/DaW0Fu+iSeH/AO1ox5u2VwxG1iWAAOfl2lgMEsW/hG3qngyw1G+gvYLu+0y6htTZCWwl
EbGAnOzlTgA8gjBHY0t74L0y+1MX8st35jaY+lSjzdwmt27OWBYtnncCDnrmsSzmH+I6ara+INOa
1MUlvok+oRXOn3rEOigqdkhjXa4PRlDLnucYrHXxnc6LrNnqbNqV5Yx+Cre9+xPcmRnkaZV3ucAF
8H5n25wCcdq6y0+GWlWvn51HVJ/N0dtF/eyRnZbn+7hBhh2PI9QatJ8P9MinhmivdTilh0dNGR4r
jy2WFGDBwygEPkDkHHtQBY8H+Kh4rsri5WC2RInCrJbXizpICM+iupHQh1U+ma6OsHw74TsPDU9/
c20s891fujXE0+wF9owvCKqjGT0GTnnNb1ABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUU
UAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAfJGq/6
y1/69Yv/AEGijVf9Za/9esX/AKDRW1f+IyKfwo9j+DX+r1H/AK9bX/0KavV1idxlRkfWvKPg1/q9
R/69bX/0Kaum8UW9pceK9FF74cOvxLYX7fZRFBIVIe1+fEzKvHI4Ofm6daK/8RhT+FHZeRJ/d/UU
eRJ/d/UVw+naw2ieGYbqwtfsdtq+pFdPtltXuvsUfkliphhOSd0MhKKflL842mtGLxD4h1KTR7Wy
t7WzuLy1vJpmv7SZcGCWKNWEZZWCv5mcNyAwPbBxLOn8iT+7+oo8iT+7+orkLbxrqcenQ6rf29o1
nd6BNrMMMCsJI/KWJijMSQ24TDkAYwRz1qPXtV8RrbSaab6xh1CC80uY3EFtJ5bRz3Xl7Nvm54ZD
uO7DKSMLnIAOz8iT+7+oo8iT+7+ornLvxbep4sk022tZpoLe7htJo006eQt5ixsZPPX92gUSAlW5
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
2eOETSeXsSIKd2w7WwXPbkL32vFPh3UbzUJvsJv/ALHd2UVmYbKS2jVNryEl2lRmUYcYMYJ+Xp0r
t6KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKAPkjVf9Za/wDXrF/6DRRqv+stf+vWL/0Gitq/8RkU/hR7H8Gv9XqP/Xra/wDoU1eqV5X8
Gv8AV6j/ANetr/6FNXqlFf8AiMKfwoKKKKxLCiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigD5I1X/WWv8A16xf+g0Uar/rLX/r1i/9Borav/EZFP4Uex/Br/V6j/162v8A6FNXqleV/Br/
AFeo/wDXra/+hTV6pRX/AIjCn8KCiiisSwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooA+SNV/1lr/ANesX/oNFGq/6y1/69Yv/QaK2r/xGRT+FHsfwa/1eo/9etr/AOhTV6pXlfwa/wBX
qP8A162v/oU1eqUV/wCIwp/CgooorEsKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
PkjVf9Za/wDXrF/6DRRqv+stf+vWL/0Gitq/8RkU/hR678IVuWjv/s8sUf8Aotru8yMvn5pumGGK
9P8AL1H/AJ+rX/wGb/45Xm3wa/1eo/8AXra/+hTV6pRX/iMKfwoqeXqP/P1a/wDgM3/xyjy9R/5+
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
+YMKqkHJYf3v0oorWc20whdRsz//2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial4.jpg</title>
    <ns>6</ns>
    <id>58</id>
    <revision>
      <id>74</id>
      <timestamp>2021-08-27T13:54:29Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>74</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:54:29Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial4.jpg</filename>
      <src>https://wiki.iberty.cf/images/d/dc/Eclipsetutorial4.jpg</src>
      <size>24130</size>
      <sha1base36>h4ume04gr9qnd5vwph2sravg6f1au8h</sha1base36>
      <rel>d/dc/Eclipsetutorial4.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAGvAWADASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBuo6yv
iy4kvdReWWydybWzZiscaDIUlQcb8E5PPUgHGBWcbTw2GKm0twRwRuP+NYlmWFlBhiB5a9/au50f
StPHh6e4ks1nvLp5NsjwtII8MRgYU46Z9a+jtTo0o2j2OCEHVlJyb0MEWnhs/wDLnb/99H/GpP7M
0H/oHw/mf8ap6lps1uWlKhYx1AtpkH5sgX9apbn/ALzfnW0PZzV1EitDktZs2f7M0H/oHw/mf8aP
7M0H/oHw/mf8av3F5e6P4W8NSaTM8Ut7c3D3Tp1kZGUJG3qpBJ29DVzWdH0iDVPGl25uha6TPa+V
DaMoz5xG9eQcYJIHp6HpXO69JSalHTX8HYXsptaMxP7M0H/oHw/mf8aP7M0H/oHw/mf8a128KW1r
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
V6Tqv/IHvf8Ar3k/9BNebfBr/V6j/wBetr/6FNXpOq/8ge9/695P/QTRX/iMKfwo2Lf/AI9ov9wf
yqSo7f8A49ov9wfyqSsSwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKK
KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigApD0NLSHoaAMTSv+QPZf9e8f/oIrzb4y/wCr
07/r1uv/AEKGvSdK/wCQPZf9e8f/AKCK82+Mv+r07/r1uv8A0KGtqH8REVPhYfBr/V6j/wBetr/6
FNXpOq/8ge9/695P/QTXm3wa/wBXqP8A162v/oU1ek6r/wAge9/695P/AEE0V/4jCn8KNi3/AOPa
L/cH8qkqO3/49ov9wfyqSsSwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigApD0NLSHoaAMTSv8AkD2X/XvH/wCgivNv
jL/q9O/69br/ANChr0nSv+QPZf8AXvH/AOgivNvjL/q9O/69br/0KGtqH8REVPhYfBr/AFeo/wDX
ra/+hTV6Tqv/ACB73/r3k/8AQTXm3wa/1eo/9etr/wChTV6Tqv8AyB73/r3k/wDQTRX/AIjCn8KN
i3/49ov9wfyqSo7f/j2i/wBwfyqSsSwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigApD0NLSHoaAMTSv+QPZf8AXvH/
AOgivNvjL/q9O/69br/0KGvSdK/5A9l/17x/+givNvjL/q9O/wCvW6/9Chrah/ERFT4WHwa/1eo/
9etr/wChTV6Tqv8AyB73/r3k/wDQTXm3wa/1eo/9etr/AOhTV6Tqv/IHvf8Ar3k/9BNFf+Iwp/Cj
Yt/+PaL/AHB/KpKjt/8Aj2i/3B/KpKxLCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACkPQ0tIehoAxNK/5A9l/17x/
+givNvjL/q9O/wCvW6/9Chr0nSv+QPZf9e8f/oIrzb4y/wCr07/r1uv/AEKGtqH8REVPhYfBr/V6
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
taUqTjNNtfev8yJzTjZX+5n/2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial5.jpg</title>
    <ns>6</ns>
    <id>59</id>
    <revision>
      <id>75</id>
      <timestamp>2021-08-27T13:54:37Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>75</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:54:37Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial5.jpg</filename>
      <src>https://wiki.iberty.cf/images/c/c1/Eclipsetutorial5.jpg</src>
      <size>31753</size>
      <sha1base36>hz4207wb0xzfpmhdv2obo8bx7427l3j</sha1base36>
      <rel>c/c1/Eclipsetutorial5.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAHuAg0DASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBuo6yv
iy4kvdReWWydybWzZiscaDIUlQcb8E5PPUgHGBWcbTw2GKm0twRwRuP+NYlmWFlBhiB5a9/au50f
StPHh6e4ks1nvLp5NsjwtII8MRgYU46Z9a+jtTo0o2j2OCEHVlJyb0MEWnhs/wDLnb/99H/GpP7M
0H/oHw/mf8ap6lps1uWlKhYx1AtpkH5sgX9apbn/ALzfnW0PZzV1EitDktZs2f7M0H/oHw/mf8aP
7M0H/oHw/mf8a7rQUtr7QfBWnSt5d6bia8tpSevk3ALx/wDAkZj9VFc+uhWd9f69qep3rQwt4ins
lJuooFiG9mLkyfeAH8K8nBrkWKpKTjKNrf52H7Gdk09zF/szQf8AoHw/mf8AGj+zNB/6B8P5n/Gt
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
xJJIiPM+yNWOC7bS2B6nCsfoDUlABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAF
FFFABRRRQAUUUUAFFFFABXzD46/5GC8/6/rv/wBHvX09XzD46/5GC8/6/rv/ANHvW1P4Z+n6oiW8
fX9GelfBr/V6j/162v8A6FNXqleV/Br/AFeo/wDXra/+hTV6pRX/AIjCn8KOY8VyWFrfabdXWqy6
POiyrDqGU8lQdm6KTfx82AR0/wBWeR3yZNXubfwzd675sUsdhqSTyXdjGY0v7cKiu5UE7sIzDqQT
CCO2O9qjqumJq9n9kmnmjgZgZkiKjzk7xtkE7T3xg8dcZziWcL4gkvbHw5oNxf6wbaYxyTXMNxfz
WiyyOAxUToDgoSQqHgjt8vD4JpE1PWdRsHvjq1x4Wtri1hu5WMjuPP6xZ27gfKzhQAXOMbzn0Wig
DzKC+vbnRtQS31VVt2v9NiSSy1Sa8aJnukWUedIi9VKjYCcc5ADYq3JDcWU1/JFqepkadr1laW6y
Xkjjypja+Yr7ifMz57gbs44xjFehUUAcv4rgt21rwlcXM0sSx6sVDLcPGuWt5toIBAJLhFGeu4r0
Yg1tOub+Tx3daRJPcG3sHkvdxc4dJlURofVQxuMDoPLX0GOxqjZaYlneXl2Z5p57pgWeUr8iDO2N
doACrubHU8nJJoA888M6rfy+GorjSdSvNSvj4dee6E8zTGO8CR+SMNnaTmTgY3AAnOcna8KXouf7
QFzqVs1gktsIjBq090FnLnKmd1T7zeWPLBPUgjDYPWaVp0OkaRZaZbs7Q2cEdvG0hBYqihQTgAZw
PSrdABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFfMPjr/k
YLz/AK/rv/0e9fT1fMPjr/kYLz/r+u//AEe9bU/hn6fqiJbx9f0Z6V8Gv9XqP/Xra/8AoU1eoTTJ
bwtLIcKvXAzXl/wa/wBXqP8A162v/oU1ejat/wAeH/baH/0YtFf+Iwp/Ch/2y47aVffkn/xVH2y5
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
Jdx3NstteWc/2e4jSXzEDbEkG1sLuBWRT0HcY4rO1vw+dZ8VaVcTfa1s7eyu0eS1vZLdhI725QEx
urEEI5xyOBnnFbOn6ba6VbfZ7SNkQsXYu7O7serMzEsx9ySaAM5tZ1K4uJG0vSobuyhlaGSVrvy5
GZThxGmwhsEEfMy8g9uast4j0SNbYy6tYwm5SOSFZbhUZ1kzsIBOTuwceuD6VnW66noYuNPs9Imv
EmuZ7iK6WaJY0MsjSESBmDDDOfuq3AHfisK+8GXMWj67YW1qtyT4Wg0qylcqDJKguAV5Py8tEcnA
5HPBwAdbZ63Dc6hqNpL5cDWl6tnGWkGZ2NvHNwOOcOeOeEJ+mhDPDcx+ZBKkqbmXcjBhlSVYZHcE
EH0INcP4isr7T9I8VaqkSieLU4dTsNzj975UFuu3g8bjHJHg88+4rrNC046RoNjYM2+SCFUkf+++
Pmb8WyfxoA0KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigArP
1r/kHr/18Qf+jVrQrP1r/kHr/wBfEH/o1aAEr5h8df8AIwXn/X9d/wDo96+nq+YfHX/IwXn/AF/X
f/o962p/DP0/VES3j6/oz0r4Nf6vUf8Ar1tf/Qpq9G1b/jwH/XaH/wBGLXnPwa/1eo/9etr/AOhT
V6Nq3/HgP+u0P/oxaK/8RhT+FG/RWXqupTWOo6HbxLGUv71reUsDkKLeaXK89d0ajnPBP1BqetWm
k3G68vI4YI7K4vJUMLsxjiMe5ww4AUPyuCW3DH3TnEs1KKxbfxZotykrR3bgRSwQuHgkQ5mcJEQG
UEqzHAYfL154NWm1vTkmlia4w0N0lnJlGwszorqpOMch0wemWAznigDQoqvZXtvqNnHd2knmW8oy
j7SAwzjIz1B7HoRyODVigCC5srS98n7VbQz+RIJovNjDeW4zhlz0YZPI55qeiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACs/Wv+Qev/AF8Qf+jVrQrP1r/k
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
0f21pX/QStP+/wAv+NMooAf/AG1pX/QStP8Av8v+NUtU1awksf3F7aSyLLFIEFwgLBZFY8k46A1a
ooAy5vEFtJnCj8bmD/45WeJxe6hCIlB6D5ZY36SxsfuMccIetdJRQAV8w+Ov+RgvP+v67/8AR719
PV8w+Ov+RgvP+v67/wDR71tT+Gfp+qIlvH1/RnpXwa/1eo/9etr/AOhTV6pXlfwa/wBXqP8A162v
/oU1eqUV/wCIwp/CgooorEsKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAK+YfHX/IwXn/X9d/+j3r6er5h8df8jBef9f13/wCj3ran
8M/T9URLePr+jPSvg1/q9R/69bX/ANCmr1SvK/g1/q9R/wCvW1/9Cmr1Siv/ABGFP4UFFFFYlhRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
FFFFABXzD46/5GC8/wCv67/9HvX09XzD46/5GC8/6/rv/wBHvW1P4Z+n6oiW8fX9GelfBr/V6j/1
62v/AKFNXqleV/Br/V6j/wBetr/6FNXqlFf+Iwp/CgooorEsKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK+YfHX/IwXn/AF/Xf/o9
6+nq+YfHX/IwXn/X9d/+j3ran8M/T9URLePr+jPSvg1/q9R/69bX/wBCmr1SvK/g1/q9R/69bX/0
KavVKK/8RhT+FBRRRWJYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFF
FABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUU
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
oz//2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial6.jpg</title>
    <ns>6</ns>
    <id>60</id>
    <revision>
      <id>76</id>
      <timestamp>2021-08-27T13:54:52Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>76</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:54:52Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial6.jpg</filename>
      <src>https://wiki.iberty.cf/images/2/2b/Eclipsetutorial6.jpg</src>
      <size>33181</size>
      <sha1base36>5uwjs4h7ridnvv79n423wol3pq3l739</sha1base36>
      <rel>2/2b/Eclipsetutorial6.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAHuAg0DASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBuo6yv
iy4kvdReWWydybWzZiscaDIUlQcb8E5PPUgHGBWcbTw2GKm0twRwRuP+NYlmWFlBhiB5a9/au50f
StPHh6e4ks1nvLp5NsjwtII8MRgYU46Z9a+jtTo0o2j2OCEHVlJyb0MEWnhs/wDLnb/99H/GpP7M
0H/oHw/mf8ap6lps1uWlKhYx1AtpkH5sgX9apbn/ALzfnW0PZzV1EitDktZs2f7M0H/oHw/mf8aP
7M0H/oHw/mf8a7rQUtr7QfBWnSt5d6bia8tpSevk3ALx/wDAkZj9VFc+uhWd9f69qep3rQwt4ins
lJuooFiG9mLkyfeAH8K8nBrkWKpKTjKNrf52H7Gdk09zF/szQf8AoHw/mf8AGj+zNB/6B8P5n/Gt
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
5O0L8oxzwOi1HTodUtUt52dUSeG4BQgHdFIsijkHjKDPtnpVuigDGufDdtO91MlzdQXE94t6s8RX
dDKIVhym5SMFFwQwP3m9sRzeGIn02GyttT1CzEfmb5IHQmYyEs5dXVkJLEnO3IJOMZrdooAydO8P
WmlXkU9pLOiR2EVgISwZDHEWMZORu3DewznB3cg8YNR8PWmpf2t50k6/2pYLYTbGA2xjzcFcjhv3
zdcjgcdc61FAHO33g6xvtXbUWuryNnuILqSKNkCPJCUKEkqWx+7UFc474zzVyHw9aQ/Y9sk5+yX8
9/HlhzJN524Hj7o898d+Byec61FAGE/he3ECra317aTLLcyC4hKeYBPKZZE+ZCNpbGOMjaOe52YI
hBBHCrOyxqFDSOWY4GMknkn3NSUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQA
V8w+Ov8AkYLz/r+u/wD0e9fT1fMPjr/kYLz/AK/rv/0e9bU/hn6fqiJbx9f0Z6V8Gv8AV6j/ANet
r/6FNXqleV/Br/V6j/162v8A6FNXqlFf+Iwp/CgooorEsKKKKACiiigAooooAKKKKACiiigAoooo
AKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigA
ooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK+YfHX/ACMF5/1/Xf8A6Pev
p6vmHx1/yMF5/wBf13/6Petqfwz9P1REt4+v6M9K+DX+r1H/AK9bX/0KavVK8r+DX+r1H/r1tf8A
0KavVKK/8RhT+FBRRRWJYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUU
UAFFFFABRRRQAUUUUAFFFFABRRRQAV8w+Ov+RgvP+v67/wDR719PV8w+Ov8AkYLz/r+u/wD0e9bU
/hn6fqiJbx9f0Z6V8Gv9XqP/AF62v/oU1eqV5X8Gv9XqP/Xra/8AoU1eqUV/4jCn8KCiiisSwooo
oAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAC
iiigAr5h8df8jBef9f13/wCj3r6er5h8df8AIwXn/X9d/wDo962p/DP0/VES3j6/oz0r4Nf6vUf+
vW1/9Cmr1SvK/g1/q9R/69bX/wBCmr1Siv8AxGFP4UFFFFYlhRRRQAUUUUAFFFFABRRRQAUUUUAF
FFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXzD46/5GC8/6/rv/wBH
vX09XzD46/5GC8/6/rv/ANHvW1P4Z+n6oiW8fX9GelfBr/V6j/162v8A6FNXqleV/Br/AFeo/wDX
ra/+hTV6pRX/AIjCn8KCiiisSwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAr5h8df8jBef9f13/6Pevp6vmHx1/yMF5/1/Xf/AKPe
tqfwz9P1REt4+v6M9K+DX+r1H/r1tf8A0KavVK8r+DX+r1H/AK9bX/0KavVKK/8AEYU/hQUUUViW
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFfMPjr/kYLz/AK/rv/0e9fT1fMPjr/kYLz/r+u//AEe9bU/hn6fqiJbx9f0Z6V8Gv9Xq
P/Xra/8AoU1eqV5X8Gv9XqP/AF62v/oU1eqUV/4jCn8KCiiisSwooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAr5h8df8jBef8AX9d/
+j3r6er5h8df8jBef9f13/6Petqfwz9P1REt4+v6M9K+DX+r1H/r1tf/AEKavVK8r+DX+r1H/r1t
f/Qpq9Uor/xGFP4UFFFFYlhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQA
UUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABR
RRQAUUUUAFFFFABRRRQAUUUUAFFFFABXzD46/wCRgvP+v67/APR719PV8w+Ov+RgvP8Ar+u//R71
tT+Gfp+qIlvH1/RnpXwa/wBXqP8A162v/oU1eqV5X8Gv9XqP/Xra/wDoU1eqUV/4jCn8KCiiisSw
ooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKK
KACiiigAr5h8df8AIwXn/X9d/wDo96+nq+YfHX/IwXn/AF/Xf/o962p/DP0/VES3j6/oz0T4Qtcr
Hf8A2eKKT/RbXd5khTHzTdMKc16f5mo/8+tr/wCBLf8AxuvNvg1/q9R/69bX/wBCmr1Siv8AxGFP
4UVPM1H/AJ9bX/wJb/43R5mo/wDPra/+BLf/ABurdFYllTzNR/59bX/wJb/43R5mo/8APra/+BLf
/G6t0UAVPM1H/n1tf/Alv/jdHmaj/wA+tr/4Et/8bq3RQBU8zUf+fW1/8CW/+N0eZqP/AD62v/gS
3/xurdFAFTzNR/59bX/wJb/43R5mo/8APra/+BLf/G6t0UAVPM1H/n1tf/Alv/jdHmaj/wA+tr/4
Et/8bq3RQBU8zUf+fW1/8CW/+N0eZqP/AD62v/gS3/xurdFAFTzNR/59bX/wJb/43R5mo/8APra/
+BLf/G6t0UAVPM1H/n1tf/Alv/jdHmaj/wA+tr/4Et/8bq3RQBU8zUf+fW1/8CW/+N0eZqP/AD62
v/gS3/xurdFAFTzNR/59bX/wJb/43R5mo/8APra/+BLf/G6t0UAVPM1H/n1tf/Alv/jdHmaj/wA+
tr/4Et/8bq3RQBU8zUf+fW1/8CW/+N0eZqP/AD62v/gS3/xurdFAFTzNR/59bX/wJb/43R5mo/8A
Pra/+BLf/G6t0UAVPM1H/n1tf/Alv/jdHmaj/wA+tr/4Et/8bq3RQBU8zUf+fW1/8CW/+N0eZqP/
AD62v/gS3/xurdFAFTzNR/59bX/wJb/43R5mo/8APra/+BLf/G6t0UAVPM1H/n1tf/Alv/jdHmaj
/wA+tr/4Et/8bq3RQBU8zUf+fW1/8CW/+N0eZqP/AD62v/gS3/xurdFAFTzNR/59bX/wJb/43R5m
o/8APra/+BLf/G6t0UAVPM1H/n1tf/Alv/jdHmaj/wA+tr/4Et/8bq3RQBU8zUf+fW1/8CW/+N0e
ZqP/AD62v/gS3/xurdFAFTzNR/59bX/wJb/43R5mo/8APra/+BLf/G6t0UAVPM1H/n1tf/Alv/jd
Hmaj/wA+tr/4Et/8bq3RQBU8zUf+fW1/8CW/+N0eZqP/AD62v/gS3/xurdFAFTzNR/59bX/wJb/4
3R5mo/8APra/+BLf/G6t0UAVPM1H/n1tf/Alv/jdHmaj/wA+tr/4Et/8bq3RQBU8zUf+fW1/8CW/
+N0eZqP/AD62v/gS3/xurdFAFTzNR/59bX/wJb/43R5mo/8APra/+BLf/G6t0UAVPM1H/n1tf/Al
v/jdHmaj/wA+tr/4Et/8bq3RQBU8zUf+fW1/8CW/+N0eZqP/AD62v/gS3/xurdFAFTzNR/59bX/w
Jb/43XzZ46/5GC8/6/rv/wBHvX09XzD46/5GC8/6/rv/ANHvW1P4Z+n6oiW8fX9GelfBr/V6j/16
2v8A6FNXqleV/Br/AFeo/wDXra/+hTV6pRX/AIjCn8KCs251YI8qW0Sy+ScSyySiKGM+jOc8+wBx
3xVjU7l7PSby6jGXhgeRR7hSf6VmX2gWVzYWNrNNMtvZHeyqRtlPct6k8nPuazVupTv0JYdbkMbT
SQW8tun35bG58/yx6su1Tj6A1rI6SRrJGysjAFWU5BB7g1w3h9l1HxadU0q0NppUUZiJAwJj64/L
8vWuo0oCGfULSMYhhnzGB/CHVXK/gWP4EU5JISZp0UUVBQUUUUAFFFFABRRRQAUUUUAUUS61C+uo
Ybw2qWxVfljVixIz3qb+x7//AKDMv/gPH/hSaSf+Jrq3/XSP/wBAFbGapuwtzI/se/8A+gzL/wCA
8f8AhR/Y9/8A9BmX/wAB4/8ACtfNZuq65aaS8EMolmu7nd9ntYIy8ku3G7A7AZGSSAMjJFK4WIv7
Hv8A/oMy/wDgPH/hR/Y9/wD9BmX/AMB4/wDCr9jPcT2cct3a/ZZmyTD5gcoMnGSOM4xnGQDxk9a8
10LxTqEuneG7uTXtauLzUGtRcQ32kCG0PmBfM2yiBB3Owh2ydo5zmi4WO7/se/8A+gzL/wCA8f8A
hR/Y9/8A9BmX/wAB4/8ACox4ljGtw6bLpuowLcTPBBdyxKsUsiKzFR82/wC6jEEqAccE8Vl6t4ul
l8J65fadaX1s0Olz3llfSxIYpQqEq6kFu+CFcAkc4IzRcLGx/Y9//wBBmX/wHj/wo/se/wD+gzL/
AOA8f+FWrDVINTM7WodoIpDGJ8DZIw4bac5IB4JxjOcZwau5ouFjI/se/wD+gzL/AOA8f+FZuq3N
5ocluj3X2r7TuVS8YXYwxg8dRzXU5rkvGZ/0nSf+ujfzWqjq7MUtFc1v7Iv/APoMyfhbp/hR/Y9/
/wBBmX/wHj/wrXzRmpuOxkf2Pf8A/QZl/wDAeP8Awo/se/8A+gzL/wCA8f8AhWvmvPD4r1eDwz4q
kubhRdwJqk+mTiNeEglljCEYwWQoh5HIYdcGi4WOs/se/wD+gzL/AOA8f+FH9j3/AP0GZf8AwHj/
AMKbceJLa21T7G1vctGsyW0t0oTyopnClI2+bdk705CkfMMkU3/hJ7Z9Sn02C0u5tQg8wvbIEDBU
UENlmC4fcoUk8k842ttLhYk/se//AOgzL/4Dx/4Uf2Pf/wDQZl/8B4/8KTwpq1xrvhLSdVu7c29x
eWkc0kfGMsoORgn5T1GTnBGcHIDbPxEj38Om6laS6dqM27yopPmjm2jJ8uQcNgAnBw2BkqKLhYf/
AGPf/wDQZl/8B4/8KP7Hv/8AoMy/+A8f+Fa+aM0XCxkf2Rf/APQZk/G3T/Co9Ku2vtMhuXADuCGx
0yCR/StvNc34c/5ANt9X/wDQ2p7oOpR00a1rVqL2LUDCj4IjXYAoKhgOY2J4Yc5q5/ZGvf8AQXf/
AL6i/wDjNJ4NbGgRD/Zj/wDRMddDvrWcuWTSSIjG6u2c/wD2Rr3/AEF3/wC+ov8A4zR/ZGvf9Bd/
++ov/jNdBvrmPGWqXFgmjJBfX1nHdX5hnksbUXExQQTOAqGOTPzIucKeM9Bmo9p5L7h8nmT/ANka
9/0F3/76i/8AjNH9ka9/0F3/AO+ov/jNMsdQFvDpAl1TWLv7fevHE15aRwOcQyNsdPKjKp+6ZgQo
YnbyVNUh4+sr3Q7i8+yatYxPpMupwTNFFvkhRQWaMFmG5d6cOADkdRzR7TyX3ByeZof2Rr3/AEF3
/wC+ov8A4zR/ZGvf9Bd/++ov/jNObxZb/wDCRTaNHY300kDRpPPEilIi4BXI3byMEZYKVGeSMHFH
QfFslxcrY39veGSbUr61gvDGghYxTTFY+DuyIo+u3B2nknNHtPJfcHJ5lz+yNe/6C7/99Rf/ABmj
+yNe/wCgu/8A31F/8ZroN9G+j2nkvuDk8zn/AOyNe/6C7/8AfUX/AMZqPQ767mvdRsLuTzXtGXEm
Bkglhg4AHVTzgda6TfXJ6Cc+JdfP+2n/AKHLVJ80JXWwrWktTciilvZ7gC6kgjhcRgRqpLHaGJJY
H+8Pyqb+zH/6CV5+UX/xFM084lv/APr5H/oqOru+sTQq/wBmP/0Erz8ov/iKP7Mf/oJXn5Rf/EVa
31jeINQu7dLCzsZVhudQuxbJMyhvKGx5GYA8E7Y2AzxkjOelAF/+zH/6CV5+UX/xFH9mP/0Erz8o
v/iKzoJNT0W2vHv7ifV4E2G2McK/aWJ4KsqKqHnGG4GCc4Ayap8a24hjzpepi7e/Onmz2RmVZvJM
wBw+3BQA5DEfMM4GSADb/sx/+gleflF/8RR/Zj/9BK8/KL/4islfF9vNYW09tp9/cXFwZgLKNEEy
eS+yXducL8rYU4Y5JGM1JfeK7WxCu1rePGsCXNyyoF+yRNnDyK5DAfK3ABI2nIoA0v7Mf/oJXn5R
f/EUf2Y//QSvPyi/+Iqlo+oXF1qniCGaTdHaX6QwDaBsQ20Dkcdfmdjz6+mK199AFX+zH/6CV5+U
X/xFV5lksby1jNzJOk5ZD5gUFSFLZG0D0NaW+s3UTm+03/rs/wD6LagCzXzD46/5GC8/6/rv/wBH
vX09XzD46/5GC8/6/rv/ANHvW1P4Z+n6oiW8fX9GelfBr/V6j/162v8A6FNXqleV/Br/AFeo/wDX
ra/+hTV6pRX/AIjCn8KGyRpNE8UihkdSrKe4PWsVLsafatYak6xsiFIrqYfupVxgFj0B6ZBxntmt
ykZVdSrAEHqCM1kmUc1od0mm6SlnJLaXt6GOIdMVSDk8ZwAq/U4FbWnWklrA5nZWuZnMszJ93ccD
A9gAAPYVaSNIxhEVR1woxTqG7gkFFFFIYUUUUAFFFFABRRRQAUUUUAVNLONV1X/rpH/6AK181gXF
rfxXc09g9vibBdZt3BAxxj2pmPEHrp35vVaPqLY6LNU9R0yx1aAQ31tHMqnchbhkb+8rDlT7gg1k
48Qeunfm9GPEHrp35vRZdwv5GtDE2maWY42ur5oUYoHkVpZOpC7mIBPYFiO2T1NefaZbeKLbStK0
i/0fULnTdOFvsSC1tIZJDAVMe5zeuPvIpOFGcdq6vHiD10783ox4g9dO/N6LLuF/IoxeCGTxdb67
JqMcpt7ua5UPbZmIkjkTyzKX+6vmDaAoGFAOTgiX/hFL0+G73w+2sp/Zsmmvp1pGloAYUKbFZ2LE
yMo442A85GcEWceIPXTvzejHiD10783osu4X8i/pWkx6PJdpauqWU0glitlTasDEfPtwfuk/NjHB
LevGnmudx4g9dO/N6MeIPXTvzeiy7hfyOizXKeMTm50r/ro381qzjxB66d+b1DPpN9qLo9/LbqYQ
TF5IY/MccnPbinGyd7id2rHUZozXOka/nhtO/N6MeIPXTvzelZdx38jos15pqml3+p+Eb3Qz4c12
KWee7niu1NlmIzySMw2/aeRtlZDyMjJ47dTjxB66d+b0Y8Qeunfm9Fl3C/kU38HW994ii8QNbWUE
00sV1Mt1p8U11HIiKoRZtxCAbFztB5yVYZzWlbaDJb+I5ta+3s81xmOaMp8jQj/VoBngocnd3Lvw
MjbDjxB66d+b0Y8Qeunfm9Fl3C/kX/D2mSaH4d0/SpLlbg2UC26yrH5e5EG1cjJ52gZOeTk4GcBN
O0Gw06c3QD3F8ww95ct5kzD03H7o/wBlcL7VRx4g9dO/N6MeIPXTvzeiy7hfyOizRmudx4g9dO/N
6MeIPXTvzeiy7hfyOizXPeHP+QDbfV//AENqQDX88tp35vVzTrMWFhFbBt2wHLepJyf1NGiVg6mZ
4QbGhRj/AGYv/RMdb2+uRj0PxBY5hsby1+zjATcxUkBQoyNjc4A70/8As/xZ/wA/ln/38/8AtVaz
ipSupIzjJpWsdXvrB8RG5+26LcW+m3t79junuGW1MI/5YyRYPmSJjPm5yN33SDjINUv7P8Wf8/ln
/wB/P/tVH9n+LP8An8s/+/n/ANqqfZr+ZFc77MuqbnXL3T7i40290v8As26+0Kt0YX8/dDLFgeXI
2MeZnJ9gOpIoTeC/N8P2el/2jj7NoM+jeb5P3vMSJfMxu4x5Wdued3UY5d/Z/iz/AJ/LP/v5/wDa
qP7P8Wf8/ln/AN/P/tVHs1/Mg532ZLqnheTU/ElpqjXtsi280cqH7Ev2hAnJjSYMCEbncCGyGYZG
eLFv4e8j+zv9L3fY9UutR/1eN/nfaPk68Y+0de+3oM8Uv7P8Wf8AP5Z/9/P/ALVR/Z/iz/n8s/8A
v5/9qo9mv5kHO+zOr30b65T+z/Fn/P5Z/wDfz/7VR/Z/iz/n8s/+/n/2qj2a/mQc77M6vfXM+Hzn
xFrx/wBtP/Q5ai/s/wAWf8/ln/38/wDtVaGgaPc6a13cXkySXNywLeXyoALHrgc5Y9hTsowauncV
3KS0NK0bEt9/18/+0o6s76z57e6WaRrbymSRt7K7lSGwF6gHjCio/K1L/nlbf9/2/wDiKxNDU31n
azpx1S1iWK5NtdW8yz284UN5bjI5U9QQWUjjhjyOtM8rUv8Anlbf9/2/+Io8rUv+eVt/3/b/AOIo
AoS+Hr6803UI7zWme9vTHmWGIxxRqhyEWPeTtPzBvmyQx5HGKui+DBpEkDi8hPl6o2pFIbXyky1q
bcoBuOBzuycnscn5q2fK1L/nlbf9/wBv/iKPK1L/AJ5W3/f9v/iKAM9fDdzaLFNp+pRQ3sc16yzT
WxkTy7mfzmXaHXkEIA2f4enOKr614Kg1q8gu53sZ7gW8dtNPfadHcuVQsd0ecLGxLtk7SOnHFbHl
al/zytv+/wC3/wARR5Wpf88rb/v+3/xFAEun2H2G91W487f9vuluNu3Hl4hiix15/wBVnPHXHbJv
76y/K1L/AJ5W3/f9v/iKPK1L/nlbf9/2/wDiKANTfVG9bN9p3/XZv/RbVD5Wpf8APK2/7/t/8RT4
bW6e5ilufKVYiWVY3LZJBHUgdiaANCvmHx1/yMF5/wBf13/6Pevp6vmHx1/yMF5/1/Xf/o962p/D
P0/VES3j6/oz0r4Nf6vUf+vW1/8AQpq9Ur5utvEt/wCDL+7061u54LiA/ZbhoFjdJDGzAEb0Jxlm
9Kt/8LW17/oLXv8A34tv/jdbVaEpSckZwqJKzPoaivnn/ha2vf8AQWvf+/Ft/wDG6P8Aha2vf9Ba
9/78W3/xuo+qzK9rE+hqK+ef+Fra9/0Fr3/vxbf/ABuj/ha2vf8AQWvf+/Ft/wDG6Pqsw9rE+hqK
+ef+Fra9/wBBa9/78W3/AMbo/wCFra9/0Fr3/vxbf/G6Pqsw9rE+hqK+ef8Aha2vf9Ba9/78W3/x
uj/ha2vf9Ba9/wC/Ft/8bo+qzD2sT6Gor55/4Wtr3/QWvf8Avxbf/G6P+Fra9/0Fr3/vxbf/ABuj
6rMPaxPoaivnn/ha2vf9Ba9/78W3/wAbo/4Wtr3/AEFr3/vxbf8Axuj6rMPaxPoaivnn/ha2vf8A
QWvf+/Ft/wDG6P8Aha2vf9Ba9/78W3/xuj6rMPaxPoaivnn/AIWtr3/QWvf+/Ft/8bo/4Wtr3/QW
vf8Avxbf/G6Pqsw9rE+hqK+ef+Fra9/0Fr3/AL8W3/xuj/ha2vf9Ba9/78W3/wAbo+qzD2sT6Gor
55/4Wtr3/QWvf+/Ft/8AG6P+Fra9/wBBa9/78W3/AMbo+qzD2sT6Gor55/4Wtr3/AEFr3/vxbf8A
xuj/AIWtr3/QWvf+/Ft/8bo+qzD2sT6Gor55/wCFra9/0Fr3/vxbf/G6P+Fra9/0Fr3/AL8W3/xu
j6rMPaxPoaivnn/ha2vf9Ba9/wC/Ft/8bo/4Wtr3/QWvf+/Ft/8AG6Pqsw9rE+hqK+ef+Fra9/0F
r3/vxbf/ABuj/ha2vf8AQWvf+/Ft/wDG6Pqsw9rE+hqK+ef+Fra9/wBBa9/78W3/AMbo/wCFra9/
0Fr3/vxbf/G6Pqsw9rE+hqK+ef8Aha2vf9Ba9/78W3/xuj/ha2vf9Ba9/wC/Ft/8bo+qzD2sT6Go
r55/4Wtr3/QWvf8Avxbf/G6P+Fra9/0Fr3/vxbf/ABuj6rMPaxPoaivnn/ha2vf9Ba9/78W3/wAb
o/4Wtr3/AEFr3/vxbf8Axuj6rMPaxPoaivnn/ha2vf8AQWvf+/Ft/wDG6P8Aha2vf9Ba9/78W3/x
uj6rMPaxPoaivnn/AIWtr3/QWvf+/Ft/8bo/4Wtr3/QWvf8Avxbf/G6Pqsw9rE+hqK+ef+Fra9/0
Fr3/AL8W3/xuj/ha2vf9Ba9/78W3/wAbo+qzD2sT6Gor55/4Wtr3/QWvf+/Ft/8AG6P+Fra9/wBB
a9/78W3/AMbo+qzD2sT6Gor55/4Wtr3/AEFr3/vxbf8Axuj/AIWtr3/QWvf+/Ft/8bo+qzD2sT6G
or55/wCFra9/0Fr3/vxbf/G6P+Fra9/0Fr3/AL8W3/xuj6rMPaxPoaivnn/ha2vf9Ba9/wC/Ft/8
bo/4Wtr3/QWvf+/Ft/8AG6Pqsw9rE+hqK+ef+Fra9/0Fr3/vxbf/ABuj/ha2vf8AQWvf+/Ft/wDG
6Pqsw9rE+hqK+ef+Fra9/wBBa9/78W3/AMbo/wCFra9/0Fr3/vxbf/G6Pqsw9rE+hqK+ef8Aha2v
f9Ba9/78W3/xuj/ha2vf9Ba9/wC/Ft/8bo+qzD2sT6Gor55/4Wtr3/QWvf8Avxbf/G6P+Fra9/0F
r3/vxbf/ABuj6rMPaxPoaivnn/ha2vf9Ba9/78W3/wAbo/4Wtr3/AEFr3/vxbf8Axuj6rMPaxPoa
ivnn/ha2vf8AQWvf+/Ft/wDG6P8Aha2vf9Ba9/78W3/xuj6rMPaxPoavmHx1/wAjBef9f13/AOj3
rY/4Wtr3/QWvf+/Ft/8AG6h0rw1qHxGlurixuYY5LZy873bYMjSszEjYuOoPYdqpUZQhK/VfqhOa
k1/XRn//2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial7.jpg</title>
    <ns>6</ns>
    <id>61</id>
    <revision>
      <id>77</id>
      <timestamp>2021-08-27T13:55:11Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>77</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:55:11Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial7.jpg</filename>
      <src>https://wiki.iberty.cf/images/0/02/Eclipsetutorial7.jpg</src>
      <size>39067</size>
      <sha1base36>pe7vxsu9tc6cve7tsarig8czbvr3u0p</sha1base36>
      <rel>0/02/Eclipsetutorial7.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAJ3AhkDASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBuo6yv
iy4kvdReWWydybWzZiscaDIUlQcb8E5PPUgHGBWcbTw2GKm0twRwRuP+NYlmWFlBhiB5a9/au50f
StPHh6e4ks1nvLp5NsjwtII8MRgYU46Z9a+jtTo0o2j2OCEHVlJyb0MEWnhs/wDLnb/99H/GpP7M
0H/oHw/mf8ap6lps1uWlKhYx1AtpkH5sgX9apbn/ALzfnW0PZzV1EitDktZs2f7M0H/oHw/mf8aP
7M0H/oHw/mf8a7rQUtr7QfBWnSt5d6bia8tpSevk3ALx/wDAkZj9VFc+uhWd9f69qep3rQwt4ins
lJuooFiG9mLkyfeAH8K8nBrkWKpKTjKNrf52H7Gdk09zF/szQf8AoHw/mf8AGj+zNB/6B8P5n/Gt
XSPDNjqVrHd/b5WtbS9uINSuI5AUWONC6yocH5SFxk55IrP8SaGPDlraRTvOdQubqdVQsNot422h
iMZyx5BzjHatVXw7lypa+hDp1Er3Iv7M0H/oHw/mf8aP7M0H/oHw/mf8axtz/wB5vzo3P/eb866f
Zw7IyvLubseleHSrvJZwIiqSeeTgdACRmiPSvDc2BHBagkZ2y7kP5nj9axEw0iiR2CZ5I5IFbFnD
dQxEWzGVS4bzY/MZXUAjaTH8ynJBx3x7VhVUYaq33GkLvQWTSNEicpJpkSsOcEn8+tN/szQf+gfD
+Z/xqDUop47FJXiliVLjyojIhQupXJIXsNyk47bqzdz/AN5vzq6XJON7IU1KLtc2f7M0H/oHw/mf
8aP7M0H/AKB8P5n/ABrG3P8A3m/Ojc/95vzrT2cOyIvLubP9maD/ANA+H8z/AI0f2ZoP/QPh/M/4
1jbn/vN+dG5/7zfnR7OHZBeXc2f7M0H/AKB8P5n/ABo/szQf+gfD+Z/xrG3P/eb86Nz/AN5vzo9n
DsgvLubP9maD/wBA+H8z/jR/Zmg/9A+H8z/jWNuf+8350bn/ALzfnR7OHZBeXc2f7M0H/oHw/mf8
aP7M0H/oHw/mf8axtz/3m/Ojc/8Aeb86PZw7ILy7mz/Zmg/9A+H8z/jR/Zmg/wDQPh/M/wCNY25/
7zfnRuf+8350ezh2QXl3Nn+zNB/6B8P5n/Gj+zNB/wCgfD+Z/wAaxtz/AN5vzo3P/eb86PZw7ILy
7mz/AGZoP/QPh/M/40f2ZoP/AED4fzP+NY25/wC8350bn/vN+dHs4dkF5dzZ/szQf+gfD+Z/xo/s
zQf+gfD+Z/xrG3P/AHm/Ojc/95vzo9nDsgvLubP9maD/ANA+H8z/AI0f2ZoP/QPh/M/41jbn/vN+
dG5/7zfnR7OHZBeXc2f7M0H/AKB8P5n/ABo/szQf+gfD+Z/xrG3P/eb86Nz/AN5vzo9nDsgvLubP
9maD/wBA+H8z/jR/Zmg/9A+H8z/jWNuf+8350bn/ALzfnR7OHZBeXc2f7M0H/oHw/mf8aP7M0H/o
Hw/mf8axtz/3m/Ojc/8Aeb86PZw7ILy7mz/Zmg/9A+H8z/jR/Zmg/wDQPh/M/wCNY25/7zfnRuf+
8350ezh2QXl3Nn+zNB/6B8P5n/Gj+zNB/wCgfD+Z/wAaxtz/AN5vzo3P/eb86PZw7ILy7mz/AGZo
P/QPh/M/40f2ZoP/AED4fzP+NY25/wC8350bn/vN+dHs4dkF5dzZ/szQf+gfD+Z/xo/szQf+gfD+
Z/xrG3P/AHm/Ojc/95vzo9nDsgvLubP9maD/ANA+H8z/AI0f2ZoP/QPh/M/41jbn/vN+dG5/7zfn
R7OHZBeXc2f7M0H/AKB8P5n/ABo/szQf+gfD+Z/xrG3P/eb86Nz/AN5vzo9nDsgvLubP9maD/wBA
+H8z/jR/Zmg/9A+H8z/jWNuf+8350bn/ALzfnR7OHZBeXc2f7M0H/oHw/mf8aP7M0H/oHw/mf8ax
tz/3m/Ojc/8Aeb86PZw7ILy7mz/Zmg/9A+H8z/jR/Zmg/wDQPh/M/wCNY25/7zfnRuf+8350ezh2
QXl3Nn+zNB/6B8P5n/Gmvp2hKuRpsTMSAFBPJPAHWsjc/wDeb86khZvtEJLEjzF7+4pShBJuyHeX
c1v7DsP+gTY/9/n/APiaP7DsP+gTY/8Af5//AImtuzu7Oz0i8vbnTBqDpNDFHEbhocb9+TkA/wB0
dqi1DULeezsJ4NIXTzNNPE6i6abOxYyDkgf3zx7VzucFPl5fnZWKtLl5r/mYyadoTLk6bErAkFST
wRwR1pX07QERmOnxYUZPJ/xrLmZvtExDEDzG7+5qJmfY2Wbp61vyQ5b2RN5X3NoaJYEA/wBkWYz2
aZ8j64FL/Ydh/wBAmx/7/P8A/E1v+HltbzV47O7t5Z0uAY1MTENGx6P745znjGTzjFTeKbSDw7NZ
aVHazz3EytPJfudke0HHlqvIJHBPcZH97AwlOnGag1q/JFKM3HmT0OetLptAke60XNjdQtl4VkJh
mwOA6/xDBOO4zxg113/C7/DX/Pjq3/fqP/45XnV+zNezkE4OO/8AsiuIrz8yhFcskt7nXhZNppnY
afEW0+3OP+WYq601ybWa0aFZbd2LKH6oT3UgjH8q674TaLp+uW15HqVv56QW9u0Y3su0sZd33SM5
2r19K9J/4QPw1/0DB/3/AJP/AIquiWOpRXJJPQVOnUjeUbanzpb6QLeRpFjcyMMbnIOK0PIPpXvf
/CB+Gv8AoGD/AL/yf/FUf8IH4a/6Bg/7/wAn/wAVQsypLZP8P8wqUas97HhwvtTWTTGS8ZRphdrM
BF/dFyGY5xzkgcHNOttS1izkuJYL8iW5uDdSs8MbgzEk7wrKQrZJ5UDFe3/8IH4a/wCgYP8Av/J/
8VR/wgfhr/oGD/v/ACf/ABVZvG4Z7w/Bf5iVCqup4XFdanBp99ZRX8qxah/x+ZVWM3JJySMjOTyM
ZzSX89/qt7Hd6jdvcyxQrBGWVV2oMkDgDPU8nmvdf+ED8Nf9Awf9/wCT/wCKo/4QPw1/0DB/3/k/
+KprHYdS5uV3+X+Yvq9W1rngnkH0o8g+le9/8IH4a/6Bg/7/AMn/AMVR/wAIH4a/6Bg/7/yf/FVp
/adLs/w/zJ+qT7o8FWHB5TcPTpT1S2Q7hZ3O/wDvJdBf/ZK93/4QPw1/0DB/3/k/+Ko/4QPw1/0D
B/3/AJP/AIqplmNGW6f9fMaw1RdUeDTCS42r5axQq24IGLEnGMsx5JxTfIPpXvf/AAgfhr/oGD/v
/J/8VR/wgfhr/oGD/v8Ayf8AxVEcxoxVkn/XzB4ao92jwTyD6UeQfSve/wDhA/DX/QMH/f8Ak/8A
iqP+ED8Nf9Awf9/5P/iqr+06XZ/h/mL6pPujwTyD6UeQfSve/wDhA/DX/QMH/f8Ak/8AiqP+ED8N
f9Awf9/5P/iqP7Tpdn+H+YfVJ90eCeQfSjyD6V73/wAIH4a/6Bg/7/yf/FUf8IH4a/6Bg/7/AMn/
AMVR/adLs/w/zD6pPujwTyD6UeQfSve/+ED8Nf8AQMH/AH/k/wDiqP8AhA/DX/QMH/f+T/4qj+06
XZ/h/mH1SfdHgnkH0o8g+le9/wDCB+Gv+gYP+/8AJ/8AFUf8IH4a/wCgYP8Av/J/8VR/adLs/wAP
8w+qT7o8E8g+lHkH0r3v/hA/DX/QMH/f+T/4qj/hA/DX/QMH/f8Ak/8AiqP7Tpdn+H+YfVJ90eCe
QfSjyD6V73/wgfhr/oGD/v8Ayf8AxVH/AAgfhr/oGD/v/J/8VR/adLs/w/zD6pPujwTyD6UeQfSv
e/8AhA/DX/QMH/f+T/4qj/hA/DX/AEDB/wB/5P8A4qj+06XZ/h/mH1SfdHgnkH0o8g+le9/8IH4a
/wCgYP8Av/J/8VR/wgfhr/oGD/v/ACf/ABVH9p0uz/D/ADD6pPujwTyD6UeQfSve/wDhA/DX/QMH
/f8Ak/8AiqP+ED8Nf9Awf9/5P/iqP7Tpdn+H+YfVJ90eCeQfSjyD6V73/wAIH4a/6Bg/7/yf/FUf
8IH4a/6Bg/7/AMn/AMVR/adLs/w/zD6pPujwTyD6UeQfSve/+ED8Nf8AQMH/AH/k/wDiqP8AhA/D
X/QMH/f+T/4qj+06XZ/h/mH1SfdHgnkH0o8g+le9/wDCB+Gv+gYP+/8AJ/8AFUf8IH4a/wCgYP8A
v/J/8VR/adLs/wAP8w+qT7o8E8g+lHkH0r3v/hA/DX/QMH/f+T/4qj/hA/DX/QMH/f8Ak/8AiqP7
Tpdn+H+YfVJ90eCeQfSjyD6V73/wgfhr/oGD/v8Ayf8AxVH/AAgfhr/oGD/v/J/8VR/adLs/w/zD
6pPujwTyD6UeQfSve/8AhA/DX/QMH/f+T/4qj/hA/DX/AEDB/wB/5P8A4qj+06XZ/h/mH1SfdHgn
kH0o8g+le9/8IH4a/wCgYP8Av/J/8VR/wgfhr/oGD/v/ACf/ABVH9p0uz/D/ADD6pPujwTyD6UeQ
fSve/wDhA/DX/QMH/f8Ak/8AiqP+ED8Nf9Awf9/5P/iqP7Tpdn+H+YfVJ90eCeQfSjyD6V73/wAI
H4a/6Bg/7/yf/FUf8IH4a/6Bg/7/AMn/AMVR/adLs/w/zD6pPujwTyD6UeQfSve/+ED8Nf8AQMH/
AH/k/wDiqP8AhA/DX/QMH/f+T/4qj+06XZ/h/mH1SfdHgnkH0o8g+le9/wDCB+Gv+gYP+/8AJ/8A
FUf8IH4a/wCgYP8Av/J/8VR/adLs/wAP8w+qT7o8E8g+lHkH0r3v/hA/DX/QMH/f+T/4qj/hA/DX
/QMH/f8Ak/8AiqP7Tpdn+H+YfVJ90eCeQfSkMRQq+D8rAn8698/4QPw1/wBAwf8Af+T/AOKo/wCE
D8Nf9Awf9/5P/iqTzKk1az/D/MPqs+6PE4dbktreWGCe3CyMrMJYI5Rlc4OHBGeT+dRXGqzXjQfa
ruBkgLGNIreOEAsAGOEAyTtHX0r3H/hA/DX/AEDB/wB/5P8A4qj/AIQPw1/0DB/3/k/+KrD65Rve
zv6f8Ev6vUta/wDX3HgYiLlnwfmYkfnSPA3ltgc4Ne+/8IH4a/6Bg/7/AMn/AMVR/wAIH4a/6Bg/
7/yf/FVv/aVK1rP8P8yfqs+6PFLXW57ETmyvWtpJoWhaRDhgp64PUHgcjBGKrJfPFpVtpSXzDT7e
XzktzggPgjIPUDk8Zxkk4zXuZ8CeGR100f8Af+T/AOKqJ/BfhheBpgJ/67yf/FVj9boyd7O/ov8A
Mr2FRK1/6+48JlHmmWUcqeQfXgVw9e9fEPQtM0fRbSbT7UQPLdGJyHZsr5UjY+Ynuo/KvBayxlWN
WEHHz/Q0w8HBtPy/U97+CH+r1P8A69bT/wBCnrsdc8ZPp/iy08M2FjBc6lcWrXYF1d/ZoyobaFVt
jFnJB+XHQZzXHfBD/V6n/wBetp/6FPXRfEHw5H4jaC3ufCkmqwrExivbS8jhubaXPAAcqNp4Odx5
/hNctf8AiM2p/CjoV8SWdpYWcuvy22h3dwP+PS9vIgwYHGAwbDfh6jp0rOtPHVhL4v1zQbxrax/s
17WOGea6UfammjLhVUgYIxjAJz7V57qfgLxc2jaNM0dze6/Dpb2c91HdwyRvl2ZYZ4pgBImCAWDE
8fdPBpmtfD3xLeab4326RbNfahbaTHZG3eNEZoVTzxHkjYoK8A4yAMZrEs9X8VeIrfwn4Yvtcuop
JYbRAxjj+8xLBQPbkjntWSPFmqwaFqer3mhW4tLXTnv4Li01JZ4Z9qlvL3bVZTx12lfc9K3deikn
0K8ii0yDU3eMr9iuJBGkwPVSxVgOM9R+XWvMNN8CavY23i2HSdMvNM0jUNGmgt9JuryOXN26kbkK
uyquOPmbJzzwOAD0bw34msPEmk2l1BcWwuZbSG5ntI7hZHt/MQMFbHI69SBmm33irTIvDusatp13
aakNMtpZ5I7e5VuUQttJXO0nbjp+FcBpngLW4b2GNbRLKJ/A40mSYSJiO9LZIIUkkjJO4Aj3qtof
gTXbbQdYin069S+fwy+kx+deW3lzSbTtVEjQcZ6PI+75sEHrQB2Gk/EGHUdasLG4s47OG68PR669
zJcjbEHYL5ZyoGBnO7I+ldTp+q6dq9ubjTb+1vYQ20yW0yyKD6ZUkZryO6+Hus332WK70gz26+C7
fTJEW9SE/ao5kcxhhuwRtzu2lTjGea6z4caLr2kNrDa1FiOaSL7NLcLD9rkVVwfOeIkPg4CkknGe
nSgDu6KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACi
iigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiuUfxps8NXOsf
2fnyHZfK8772Ce+329K6ugApjPjpSM2fpUTt2FNITYjuTxn8ahNONNNaIk4P4q/8i/p//X9/7Qmr
50r6L+Kv/Iv6f/1/f+0Jq+dKqp/Cj6v8kKPxv0X6nvfwQ/1ep/8AXraf+hT165XkfwQ/1ep/9etp
/wChT165Sr/xGOn8KCiuG0vxD4kXQ9B17Un0u5sNTFoJYbW1khktzcFFQhmlcOA0igjC8c9sHpG8
R6Yt5NaebM00KuxCW0rB9gyyowXEjjByiktx0rEs1aK4rw744judAXWNbvbaCOW2trnyI7KaNrdZ
5HjjDMxPmZZdoYKB8pb7rA1uxeKNJm06S+jmmaOOY27x/ZZfOEgGdnlbfM3YIbG3pz05oA2KKgs7
y31CziurWQSQyDKtgj8CDyCDwQeQaxrfxt4fubW6uor5/Itbd7t5Gt5VVoU+9JGSo8xR6puHI9RQ
B0FFYHiLxLBo0Eojli+0QTWJuFlVtqQ3FyId+eBnAkxzwVGRjrNN4q0eDTkvpLiYRvP9mWMWspmM
uM7PKC792ATjbnHPTmgDZorMg8Q6VcR20kd2pS5jlkiJRlyIyA+cj5SpPKnB4PHBxVufGOhWZtxP
eSL59ut0pFtKwSFvuvIQv7tTzy+3ofQ0AbtFYNj4qtLq516OWKeBNIult3kkgkAkzGjArlRuJZiA
FySNpHDrl8vi3RYbCC8kuZVjnnNtGhtZfNMoVm2GPbvDYUnBAJ49RkA26KxLHxbomo3dta2t27S3
Ibyt0EiKzKCWTcygBwASUJ3AA8VPqetWmk3G68vI4YI7K4vJUMLsxjiMe5ww4AUPyuCW3DH3TkA1
KK4/XPHtlbaJcXGktJPdpcW9uEexnYIZnCrIUChmTG4gjhyu1Tkitu016xmv/wCyzdeZfICrssDp
E7qPmCMQVJHUqGJHfpQBq0VzY8eeHWtbS5S7uHju43lt9llOzSooQsyqEyQBIuePX+62LVt4t0O7
kmSG/XEVubou8bojQjG51dgFdRkZKk4yM4oA2qK5S/8AH+k22ntdWyXlwyXVtbyQ/Yp1kQTSBQ+w
x7sY3EHGGICg5IFakuv2VmdQe6uw6210tt5cNtI0iu0SOI9o3GRiH3ZUdDjGVJoA16Kw7rxfolnF
aSS3UjC7iklgWG2lld1jKh/lVSQVLDIIyOeODjXtbmC9tIbq2lWW3nRZIpEOQ6sMgj2INAEtFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAF
FFFABRRRQAUUVFc3VvZwNPdTxQQrjdJK4VR25JoDY8tm/wCSa6n/ANdZP5tXqjHNeNzanZnwLqFq
LuAzPK5WPzBuIJbGBnNet297a3sHnWlzDcRZxvhcOM+mRTRClF7MlY4FRMwFDuTURq0hsRpD2FRM
xPU040w1oiThvij/AMgGw/6/T/6Imr55r6G+KP8AyAbD/r9P/oiavnmir/Dj6v8AJCh8T9F+p738
EP8AV6n/ANetp/6FPXrleR/BD/V6n/162n/oU9euVNf+Iyqfwo4bS/D3iRtD0HQdSTS7aw0wWhlm
tbqSaS4NuUZAFaJAgLRqSctxx3yJ9N8Hz2Pihb1gklrHd3N5HK+oXLtvmLkhbfIiTHmsN3zZHYE5
HZUViWcHZ+CdRt9NsrZ5rQtBZaJbvhmwWs7hpZSPl6FThfU9cdatar4Ru72a/uEkVnfV11G3jS8l
tSwFmluVaWMb0OQx+XOQAD1IHZUUAZfhzS20bQreydY1kUu7iOWSQbndnb55CXY5Y5JPJ5wOg5K2
8Eat9l1ywaSysLHUNOntfJtbiaWJppOBMInGIQAW+RGIO7rwK9BooA4a88OeJNVl1C8ujpUF1cDT
BFHHLJJGn2a6eZ9xKKTkNxwPQ4xuNi98MX19pV6bi106e8vdQW9kt2uZUSPbEkQEc6KHRsRqd23u
wxzmuxooA848QaPenwroOiXuqI+uSXZjTEhd3gfdHKAxwzhIZeXIBJUE4JrW8V+GdT1S+t7nR1sr
a4ihEUV79plgmtjuznCArMmP+Wb4Gc888djRQByV/wCF7y+j8RQNJEsOoX1tfW7RzvG+6JYQUYqA
UBNuMOpJ+c8AqMx6Z4Uu7VtMmkS3ikh1Z7+4T7ZPdEg2skAHmy5Z2+ZOyjA4GRz2NFAHL2nhu8g/
sndJB/oet3uoyYY8xzfatoHH3h56Z7cNyeMnizw3ea99o+yyQJ5miahp481iP3k/k7DwD8o8tsnr
yMA11FFAHL6v4bvL/WLq7hkgWOX+ytoZiCPst288nQd1YBffrgc02z8O6hBq1sJWtv7Os9QudRhk
WRjNI8wlyjLtwAvnvyGOcLwK6qigDl9C8NXel/8ACMefJbt/ZWivp8+wk7pG+z8rkDK/uX5ODyOO
uK1j4W1Wx03QooLy2hu9N8Pzab5yguFuGFvtdQQNygwsecHpxycdjRQB55B4N8QD+07maa1kup20
2SFJr+aYFrW5aZg0jJlQwIxtXAJPHGW2Lnw7qK6jd6latayXA1ddRtopZGRHX7GlsyuwUlT98ggN
0X3x1dFAHMaR4burDVNNvJpYG8mDUPPCk8S3NxFNhMjlRtcZOD045ONPw1ps2jeFdI0u4aNp7Kyh
t5GjJKlkQKSMgHGR6CtSigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAK5/XP7c+3INM1G2tofKG5JY1JLZPOT7YroKy9S8O6Zq9
ytxewyvIqBAUuJIxjJPRWA7mgDA/4qz/AKDdh/36T/GsPxUNeOmQjUtStLi2N1GDHHGoJOeOhrq5
PBvh+MZa3uP/AAOn/wDi65/XfC+mS2gXTQ9vcpIro8s8sqnBzggsaGroyqxcoNIs3uk6cvhee5Wy
gEysAHCAEdK5Xwrc60ltdxabfW9vB9qYlZEUndtXnntjFa0sfiSWze0a9sPIY5KiJv8AGqul+E7W
3hkN/me4kkL7opZI1AwBjAYenX3pKLuZRhJ1E+WyRuxw+KZFz/bVkP8Atmn+NWbSLXobuN73VLae
3Gd0caKCeDjofXFZ0fhvTj0iuAP+vuX/AOKq/ZeHbK1uEuIknEi5wWuJGHIx0LEHrWiTOlo1/OJp
yljTkhCjmnGtUSzhvij/AMgGw/6/T/6Imr55r6G+KP8AyAbD/r9P/oiavnmir/Dj6v8AJEw+J+i/
U97+CH+r1P8A69bT/wBCnr1yvGfg5PcwR6h9ngilza2u7zJSmPmm6YU5r1L7dqP/AD5Wv/gU3/xu
pr/xGVT+FGpRWX9u1H/nytf/AAKb/wCN0fbtR/58rX/wKb/43WJZqUVl/btR/wCfK1/8Cm/+N0fb
tR/58rX/AMCm/wDjdAGpRWX9u1H/AJ8rX/wKb/43R9u1H/nytf8AwKb/AON0AalFZf27Uf8Anytf
/Apv/jdH27Uf+fK1/wDApv8A43QBqUVl/btR/wCfK1/8Cm/+N0fbtR/58rX/AMCm/wDjdAGpRWX9
u1H/AJ8rX/wKb/43R9u1H/nytf8AwKb/AON0AalFZf27Uf8Anytf/Apv/jdH27Uf+fK1/wDApv8A
43QBqUVl/btR/wCfK1/8Cm/+N0fbtR/58rX/AMCm/wDjdAGpRWX9u1H/AJ8rX/wKb/43R9u1H/ny
tf8AwKb/AON0AalFZf27Uf8Anytf/Apv/jdH27Uf+fK1/wDApv8A43QBqUVl/btR/wCfK1/8Cm/+
N0fbtR/58rX/AMCm/wDjdAGpRWX9u1H/AJ8rX/wKb/43R9u1H/nytf8AwKb/AON0AalFZf27Uf8A
nytf/Apv/jdH27Uf+fK1/wDApv8A43QBqUVl/btR/wCfK1/8Cm/+N0fbtR/58rX/AMCm/wDjdAGp
RWX9u1H/AJ8rX/wKb/43R9u1H/nytf8AwKb/AON0AalFZf27Uf8Anytf/Apv/jdH27Uf+fK1/wDA
pv8A43QBqUVl/btR/wCfK1/8Cm/+N0fbtR/58rX/AMCm/wDjdAGpRWX9u1H/AJ8rX/wKb/43R9u1
H/nytf8AwKb/AON0AalFZf27Uf8Anytf/Apv/jdH27Uf+fK1/wDApv8A43QBqUVl/btR/wCfK1/8
Cm/+N0fbtR/58rX/AMCm/wDjdAGpRWX9u1H/AJ8rX/wKb/43R9u1H/nytf8AwKb/AON0AalFZf27
Uf8Anytf/Apv/jdH27Uf+fK1/wDApv8A43QBqUVl/btR/wCfK1/8Cm/+N0fbtR/58rX/AMCm/wDj
dAGpRWX9u1H/AJ8rX/wKb/43R9u1H/nytf8AwKb/AON0AalFZf27Uf8Anytf/Apv/jdH27Uf+fK1
/wDApv8A43QBqUVl/btR/wCfK1/8Cm/+N0fbtR/58rX/AMCm/wDjdAGpRWX9u1H/AJ8rX/wKb/43
R9u1H/nytf8AwKb/AON0AalB6Vl/btR/58rX/wACm/8AjdBvtR/58rX/AMCm/wDjdAE1xBJLmqL6
WWPNT/bdR/58rX/wKb/43SfbNR/587X/AMCm/wDjdUmBWOk+1A0zaelTm61E/wDLna/+BTf/ABuk
NxqJ/wCXS1/8CW/+N07oLsWO0VOtTbQo4FVjNqJ/5dLX/wACW/8AjdNMmo/8+tr/AOBLf/G6akib
MsGmGoS2o/8APra/+BLf/EU3/iY/8+1r/wCBDf8AxFUpoVmcd8Uf+QDYf9fp/wDRE1fPNfQfxMFz
/YFibiOJP9N+Xy5C+f3E3XKjFfPlVUd6cbd3+SFH436L9T3L4Nf6vUf+vW1/9Cmr1SvK/g1/q9R/
69bX/wBCmr0TXr+TSvD2p6jEgeS0tJZ1U/xFULAfpU1/4jHT+FGhRWDp2iS6fdWdyNavJpHUrcpc
TNIlySucqpOIyCM/IAMZGO4zj42kTSLjUpdNVYW0ubVbELcZM8MYUnf8v7tjvTgbvve2KxLOvorg
/EWv63Pp93psenpZXon08EpqDKTBcT+Xw6x5V8oynA+UHcGJAB0bPXpI7WCz03T5Lm4ae+AjuL5m
Pl29wY3bzHDEkkrhTwN2MgDNAHV0VyUXjbzdAvNU/s/H2fQYNZ8rzvveYsreXnbxjysbsc7ugxzd
bxBetda1HBpcckWmSLCJGuwnmO0cUnOVwqgSnJyT8vAJOAAdBRXDweL9S1S/0iOygsAn9sPYXpiv
vNjcC1ab924j+YYOf4TuQL0JIvweIp3jittN07z7ua5v8RXF4wASC4MbtvKseWZdqYwA2MgLQB1N
FcdeeOZUt5ryw0kXVjBpMGryyvc+Wwhk8w4VdpywWMkDIB5GRxnsaACiiigAooooAKKKKACiiigA
ooooAKKKKACiiigAoorj/Fc9uvifR7e+l1cWb2d25j0xrrc0ivbhSwt/mIAZ+TwN3qRQB2FFcdZ6
rqGl20EMNnc3Ud/qbW2nrqEzxyrELcyFpC6s/wB+OT7w3bSPTB0bXxJJcapFC1kqWNxdzWVvcCbL
vNFv3gpt+Vf3UmDuOdvQZoA6CiuQ03xu0+kx6lqemfYYJtKfVYQk/ms0SBS4I2rgjeuOuQexyKZB
4+iubG8kt4bG8ubae0i2WOoCeJhcSiJf3gUYYHcSuOw55zQB2VFcXb67qoOtHV7SEJb6zY2kEdre
v8nmfZuNwRCVBlDkH725kPyjJtWfjixvPE40dJLIs881sipeBrgSRbt2+HGUX5Gw2TnjgZFAHVUV
y/hbxbJ4kuLiJrGC28kEui3YeaE7sBJoyqlGPJ43Dg/N0z1FABRRRQAUUUUAFFFFABRRRQAUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAHCfFX/kX9P/AOv7/wBoTV86
V9F/FX/kX9P/AOv7/wBoTV86VtL+FH1f5IhfG/Rfqe5fBr/V6j/162v/AKFNXqMsSTxPFKgeN1Ks
rDIIPBBry74Nf6vUf+vW1/8AQpq9NvLj7LatKF3NlVUE4ySQB+pFFf8AiMKfwoytO8Lwafd287X9
/di0QpaRXMistuCMHbhQWOOMsWOM88mq48F2H2C7sXuryS3mspbCFWZP9FgkADJHhfZeW3H5R2rI
/wCFgr6Ef9uv/wBto/4WCvv/AOAv/wBtqvqlf+Vke3p9zpb3w9aX99NdyyTiSX7JuCsMf6NM0yY4
7sxB9umOtY2saHPZR239l2eoXLCW7kaW2uoopV8+TzGQ+YADGzHkg7l2rjJ5qn/wsFff/wABf/tt
H/CwV9//AAF/+20fVK/8rD29PuWU8Awz+H7TT7rUb2B/7Ih0u8FpIoWdEUgZ3KSMFnIxjO7ByOK2
bvw1ZXttqkEsk4XUrmO6lIK5R0WJV25GMfuUOCCCc54OK53/AIWCvv8A+Av/ANto/wCFgr7/APgL
/wDbaPqlf+Vh7en3Nm08HWlmY3S/vmmTUBqPmu0e4yeSISuAmAhTIwAMZOCOMSP4VthFGLa+vbWa
Oa5lW4hZN+J5DJInzKRtLEdsjaOc81hf8LBX3/8AAX/7bR/wsFff/wABf/ttH1Sv/Kw9vT7m/L4T
06Syv7NDNFBeaZHpbJGw/dwoJAu3IPzYlbk56DjrncrhP+Fgr7/+Av8A9to/4WCvv/4C/wD22j6p
X/lYe3p9zu6K4T/hYK+//gL/APbaP+Fgr7/+Av8A9to+qV/5WHt6fc7uiuE/4WCvv/4C/wD22j/h
YK+//gL/APbaPqlf+Vh7en3O7orhP+Fgr7/+Av8A9to/4WCvv/4C/wD22j6pX/lYe3p9zu6K4T/h
YK+//gL/APbaP+Fgr7/+Av8A9to+qV/5WHt6fc7uiuE/4WCvv/4C/wD22j/hYK+//gL/APbaPqlf
+Vh7en3O7orhP+Fgr7/+Av8A9to/4WCvv/4C/wD22j6pX/lYe3p9zu6K4T/hYK+//gL/APbaP+Fg
r7/+Av8A9to+qV/5WHt6fc7uqkmnQy6vbamzP51vBLbooI2lZGjZieM5zEuOe5/DmLDxuLy8WFUL
fKzsDBs+VVLHne3YHtXTTz3DXf2a1MSssYkd5VLDBJAAAI9D3rKdOVN2mrGkZxmrxYt5p0N7dWFx
Izh7Gc3EYUjBYxvHg8dMSN0xyBVK38OW1vqgvVuLlkSaS4itWK+VFLJu3uvy7sne/ViPmOAKtbNU
/wCfiz/78N/8XRs1T/n4s/8Avw3/AMXUFHP+F/B6WfhixtdWa4nnOlpZS288issCsi+bGhUdCw6k
t0GDgCtQeHEktnhu9U1G8LXEFwHnkTKmGRZEUKqhQMqM8ZI6noRc2ap/z8Wf/fhv/i6Nmqf8/Fn/
AN+G/wDi6AKk3hu1mnvpGuLkLeXdtevGCu1ZYDGVK/LnDeVGGBJ4HGCSakttCS01I3UV9eiDfJKt
kHUQh3JLtgKGbJZjhmIBOQBxU+zVP+fiz/78N/8AF0bNU/5+LP8A78N/8XQBS07w1Fp+rf2i+oX9
5MsDW8P2qRW8qNmDFQQoZuVXlyx469c7dUdmqf8APxZ/9+G/+Lo2ap/z8Wf/AH4b/wCLoAvUVR2a
p/z8Wf8A34b/AOLo2ap/z8Wf/fhv/i6AL1FUdmqf8/Fn/wB+G/8Ai6Nmqf8APxZ/9+G/+LoAvUVR
2ap/z8Wf/fhv/i6Nmqf8/Fn/AN+G/wDi6AL1FUdmqf8APxZ/9+G/+Lo2ap/z8Wf/AH4b/wCLoAvU
VR2ap/z8Wf8A34b/AOLo2ap/z8Wf/fhv/i6AL1FUdmqf8/Fn/wB+G/8Ai6Nmqf8APxZ/9+G/+LoA
vUVR2ap/z8Wf/fhv/i6Nmqf8/Fn/AN+G/wDi6AL1FUdmqf8APxZ/9+G/+Lo2ap/z8Wf/AH4b/wCL
oAvUVR2ap/z8Wf8A34b/AOLo2ap/z8Wf/fhv/i6AL1FUdmqf8/Fn/wB+G/8Ai6Nmqf8APxZ/9+G/
+LoAvUVR2ap/z8Wf/fhv/i6Nmqf8/Fn/AN+G/wDi6AL1FUdmqf8APxZ/9+G/+Lo2ap/z8Wf/AH4b
/wCLoAvUVR2ap/z8Wf8A34b/AOLo2ap/z8Wf/fhv/i6AL1FUdmqf8/Fn/wB+G/8Ai6Nmqf8APxZ/
9+G/+LoAvUVR2ap/z8Wf/fhv/i6mtZpJBIkwUSxPsfb0PAYEfgwoA4z4q/8AIv6f/wBf3/tCavnS
vov4q/8AIv6f/wBf3/tCavnStpfwo+r/ACRC+N+i/U9y+DX+r1H/AK9bX/0KavRtW/48B/12h/8A
Ri15z8Gv9XqP/Xra/wDoU1ejat/x4D/rtD/6MWiv/EYU/hR5ToVrpc73Mur3S2tpBGGaV5AirlgB
kn3IFbE+kaI/iK10TTo57y5kiFzPIJwI7eA9HJwdxP8ACo6+oHNUPC0ulCe8t9Z8s2dzAYnSRSVY
HtxWn4Es/Dfgm21FBra3Ul1PuWVlfcIUGIozkfwjP512YydZVmot2+fY5sPGm6a5krnISqEmdB0V
iBVpNJvZLL7YsQMJVmH7xQzKvUhc7iBzkgY4NVZmDTyMOQWJH51r2up2keivZ3HnSnY4SJokZVc9
GV/vJjgkDOce9eq3NQVtzgtFydylLpN7DZi6kiAiKq/+sUsFboxXO4A8YJHcVPrOizaXd3OFJtY7
h4UcurNwTt3AcgkDPIGe1TT6naTaELR/OmnVEWLzIk/ckHkiQfMQRkBSMDPXim3mp2t5LqYPnJHe
agtwrbASqDzM8Z6/OOM44PNJSqXu/wCthtQsVLTSb29gM1vEGQNsGZFUs2M7VBILHGOBnrU8mizN
ptreW6l1e3aaUF1BG2R1O1epAVQTjOM1No2p2lnbSQ3nnSRM+5rfykkSQYxjLYKH/aGT044qOHVI
Y/seVk/cWM9s2AOWfzcEc9P3i5+hocql3b+tGCULalJ9PuUtBdMi+UcdHUsAehK5yAexIwa077Qt
lybeyEksv2+5tlDsPuRBCCTwBwxJPTjtSXWtR3GkmAZWVoYoWVbaIDam3kyY3tnaDjjHqQMVLPrl
vLqAnjNzEBqFzdBkC7lWQJt65BI2nI6EcZ5pXqN3t3HaBjXVnPZSiOdVBZdylXDqw9QwJBHB6elQ
Voaxd2t5dpJaoRiMLI5iWLzHyctsUkLxgceme9Z9bRbauzOSSegUUUUxBRRRQAUUUUAFFFFABRRR
QAUUUUAavh7/AJC//btcf+iXr1dP+Q7P/wBe0f8A6E9eUeHv+Qv/ANu1x/6JevV0/wCQ5P8A9e0f
/oT14mZ/xV6fqz08F/DfqZ95rGrf2/Ppel6ZZXH2e1huJJLm+aD/AFjSqAAsT5x5R5JHUVYsPENj
dWlvJczwWlxNJJCIJZlDNJHJ5Thc43APgAgc7l9aoXPhxdR8X3t9dm9jtjYW0MT21/Lb7nWScuGE
bqTgOn3uOTjvUw0RLfxNo81raotjZ2F3FnI+SR3gK9TkkhJDn65PPPnHWaSazpcgvCmpWbCyyboi
dT5GASd/Py4APXHSnQ6pp1xbT3MF/aywQFlmlSZWWMr94MQcAjvnpXn2oaTqNn4L1Bbu0a3XTPDN
5YvKZEYXblFIkXaScfu2PzAHMh461q3Gh6nf2mpSw2j6U7pYxxW8TxFv9HlMjMnVPmUhV3f3RuAH
FAHUHXNJFjFfHVLIWcxIjuDcJ5bkAkgNnB4Vjx6H0qDR/Euk67Zi6sb2B4zdS2ikSqd8iFuBgnOV
XeO5Ug9K57T9BvzJpdxcwXbka099P9ulgaRF+ySRKxESqg+bZ8q7uuSeuI9Str7TfA+pzNbeXeaf
qlxqFpvdSJgblplxgnG5XKYODknjoSAdvDPFcR+ZBKkqbmXcjBhlSQRkdwQQfcVJWfoen/2VodlY
s294IVWR/wC++Pmb8Tk/jWhQAUUUUAFFFFABRRRQBXuGYXVkAxAaVgwB6jynPP4gH8Kr2uqC41nU
NMkhMUtqI5EJbPnROvDj0wwdcc/dB71Pc/8AH5Yf9dm/9FSVk+I9N1C4a3vtGdI9RjDW+9zgeVJg
MffaQsgHfYR/FQA6DxTYGK7ur6e1sLGO6a1t7m5uFQXBXhiM4AG4Mo5Oduasrrdv/bNzYyGKOKG3
tZluGlG2QzySIqj3zGMc8lwPri63pF9Z2mlWehWatb28D25kRYWmjBChQDLwFbB3nDE4Xg1kW3hv
WrfRLdTY77i30vRF8rzky8trO8ssYOcZxgAk7SSOeuADu59TsLWG4muL62hitmCTvJKqrExAIDEn
5ThlPPZh61PFLHPCk0MiSROoZHRgVYHoQR1FcLNpOu3YvdQFteWEx1pb5IbaW3ed4hZpDgby0W7d
1DcfKcHoa6bwzYy6b4ft7a4Eyy7pJGWaRHcF3Z8Eoqr/ABdFGB0GcZIBr0UUUAFFFFABRRRQAUUU
UAFFFFABRRRQAUUUUAFFFFABVW1/4+7/AP67r/6Kjq1VW1/4+7//AK7r/wCio6AOO+Kv/Iv6f/1/
f+0Jq+dK+i/ir/yL+n/9f3/tCavnStpfwo+r/JEL436L9T3L4Nf6vUf+vW1/9Cmr0bVv+PAf9dof
/Ri15z8Gv9XqP/Xra/8AoU1ejat/x4D/AK7Q/wDoxaK/8RhT+FHM/wDCq/8AqM/+Sv8A9nR/wqv/
AKjP/kr/APZ16LRWv17Efzfgv8jL6rS7fmedf8Kr/wCoz/5K/wD2dH/Cq/8AqM/+Sv8A9nXotFH1
7Efzfgv8g+q0u35nnX/Cq/8AqM/+Sv8A9nR/wqv/AKjP/kr/APZ16LRR9exH834L/IPqtLt+Z51/
wqv/AKjP/kr/APZ0f8Kr/wCoz/5K/wD2dei0UfXsR/N+C/yD6rS7fmedf8Kr/wCoz/5K/wD2dH/C
q/8AqM/+Sv8A9nXotFH17Efzfgv8g+q0u35nnX/Cq/8AqM/+Sv8A9nR/wqv/AKjP/kr/APZ16LRR
9exH834L/IPqtLt+Z51/wqv/AKjP/kr/APZ0f8Kr/wCoz/5K/wD2dei0UfXsR/N+C/yD6rS7fmed
f8Kr/wCoz/5K/wD2dH/Cq/8AqM/+Sv8A9nXotFH17Efzfgv8g+q0u35nnX/Cq/8AqM/+Sv8A9nR/
wqv/AKjP/kr/APZ16LRR9exH834L/IPqtLt+Z51/wqv/AKjP/kr/APZ0f8Kr/wCoz/5K/wD2dei0
UfXsR/N+C/yD6rS7fmedf8Kr/wCoz/5K/wD2dH/Cq/8AqM/+Sv8A9nXotFH17Efzfgv8g+q0u35n
nX/Cq/8AqM/+Sv8A9nR/wqv/AKjP/kr/APZ16LRR9exH834L/IPqtLt+Z57H4A/sRLjUf7T87yba
b935G3OY2XruPrW7OJzrE32eB5n+zxZVSoIG6Tn5iK19a/5AWof9e0n/AKCaq2X/ACMNx/16R/8A
ob1hVqzqvmm7s1hTjBWiVMap/wBA2f8A7+Rf/F0Y1T/oGz/9/Iv/AIuujorMs5me3vrm3kgn0iSW
GVSkkcjRMrqRgggtggjtT8ap/wBA2f8A7+Rf/F10dFAHOY1T/oGz/wDfyL/4uobiyurvyvtOiGby
ZBLF5phbY4zhly3BGTyPWupooA5zGqf9A2f/AL+Rf/F0Y1T/AKBs/wD38i/+Lro6KAOcxqn/AEDZ
/wDv5F/8XRjVP+gbP/38i/8Ai66OigDnMap/0DZ/+/kX/wAXRjVP+gbP/wB/Iv8A4uujooA5zGqf
9A2f/v5F/wDF0Y1T/oGz/wDfyL/4uujooA5sx6kzo50ycshJU+ZHwSCv9/0Jpcap/wBA2f8A7+Rf
/F10dFAHOY1T/oGz/wDfyL/4ujGqf9A2f/v5F/8AF10dFAHOY1T/AKBs/wD38i/+Loxqn/QNn/7+
Rf8AxddHRQBzmNU/6Bs//fyL/wCLoxqn/QNn/wC/kX/xddHRQBzmNU/6Bs//AH8i/wDi6Map/wBA
2f8A7+Rf/F10dFAHOY1T/oGz/wDfyL/4ujGqf9A2f/v5F/8AF10dFAHOY1T/AKBs/wD38i/+Loxq
n/QNn/7+Rf8AxddHRQBzmNU/6Bs//fyL/wCLoxqn/QNn/wC/kX/xddHRQBzmNU/6Bs//AH8i/wDi
6Map/wBA2f8A7+Rf/F10dFAHOY1T/oGz/wDfyL/4ujGqf9A2f/v5F/8AF10dFAHOY1T/AKBs/wD3
8i/+Loxqn/QNn/7+Rf8AxddHRQBzmNU/6Bs//fyL/wCLqax3efe71Kv5qblJGQfJj44rdrGh/wCQ
hqX/AF8D/wBFR0AcZ8Vf+Rf0/wD6/v8A2hNXzpX0X8Vf+Rf0/wD6/v8A2hNXzpW0v4UfV/kiF8b9
F+p7l8Gv9XqP/Xra/wDoU1ejat/x4D/rtD/6MWvOfg1/q9R/69bX/wBCmr0bVv8AjwH/AF2h/wDR
i0V/4jCn8KN+iiisSwooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
KOtf8gLUP+vaT/0E1Vsv+RhuP+vSP/0N6ta1/wAgLUP+vaT/ANBNVbL/AJGG4/69I/8A0N6ANiii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACsaH/kIal/18D/0VHWzWND/AMhDUv8Ar4H/AKKjoA4z4q/8i/p//X9/7Qmr
50r6L+Kv/Iv6f/1/f+0Jq+dK2l/Cj6v8kQvjfov1Pcvg1/q9R/69bX/0KavRtW/48B/12h/9GLXn
Pwa/1eo/9etr/wChTV6Nq3/HgP8ArtD/AOjFor/xGFP4Ub9FFFYlhRRRQAUUUUAFFFFABRRRQAUU
UUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAUda/5AWof9e0n/oJqrZf8jDcf9ekf/ob1a1r/AJAW
of8AXtJ/6Caq2X/Iw3H/AF6R/wDob0AbFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFY0P/IQ1L/r4H/oqOtmsaH/k
Ial/18D/ANFR0AcZ8Vf+Rf0//r+/9oTV86V9F/FX/kX9P/6/v/aE1fOlbS/hR9X+SIXxv0X6nuXw
a/1eo/8AXra/+hTV6Nq3/HgP+u0P/oxa85+DX+r1H/r1tf8A0KavRtW/48B/12h/9GLRX/iMKfwo
36KKKxLCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAo61/yAtQ/6
9pP/AEE1Vsv+RhuP+vSP/wBDerWtf8gLUP8Ar2k/9BNVbL/kYbj/AK9I/wD0N6ANiiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACsaH/kIal/18D/0VHWzWND/yENS/6+B/6KjoA4z4q/8AIv6f/wBf3/tCavnSvov4q/8A
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
D/r2k/8AQTVWy/5GG4/69I//AEN6ta1/yAtQ/wCvaT/0E1Vsv+RhuP8Ar0j/APQ3oA2KKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigAooooAKxof+QhqX/XwP/RUdbNY0P/IQ1L/r4H/oqOgDjPir/wAi/p//AF/f+0Jq+dK+i/ir
/wAi/p//AF/f+0Jq+dK2l/Cj6v8AJEL436L9T3L4Nf6vUf8Ar1tf/Qpq9G1b/jwH/XaH/wBGLXnP
wa/1eo/9etr/AOhTV6Nq3/HgP+u0P/oxaK/8RhT+FG/RRRWJYUUUUAFFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQAUUUUAFFFFAFHWv+QFqH/XtJ/wCgmqtl/wAjDcf9ekf/AKG9Wta/5AWo
f9e0n/oJqrZf8jDcf9ekf/ob0AbFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAF
FFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFY0P/ACENS/6+B/6KjrZrGh/5CGpf
9fA/9FR0AcZ8Vf8AkX9P/wCv7/2hNXzpX0X8Vf8AkX9P/wCv7/2hNXzpW0v4UfV/kiF8b9F+p7l8
Gv8AV6j/ANetr/6FNXo2rf8AHgP+u0P/AKMWvOfg1/q9R/69bX/0KavRtW/48B/12h/9GLRX/iMK
fwo36KKKxLCiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAo61/wAg
LUP+vaT/ANBNVbL/AJGG4/69I/8A0N6ta1/yAtQ/69pP/QTVWy/5GG4/69I//Q3oA2KKKKACiiig
AooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAC
iiigAooooAKxof8AkIal/wBfA/8ARUdbNY0P/IQ1L/r4H/oqOgDjPir/AMi/p/8A1/f+0Jq+dK+i
/ir/AMi/p/8A1/f+0Jq+dK2l/Cj6v8kQvjfov1Pcvg1/q9R/69bX/wBCmr0bVv8AjwH/AF2h/wDR
i15z8Gv9XqP/AF62v/oU1elajE81kyxruZXRwo77WDY/Siv/ABGFP4UbdFZ/9tWndLsH0+yS/wDx
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
tO/58LX/AL8r/hVuigCp/ZWnf8+Fr/35X/Cj+ytO/wCfC1/78r/hVuigCp/ZWnf8+Fr/AN+V/wAK
P7K07/nwtf8Avyv+FW6KAKn9lad/z4Wv/flf8KP7K07/AJ8LX/vyv+FW6KAKn9lad/z4Wv8A35X/
AAo/srTv+fC1/wC/K/4VbooAqf2Vp3/Pha/9+V/wo/srTv8Anwtf+/K/4VbooAqf2Vp3/Pha/wDf
lf8ACrKIsaBEUKo4AUYAp1FAHCfFX/kX9P8A+v7/ANoTV86V9F/FX/kX9P8A+v7/ANoTV86VtL+F
H1f5IhfG/Rfqe5fBr/V6j/162v8A6FNXqleV/Br/AFeo/wDXra/+hTV6pRX/AIjCn8KCiiisSwoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigAooooA4T4q/8i/p/wD1/f8AtCavnSvov4q/8i/p/wD1/f8AtCavnStpfwo+r/JEL436L9T3
L4Nf6vUf+vW1/wDQpq9Uryv4Nf6vUf8Ar1tf/Qpq9Uor/wARhT+FBRRRWJYUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAcJ8V
f+Rf0/8A6/v/AGhNXzpX0X8Vf+Rf0/8A6/v/AGhNXzpW0v4UfV/kiF8b9F+p7l8Gv9XqP/Xra/8A
oU1eqV5X8Gv9XqP/AF62v/oU1eqUV/4jCn8KCiiisSwooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA4T4q/wDIv6f/ANf3/tCa
vnSvov4q/wDIv6f/ANf3/tCavnStpfwo+r/JEL436L9T3L4Nf6vUf+vW1/8AQpq9Uryv4Nf6vUf+
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
ov8A4qiiidRSikopb9/LzBRs27n/2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial8.jpg</title>
    <ns>6</ns>
    <id>62</id>
    <revision>
      <id>78</id>
      <timestamp>2021-08-27T13:55:22Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>78</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:55:22Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial8.jpg</filename>
      <src>https://wiki.iberty.cf/images/8/88/Eclipsetutorial8.jpg</src>
      <size>15417</size>
      <sha1base36>lfrjr3yo5lansy9h07htrb3t10y0i5b</sha1base36>
      <rel>8/88/Eclipsetutorial8.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAEIARQDASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBuo6yv
iy4kvdReWWydybWzZiscaDIUlQcb8E5PPUgHGBWcbTw2GKm0twRwRuP+NYlmWFlBhiB5a9/au50f
StPHh6e4ks1nvLp5NsjwtII8MRgYU46Z9a+jtTo0o2j2OCEHVlJyb0MEWnhs/wDLnb/99H/GpP7M
0H/oHw/mf8ap6lps1uWlKhYx1AtpkH5sgX9apbn/ALzfnW0PZzV1EitDktZs2f7M0H/oHw/mf8aP
7M0H/oHw/mf8a2tQ1I2Pgrwip1vWdO80XvGmpu83Eo+/+8TGM8dep6d2aJ4X06+t/DEEs98l1rSX
nKuuyIw5wcYzj1HfPUY55/b0ldyjZJtfdfy8heym7WZkf2ZoP/QPh/M/40f2ZoP/AED4fzP+NbFl
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
FEkLS2sLSJvUDIyB9PzooorGrBObZcJNRP/Z
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial9.jpg</title>
    <ns>6</ns>
    <id>63</id>
    <revision>
      <id>79</id>
      <timestamp>2021-08-27T13:55:33Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>79</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:55:33Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial9.jpg</filename>
      <src>https://wiki.iberty.cf/images/6/6f/Eclipsetutorial9.jpg</src>
      <size>27496</size>
      <sha1base36>1q2sz0bifvtdrln0temxkgwwdl0mc35</sha1base36>
      <rel>6/6f/Eclipsetutorial9.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAKoAUIDASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD2e6uf
s6qAN0jnCA8DOM8n0xzVXfIeWvJQf+maoq/gCCf1qPV5PLmhb/pm/wD6ElZMmoxxMqu+C3Tj3A/m
RW9OmpRuzKc2nZG1ub/n8uP/ACH/APEUbm/5/Lj/AMh//EV5dJrl19gMyLcrcrCshma/ONxUHd5e
/GP9nGPbtXUavrl1Ymxis7aG4nu7gwKs05iVcRvISWCseiEYx3qo04sTk1udTub/AJ/Lj/yH/wDE
Ubm/5/Lj/wAh/wDxFcpZeIJnmu7fUoYLOe1jSZyk/mR+W27Dbiq90bORxirJ8Q6atnHeHUbQWshI
SYzLsbAJOGzg8KT+B9Kr2MRe0Z0W5v8An8uP/If/AMRRub/n8uP/ACH/APEVz0Ov6fczpDBf2sss
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
4e1nULuw/tS30hpLKeKVdXic/apBGwONnlgJvA2thyMMwAp9n4b1S08aNqcP2O1spJZZLn7Pczf6
UGUhQ0DDy1cHBMitltp4G446+ipGcvoPhu70v/hGPOkgb+ytFfT59jE7pG+z8rkDK/uX5ODyOOuL
Wt2msT3P+i2umajYSRBJLPUJDGqOCfnDCN92QQCCMfKMdTW9RQBy+i+F59JvtIl8yAw2VnewtGmQ
EaeaKRUjGPuIEZR04C8dcYMnw9vW0rTLVjDO66Pa6XdqdRubeICIMGbZFt84Hew2uV4HUZNejUUA
cv8A8I3ef8JH/aPmQeT/AG3/AGht3Hd5f9n/AGbHT72/nHTb3zxUHhfw3qmi61cTSfY7XT3iZTa2
lzNJHLKXBEixyDEGBuGxCwO7r8orr6KACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAo61/yAtQ/69pP/QTXLaD/AMgE/wDX4n/oSV1Otf8AIC1D/r2k/wDQTXLaD/yA
T/1+J/6ElaL+G/VfqQ/jXz/Q6aiiisyzl/Gf+qtf+B/0rtbf/j2i/wBwfyrivGf+qtf+B/0rtbf/
AI9ov9wfyrSXwR+ZC+JklFFFZlhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABR
RRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAUda/wCQFqH/AF7Sf+gmuW0H/kAn/r8T/wBC
Sup1r/kBah/17Sf+gmuW0H/kAn/r8T/0JK0X8N+q/Uh/Gvn+h01FFFZlnL+M/wDVWv8AwP8ApXa2
/wDx7Rf7g/lXFeM/9Va/8D/pXa2//HtF/uD+VaS+CPzIXxMkooorMsKKKKACiiigAooooAKKKKAC
iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigCjrX/IC1
D/r2k/8AQTXLaD/yAT/1+J/6EldTrX/IC1D/AK9pP/QTXLaD/wAgE/8AX4n/AKElaL+G/VfqQ/jX
z/Q6aiiisyzl/Gf+qtf+B/0rtbf/AI9ov9wfyrivGf8AqrX/AIH/AErtbf8A49ov9wfyrSXwR+ZC
+JklFFFZlhRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
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
gklsKY2BwdSmB/7Z/wDxNFFFIZ//2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Eclipsetutorial10.jpg</title>
    <ns>6</ns>
    <id>64</id>
    <revision>
      <id>80</id>
      <timestamp>2021-08-27T13:55:44Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>80</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-08-27T13:55:44Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Eclipsetutorial10.jpg</filename>
      <src>https://wiki.iberty.cf/images/d/d3/Eclipsetutorial10.jpg</src>
      <size>103365</size>
      <sha1base36>qk7pkrkftnrps0natmnplujcyjaghti</sha1base36>
      <rel>d/d3/Eclipsetutorial10.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAQIAAAAAAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a
HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy
MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCALWBC4DASIA
AhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQA
AAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3
ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWm
p6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEA
AwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSEx
BhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElK
U1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3
uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwBup6vD
4rvrnUb7c1pcS74LQnYiooKozKDgyberEk8kA7cAZxtPDYYqbS3BHBG4/wCNYlmWFlBhiB5a9/au
50fStPHh6e4ks1nvLp5NsjwtII8MRgYU46Z9a+jtTo0o2j2OCEHVlJyb0MEWnhs/8udv/wB9H/Gp
P7M0H/oHw/mf8ap6lps1uWlKhYx1AtpkH5sgX9apbn/vN+dbQ9nNXUSK0OS1mzpofClpc24uIPDs
0sByRIkMjKccHkcdqpf2ZoP/AED4fzP+NdRYR2Mlv8Omu72eC4Sa8e3RY8pM4mU7WfcNuSABwc5P
TvR0jTbO5tb7VNat/LubjXWtZLUmdmgViWKosKkl8nAyNvHvXJ9ZpqUlKOi8vOw/YyaVpGL/AGZo
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
V0l3G6phrd0hijQg55IaEODx1xjjnMtPAxtrGGybUt9v/Ztjptwog2maK383cM7vlEnmYI5wARk5
yOvoqgOfOhanZTTnRdXhtLeSVpRaz2fnRqW+/wBHVuWBYYIALNnORt0dH0xNI01LRZGlO+SWSRhj
fJI7SO2O2WZjjtV+igAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKK
ACiiigArm9WmuItdcQXDw5to920Kc/NJ6g10lczrP/Ieb/r2j/8AQpKAIM3Uv3r+c/8AAY//AImo
rIEK4LFiHiBJ6n/SpasR1XtP+Wv+/F/6VS0ATayu7Trn5c/6co+7nrCBj7p65x75xh87G537/wDt
bv8AgWc/99Zzv/2s7/49/wDpHRayu7Trn5c/6co+7nrCBj7p65x75xh87G537/8Atbv+BZz/AN9Z
zv8A9rO/+Pf/AKR34f4DlrfEeiaa2/S7Rt27MCHduzn5Rznc2f8Avo/U9azdV1WTTrrT7eOIyyX1
59mUGTaEGx5GYnB6LG2B3OBkZyNLTW36XaNu3ZgQ7t2c/KOc7mz/AN9H6nrXPeILaT+3tA1COKaQ
W97JHL5algkckTruKj0fyxu/hBbkAtXGviZv0Rvb3/vt+dG9/wC+3502itLEjt7/AN9vzo3v/fb8
6bRRYB29/wC+350b3/vt+dNoosA7e/8Afb86N7/32/Om0UWAdvf++350b3/vt+dNoosA7e/99vzo
3v8A32/Om0UWAdvf++350b3/AL7fnTaKLAO3v/fb86N7/wB9vzptFFgHb3/vt+dG9/77fnTaKLAO
3v8A32/Oje/99vzptFFgHb3/AL7fnRvf++3502iiwDt7/wB9vzo3v/fb86bRRYB29/77fnRvf++3
502iiwDt7/32/Oje/wDfb86bRRYB29/77fnRvf8Avt+dNoosA7e/99vzo3v/AH2/Om0UWAdvf++3
50b3/vt+dNoosA7e/wDfb86N7/32/Om0UWAdvf8Avt+dG9/77fnTaKLAO3v/AH2/Oje/99vzptFF
gHb3/vt+dG9/77fnTaKLAO3v/fb86N7/AN9vzptFFgHb3/vt+dG9/wC+3502iiwDt7/32/Oje/8A
fb86bRRYB29/77fnRvf++3502iiwDt7/AN9vzo3v/fb86bRRYB29/wC+351W0/nTm/6+J/8A0a9T
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
0TQv+P5f+wfB/NqK/wDEYU/hR0NFFFYlhRRRQAUUUUAFFFFABRVMarYtrL6OLmP+0Et1ujbnhvKZ
ioceo3KQcdOM4yM3KACisKG6v7iCG9inXMoWTyHIEYU87c7S2cd89ecY+Wr1rfzSXYtriCON2RpE
McpcEKQDnKjH3h69+nfCGJpzdkaSpSRfoqhqetWGjrEb6Zo/NJCBY2kJwMkkKCQoHJY8DuRWTpXi
+0k8O6HfapIIrnULGC5kEMEjRxGRAcsQCI0ySAXIHHXg1uZnS0Vnx63p000UMdxmSW4ltkXY2fMj
BLg8cAbTyeDxgnIzoUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFZ+0nWrkh
2XFvCSBj5uZeD/Pj0rQqgv8AyGbv/r2h/wDQpaAK8ysuMzynGznKgnHU9Op/TtisW26y/wC/F/6V
S1uXPesO26y/78X/AKVS0Abdt0vP+vkf+i0qWorbpef9fI/9FpUtAF+P/Vp9BQn3T9T/ADoj/wBW
n0FCfdP1P86AHUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
WXZf8eMn/Xzcf+jXrUrLsv8Ajxk/6+bj/wBGvQBl6z/yD7r/AK5P/I1r1kaz/wAg+6/65P8AyNa9
AEV3/wAgy+/69pP5UWn/ACGZf+uMf83ou/8AkGX3/XtJ/Ki0/wCQzL/1xj/m9AGtRRRQAUUUUAFF
FFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAGZqf/AB+W
X/XU/wDoD189/Fb/AJGrU/8Ar6j/APSeKvoTU/8Aj8sv+up/9Aevnv4rf8jVqf8A19R/+k8VbUft
ejIn09Tsvg1/q9R/69bX/wBCmr0TQv8Aj+X/ALB8H82rzv4Nf6vUf+vW1/8AQpq9E0L/AI/l/wCw
fB/NqK/8RhT+FHQ0UUViWFFFFABRRRQAUUUUAcXqPgJdW+KVh4vubuRItOskht4IXZGeXfISXIx8
m1wNo+9kg8Ahu0oooA5qDS9YtYI7eNbKSOJQiu07qWAGASNhx9Mn61d06wvk1AXV55CbImjVIpC+
7cVJJJUYxt9857Y52KK5YYOlCSkvzNpV5SVmYms6bqE2q2Op6abZp7eGa2ZLlmC7JTGSwwDkgxLx
xkEjI61yknw9vW0rTLVjDO66Pa6XdqdRubeICIMGbZFt84Hew2uV4HUZNejUV1GJzdn4cntvHF7r
LTxtZSxZggGdyTOEWVjxjBWGPHuX9eekoooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACii
igAooooAKoL/AMhm7/69of8A0KWr9UF/5DN3/wBe0P8A6FLQBDc96w7brL/vxf8ApVLW5c96w7br
L/vxf+lUtAG3bdLz/r5H/otKlqK26Xn/AF8j/wBFpUtAF+P/AFafQUJ90/U/zoj/ANWn0FCfdP1P
86AHUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFF
FABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABWXZf8eMn/
AF83H/o161KwILS1+zSzTSSoXup84upEXPmv2DAdqAK2s/8AIPuv+uT/AMjWvWBqkNr/AGfdGPex
ETHP2mRscHsWxW/QBFd/8gy+/wCvaT+VFp/yGZf+uMf83ou/+QZff9e0n8qLT/kMy/8AXGP+b0Aa
1FFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAU
UUUAZmp/8fll/wBdT/6A9fPfxW/5GrU/+vqP/wBJ4q+hNT/4/LL/AK6n/wBAevnv4rf8jVqf/X1H
/wCk8VbUftejIn09Tsvg1/q9R/69bX/0KavRNC/4/l/7B8H82rzv4Nf6vUf+vW1/9Cmr0TQv+P5f
+wfB/NqK/wDEYU/hR0NFFFYlhRRRQAUUUUAFFFFAGO/ifS4vFq+GJZ/K1OS0F3Cj8CZCzghT3YbC
SPQ5GcNjYrl73wLpep+PrbxZfj7RcWdokFrA6/JE6u7eaf7zfOMf3cZ5OCvUUAc9bNPdWtvereOl
zKqykksyDPO3ZuC4xx0zjnOeav2l5cG+W2uHhl3xNIrRRlNu0qCCCxznd7Yx3zxRj0C+t40hg1KE
QxgJGHtSzBRwMkOMnHfA+lW9P0qe2vPtVzdpM6xmNBHEYwAxBOcs2fujHTv17edRjiFNcy066nVN
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
R0UZzznU8FiRb3xUkt79tdNXCGcqoLYtLYchQBuGMHAAyDwOlAHV0UUUAFFFFABRRRQAUUUUAFFF
FABRRRQAVzOs/wDIeb/r2j/9Ckrpq5nWf+Q83/XtH/6FJQBHHVe0/wCWv+/F/wClUtWI6r2n/LX/
AH4v/SqWgC1pn/I7Xv8A17D/ANkrG8SeP7rQ/EtxpaxxkIglQC1eVimzcxO1xwMMenAH41s6Z/yO
17/17D/2SsDxNpElzr+qXC2N280yRwRzR27sojKDfhgOp+79C4PWt+ZRkuZaWMXFtOztqULrxovi
BNPns77M1tIXkjTNv5UhDqkh3K2VGQDhiCWAKsSFPa+LLzVdO8LLJYXEK6m9zZ26ymL92WkuI42O
0k4BDHjJIz1715ovhGaFhJHp16XQ7l/0STqOn8Neuazpn9r2Mdt53lbLu2ud23dnyZkl24yOuzGe
2c89KxnGKm5Re46UGrt7s5XV/GVzNbeHX0krE17PazXYdQxjhe4ihaM56MWlIz/sNVYeKdYh1HT5
nnEtlHLrD30flLuMMF6kKEEDI8tHz/tBTnJINakXgOCC41SaO9fN7qNteqGjyIUinWcxLz0aTzTn
jHmdDjm/pvhgafqVveG780Rf2jlDFjd9quVn65/h27ffOeOlI1MuTWtSn8QPYw3xjgk102SMkaEr
CdL88AEg5/e/Nk59OnFSadqeta/NPYQXaWFzpgNvfzCFZBJOcY2KTwuz5/YugOdrKVsfA7abIHtN
Tx5eqPqFuskG4RKbM2qRfeGVUEEHuFx/tVaj8KSWKwvpOpvZ3QhMVxO0KyG5O7fvcHA3by5J9JHA
wSCoBH4U1W4vNT1exkv7q9hs/J2S31qLe4DMGLAoETKYClW2jOWHOM1f0/8A5Blr/wBcU/kKk0nS
bm0vbvUNQvIrq/ukjid4YDDGscZcqoUsx6yOSSxzntio9P8A+QZa/wDXFP5CgCzRRRQAUUUUAFFF
FABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQA
UUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAYVz/wAjlZ/9e5/9nrxb4rf8
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
Q6H4nuPEWjX1xpttp817aXP2Yomob7Z2ARiVmVCSNrj+DOQQQOtQxeKbs+GfC17bae15da2sSrHJ
cKhQtbPMWZggBxswcKOpIHRTr6JoUOhre+XdXVzJeXH2iaS5cMxfy0j4wAAMRrx25xgYAjtfDdna
WGgWcck5j0Tb9mLMMvtgeAb+OflcnjHOO3FADtC1a41Rb6K8s0tLyxufs08cc3mpny0kBVtqkgrI
vUDnNP1rVm0qG2WG2N1d3c4t7aAOEDvtZzlj90BUZicHgcAnilGiwousCK4uYn1SQyyyRuFaJvJS
HMZxwQsakZzzk+1P1bSINYtUhmkmieKQTQzwPtkikGQGU8jOCRggggkEEGgCTTpNRlti2p2trbT7
iAltctOu3jB3MiHPXjH41bqnp1nPY2xiuNSutQcsWEtysSsBgfL+7RBj8M89auUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAVmSiZtRv1t3SOc2kQjeRC6q26XBKggkZ7ZGfU
Vp1zGtbv7dbbLKn+jR/6uRkz8z9cEZoA5nw34L8QeHNcvtQvfGD6rDfuZLq3ms9m6TGA6HzCEIAA
wBjaAMcLt6XSP+Pm4/3P/a89V1gD/emuT9biT/4qptEG2WZRkgJjk5P+un70AF//AMjlp/8A16//
ABdeJfFb/katT/6+o/8A0nir22//AORy0/8A69f/AIuvEvit/wAjVqf/AF9R/wDpPFXTHr/hMf8A
M7L4Nf6vUf8Ar1tf/Qpq9E0L/j+X/sHwfzavO/g1/q9R/wCvW1/9Cmr0TQv+P5f+wfB/Nqiv/EZd
P4UdDRRRWJYUUUUAFFFFABRRRQAUUUUAFFef6hpnimX412mo6VN9m0RNKij1BplLRz/vZiI1GRmQ
ZyGH3Aechtr+gUAZQ1iRgk62jPaOQVZCzSFT0bYFxjv97OO2flq5b39vdSGOMyBwM7ZImjJHqNwG
e3Tpketc5Z3k9pZW9tNaXolhjWNwtrIwyBg4IUgj3HFXtNlmu9XSbyLhIooJEZpoWj+ZmQgDcBn7
p6dPxFedRxVSU1FrfyOqdGKTaNZ763j1GGwaTFzNFJNGmDyiFAxz04MifnViuY1HTYD8R9C1N9OE
jrYXkAuxbbzG5aFkDOB8ny+eASQPmYDlsHlvDOjaksd/HfrcLO+kyQX/ANh0t7R57ghfm895MTSj
D7XUBfmJJHAr0TlPSL2+t9PgWa5k2RtLHCDgn55HWNBx6syj8asV49a6DE/hi+tJvDv2iztb7TZl
caNLbmZVnXzv9FbOXWPcGdB84cjnFew0AFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQA
VzOs/wDIeb/r2j/9Ckrpq5nWf+Q83/XtH/6FJQBHHVe0/wCWv+/F/wClUtWI6r2n/LX/AH4v/SqW
gCxYf8jlqH/Xr/8AEVoD/kYLH/rjN/7JWfYf8jlqH/Xr/wDEVoD/AJGCx/64zf8AslaVOnoRDqbV
FFFZlhRXIfETV7rTdChtrC5ntru9uEgWWKwnuSELBXwYiCjANuGTk7SFBPIT4fX+p6tpuoajqF99
pjnvZBApsJrbYqnaColc5RlCMABwSwJJzgA7CiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigAooooAKKKKACiiigAooooAK5nWf+Q83/XtH/wChSV01czrP/Ieb/r2j/wDQpKAI46XRv9fP
/uf+156SOl0b/Xz/AO5/7XnoAS//AORy0/8A69f/AIuvEvit/wAjVqf/AF9R/wDpPFXtt/8A8jlp
/wD16/8AxdeJfFb/AJGrU/8Ar6j/APSeKumPX/CY/wCZ2Xwa/wBXqP8A162v/oU1eiaF/wAfy/8A
YPg/m1ed/Br/AFeo/wDXra/+hTV6JoX/AB/L/wBg+D+bVFf+Iy6fwo6GiiisSwooooAKKKKACiii
gAooooAKKKKACiufu76aO9uw15cxpHMERIjAoA8tG/5aDJ5Y96saTqUk11JaSypcD53huEZTuVSM
htvAI3L2HB9uY5/J2HbzNiiq95qFlp6Rve3dvbJI4jRppAgZz0UZPJPpWbpniawvdF0S/u7i2sZt
Wt4poLaW4UMzOgbYucbyN2OB+FWI2qKrrf2bsirdwMZJWhQCQHdIudyj1YbWyOo2n0qgvibSTr9/
opvIFu7C1S7uA0qjYjFs55yNoCk5HAkQ/wAVAGvRWNrXirRtAtFuL+/to0M0EJBmQEGVtqsckcY3
MT/dRj2rZoAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACuZ1n/kPN/17R/8AoUldNXM6z/yH
m/69o/8A0KSgCOOq9p/y1/34v/SqWrEdV7T/AJa/78X/AKVS0AWLD/kctQ/69f8A4itAf8jBY/8A
XGb/ANkrPsP+Ry1D/r1/+IrQH/IwWP8A1xm/9krSp09CIdTaooorMsr3Nlb3kltJPHva2l86L5iN
r7WXOB14Y9fr1AosbK302wgsrSPy7eBBHGm4nCjpyeT9TzViigAooooAKKKKACiiigAooooAKKKK
ACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooA
KKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAo
oooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACuZ1n/kPN/17R/+hSV01czrP/Ieb/r2j/8A
QpKAI46XRv8AXz/7n/teekjpdG/18/8Auf8AteegBL//AJHLT/8Ar1/+LrxL4rf8jVqf/X1H/wCk
8Ve23/8AyOWn/wDXr/8AF14l8Vv+Rq1P/r6j/wDSeKumPX/CY/5nZfBr/V6j/wBetr/6FNXomhf8
fy/9g+D+bV538Gv9XqP/AF62v/oU1eiaF/x/L/2D4P5tUV/4jLp/CjoaKKKxLCiiigAooooAKKKK
ACiiigAooooA43UNSt7XVtSikuo4pPtCnaZghx5MXP319/Wp9Du4LjW4FivIrlhazMwSXeUy0PB+
dvQ98V1dFF3y8ora3Od8QWN3Jq+n38GnjUYo7e5tpLYuq4Mvl4c7iBgbGU4ycOcA9K5B/COvDQtL
syNSUSaFZ6bcW9nPaqsckYbeZHlVyB84w0QJ+Xv8teo0UDOPg0bUbLxpqOom1M2mRRPdWkcTrvku
JVRXUBiACPKJBJAzMeeONE215b+MNTvhYST2txpUEaMjoN0kUk5MZDMDlhMuDjbwckcZ36KAPPbT
w3q+meEp7D7As9zHqFlfJ5Eq/vUSaKRolLsMGNYzGuSAVVOc5x6FRRQAUUUUAFFFFABRRRQAUUUU
AFFFFABRRRQAUUUUAFczrP8AyHm/69o//QpK6auZ1n/kPN/17R/+hSUARx1XtP8Alr/vxf8ApVLV
iOq9p/y1/wB+L/0qloAsWH/I5ah/16//ABFaA/5GCx/64zf+yVn2H/I5ah/16/8AxFaA/wCRgsf+
uM3/ALJWlTp6EQ6m1RRRWZYUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAVzOs/8h5v+vaP/wBCkrpq5nWf+Q83/XtH/wChSUARx0ujf6+f/c/9rz0k
dLo3+vn/ANz/ANrz0AJf/wDI5af/ANev/wAXXiXxW/5GrU/+vqP/ANJ4q9tv/wDkctP/AOvX/wCL
rxL4rf8AI1an/wBfUf8A6TxV0x6/4TH/ADOy+DX+r1H/AK9bX/0KavRNC/4/l/7B8H82rzv4Nf6v
Uf8Ar1tf/Qpq9E0L/j+X/sHwfzaor/xGXT+FHQ0UUViWFFFFABRRRQAUUUUAUxqti2svo4uY/wC0
Et1ujbnhvKZioceo3KQcdOM4yM3K4vUfAS6t8UrDxfc3ciRadZJDbwQuyM8u+QkuRj5NrgbR97JB
4BDdpQBhQ3V/cQQ3sU65lCyeQ5AjCnnbnaWzjvnrzjHy1etb+aS7FtcQRxuyNIhjlLghSAc5UY+8
PXv075MGl6xawR28a2UkcShFdp3UsAMAkbDj6ZP1q7p1hfJqAurzyE2RNGqRSF924qSSSoxjb75z
2xz51GWI50pJ2+R1TVOzaaK+u68+k6isLSwW9r/ZV7fSXEsLS+UYTCAdqkFlAlYlRycDBFJZ+Kbd
/EGq6VdyLHJb3qW0G2NyCrQRSDe3KqS0jgZIzjABINQeLPDd5r32j7LJAnmaJqGnjzWI/eT+TsPA
Pyjy2yevIwDUMvhzVJta1Lc9mNNvdUtdQ3h285PISDC7duDueD1GBzyTgeicp11FFFABRRRQAUUU
UAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXN6tBcTa45gt3m220e7ayjHzSf3iK6SsyUTN
qN+tu6Rzm0iEbyIXVW3S4JUEEjPbIz6igDIEV4n3rGQf9tYv/i6r2edsmVKnfFkHHH+lS+lYnhvU
PiDfa5fQ+JdP0iy0+zcx+ZbxyFrpsZBjJc/JggliP9nGd23ctusv+/F/6VS0AT2H/I5ah/16/wDx
FaA/5GCx/wCuM3/slZ9h/wAjlqH/AF6//EVoD/kYLH/rjN/7JWlTp6EQ6m1RRRWZZHPPDawPPcSx
wwxqWeSRgqqB3JPAFEU8MzSrFLHI0T7JArAlGwDg+hwQce4rkPiNb3uoabpml2lvHML2+jjbOoy2
pO35yv7tTuUosgOfu8EBiBhPhpp8tv4dk1GdJEk1Kd7lc6jNdhomYmM5lxg7SASBlgqknPAAO0oo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKA
CiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACuZ1n/kPN/17
R/8AoUldNXM6z/yHm/69o/8A0KSgCOOl0b/Xz/7n/teekjpdG/18/wDuf+156AEv/wDkctP/AOvX
/wCLrxL4rf8AI1an/wBfUf8A6TxV7bf/API5af8A9ev/AMXXiXxW/wCRq1P/AK+o/wD0nirpj1/w
mP8Amdl8Gv8AV6j/ANetr/6FNXd6fdNa3cHlxebLLZQRom7aCfnPJ7DAJrhPg1/q9R/69bX/ANCm
rtbQ7dV00+ltEf8AyHNUV/4jLp/CjovO1L/n0s//AAKb/wCN1Et9qDXUluLK1DRorkm6bBDFgMfu
/wDZNcJrVr4lm+LHhrUPP87w3D537mFSPImMEg3S8/NnOFboM7cAnL9nFP8A8TK6fP8AyxhH6y1i
WXfO1L/n0s//AAKb/wCN0edqX/PpZ/8AgU3/AMbqP7T70fafegCTztS/59LP/wACm/8AjdHnal/z
6Wf/AIFN/wDG6j+0+9H2n3oAk87Uv+fSz/8AApv/AI3R52pf8+ln/wCBTf8Axuo/tPvR9p96AJPO
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
/wBev/xFaA/5GCx/64zf+yVpU6ehEOptUUUVmWZfiDxBpvhnSZNS1S5jhhU7VDOqmRsEhV3EAscH
jPY+lR6F4o0fxI96uk30F0LOURSGKVHByMhhtJ+U8gE4yVb0qp4u0XUNcTTLezv7u1hF4j3PkCHG
xD5isfMRiSHjQAD+9yCOj/Bmk3uj+HI4dRuZ5ryeSS6nE3l5jeRi7LmNQD8xJ78k4OMAAHQUUUUA
FFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABXM6z/yHm/69o//
AEKSumrmdZ/5Dzf9e0f/AKFJQBHHS6N/r5/9z/2vPSR0ujf6+f8A3P8A2vPQAl//AMjlp/8A16//
ABdeJfFb/katT/6+o/8A0nir22//AORy0/8A69f/AIuvEvit/wAjVqf/AF9R/wDpPFXTHr/hMf8A
M7L4Nf6vUf8Ar1tf/Qpq9N05v+JZaf8AXFP/AEEV5l8Gv9XqP/Xra/8AoU1el6f/AMgy1/64p/IV
Ff8AiMun8KLe6jdTaKxLHbqN1NooAiuLS3up7WaaPdJaSmaE7iNjlGQnjr8rsOfX1xU+6m0UAO3U
bqbRQA7dRuptFADt1G6m0UAO3UbqbRQBWkhkhdpbbBDfM8J6MfVT2P6H25NC30G4JITC5OAso25P
oCeD+BNWaRlV1KsAykYIIyCKAIEsbOJWWO1gRWIJCxgAkHIP4HkVYqt/Z9l/z52//fpf8KP7Psv+
fO3/AO/S/wCFAFmiq39n2X/Pnb/9+l/wo/s+y/587f8A79L/AIUAWaKxtUFtZ+UkNjamSTJBeIEA
DGeB16is3z5P+fTTf/AX/wCyoA6uiuU8+T/n003/AMBf/sqUXYi+eaxsGjXlglvtOO+Dk0AdVRVb
+z7L/nzt/wDv0v8AhR/Z9l/z52//AH6X/CgCzRVb+z7L/nzt/wDv0v8AhR/Z9l/z52//AH6X/CgC
zUCWVvHqE18seLmaJIZHyeUQuVGOnBkf8/YU3+z7L/nzt/8Av0v+FH9n2X/Pnb/9+l/woAs0VW/s
+y/587f/AL9L/hR/Z9l/z52//fpf8KAC2/4+Lz/rsP8A0WlWarf2fZf8+dv/AN+l/wAKP7Psv+fO
3/79L/hQBZoqt/Z9l/z52/8A36X/AAo/s+y/587f/v0v+FAFmq19/wAe6/8AXaL/ANGLR/Z9l/z5
2/8A36X/AAqC6s7WKNHjtoUcTRYZUAI+daAK1h/yOWof9ev/AMRWgP8AkYLH/rjN/wCyVn2H/I5a
h/16/wDxFaA/5GCx/wCuM3/slaVOnoRDqbVFFFZlhRWP4m8QReGtFk1CS3nuG3LFFFDE7l5GOFU7
FYqCeMkYyQOpAMfhzxNB4k+3tb213DHa3BhVri2li8wDgkb0XkMHUqMkbRnGcUAblFFFABRRRQAU
UUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRR
RQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFF
ABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAViXmnJfa3MWnmi8u2i/1e
3nLSdcg+lbdZ+4LrVyCDlreEDCk95Tz6dO9AGbJpiRdLu8P4x/8AxFQaMu2eZclsJ1PU/vp/StGe
QOAQknIUj9238XTt19u3es/SP+Pm4/3P/a89ADb/AP5HLT/+vX/4uvEvit/yNWp/9fUf/pPFXtt/
/wAjlp//AF6//F14l8Vv+Rq1P/r6j/8ASeKumPX/AAmP+Z2Xwa/1eo/9etr/AOhTV6Xp/wDyDLX/
AK4p/IV5p8Gv9XqP/Xra/wDoU1el6f8A8gy1/wCuKfyFRX/iMun8KLNFFFYlhRRRQAUUUUAFFFFA
BRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAGLrQzeWn/XOT+aVnTstvbyzOCVjQuQOuAM1q6qN1/aj/
AKZS/wA0qv5dAGTBfwT2yTqk2184xEX6Ej+HI7VPdpizn/65t/KsG6ka20a1V73UYGVVVl+z7Qp2
HgHCZx/vHp0NdNepiwuD/wBMm/ka0qQUdURGVzo3LiNjGqs+DtDHAJ9zg4/KufvL3xBFd3e2yjFs
li0gMLGQiUbtuzKgsxwPlxjoc84boHcRxs5DEKCTtUk/gBya5DV72xuNTuUEF006WTXKCS2UBtmc
qfNjJQcDkfLknufmyk5JXjG5aSb1djq4LqG5aRYnyY2KsCCOQSO/UZBGenB9KmrL07Tri3KC4kjK
W7SLAIlC5VmJy2ABnGPlAxkZ5ONupUUpTlG81ZlTST91mfe3V1DcFIVjKiMMdwBOcn1Yenoahe81
BImkKwEAE/w/0c1ZuUm+0SFIpGR4wvyEDnLf7Q9R2NVZXBISUypceW3mHORtOOvfb9PfPOa0JNem
TSpBBJNISEjUsxAJwAMngcmiJzJEjlShZQSp6j2qDUgp0u7DqGXyXyCMgjaaL2ApnxLpS2ct21xI
sEX33aCQY5wOq8nJAql4e8RXOsX93BNZtHHGzNHKqHaFyNqs2SN+GBIB9eMYJlm0rwxdWKQeZYRR
sQ0sUcqIJRj7rY5xnB4x0wcjINvRLawsrea20xUW0jlwgR945RSfmycnJOTnrmiqlzrkehhFVJNO
TNOsbxDZ6rcQwTaVqN3bNA5aaC2WDdcIRyqtKjBXHUZwDypIzvXZooNzmNFt9UuNUW9GuaxLpMaF
Vh1G1ghe5c/xbRCjxovPXBY84CgGTevv+Pdf+u0X/oxas1Wvv+Pdf+u0X/oxaAM+w/5HLUP+vX/4
itAf8jBY/wDXGb/2Ss+w/wCRy1D/AK9f/iK0B/yMFj/1xm/9krSp09CIdTaooorMs5/xP4bXxGdM
R5p44be6WWYRXk0G5B8wwI2AZt6xkE/d5IIPWTwloJ8OeH4bGSWSS4ZmmuGa4kmBlc7n2mQk4ySe
2TkkZJrcooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAK
KKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAoo
ooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiii
gArMcga7JkqMww4zIVz/AK7oP4vofr2rTrP2k61ckOy4t4SQMfNzLwf58elAFCR4yifPERth/wCX
lyME+vcH16t0qtpH/Hzcf7n/ALXnrRmVlxmeU42c5UE46np1P6dsVnaR/wAfNx/uf+156AG3/wDy
OWn/APXr/wDF14l8Vv8AkatT/wCvqP8A9J4q9tv/APkctP8A+vX/AOLrxL4rf8jVqf8A19R/+k8V
dMev+Ex/zOy+DX+r1H/r1tf/AEKavS9P/wCQZa/9cU/kK80+DX+r1H/r1tf/AEKavRrS1t59PtGm
gikYQIMugJxj3qK/8Rl0/hReoqt/Z9l/z52//fpf8KP7Psv+fO3/AO/S/wCFYllmiq39n2X/AD52
/wD36X/Cj+z7L/nzt/8Av0v+FAFmiq39n2X/AD52/wD36X/Cj+z7L/nzt/8Av0v+FAFmiq39n2X/
AD52/wD36X/Cj+z7L/nzt/8Av0v+FAFmiq39n2X/AD52/wD36X/Cj+z7L/nzt/8Av0v+FAFmiq39
n2X/AD52/wD36X/Cj+z7L/nzt/8Av0v+FAFmiq39n2X/AD52/wD36X/Cj+z7L/nzt/8Av0v+FAFm
iq39n2X/AD52/wD36X/Cj+z7L/nzt/8Av0v+FAFmiq39n2X/AD52/wD36X/Cj+z7L/nzt/8Av0v+
FAFmiq39n2X/AD52/wD36X/Co7i1sLa2lneygKxoXIES5wBmgCPUo38+CcRu6IrowRSxGdpBwOf4
f1qr5y/88br/AMBpP/ia0zptkrEGzt+Dj/VD/Ck/s+y/587f/v0v+FAGb5y/88br/wABpP8A4mo5
w11BJBFBcb5FKAtC6gZ4ySQBWt/Z9l/z52//AH6X/Cj+z7L/AJ87f/v0v+FAFmo2giffviRvMXY+
VB3LzwfUcnj3NRf2fZf8+dv/AN+l/wAKP7Psv+fO3/79L/hQBZoqt/Z9l/z52/8A36X/AAo/s+y/
587f/v0v+FAFmiq39n2X/Pnb/wDfpf8ACj+z7L/nzt/+/S/4UAWaKrf2fZf8+dv/AN+l/wAKP7Ps
v+fO3/79L/hQBZoqt/Z9l/z52/8A36X/AAo/s+y/587f/v0v+FAFmiq39n2X/Pnb/wDfpf8ACq11
ptpLLa24t4kWaXa7JGA2AjNgHt90UAaVVr7/AI91/wCu0X/oxayLuHwtaa3b6NI0C6lcRNNDbNcP
vdF6kDd9frtbGdpw+GGO1kuIIUCx+ZbuB1IzJjGTyR8vf1NAElh/yOWof9ev/wARWgP+Rgsf+uM3
/slZ9h/yOWof9ev/AMRWgP8AkYLH/rjN/wCyVpU6ehEOptUUUVmWYfiLxDD4el0d7u5tLazu7029
xPdOEWNfImkBDEgAlo0HPqR1Iqnp/jOzvRqk0M0N9bRaitjYmwYSm4Jt4pCAQdpILSZOQAF56E1s
ajpn2++0m587y/7Pu2udu3PmZhli25zx/rc55+7jvkYureCLbV01D7RJBK1zqKajCtxarNHG626Q
bXRjhwQjHt97jBANADte8Q3ieD9V1fR2ht7vS45ZLi3v7ZpCDHGXMZCyLgn5SGBYYOQDkGrni+/1
LSfCuo6ppctok9jbyXTLdQNKsiojNsG10KkkD5snHPBqpD4RCeDdW8P/APEqtP7Qhmi36Zpv2aNP
Mj2bjHvbcw9dwyABxir+oaTeav4Sv9Hv72A3V7aTWz3MFsURd6soYRl2PAI43c47Z4ALmo6jHp0U
TGGWeWaQRQwQgb5HwTgZIA4VjkkDANGnajHqUUrLDLBLDIYpoJgA8b4BwcEg8MpyCRgiqk+mahd2
FkZ7+2/tO0mM6XEVqyxFsMmDEZCcbHI+/wBecjpVjStOksEuXuLgXF1dTefNIsexS21UAVcnACoo
6npnPNAFPV9eTRtVtlvJIYdOazubieZwcoYzGRj22s+Rgk4GPeKHxIfN1HfCZxHqC2dlHbAF58wR
yHlmC55kOcgbV/OTX/DUPiC80qW4mKw2U5lkh2ZE64yEPoNwRj1ztx3qjpng06PpSWtnqJ863vmu
7WWWLeIwUMaxsu4FgIztzkHoaAL1z4qsrPR5tRure7iFvcxWs8BQNLFJI6IuQpIP+sRvlJ4PGTxV
TXtb1i38GajrVjaDTrmxhluDBqcKy+aiRlsARTfLkgckkjBytWJPDclxp0sNxfBrqfUbe/mmWHap
aGSJgqpuO0FYVXqfXnpV/XdM/tvw9qek+d5P260ltvN27tm9Cu7GRnGc4yKAJNR1GLTbdJJElleR
xFFDEuXkc9FAOB2JySAACSQBVHw/rU+sXGsrNbNbCyvhbRxyLtcDyIZDu5IJ3SNgjgjHXqZJtMvr
zTrUXV9B/adtL50dzBbFI93zD/Vs7HBRipG7uSCOMJoekXGlyapNdXwu5tQuxdMyw+WExFHHtAye
P3efx5zjJANeiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKAC
iiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKK
KKACiiigAooooAKKKKACiiigAooooAKKKKACiiigAooooAKKKKACse51C3stanE5cb7aLbtjZ+jS
egOOtbFYN/p8t7rcpjnSLZbRZ3Rl85aT/aGOlAEc2q2sn3fPP/bvJ/8AE1BorB5pmGcFMjIwf9dP
2qRtOni63sZ/7dT/APHKj0UETzBiCQnJAxn99P2oAS//AORy0/8A69f/AIuvEvit/wAjVqf/AF9R
/wDpPFXtt/8A8jlp/wD16/8AxdeJfFb/AJGrU/8Ar6j/APSeKumPX/CY/wCZ2Xwa/wBXqP8A162v
/oU1el6f/wAgy1/64p/IV5p8Gv8AV6j/ANetr/6FNXo1nMsenWgP/PBD+lRX/iMun8KPPbPRo9Qs
NVWz8JgapLqOoLDrhS2Xy3+1ShZN+/zfk4/h/hx0rpbrxBqkNzrhRbPyLO+t9PtlKNuMky2+Hc7s
bVM5yABkY5GOdyzW0sIWhto/LjaWSYjcT88js7nn1ZmP48VBJY6bNFfxyW4ZL+QS3A3t87hFQMOf
lIWNMYxgjPXmsSzFm8Qa0slvpsR086h/ax06adoXERX7K1wHVN+QQNo2ljnBGRnIhuvGF6lnYRRx
ql7MbtZHjsJ7tCbeURMAkXzKGJyGJIA65JFWtQ8N2NzHpNtCrLa2t813OXuZfNfMEqBhJneXDOhy
WyAvXgCtCfRtIuLCCyaCRIYAVj8m4kiYA/eBdWDEHuCee+aAOb8R6/rt3oWtfYvK0xYPDseouJoX
NxG8iz5QEMu1h5QwSODng9Br614g1DRbmCxcWstzdWqC1cRsqvc+akbZXcTt/eowXOQA3J6jQbS9
JeK5iNmnl3NoljKgJCtAu/amAcADzH6c8+wqndaYt1rGiu0cRsdKzLFJJM8kzSbGjAO4dADu3FiS
QOOMkA6WioPtSUfakoAnoqD7UlH2pKAJ6Kg+1JR9qSgCeioPtSUfakoAnoqD7UlH2pKAJ6Kg+1JR
9qSgCeqmq/8AIHvf+veT/wBBNSfakqtfy+fp11DGMvJE6qM9SQQKAKXilGsri01+MnOnSOLgD+K2
fAl/752q/wD2zx3rLnunnvdT8SLNaxxWK/YLCS6J8oHeBNJ8vJJYBAByTHjI3ZrqprmGQyKQHRsg
gjgis9tO0ptFTR/sqrYRqiJErFdoUgqQQcgggEHOcjOc0AcxZa5ca3qOjfajE8lnr8lv5sVvJAsg
/s+WQN5chLL/AKzHJOcZHBq5H4yuY9F0rUriCFhceHZ9XuEjBB3xrA21ck4U+a/XJ4HPXOpZaHo2
nsjW9swdLo3gZ53djMYjCXJZiSShI5+vXmo7Hw3oGnTGW2ssN5D2wV5pJFWJypaNVZiFTKjCgYHO
MZNADvDWs3uqS3kN5DJiEI0dwdOns1fduyoSbkldvJBx8w6V0FZGm2GnaSZmtI5N8xBkkmneZ2x0
G5yTgZOBnAycVofakoAnoqD7UlH2pKAJ6Kg+1JR9qSgCeioPtSUfakoAnoqD7UlH2pKAJ6q3c8Vv
dWEs0iRxic5dzgDMbjrT/tSVF5yyajp4H/Pdj/5CegDldU8EeA9Q1uTWrhUk1J5RMbkapMHDjoVI
k+XGBgDGMADGK2UminurhoZUkUG1GUYEZ81vSuguJHXOHYfQ1iSMz3twWYk/6LyT/wBNWoASw/5H
LUP+vX/4itAf8jBY/wDXGb/2Ss+w/wCRy1D/AK9f/iKl1CaWDVLJoSFlZHjViMgFnjXOPbNaVOno
RDqdLRWHf3cGlR273+vXEP2ieO2i3LFmSVztVVGzJJP5AEngE1IyXQ1GKAapdeW8LuTsizlSgH8H
+0azLNiis/7NN/0Fbz/vmL/4ij7NN/0Fbz/vmL/4igDQorP+zTf9BW8/75i/+Io+zTf9BW8/75i/
+IoA0KKz/s03/QVvP++Yv/iKPs03/QVvP++Yv/iKANCis/7NN/0Fbz/vmL/4ij7NN/0Fbz/vmL/4
igDQorP+zTf9BW8/75i/+Io+zTf9BW8/75i/+IoA0KKz/s03/QVvP++Yv/iKPs03/QVvP++Yv/iK
ANCis/7NN/0Fbz/vmL/4ij7NN/0Fbz/vmL/4igDQorP+zTf9BW8/75i/+Io+zTf9BW8/75i/+IoA
0KKz/s03/QVvP++Yv/iKPs03/QVvP++Yv/iKANCis/7NN/0Fbz/vmL/4ij7NN/0Fbz/vmL/4igDQ
orP+zTf9BW8/75i/+Io+zTf9BW8/75i/+IoA0KKz/s03/QVvP++Yv/iKPs03/QVvP++Yv/iKANCi
s/7NN/0Fbz/vmL/4ij7NN/0Fbz/vmL/4igDQorP+zTf9BW8/75i/+Io+zTf9BW8/75i/+IoA0KKy
ds3m7P7Wm/1mz70Wfu7unl9fb05z2pimdkU/2u/KxniSIj5jjj91yPQ/xHjigDZorP8As03/AEFb
z/vmL/4ij7NN/wBBW8/75i/+IoA0KKz/ALNN/wBBW8/75i/+Io+zTf8AQVvP++Yv/iKANCis/wCz
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
n6OARzt/9FNVyq8dhZwyCSK0gjcdGWMAj8awauWOhtYLeSWSKJUeU7nI7n/9ZJ+pJ6k1NRRQklog
vcKKKKYBRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
RRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFF
FFABRRRQAUUUUAFQXX37H/ru3/otqnqvPve4tVWJischdnyMDKMMdc5yR2oAsUUUUAFFFFABRRRQ
AUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFABRRRQAUUUUAFFFFAB
Xzz8Vv8AkatT/wCvqP8A9J4q+hq+efit/wAjVqf/AF9R/wDpPFW1H7XoyJ9PUqW3iW/8F393ptrd
zwXEB+y3DQLG6SGNmAI3oTjLN6Vb/wCFra9/0Fr3/vxbf/G6KK73CL1aOe7WzD/ha2vf9Ba9/wC/
Ft/8bo/4Wtr3/QWvf+/Ft/8AG6KKXs4dg5pdw/4Wtr3/AEFr3/vxbf8Axuj/AIWtr3/QWvf+/Ft/
8booo9nDsHNLuH/C1te/6C17/wB+Lb/43R/wtbXv+gte/wDfi2/+N0UUezh2Dml3D/ha2vf9Ba9/
78W3/wAbo/4Wtr3/AEFr3/vxbf8Axuiij2cOwc0u4f8AC1te/wCgte/9+Lb/AON0f8LW17/oLXv/
AH4tv/jdFFHs4dg5pdw/4Wtr3/QWvf8Avxbf/G6P+Fra9/0Fr3/vxbf/ABuiij2cOwc0u4f8LW17
/oLXv/fi2/8AjdH/AAtbXv8AoLXv/fi2/wDjdFFHs4dg5pdw/wCFra9/0Fr3/vxbf/G6P+Fra9/0
Fr3/AL8W3/xuiij2cOwc0u4f8LW17/oLXv8A34tv/jdH/C1te/6C17/34tv/AI3RRR7OHYOaXcP+
Fra9/wBBa9/78W3/AMbo/wCFra9/0Fr3/vxbf/G6KKPZw7BzS7h/wtbXv+gte/8Afi2/+N0f8LW1
7/oLXv8A34tv/jdFFHs4dg5pdw/4Wtr3/QWvf+/Ft/8AG6P+Fra9/wBBa9/78W3/AMbooo9nDsHN
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
mFDABIwAI1x029vWiihwiouyGm20f//Z
      </contents>
    </upload>
  </page>
  <page>
    <title>Eclipse Tutorial</title>
    <ns>0</ns>
    <id>65</id>
    <revision>
      <id>81</id>
      <timestamp>2021-08-27T13:58:17Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import eclipsetutorial</comment>
      <origin>81</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4493" sha1="3ldtw0brjpjf9eoea1vzstxakwojtpj" xml:space="preserve">= Using Eclipse in MINIX3 with Remote Explorer =
The current support of MINIX3 toward other GNU software is still in progress, therefore coding with an IDE on the MINIX3 system is not yet possible. However, most of the programmers would prefer having their favorite IDE as a working and programming environment. One solution to that problem is the Remote System Explorer available for Eclipse. The plug-in has a lot of options targeted on Linux, Windows, and Unix boxes, including process control and remote debugging; but, those features are not yet available with MINIX3. But, it has a really neat feature to connect remotely via SSH to the MINIX3 box, edit the contents of the files, compile them, and navigate through the errors (if any). That makes the life of the MINIX3 programmer quite easier, especially for the GUI-fans.

== Prerequisites ==
* [[Installing Minix 3|MINIX3 installation]]
* [[Setting Up SSH|Installation and setting]] OpenSSH by [[Installing Binary Packages|using pkgin]]
* Setting [[Setting Root Password|root password]] on the MINIX3 OS

== Installation ==
=== Eclipse installation ===
In order to use Eclipse, a clean installation of Eclipse is required. Eclipse is available at https://www.eclipse.org/downloads/. Choose Eclipse Classic, as shown on the picture below:

[[File:Eclipsetutorial1.jpg]]

Unzip the downloaded archive, and run the Eclipse executable. The system is ready for further use.

=== Install C/C++ support ===
The Eclipse IDE comes with an Update Manager, simplifying the installation and update of all of the Eclipse modules. In order to use the IDE for C development, the support for C/C++ development is required. It can be installed by running ''Help -&gt; Install New Software''. Then, in the drop-down menu ''Work with'', choose “''--All Available Sites--''”; and in “''Programming Languages''”, choose check “''C and C++ Development''”, and click ''Next''. After accepting the license agreement, Eclipse is ready for editing C and C++ files.

[[File:Eclipsetutorial2.jpg]]

=== Remote System Explorer installation ===
To install the Remote System Explorer, run ''Help -&gt; Install New Software''. Click on “''Add''”. Define a new remote update site named "''Target Management Updates''", and specify https://download.eclipse.org/tm/downloads/drops/R-3.4.1-201209191030/.

In the menu, click on ''Target Management Updates'', and select “''RSE Runtime''” and “''RSE_SDK''”, and click “''Next''”. After the installation is done, and Eclipse is restarted, the RSE is ready to connect to your MINIX3 OS.

[[File:Eclipsetutorial3.jpg]]
== Usage ==
Choose ''Window -&gt; Open Perspective'', and choose ''Remote System Explorer''.

[[File:Eclipsetutorial4.jpg]]

Right-click on the left side in the ''Remote Systems'' tab, and choose ''New Connection'', select ''SSH Only'', and proceed to the next step.

[[File:Eclipsetutorial5.jpg]]

Specify the connection name, the host, and the description; then, click ''Next''.

[[File:Eclipsetutorial6.jpg]]

On the next window, click ''Finish''.

[[File:Eclipsetutorial7.jpg]]

Now, the connection has been created. And, on the left in the ''Remote Systems'' tab, the MINIX3 connection is present. When opening the file system, a username and password will be requested by the RSE:

[[File:Eclipsetutorial8.jpg]]

Enter the username and password; and by now, the full file system should be shown in the ''Remote Systems'' tab.

[[File:Eclipsetutorial9.jpg]]

== Hello World ==
Connect to your MINIX3 installation. Create a new folder, let's say, "/home/helloworld", using the ''Remote System'' tab. Create a new file in that directory, '''main.c''', and write the simple ''Hello World'' program.

[[File:Eclipsetutorial10.jpg]]

Show the Remote Shell in the current perspective by running: ''Window -&gt; Show View -&gt; Other''; and, Select ''Remote Shell''. Connect to the MINIX3 system, by clicking on the drop-down menu of the ''Remote Shell''. Run the following:

&lt;pre&gt;
cd /home/helloworld
cc -o helloworld main.c
&lt;/pre&gt;
In order to run the program, run '''./helloworld''' on the ''Remote Shell''. You can see the output stream directly in the ''Remote Shell'' window in your Eclipse IDE.

NOTE: If you, by any chance, are running Eclipse from a Windows system, you will have to set up Eclipse new line character to be recognized by Unix systems else the compiler will give problems. To do so, you can follow these instructions http:''cs.calvin.edu/curriculum/cs/112/resources/eol/</text>
      <sha1>3ldtw0brjpjf9eoea1vzstxakwojtpj</sha1>
    </revision>
  </page>
  <page>
    <title>GCOV</title>
    <ns>0</ns>
    <id>66</id>
    <revision>
      <id>82</id>
      <timestamp>2021-08-27T14:00:17Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Created page with "=== Introduction ===  Code coverage testing is a powerful development aid, predominantly to verify the completeness of test sets. A program that has been compiled with code co..."</comment>
      <origin>82</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5516" sha1="lb0abeb8em4m0bfah3jh4g4i6u3cqmg" xml:space="preserve">=== Introduction ===

Code coverage testing is a powerful development aid, predominantly to verify the completeness of test sets. A program that has been compiled with code coverage support will keep track of how many times each of its basic blocks is invoked. This information can be extracted at run time, and mapped back to the program's source code in order to the programmer an idea how many times each line of source code has been triggered at run time.

MINIX3 offers support for code coverage testing of its system services. The original code coverage infrastructure aimed at supporting GCOV for GCC, but MINIX3 has since largely moved to using LLVM, and the GCC GCOV facilities likely no longer work. However, as of MINIX 3.4.0 (git commit 3ac5849), it is possible to obtaining coverage data for MINIX3 system services compiled with LLVM. This new facility extends the previous GCOV infrastructure.

The code coverage infrastructure currently supports obtaining coverage data for the source code modules of MINIX3 system services, including all servers and drivers. System service libraries are not yet included for practical reasons. Code coverage is not yet supported for the kernel either. Userland programs are not supported by this infrastructure at all.

=== How to use ===

Coverage support has to be compiled in. This can be done by setting the MKCOVERAGE build variable. MKCOVERAGE is supported for native compilation of MINIX3 on MINIX3:

 &gt; MKCOVERAGE=yes make build

It is also supported for crosscompilation:

 &gt; BUILDVARS="-V MKCOVERAGE=yes" ./releasetools/x86_hdboot.sh

The compilation process will generate .gcno files that contain static information on how to map back coverage data to the original source code.

After booting a system built with MKCOVERAGE=yes, one can then obtain the dynamic coverage information using the gcov-pull(8) command:

 &gt; gcov-pull &lt;label&gt;

The &lt;label&gt; parameter is the label of a running system service. For example:

 &gt; gcov-pull vfs

This will generate a set of .gcda files in the current directory, one for each source code module. For native systems, it is typically most convenient to invoke gcov-pull(8) from the corresponding system service's source code directory (e.g., in /usr/src/minix/servers/vfs), so that the source, .gcno, and .gcda files for each module are in one place.

With crosscompilation, one will typically want to copy the .gcda files back to the crosscompilation environment, and analyze the results from there. Note that in this case, the .gcno files will also not be located in the same directory as the source code, but rather in its object directory.

The LLVM llvm-cov(1) utility can be used to produce meaningful output from the combination of the source, .gcno, and .gcda files. The llvm-cov(1) utility itself has been modified heavily in recent times, which means that different syntax is needed for different LLVM versions.

On systems with LLVM 3.4 (as of writing, the LLVM version on native MINIX3), one can get a view of the source code of, say, module "foo.c" with per-line coverage information using the following command, dumped to stdout:

 &gt; llvm-cov -gcno=foo.gcno -gcda=foo.gcda

With later LLVM versions, the following syntax can be used instead:

 &gt; llvm-cov gcov [-o path/to/gcno/files] foo.c

This will generate a file "foo.c.gcov" with the same per-line coverage output.

The output prefixes each source code line with a counter that shows the number of times the corresponding basic block has been invoked, or "#####" if the basic block has not been invoked yet. The newer llvm-cov has other features that may be interesting as well. For even fancier things such as generating webpages from the results, see various webpages on how to use LLVM GCOV.

=== Implementation ===

The system service part of the GCOV implementation is in libsys and hooked into the System Event Framework, which practically means that system services need not support code coverage support explicitly.

VFS is used as gateway to obtain the coverage information: gcov-pull(8) calls into VFS requesting that coverage data is to be obtained from a particular system service, into a buffer provided by gcov-pull. Unless VFS itself is the target, VFS relays the request to the system service identified by the label given to gcov-pull. The system service's SEF routines intercept the request and force the compiler-provided GCOV support routines to flush the coverage data. These compiler-provided GCOV support routines call particular hook functions that would typically write the resulting coverage data to files directly. These hook functions are implemented in libsys as well, and instead copy back the data to the buffer provided by gcov-pull. Once done, gcov-pull then produces the actual coverage data files.

The hook functions differ between GCC and LLVM. In our current implementation, libsys/llvm_gcov.c implements the LLVM hook functions by performing a translation to the GCC hook functions in libsys/gcov.c.

There are inherent dangers associated with VFS's relay function in this story: VFS's relay calls are blocking (ipc_sendrec) calls, which means that if the target system service does not respond to the request, VFS and with that the entire system may deadlock. This should be improved in the future, but for now the GCOV infrastructure should be considered as a somewhat dangerous, debugging-only facility. The corresponding system call is not part of the MINIX3 ABI and should never be used outside gcov-pull(8).</text>
      <sha1>lb0abeb8em4m0bfah3jh4g4i6u3cqmg</sha1>
    </revision>
  </page>
  <page>
    <title>Courses</title>
    <ns>0</ns>
    <id>67</id>
    <redirect title="Univesity Courses Using Minix 3" />
    <revision>
      <id>84</id>
      <timestamp>2021-08-27T14:37:32Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Redirected page to [[Univesity Courses Using Minix 3]]</comment>
      <origin>84</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="45" sha1="k0lbdyqtpdnmd6xgh5w19e3y9la0ch8" xml:space="preserve">#REDIRECT [[Univesity Courses Using Minix 3]]</text>
      <sha1>k0lbdyqtpdnmd6xgh5w19e3y9la0ch8</sha1>
    </revision>
  </page>
  <page>
    <title>Kernel API</title>
    <ns>0</ns>
    <id>68</id>
    <revision>
      <id>240</id>
      <parentid>178</parentid>
      <timestamp>2021-09-10T16:59:48Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>fix link</comment>
      <origin>240</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="46923" sha1="m41e5u9z4tloxqhvd12bvxl973zhj8h" xml:space="preserve">&lt;div round info&gt;
'''Stale page'''

The contents of this page must be revised to reflect the current state of MINIX3.
2012-03-31 note: with sys_vumap, the first step has been made to start documenting API calls rather than the protocol.
&lt;/div&gt;
In general, kernel calls allows system processes to request kernel services, for example to perform privileged operations. This document briefly discusses the organization of kernel calls in MINIX 3 and provides an overview of all kernel calls.

This document aims to describe the Kernel API of '''MINIX 3 git-trunk'''. While it is a constant work in progress, any mismatches between this document and SVN-current are unintentional.

== Organization of Kernel Calls ==
A kernel call means that a request is sent to a kernel where it is handled by one of the kernel tasks. The details of assembling a request message, sending it to the kernel and awaiting the response are conveniently hidden in a system library. The header file of this library is '''src/include/minix/syslib.h''' and its implementation is found in '''src/lib/syslib'''.

The actual implementation of the kernel calls is defined in the '''SYSTEM''' kernel task. Suppose that a program makes a '''sys_call()''' system call. By convention, this call is transformed into a request message with type '''SYS_CALL''' that is sent to the kernel task SYSTEM. The SYSTEM task handles the request in a function named '''do_call()''' and returns the result.

The mapping of kernel call numbers and handler functions is done during the SYSTEM task's initialization response. '''src/kernel/system.c'''. The prototypes of the handler functions are declared in '''src/kernel/system.h'''. Their implementation is contained in separate files in the directory '''src/kernel/system/'''. These files are compiled into the library '''/src/kernel/system/system.a''' that is linked to the kernel.

The kernel call numbers and their request and response parameters are defined in '''src/include/minix/com.h'''. Kernel calls all start with '''SYS_''' and all parameters that belong to the same kernel call share a common prefix.

== Overview of kernel calls in MINIX 3 ==
A concise overview of the kernel calls in MINIX 3 is given in Table 1.

{| class="wikitable" border="1"
! Kernel Call  !! Purpose
|-
| ''PROCESS MANAGEMENT'' ||
|-
| [[#SYS_FORK|SYS_FORK]]  || Fork a process; copy parent process
|-
| [[#SYS_EXEC|SYS_EXEC]]  || Execute a process; initialize registers
|-
| [[#SYS_CLEAR|SYS_CLEAR]]  || Exit a user process; clear process slot
|-
| [[#SYS_EXIT|SYS_EXIT]]  || Exit a system process
|-
| [[#SYS_UPDATE|SYS_UPDATE]]  || Update state of a system process
|-
| [[#SYS_SCHEDULE|SYS_SCHEDULE]]  || Scheduler
|-
| [[#SYS_SCHEDCTL|SYS_SCHEDCTL]]  || Change scheduler control
|-
| [[#SYS_PRIVCTL|SYS_PRIVCTL]]  || Change system process privileges
|-
| [[#SYS_TRACE|SYS_TRACE]]  || Trace or control  process execution
|-
| [[#SYS_SETGRANT|SYS_SETGRANT]]  || Tell kernel about grant table
|-
| [[#SYS_RUNCTL|SYS_RUNCTL]]  || Set/clear stop flag of a process
|-
| [[#SYS_GETMCONTEXT|SYS_GETMCONTEXT]]  || Get context of a process
|-
| [[#SYS_SETMCONTEXT|SYS_SETMCONTEXT]]  || Get context of a process
|-
| ''SIGNAL HANDLING'' ||
|-
| [[#SYS_KILL|SYS_KILL]]  || Send a signal to a process
|-
| [[#SYS_GETKSIG|SYS_GETKSIG]]  || Check for pending kernel signals
|-
| [[#SYS_ENDKSIG|SYS_ENDKSIG]]  || Tell kernel signal has been processed
|-
| [[#SYS_SIGSEND|SYS_SIGSEND]]  || Start POSIX-style signal handler
|-
| [[#SYS_SIGRETURN|SYS_SIGRETURN]]  || Return POSIX-style signal
|-
| ''MEMORY MANAGEMENT'' ||
|-
| [[#SYS_NEWMAP|SYS_NEWMAP]]  || Install new or updated memory map
|-
| [[#SYS_MEMSET|SYS_MEMSET]]  || Fill a physical memory area with a constant pattern byte
|-
| [[#SYS_VMCTL|SYS_VMCTL]]  || ''(to be documented)''
|-
| [[#SYS_PADCONF|SYS_PADCONF]]  || ''(to be documented)''
|-
| ''COPYING DATA'' ||
|-
| [[#SYS_UMAP|SYS_UMAP]]  || Map virtual to physical address
|-
| [[#SYS_UMAP_REMOTE|SYS_UMAP_REMOTE]]  || Map virtual to physical address
|-
| [[#SYS_VUMAP|SYS_VUMAP]]  || Batch map virtual to physical addresses
|-
| [[#SYS_VIRCOPY|SYS_VIRCOPY]]  || Copy data using virtual addressing
|-
| [[#SYS_PHYSCOPY|SYS_PHYSCOPY]]  || Copy data using physical addressing
|-
| [[#SYS_SAFECOPYFROM|SYS_SAFECOPYFROM]]  || Copy from a grant into own address space
|-
| [[#SYS_SAFECOPYTO|SYS_SAFECOPYTO]]  || Copy from own address space into a grant
|-
| [[#SYS_VSAFECOPY|SYS_VSAFECOPY]]  || Handle vector with safe copy requests
|-
| [[#SYS_SAFEMEMSET|SYS_SAFEMEMSET]]  || Fill a grant with a constant pattern byte
|-
| ''DEVICE I/O'' ||
|-
| [[#SYS_DEVIO|SYS_DEVIO]]  || Read or write a single device register
|-
| [[#SYS_SDEVIO|SYS_SDEVIO]]  || Input or output an entire data buffer
|-
| [[#SYS_VDEVIO|SYS_VDEVIO]]  || Process vector with multiple requests
|-
| [[#SYS_IRQCTL|SYS_IRQCTL]]  || Set or reset an interrupt policy
|-
| [[#SYS_IOPENABLE|SYS_IOPENABLE]]  || Give process I/O privilege
|-
| [[#SYS_READBIOS|SYS_READBIOS]]  || Copy from the BIOS area
|-
| ''SYSTEM CONTROL'' ||
|-
| [[#SYS_ABORT|SYS_ABORT]]  || Abort MINIX: shutdown the system
|-
| [[#SYS_GETINFO|SYS_GETINFO]]  || Get a copy system info or kernel data
|-
| [[#SYS_DIAGCTL|SYS_DIAGCTL]]  || ''(to be documented)''
|-
| ''CLOCK FUNCTIONALITY'' ||
|-
| [[#SYS_SETALARM|SYS_SETALARM]]  || Set or reset a synchronous alarm timer
|-
| [[#SYS_TIMES|SYS_TIMES]]  || Get process times, boot time and uptime
|-
| [[#SYS_STIME|SYS_STIME]]  || Set boot time
|-
| [[#SYS_SETTIME|SYS_SETTIME]]  || Update time
|-
| [[#SYS_VTIMER|SYS_VTIMER]]  || Set or retrieve a process virtual timer
|-
| ''PROFILING'' ||
|-
| [[#SYS_SPROF|SYS_SPROF]]  || ''(to be documented)''
|-
| [[#SYS_CPROF|SYS_CPROF]]  || ''(to be documented)''
|-
| [[#SYS_PROFBUF|SYS_PROFBUF]]  || ''(to be documented)''
|-
|}

'''Table 1''': This table provides an overview of the kernel calls in MINIX 3.

== MINIX 3 kernel call interface ==
The kernel call interface is detailed below. For each kernel the message type, the purpose, message type, request and/or response parameters and return value are specified. The shorthand additional remarks about the future status of the call may also be provided.

'''Legends'''

''CONSTANT:'' defined constant; a number indicating the request type or status.

''PARAMETER:'' message parameter; a field in the request or response message.

''void sys_call(arguments):'' system library function; shorthand to make a kernel call.

== Alphabetical Overview ==

=== SYS_ABORT ===
Shutdown MINIX and return to the boot monitor, if possible. This is used by PM, FS and TTY. Normal aborts usually are initiated by the user, for example by means of the ''shutdown'' command or typing ''Ctrl-Alt-Del''. MINIX will also be taken down if a fatal error occurs in the PM or FS.

''' request parameters '''

* ABRT_HOW: How to abort. One of the values defined in src/include/unistd.h
** RBT_HALT: Halt MINIX and return to the boot monitor.
** RBT_REBOOT: Reboot MINIX.
** RBT_PANIC: A kernel panic occurred.
** RBT_MONITOR: Run the specified code at the boot monitor.
** RBT_RESET: Hard reset the system.
* ABRT_MON_ENDPT: Process to get the boot monitor parameters from.
* ABRT_MON_LEN: Length of the boot monitor parameters.
* ABRT_MON_ADDR: Virtual address of the parameters.

'''return value'''

* OK: The shutdown sequence was started.
* ENIVAL: Invalid process number.
* EFAULT: Illegal monitor parameters address.
* E2BIG: Monitor parameters exceed maximum length.

'''library functions'''

* &lt;code&gt;int sys_abort(int shutdown_status, ...);&lt;/code&gt;

=== SYS_CLEAR ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== .SYS_CPROF ===
Obsolete call

'''library functions'''

* int sys_cprof(int action, int size, int endpt, void *ctl_ptr, void *mem_ptr);

=== SYS_DEVIO ===
Perform device I/O on behalf of a user-space device driver. The driver can request a single port to be read or written with this call. Also see the [[#SYS_SDEVIO|SYS_SDEVIO]] and [[#SYS_VDEVIO|SYS_VDEVIO]] kernel calls.

'''request parameters'''

* DIO_REQUEST: Flags indicating what to do.
** _DIO_INPUT: Read a value from the given port.
** _DIO_OUTPUT: Write the given value to the given port.
** _DIO_BYTE: Read/write a byte value.
** _DIO_WORD: Read/write a word value.
** _DIO_LONG: Read/write a long value.
* DIO_PORT: The port to be read or written.
* DIO_VALUE: Value to write to the given port. For DIO_OUTPUT only.

'''response parameters'''

* DIO_VALUE: Value that was read from the given port. For DIO_INPUT only.

'''return value'''

* OK: The port I/O was successfully done.
** EINVAL: An invalid DIO_REQUEST or DIO_TYPE was provided.

'''library functions'''

* &lt;code&gt;int sys_in(port_t port, unsigned long value, int io_type);&lt;/code&gt;
* &lt;code&gt;int sys_inb(port_t port, u8_t *byte);&lt;/code&gt;
* &lt;code&gt;int sys_inw(port_t port, u16_t *word);&lt;/code&gt;
* &lt;code&gt;int sys_inl(port_t port, u32_t *long);&lt;/code&gt;
* &lt;code&gt;int sys_out(port_t port, unsigned long value, int io_type);&lt;/code&gt;
* &lt;code&gt;int sys_outb(port_t port, u8_t byte);&lt;/code&gt;
* &lt;code&gt;int sys_outw(port_t port, u16_t word);&lt;/code&gt;
* &lt;code&gt;int sys_outl(port_t port, u32t long);&lt;/code&gt;

=== SYS_DIAGCTL ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_ENDKSIG ===
Finish a kernel signal. The PM uses this call to indicate if it has processed the kernel signals in the map obtained through a [[#SYS_GETKSIG|SYS_GETKSIG]] kernel call.

'''request parameters'''

* SIG_ENDPT: The process that it concerns.

'''return value'''

* EINVAL: The process had no pending signals or already exited.
* OK: The kernel cleared all pending signals.

'''library functions'''

* &lt;code&gt;int sys_endksig(endpoint_t proc_nr);&lt;/code&gt;

=== SYS_EXEC ===
Update a process' registers after a successful exec() POSIX-call. After the FS has copied the binary image into memory, the PM informs the kernel about the new register details.

'''request parameters'''

* PR_ENDPT: Process that executed a program.
* PR_STACK_PTR: New stack pointer.
* PR_IP_PTR: New program counter.
* PR_NAME_PTR: Pointer to a name of program.

'''return value'''

* OK: This call always succeeds.

'''library functions'''

* &lt;code&gt;int sys_exec(endpoint_t proc, char *stack_ptr, char *prog_name, vir_bytes pc);&lt;/code&gt;

=== SYS_EXIT ===
'''NOTE''': obsolete description, has changed in relation with SYS_CLEAR and SYS_UPDATE.

Clear a process slot. This call is to be used by PM only.

'''request parameters'''

* PR_ENDPT: Slot number of exiting process if caller is PM. Use SELF to exit the PM.

'''return value'''

* OK: The cleanup succeeded.
* EINVAL: Incorrect process number.
* EDONTREPLY: This call does not return if a system process exited.

'''library functions'''

* &lt;code&gt;int sys_exit(endpoint_t proc_nr);&lt;/code&gt;

=== SYS_FORK ===
Allocate a new (child) process in the kernel process table and initialize it based on the prototype (parent) process. The PM has found a free process slot for the child process in its own process table and now requests the kernel to update the kernel's process table.

'''request parameters'''

* PR_ENDPT: Parent, the process that forked.
* PR_SLOT: Child's process table slot.
* PR_MEM_PTR: New memory map for the child.
* PR_FORK_FLAGS: Fork flags.
* PFF_VMINHIBIT: Don't schedule process in VM mode until it has a new pagetable.

'''response parameters'''

* PR_ENDPT: Process endpoint of the child.

'''return value''':

* OK: A new process slot was successfully assigned.
* EINVAL: Invalid parent process number or child slot to use.

'''library functions''':

* &lt;code&gt;int sys_fork(endpoint_t parent, int child, endpoint_t *child_endpoint, struct mem_map *ptr, u32_t flags);&lt;/code&gt;

=== SYS_GETINFO ===
Obtain a copy of a kernel data structure. This call supports user-space device drivers and servers that need certain system information.

'''request parameters'''

* I_REQUEST: The type of system information that is requested.
** GET_AOUTHEADER: Copy boot image a.out headers.
** GET_HZ: Copy system clock frequency in ticks per second.
** GET_IDLETSC: Copy accumulated idle timestamp counter, if CONFIG_IDLE_TSC is defined.
** GET_IMAGE: Copy boot image table.
** GET_IRQACTIDS: Copy IRQ is-hook-active bits.
** GET_IRQHOOKS: Copy table with interrupt hooks.
** GET_KINFO: Copy kernel information structure.
** GET_KMESSAGES: Copy buffer with diagnostic kernel messages.
** GET_LOADINFO: Copy system load information.
** GET_LOCKTIMING: Copy lock times, if DEBUG_TIME_LOCKS is set.
** GET_MACHINE: Copy system information.
** GET_MONPARAMS: Copy parameters set by the boot monitor.
** GET_PRIV: Copy system privileges table slot.
** GET_PRIVTAB: Copy system privileges table.
** GET_PROC: Copy single process table slot.
** GET PROCTAB: Copy entire kernel process table.
** GET_RANDOMNESS: Copy randomness gathered by kernel events.
** GET_RANDOMNESS_BIN: Copy and wipe randomness bin.
** GET_WHOAMI: Copy process name and endpoint.
* I_VAL_PTR: Virtual address where the information should be copied to.
* I_VAL_LEN: Maximum length that the caller can handle.
* I_VAL_PTR2: Optional, second address. Used when copying scheduling data.
* I_VAL_LEN2: Optional, second length. Overloaded for process number.

'''return number'''

* OK: The information request succeeded.
* EFAULT: An illegal memory address was detected.
* E2BIG: Requested data exceeds the maximum provided by the caller.

'''library functions'''

* &lt;code&gt;int sys_getaoutheader(struct exec *e_hdr, int index);&lt;/code&gt;
* &lt;code&gt;int sys_getidletsc(u64_t *idle_tsc);&lt;/code&gt;
* &lt;code&gt;int sys_getinfo(int request,void *ptr,int len,void *ptr2,int len2);&lt;/code&gt;
* &lt;code&gt;int sys_getirqactids(int *irq_actids);&lt;/code&gt;
* &lt;code&gt;int sys_getirqhooks(struct irq_hook *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getimage(struct boot_image *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getkinfo(struct kinfo *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getkmessages(struct kmessages *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getloadinfo(struct loadinfo *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getlocktimings(struct lock_timingdata *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getmachine(struct machine *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getmonparams(char *ptr,int max_len);&lt;/code&gt;
* &lt;code&gt;int sys_getpriv(struct priv *ptr, endpoint_t proc_nr);&lt;/code&gt;
* &lt;code&gt;int sys_getprivtab(struct priv *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getproc(struct proc *ptr,int proc_nr);&lt;/code&gt;
* &lt;code&gt;int sys_getproctab(struct proc *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getrandomness(struct randomness *ptr);&lt;/code&gt;
* &lt;code&gt;int sys_getrandom_bin(struct k_randomness_bin *ptr, int bin);&lt;/code&gt;
* &lt;code&gt;int sys_whoami(endpoint_t *ep, char *name, int namelen);&lt;/code&gt;

=== SYS_GETKSIG ===
Checks whether there is a process that must be signaled. This is repeatedly done by the PM after receiving a notification that there are kernel signals pending.

'''response parameters'''

* SIG_ENDPT: Return next process with pending signals or NONE.
* SIG_MAP: Bit map with pending kernel signals.

'''return value'''

* OK: This call always succeeds.

'''library functions'''

* &lt;code&gt;int sys_getksig(endpoint_t *proc_nr, sigset_t *sig_map);&lt;/code&gt;

=== SYS_GETMCONTEXT ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== .SYS_INT86 ===
Obsolete call

=== SYS_IOPENABLE ===
Enable the CPU's I/O privilege level bits for the given process, so that it is allowed to directly perform I/O in user space.

'''request parameters'''

* IOP_ENDPT: The process to give I/O privileges.

'''return value'''

* OK: Always succeeds.

'''library functions'''

* int &lt;code&gt;sys_enable_iop(endpoint_t proc);&lt;/code&gt;

=== SYS_IRQCTL ===
Set or reset a hardware interrupt policy for a given IRQ line and enable or disable interrupts for this line. This call allows user-space device drivers to grab a hook for use with the kernel's generic interrupt handler. The kernel's interrupt handler merely notifies the driver about the interrupt with a HARD_INT message and reenables the IRQ line if the policy says so. The notification message will contain the ''id'' provided by the caller as an argument. Once a policy is in place, drivers can enable and disable interrupts.

'''request parameters'''

* IRQ_REQUEST: Interrupt control request to perform.
** IRQ_SETPOLICY: Set interrupt policy for the generic interrupt handler.
** IRQ_RMPOLICY: Remove a previously set interrupt policy.
** IRQ_ENABLE: Enable IRQs for the given IRQ line.
** IRQ_DISABLE: Disable IRQs for the given IRQ line.
* IRQ_VECTOR: IRQ line that must be controlled.
* IRQ_POLICY: Bit map with flags indicating IRQ policy.
* IRQ_HOOK_ID: When setting a policy this provides index sent to caller upon interrupt. For other requests it is the kernel hook identifier returned by the kernel.

'''response parameters'''

* IRQ_HOOK_ID: Kernel hook identifier associated with the driver.

'''return value'''

* EINVAL: Invalid request, IRQ line, hook id, or process number.
* EPERM: Only owner of hook can toggle interrupts or release the hook.
* ENOSPC: No free IRQ hook could be found.

OK: The request was successfully handled.

'''library functions'''

* &lt;code&gt;int sys_irqctl(int request, int irq_vec, int policy, int *hook_id);&lt;/code&gt;
* &lt;code&gt;int sys_irqsetpolicy(int irq_vec, int policy, int *hook_id);&lt;/code&gt;
* &lt;code&gt;int sys_irqrmpolicy(int *hook_id);&lt;/code&gt;
* &lt;code&gt;int sys_irqenable(int *hook_id);&lt;/code&gt;
* &lt;code&gt;int sys_irqdisable(int *hook_id);&lt;/code&gt;

=== SYS_KILL ===
Signal a process on behalf of a system server. A system process can signal another process with this call. The kernel notifies the PM about the pending signal for further processing (Note that the ''kill()'' POSIX-call is directly handled at the PM). The PM uses this call to indirectly send a signal message to a system process. This happens when a signal arrives for a system process that set the special SIG_MESS signal handler with the ''sigaction()'' POSIX-call.

'''request parameters'''

* SIG_ENDPT: Process to be signalled.
* SIG_NUMBER: Signal number. Range from 0 to _NSIG.

'''return value'''

* OK: Call succeeded.
* EINVAL: Illegal process or signal number.
* EPERM: Cannot send a signal to a kernel task. PM cannot signal a user process with a notification message.

'''library functions'''

* &lt;code&gt;int sys_kill(endpoint_t proc_nr, int sig_nr);&lt;/code&gt;

=== SYS_MEMSET ===
Fill a physical memory area with a constant pattern byte.

&lt;code&gt;
int sys_memset(endpoint_t who, unsigned long pattern, phys_bytes base, phys_bytes bytes);
&lt;/code&gt;

The '''sys_memset''' function sets ''length'' bytes starting from physical address ''base'' to the low-order byte of ''pattern''.

'''Return values''':
* OK: Call always succeeds.

'''Notes''':
This function is used, for example, to zero the BSS segment on an exec() POSIX-call. The kernel is asked to do the work for performance reasons.


=== .SYS_NEWMAP ===
This is an obsolete call. Description is kept here just to understand old code.

Install a new memory map for a newly forked process or if a process's memory map is changed. The kernel fetches the new memory map from PM and updates its data structures.

'''request parameters'''

* PR_ENDPT: Install new map for this process.
* PR_MEM_PTR: Pointer to memory map at PM.

'''return value'''

* OK: New map was successfully installed.
* EFAULT: Incorrect address for new memory map.
* EINVAL: Invalid process number.

'''library functions'''

&lt;code&gt;int sys_newmap(endpoint_t proc_nr, struct mem_map *ptr);&lt;/code&gt;

=== .SYS_NICE ===
This is an obsolete call. Description is kept here just to understand old code.

Change a process' priority. This is done by passing a nice value between PRIO_MIN(negative) and PRIO_MAX(positive). A nice value of zero resets the priority to the default.

'''request parameters'''

* PR_ENDPT: Process whose priority should be changed.
* PR_PRIORITY: New nice value for process' priority.

'''return value'''

* OK: New priority was successfully set.
* EINVAL: Invalid process number of priority.
* EPERM: Cannot change priority of kernel task.

'''library functions'''

* &lt;code&gt;int sys_nice(endpoint_t proc_nr, int priority);&lt;/code&gt;

=== SYS_PADCONF ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_PHYSCOPY ===
Copy data using physical addressing. The source and/or destination address can be virtual like with [[#SYS_VIRCOPY|SYS_VIRCOPY]], but in addition an arbitrary physical address is accepted with PHYS_SEG.

'''request parameters'''

* CP_SRC_SPACE: Source segment.
* CP_SRC_ADDR: Virtual source address.
* CP_SRC_ENDPT: Process number of the source process.
* CP_DST_SPACE: Destination segment.
* CP_DST_ADDR: Virtual destination address.
* CP_DST_ENDPT: Process number of the destination process.
* CP_NR_BYTES: Number of bytes to copy.

'''return value'''

* OK: The copying was done.
* EDOM: Invalid copy count.
* EFAULT: Virtual to physical mapping failed.
* EINVAL: Incorrect segment type of process number.
* EPERM: Only owner of REMOTE_SEG can copy to or from it.

'''library functions'''

* &lt;code&gt;int sys_abscopy(phys_bytes src_phys, phys_bytes dst_phys, phys_bytes count);&lt;/code&gt;
* &lt;code&gt;int sys_physcopy(endpoint_t src_proc, vir_bytes src_vir, endpoint_t dst_proc, vir_bytes dst_vir, phys_bytes count);&lt;/code&gt;

=== SYS_PRIVCTL ===
Get a private privilege structure and update a process' privileges. This is used to dynamically start system services. For VM, this call also supports querying a memory range for previously added memory permissions.

'''request parameters'''

* CTL_ENDPT: Process whose privileges should be updated/queried.
* CTL_REQUEST: The privilege modification/query request.
** SYS_PRIV_ALLOW: Allow a process to run.
** SYS_PRIV_DISALLOW: Disallow a process from running.
** SYS_PRIV_SET_SYS: Give a process system privileges.
** SYS_PRIV_SET_USER: Give a process user privileges.
** SYS_PRIV_ADD_IO: Add an I/O range to the process's resources.
** SYS_PRIV_ADD_MEM: Add a memory range to the process's resources
** SYS_PRIV_ADD_IRQ: Add an IRQ to the process's resources.
** SYS_PRIV_QUERY_MEM: Check if the process has permission to access a physical memory range.
* CTL_ARG_PTR: Pointer to arguments for this request ('''not''' for SYS_PRIV_QUERY_MEM).
* CTL_PHYSSTART: Start of physical memory range to test (only for SYS_PRIV_QUERY_MEM).
* CTL_PHYSLEN: Length of physical memory range to test (only for SYS_PRIV_QUERY_MEM).

'''return value'''

* OK: The calls succeeded.
* EINVAL: Invalid process number, request, or arguments.
* ENOSPC: No free privilege structure found.
* EPERM: Resources can not be added to user processes, or permission denied.
* ENOMEM: No storage available for this resource.

'''library functions'''

* &lt;code&gt;int sys_privctl(endpoint_t proc, int req, void *p);&lt;/code&gt;
* &lt;code&gt;int sys_privquery_mem(endpoint_t proc, phys_bytes start, phys_bytes len);&lt;/code&gt;

=== .SYS_PROFBUF ===
Obsolete call.

=== SYS_READBIOS ===
Copy from the BIOS area.

'''request parameters'''

* RDB_ADDR: Absolute address in BIOS area.
* RDB_BUF: Buffer address in the requesting process.
* RDB_SIZE: The number of bytes to copy.

'''return value'''

* OK: The call succeeded.
* EDOM: Invalid number of bytes.
* EFAULT: Invalid buffer address.

'''library functions'''

&lt;code&gt;int sys_readbios(phys_bytes address, void *buf, size_t size);&lt;/code&gt;

=== SYS_RUNCTL ===
Control the process's PROC_STOP flag. Used for process management (by PM). Stopping a process is generally done for the purpose of either setting up a signal handler or stopping a process that is about to be killed. When stopping for setting up a signal handler, the RC_DELAY flag will be supplied. This means that if the process is queued sending a message, or stopped for system call tracing, then this call will, instead of stopping the process, return EBUSY and later send a ''SIGNDELAY'' pseudo-signal to the process when it has been established that this process will not send a message anymore. The process never becomes actually runnable before PM eventually tells the kernel that it is done processing the SIGNDELAY (using [[#SYS_ENDKSIG|SYS_ENDKSIG]]). This "delay stop" mechanism is used by PM to make sure that no signal is delivered to a process that still has a call pending to a system server. This is required for POSIX compliance.

'''request parameters'''

* RC_ENDPT: The process number to control.
* RC_ACTION: Stop or resume the process.
** RC_STOP: Stop the process.
** RC_RESUME: Resume the process.
* RC_FLAGS: Request flags.
** RC_DELAY: Delay stop if process is sending.

'''return value'''

* OK: The call succeeded.
* EINVAL: Invalid process number.
* EPERM: The caller is a kernel task.
* EBUSY: The process is blocked sending a message or blocked for system call tracing.

'''library functions'''

* &lt;code&gt;int sys_runctl(endpoint_t proc_ep, int action, int flags);&lt;/code&gt;
* &lt;code&gt;int sys_stop(endpoint_t proc_ep);&lt;/code&gt;
* &lt;code&gt;int sys_delay_stop(endpoint_t proc_ep);&lt;/code&gt;
* &lt;code&gt;int sys_resume(endpoint_t proc_ep);&lt;/code&gt;

=== SYS_SAFECOPYFROM ===
Copy data from a granted memory area of another process, into one's own address space. The caller must have CPF_READ access to the grant.

'''request parameters'''

* SCP_FROM_TO: The process endpoint to copy from.
* SCP_SEG: The segment within the caller to copy to (typically D).
* SCP_GID: The grant ID.
* SCP_OFFSET: Starting byte offset within the grant.
* SCP_ADDRESS: Pointer to buffer to store the data in.
* SCP_BYTES: Number of bytes to copy.

'''return value'''

* OK: The call succeeded.
* EINVAL: Invalid process number.
* EPERM: Invalid grant ID, insufficient access, or bad byte range.
* ELOOP: Chain of indirect grants too long.

'''library functions'''

&lt;code&gt;int sys_safecopyfrom(endpoint_t source, cp_grant_id_t grant, vir_bytes grant_offset, vir_bytes my_address, size_t bytes);&lt;/code&gt;

=== SYS_SAFECOPYTO ===
Copy data from one's own address space, to a granted memory area of another process. The caller must have CPF_WRITE access to the grant.

'''request parameters'''

* SCP_FROM_TO: The process endpoint to copy to.
* SCP_SEG: The segment within the caller to copy from (typically D).
* SCP_GID: The grant ID.
* SCP_OFFSET: Starting byte offset within the grant.
* SCP_ADDRESS: Pointer to data to copy.
* SCP_BYTES: Number of bytes to copy.

'''return value'''

* OK: The call succeeded.
* EINVAL: Invalid process number.
* EPERM: Invalid grant ID, insufficient access, or bad byte range.
* ELOOP: Chain of indirect grants too long.

'''library functions'''

* &lt;code&gt;int sys_safecopyto(endpoint_t dest, cp_grant_id_t grant, vir_bytes grant_offset, vir_bytes my_address, size_t bytes);&lt;/code&gt;

=== SYS_SAFEMEMSET ===
Fill a memory grant with a constant pattern byte.

&lt;code&gt;
int sys_safememset(endpoint_t endpt, cp_grant_id_t grant, vir_bytes grant_offset, int pattern, size_t bytes);
&lt;/code&gt;
The '''sys_safememset''' function sets ''bytes'' bytes from offset ''grant_offset'' in memory grant ''grant'' to the low-order byte of ''pattern''.

'''Return values''' (not complete):
* OK: ''bytes'' bytes filled with the pattern byte.
* EPERM: Caller has no write permissions (CPF_WRITE) for ''grant''.
* EPERM: Permission checks for ''grant'' failed.

'''Notes:'''
The memory driver uses this function for reads of /dev/zero to set a requestor's buffer to all '\0'.

=== SYS_SCHEDCTL ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_SCHEDULE ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_SDEVIO ===
Perform device I/O on behalf of a user-space device driver. Note that this call supports only byte and word granularity. The driver can request input or output of an entire buffer. Also see [[#SYS_DEVIO|SYS_DEVIO]] and [[#SYS_VDEVIO|SYS_VDEVIO]] kernel calls.

'''request parameters'''

* DIO_REQUEST: Flags indicating what to do.
** _DIO_INPUT: Read one or more values from the given port.
** _DIO_OUTPUT: Write one or more values to the given port.
** _DIO_BYTE: Read/write byte values.
** _DIO_WORD: Read/write word values.
** _DIO_SAFE: The given address is a grant.
* DIO_PORT: The port to be read or written.
* DIO_VEC_ENDPT: Process number where buffer is.
* DIO_VEC_ADDR: Virtual address of buffer, or grant ID.
* DIO_VEC_SIZE: Number of elements to input or output.
* DIO_OFFSET: Offset into grant.

'''return value'''

* OK: The port I/O was successfully done.
* EINVAL: Invalid request or port granularity.
* EPERM: Cannot do I/O for kernel tasks.
* EFAULT: Invalid virtual address of buffer.

'''library functions'''

* &lt;code&gt;int sys_insb(port_t port, u8_t buffer, int count);&lt;/code&gt;
* &lt;code&gt;int sys_insw(port_t port, u16_t buffer, int count);&lt;/code&gt;
* &lt;code&gt;int sys_outsb(port_t port, u8_t buffer, int count);&lt;/code&gt;
* &lt;code&gt;int sys_outsw(port_t port, u16_t buffer, int count);&lt;/code&gt;
* &lt;code&gt;int sys_safe_insb(port_t port, endpoint_t proc_nr, void *grant, int count, vir_bytes offset);&lt;/code&gt;
* &lt;code&gt;int sys_safe_insw(port_t port, endpoint_t proc_nr, void *grant, int count, vir_bytes offset);&lt;/code&gt;
* &lt;code&gt;int sys_safe_outsb(port_t port, endpoint_t proc_nr, void *grant, int count, vir_bytes offset);&lt;/code&gt;
* &lt;code&gt;int sys_safe_outsw(port_t port, endpoint_t proc_nr, void *grant, int count, vir_bytes offset);&lt;/code&gt;
* &lt;code&gt;int sys_sdevio(int req, long port, endpoint_t proc_nr, void *buffer, int count, vir_bytes offset);&lt;/code&gt;

=== SYS_SETALARM ===
Set or reset a synchronous alarm timer. When the timer expires it causes a SYN_ALARM notification message with the current uptime as an argument to be sent to the caller. Only system processes can request synchronous alarms.

'''request parameters'''

* ALRM_EXP_TIME: Absolute or relative expiration time in ticks for this alarm.
* ALRM_ABS_TIME: Zero if expire time is relative to the current uptime.

'''response parameters'''

* ALRM_TIME_LEFT: Ticks left on the previous alarm.

'''return value'''

* OK: The alarm was successfully set.
* EPERM: User processes cannot request alarms.

'''library functions'''

* int sys_setalarm(clock_t expire_time, int abs_flag);

=== SYS_SETGRANT ===
Set the address and size of the process's grant table. The previous address and size will be replaced.

'''request parameters'''

* SG_ADDR: Address of grant table in own address space.
* SG_SIZE: Number of entries.

'''return value'''

* OK: The grant table has been set.
* EPERM: The caller has no privilege table.

'''library functions'''

* &lt;code&gt;int sys_setgrant(cp_grant_t *grants, int ngrants);&lt;/code&gt;

=== SYS_SETMCONTEXT ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_SETTIME ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_SIGRETURN ===
Return from a POSIX-style signal handler. The PM requests the kernel to put things in order before the signalled process can resume execution. Also see the [[#sys_sigsend|SYS_SIGSEND]] kernel call that pushes a signal context frame onto the stack.

'''request parameters'''

* SIG_ENDPT: Indicates the process was signalled.
* SIG_CTXT_PTR: Pointer to context structure for POSIX-style signal handling.

'''return value'''

* OK: Signal handling action successfully performed.
* EINVAL: Invalid process number or context structure.
* EFAULT: Invalid context structure address, or could not copy signal frame.

'''library functions'''

* &lt;code&gt;int sys_sigreturn(endpoint_t proc_nr, struct sigmsg *sig_context);&lt;/code&gt;

=== SYS_SIGSEND ===
Signal a process on behalf of the PM by placing the context structure onto the stack. The kernel fetches the structure, initializes it, and copies it to the user's stack.

'''request parameters'''

* SIG_ENDPT: Indicates the process that was signalled.
* SIG_CTXT_PTR: Pointer to content structure for POSIX-style signal handling.

'''return value'''

* OK: Signal handling action successfully performed.
* EINVAL: Invalid process number.
* EPERM: Cannot signal kernel tasks.
* EFAULT: Invalid context structure address, or could not copy signal frame.

'''library functions'''

* &lt;code&gt;int sys_sigsend(endpoint_t proc_nr, struct sigmsg *sig_context);&lt;/code&gt;

=== SYS_SPROF ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_STATECTL ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_STIME ===
Set the boot time. This effectively sets the current time, as the current time is computed by adding the uptime to the boot time.

'''request parameters'''

* T_BOOTTIME: Boot time in seconds.

'''return value'''

* OK: Always succeeds.

'''library functions'''

* &lt;code&gt;int sys_stime(time_t boottime);&lt;/code&gt;

=== .SYS_SYSCTL ===
Renamed to [[#SYS_DIAGCTL|SYS_DIAGCTL]].

=== SYS_TIMES ===
Get the kernel's uptime since boot and process execution times.

'''request parameters'''

* T_ENDPT: Process for which to request the user and system time, or NONE.

'''response parameters'''

* T_USER_TIME: Process' user time in ticks, if given endpoint is not NONE.
* T_SYSTEM_TIME: Process's system time in ticks, if given endpoint is not NONE.
* T_BOOT_TICKS: Number of ticks since MINIX boot (uptime).
* T_BOOTTIME: Boot time in seconds.

'''return value'''

* OK: Always succeeds.

'''library functions'''

* &lt;code&gt;int sys_times(endpoint_t proc_nr, clock_t *user_time, clock_t *system_time, clock_t *uptime);&lt;/code&gt;

=== SYS_TRACE ===
Monitor or control execution of the given process. Handle the debugging commands supported by the ptrace() system call.

'''request parameters'''

* CTL_REQUEST: The tracing request.
** T_STOP: Stop the process.
** T_GETINS: Return value from instruction space.
** T_GETDATA: Return value from data space.
** T_GETUSER: Return value from user process table.
** T_SETINS:  Set value from instruction space.
** T_SETDATA: Set value from data space.
** T_SETUSER: Set value in user process table.
** T_RESUME: Resume execution.
** T_STEP: Set trace bit.
** T_SYSCALL: Trace system call.
** T_DETACH: Detach from a traced process.
* CTL_ENDPT: The process number that is being traced.
* CTL_ADDRESS: Virtual address in the traced process' space.
* CTL_DATA: Data to be written.

'''response parameters'''

* CTL_DATA: Data to be returned.

'''return value'''

* OK: Trace operation succeeded.
* EIO: Set or get value failed.
* EINVAL: Unsupported trace request.
* EPERM: Can only trace user processes.

'''library functions'''

* &lt;code&gt;int sys_trace(int request, endpoint_t proc_nr, long addr, long *data_ptr);&lt;/code&gt;

=== SYS_UMAP ===
Map a virtual address to a physical address and return the physical address. The virtual address can be in LOCAL_SEG, REMOTE_SEG or BIOS_SEG. An offset in bytes can be passed to verify whether this also falls within the segment.

'''request parameters'''

* CP_SRC_ENDPT: Process number of the address relates to.
* CP_SRC_SPACE: Segment identifier.
* CP_SRC_ADDR: Offset within segment.
* CP_NR_BYTES: Number of bytes from start.

'''response parameters'''

* CP_DST_ADDR: Physical address if mapping succeeded.

'''return value'''

* OK: The copying was done.
* EFAULT: Virtual to physical mapping failed.
* EINVAL: Incorrect segment type or process number.

'''remarks'''

Address zero within BIOS_SEG returns EFAULT, while the zeroth BIOS interrupt vector is in fact a valid address.

'''library functions'''

&lt;code&gt;int sys_umap(endpoint_t proc_nr, int seg, vir_bytes vir_addr, vir_bytes count, phys_bytes *phys_addr);&lt;/code&gt;

=== SYS_UMAP_REMOTE ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_UPDATE ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

''(to be documented)''

=== SYS_VDEVIO ===
Perform a series of device I/O on behalf of a user process. The call accepts a pointer to the first element of an array of (port,value)-pairs that are to be handled at once. Hardware interrupts are temporarily disabled to prevent the batch of I/O calls to be interrupted. Also see [[#SYS_DEVIO|SYS_DEVIO]] and [[#SYS_SDEVIO|SYS_SDEVIO]].

'''request parameters'''

* DIO_REQUEST: Flags indicating what to do.
** _DIO_INPUT: Read values from ports.
** _DIO_OUTPUT: Write values to ports.
** _DIO_BYTE: Read/write byte values.
** _DIO_WORD: Read/write word values.
** _DIO_LONG: Read/write long values.
* DIO_VEC_SIZE: The number of ports to be handled.
* DIO_VEC_ADDR: Virtual address of the (port,address)-pairs in the caller's space.

'''return value'''

* OK: The port I/O was successfully done.
* EINVAL: Invalid request or granularity.
* E2BIG: Vector size exceeds maximum that can be handled.
* EFAULT: The address of the (port,value)-pair is erroneous.

'''library functions'''

* &lt;code&gt;int sys_voutb(pvb_pair_t *pvb_vec, int vec_size);&lt;/code&gt;
* &lt;code&gt;int sys_voutw(pvb_pair_t *pvw_vec, int vec_size);&lt;/code&gt;
* &lt;code&gt;int sys_voutl(pvb_pair_t *pvl_vec, int vec_size);&lt;/code&gt;
* &lt;code&gt;int sys_vinb(pvb_pair_t *pvb_vec, int vec_size);&lt;/code&gt;
* &lt;code&gt;int sys_vinw(pvb_pair_t *pvw_vec, int vec_size);&lt;/code&gt;
* &lt;code&gt;int sys_vinl(pvb_pair_t *pvl_vec, int vec_size);&lt;/code&gt;

=== SYS_VIRCOPY ===
Copy data using virtual addressing. The virtual can be in three segments: LOCAL_SEG(text, stack, data segments), REMOTE_SEG(e.g. RAM disk, video memory) and the BIOS_SEG(BIOS interrupt vectors, BIOS data area). This is the most common system call relating to copying.

'''request parameters'''

* CP_SRC_SPACE: Source segment
* CP_SRC_ADDR: Virtual source address.
* CP_SRC_ENDPT: Process number of the source process.
* CP_DST_SPACE: Destination segment.
* CP_DST_ADDR: Virtual destination address.
* CP_DST_ENDPT: Process number of the destination process.
* CP_NR_BYTES: Number of bytes to copy.

'''return value'''

* OK: The copying was done.
* EDOM: Invalid copy count.
* EFAULT: Virtual to physical mapping failed.
* EPERM: No permission to use PHYS_SEG.
* EINVAL: Incorrect segment type or process number.
* EPERM: Only owner of REMOTE_SEG can copy to or from it.

'''library functions'''

* &lt;code&gt;int sys_biosin(vir_bytes bios_vir, vir_bytes dst_vir, phys_bytes bytes);&lt;/code&gt;
* &lt;code&gt;int sys_biosout(vir_bytes src_vir, vir_bytes bios_vir, phys_bytes bytes);&lt;/code&gt;
* &lt;code&gt;int sys_datacopy(endpoint_t src_proc, vir_bytes src_vir, endpoint_t dst_proc, vir_bytes dst_vir, phys_bytes bytes);&lt;/code&gt;
* &lt;code&gt;int sys_textcopy(endpoint_t src_proc, vir_bytes src_vir, endpoint_t dst_proc, vir_bytes dst_vir, phys_bytes bytes);&lt;/code&gt;
* &lt;code&gt;int sys_stackcopy(endpoint_t src_proc, vir_bytes src_vir, endpoint_t dst_proc, vir_bytes dst_vir, phys_bytes bytes);&lt;/code&gt;
* &lt;code&gt;int sys_vircopy(endpoint_t src_proc, vir_bytes src_vir, endpoint_t dst_proc, vir_bytes dst_vir, phys_bytes bytes);&lt;/code&gt;

=== SYS_VMCTL ===
'''request parameters'''

''(to be documented)''

'''response parameters'''

''(to be documented)''

'''return value'''

''(to be documented)''

'''library functions'''

* &lt;code&gt;int sys_vmctl(endpoint_t who, int param, u32_t value);&lt;/code&gt;
* &lt;code&gt;int sys_vmctl_get_pagefault_i386(endpoint_t *who, u32_t *cr2, u32_t *err);&lt;/code&gt;
* &lt;code&gt;int sys_vmctl_get_cr3_i386(endpoint_t who, u32_t *cr3);&lt;/code&gt;
* &lt;code&gt;int sys_vmctl_get_memreq(endpoint_t *who, vir_bytes *mem, vir_bytes *len, int *wrflag, endpoint_t *who_s, vir_bytes *mem_s, endpoint_t *);&lt;/code&gt;
* &lt;code&gt;int sys_vmctl_enable_paging(struct mem_map *);&lt;/code&gt;
* &lt;code&gt;int sys_vmctl_get_mapping(int index, phys_bytes *addr, phys_bytes *len, int *flags);&lt;/code&gt;
* &lt;code&gt;int sys_vmctl_reply_mapping(int index, vir_bytes addr);&lt;/code&gt;

=== SYS_VSAFECOPY ===
Perform a vectored safecopy operation. Each vector element specifies the source, destination, grant ID, grant offset, pointer into caller's address space, and number of bytes to copy. For each element, either source or destination must be set to SELF. The data segment is used for both source and destination.

'''request parameters'''

* VSCP_VEC_ADDR: Pointer to a vector of ''struct vscp_vec'' elements.
* VSCP_VEC_SIZE: Number of elements in the given vector.

'''return value'''

* OK: The call succeeded.
* EDOM: Invalid number of vector elements.
* EFAULT: Invalid address.
* EINVAL: Invalid process number, or neither source nor destination is set to SELF.
* EPERM: Invalid grant ID, insufficient access, or bad byte range.
* ELOOP: Chain of indirect grants too long.

'''remarks'''

The operation does not fail atomically: Upon failure, the receiving buffers should be considered to be in an undefined state.

'''library functions'''

* &lt;code&gt;int sys_vsafecopy(struct vscp_vec *copyvec, int elements);&lt;/code&gt;

=== SYS_VTIMER ===
Set and/or retrieve the value of one of a process' virtual timers. Each process may have two virtual timers: a '''virtual''' timer that is decreased as the process itself executes (user time), and a '''profile''' timer that decreases as the process executes (user time) ''or'' a system server executes on behalf of the process (system time). If a timer expires, the process will get a SIGVTALRM or SIGPROF signal, respectively.

'''request parameters'''

* VT_WHICH: The timer to set/retrieve: VT_VIRTUAL for the virtual timer, or VT_PROF for the profile timer.
* VT_SET: A flag indicating whether to set, or just retrieve, the timer's value.
* VT_VALUE: The new expiration time, if VT_SET is nonzero.
* VT_ENDPT: Endpoint of the target process.

'''response parameters'''

* VT_VALUE: The old expiration time.

'''return value'''

* OK: The timer was set (if requested), and the old timer value was returned.
* EPERM: User processes cannot request timers.
* EINVAL: Invalid timer or process.

'''library functions'''

* &lt;code&gt;int sys_vtimer(endpoint_t proc_nr, int which, clock_t *newval, clock_t *oldval);&lt;/code&gt;

=== SYS_VUMAP ===
Batch mapping of virtual to physical addresses.

&lt;code&gt;
int sys_vumap(endpoint_t endpt, struct vumap_vir *vvec, int vcount, size_t offset, int access, struct vumap_phys *pvec, int *pcount);
&lt;/code&gt;

The '''sys_vumap''' function perform batch conversion of one or more virtual buffers, to a series of physical addresses for those buffers. It is intended to be used by drivers that want to perform DMA directly from or to buffers in another process, authorized by that other process by means of memory grants. It can also be used to look up local addresses in the calling processes itself.

The buffers to convert are provided in the ''vvec'' vector. Each entry in this vector contains either a grant identifier (''vv_grant'') or a local virtual address (''vv_addr'') for the buffer, and a size (''vv_size'') of the buffer. The owner of the buffer is specified using the ''endpt'' parameter; If ''endpt'' is set to SELF, the local virtual addresses are used; otherwise, the grant identifiers are used. The ''vcount'' parameter specifies the number of entries in the ''vvec'' vector. The caller must provide at least one entry. No more than ''MAPVEC_NR'' input entries are processed in one call.

The ''offset'' parameter determines the offset into the first entry of the ''vvec'' vector. This allows the caller to perform multiple '''sys_vumap''' calls to map input that exceeds the size limits for a single call. The offset affects both the address and the size of the first entry.

The ''access'' parameter specifies the access requested for the buffers. At least one of the following flags must be specified: ''VUA_READ'' (to read from the buffers), ''VUA_WRITE'' (to write to the buffers). If the ''VUA_READ'' flag is not set, any unallocated pages in the address range will be allocated automatically. If the ''VUA_READ'' flag is set, the caller must always provide allocated pages. The requested access must match that of the given grants, and thus acts as a sanity check; it however does not prevent the caller from performing DMA in the wrong direction on the resolved physical addresses.

The kernel stores the resulting physical addresses in the ''pvec'' vector. Each entry in this vector contains a physical address (''pv_addr'') and a size (''pv_size''). The caller must set the ''pcount'' integer to the maximum number of entries in the ''pvec'' vector; upon success, the variable will be set to the number of entries filled in by the kernel. The caller must provide at least one entry. Upon success, at least one and at most ''MAPVEC_NR'' output entries are returned. Upon failure, the ''pvec'' and ''pcount'' contents are unchanged.

The caller is encouraged not to pay too much attention to the returned ''pcount'' value for determining whether the entire input vector has been mapped. Instead, it should consider the sizes returned in the ''pvec'' entries. If the sum of the sizes in the ''pvec'' vector equals the sum of the sizes in the ''vvec'' vector, the entire virtual vector has been resolved. Otherwise, additional '''sys_vumap''' calls are necessary to resolve the rest of the virtual vector.

'''Return values''' (not complete):

* OK: addresses successfully mapped
* EINVAL: ''vcount'' or ''pcount'' is negative or zero
* EINVAL: ''access'' contains neither ''VUA_READ'' nor ''VUA_WRITE''
* EFAULT: ''vvec'' or ''pvec'' point to invalid memory
* EINVAL: one of the entries in ''vvec'' is zero-sized
* EINVAL: one of the grants in ''vvec'' is invalid
* EPERM:  one of the grants in ''vvec'' is revoked
* EPERM:  the requested access does not match the granted access
* EFAULT: the memory provided in one of the ''vvec'' entries is invalid
* EFAULT: ''VUA_READ'' access is specified, and part of the given memory is not allocated

== References ==
[https://www.minix3.org/doc/kernel-api.pdf Original MINIX 3 Kernel API Document] by Jorrit N. Herder jnhderder AT cs DOT vu DOT nl</text>
      <sha1>m41e5u9z4tloxqhvd12bvxl973zhj8h</sha1>
    </revision>
  </page>
  <page>
    <title>Memory Grants</title>
    <ns>0</ns>
    <id>69</id>
    <revision>
      <id>88</id>
      <timestamp>2021-08-27T21:37:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import memorygrants</comment>
      <origin>88</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4492" sha1="skdla3tpcdgqr0v6qo90g6l8ndoq04z" xml:space="preserve">Memory grants is a inter-procedure communication mechanism to allow processes to transfer large amounts of data. An alternative name of this IPC mechanism is safecopies, as the low-kernel kernel system calls related to using memory grants all contain "safe" in their name.

== Rationale ==

User-mode processes cannot escape their virtual address space, i.e. they cannot read or write the memory of other processes ; they have to use kernel-provided IPC functionality to exchange data with them. Traditional POSIX solutions to this problem are pipe, sockets, shared memory, signals and others.

The Minix micro-kernel provides fixed-size 64 bytes message passing, but transferring large amounts of data with those messages would be very inefficient. One POSIX IPC could have been implemented in the micro-kernel, however the needs and goals of Minix makes them unsuited for the task, as such an IPC has to satisfy all following criteria at the same time :

* provide byte-granularity bounds checking,
* be uni- or bi-directional,
* support authorization per process,
* be easy, fast, secure and safe to set up,
* be simple and small to implement in the micro-kernel,
* be transferable yet be able to restrict access to a subset of the original authorization, 
* be efficient.

== Implementation of memory grants ==

Memory grants were created to address the need of IPC provided by the micro-kernel for large amounts of data. This mechanism allows processes to grant access to a well defined region of their memory to another process.

There are three types of memory grants. All share common attributes :

* permitted access mode may be set to read, write or read-write,
* the memory region is a continuous range with byte granularity,
* grants are created by a endpoint for a endpoint (but may be transferred, see below).

By convention, the granter is the process that created and owns the grant ; the grantee is the process to which the memory grant was granted.

Granters maintain their array of grants in their memory space, the micro-kernel is informed of this array by the SYS_SETGRANT kernel system call. Grantees can, depending on which operations are allowed, read and/or write (copy or set bytes) to the specified memory region of the granter through the relevant kernel system calls.

Those kernel calls are wrapped by higher-level functions in the libsys library (the cpf_* family of functions). Protocol abstraction libraries can provide higher-level semantics to memory grants : an example is directory listing inside a file server, where fsdriver collects directories entries through a callback function and sends them to VFS through a memory grant. 

Memory grants are identified by a memory grant credential (an integer of type cp_grant_id_t). Those credentials are transmitted to grantees by message passing.

== Memory grant types ==

There are three types of memory grants, depending on whether the grant was transferred from a process to another or not.
 
=== Direct grants ===

Direct grants are the simplest type of grants. They specify that a memory region of the granter is accessible by the grantee. They are direct in the sense that they haven't been transferred : the granter is the owner of the memory region, there is no middleman between the two.

=== Indirect grants ===

Indirect grants are grants that have been transferred by a grantee : the grantee delegates its grant to another process. The grantee becomes a granter and then pass a newly created memory grant credential to the new grantee. The memory grant thus forms a linked list of indirect grants, with a direct grant at the start.

Indirect grant can themselves be transferred to another grantee by creating a new indirect grant.

=== Magic grants ===

Magic grants are grants that are made by one process for memory in another process. Right now, the only service that may create magic grants, is VFS. VFS uses magic grants to give other services, like file systems and drivers, direct access to memory in user application processes, for example for read/write operations. Since user application processes themselves can not create grants (this requires service privileges), and all driver/filesystem I/O is mediated by VFS, magic grants serve to avoid that VFS needs to copy in and out all data transferred between applications and filesystems/drivers.
== External documentation ==

* [https://www.minix3.org/docs/jorrit-herder/eurosys09-wip-poster.pdf Original research paper on memory grants]</text>
      <sha1>skdla3tpcdgqr0v6qo90g6l8ndoq04z</sha1>
    </revision>
  </page>
  <page>
    <title>Message Passing</title>
    <ns>0</ns>
    <id>70</id>
    <revision>
      <id>90</id>
      <parentid>89</parentid>
      <timestamp>2021-08-27T21:40:49Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Message type */</comment>
      <origin>90</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4593" sha1="oh9sfv9kpqso0zgtx6h9d8kwwoc26ws" xml:space="preserve">Message passing is Minix's native form of IPC. Together with [[Memory Grants|memory grants]], they are the only low-level IPC directly understood by the micro-kernel. POSIX-style IPC is implemented on top of them at a higher level of abstraction.

== Message ==

The messages are fixed-length 64 bytes of data. To transfer more effectively bigger amounts of data [[Memory Grants|memory grants]] are used. Messages are composed of:

* The endpoint : a 4-byte identifier of who sent the message,
* Message type : a 4-byte message type identifier,
* Payload : 56 bytes of data.

All available messages are enumerated at [https://github.com/Stichting-MINIX-Research-Foundation/minix/blob/master/minix/include/minix/ipc.h|minix/include/minix/ipc.h].

=== Endpoint ===

A endpoint identifies a process uniquely among the operating system. It is composed of the process slot number concatenated with a generation number.

The reason behind this generation number is that a process slot may be recycled when a process dies, so unrelated processes may sequentially share the same process slot number, which would cause problems when delivering messages to a process which happened to share the same process slot than a unrelated predecessor.

A thorough explanation of endpoints is available at [https://github.com/Stichting-MINIX-Research-Foundation/minix/blob/master/minix/include/minix/endpoint.h minix/include/minix/endpoint.h].

=== Message type ===

Message types identifies what kind of message is a particular message. They are enumerated at [https://github.com/Stichting-MINIX-Research-Foundation/minix/blob/master/minix/include/minix/com.h minix/include/minix/com.h]

A special kind of messages is notifications : notifications allows one to notify a process about something (for example, a hard disk interrupt meant for the disk driver). They take priority over normal messages when a process tries to RECEIVE one. Due to their construction, they are not stored in the receive buffer and their [https://github.com/Stichting-MINIX-Research-Foundation/minix/blob/master/minix/include/minix/ipc.h#L1456 payload] is generated on-the-fly by the micro-kernel.

=== Payload ===

Messages have a 56 bytes fixed payload. Each message type has its own payload format, which are described at [https://github.com/Stichting-MINIX-Research-Foundation/minix/blob/master/minix/include/minix/ipc.h minix/include/minix/ipc.h].

You can transfer more than 56 bytes per message using grants ([https://github.com/Stichting-MINIX-Research-Foundation/minix/blob/master/minix/include/minix/safecopies.h minix/include/minix/safecopies.h]). Grants are pointers to an allocated data block exported by the granter. 

Case 1: A needs to send more than 56 bytes to B

The grantee receives the read only grant via message and maps it to memory in the target process. The target process can now read and process the payload transferred via grant. After processing the payload, the granter needs to be informed to revoke the grant.

Case 2: A requests more than 56 bytes from B

The grantee receives the read write grant via message and maps it to memory in the target process. The target process can now write to the memory transferred via grant. After writing, the grantee maps back the the memory to the grant address and send it back via message to the granter. The granter needs to revoke the grant.

Case 3: A needs to send more than 56 bytes and expects to return more than 56 bytes

The granter creates a grant for an already allocated memory. The grantee receives the read write grant via message and maps it to memory in the target process. The target process can now write to the memory transferred via grant. After writing, the grantee maps back the the memory to the grant address and send it back via message to the granter.

== API ==

The micro-kernel handles the delivery of messages. There are three basic primitives :

* SEND : a message is sent, the sender is blocked until the message is delivered,
* RECEIVE : the process is blocked until a message is delivered to them,
* SENDREC : a message is sent, the sender is blocked until it receives a reply from the receiver.

There are also NOTIFY, SENDNB (non-blocking SEND) and SENDA (asynchronous SEND) for specific purposes.

Each endpoint has a 1 message receive buffer inside the micro-kernel.

To prevent deadlocks (by error or by malicious processes), processes are limited by what kind of primitives they may use and to whom they may send messages to. Also, the order of messages and protocols built upon them are carefully designed to prevent them.</text>
      <sha1>oh9sfv9kpqso0zgtx6h9d8kwwoc26ws</sha1>
    </revision>
  </page>
  <page>
    <title>Drivers Overview</title>
    <ns>0</ns>
    <id>71</id>
    <revision>
      <id>91</id>
      <timestamp>2021-08-28T10:45:15Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import overviewofminixdrivers</comment>
      <origin>91</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2429" sha1="f3djxpi8wemb6hb9b9xb2idz36k7dbk" xml:space="preserve">Drivers are software components used to manage hardware peripherals. In Minix, drivers are implemented as user-mode processes, and they use the micro-kernel to manage the hardware through it.

The drivers source code are located under the minix/drivers/ directory in the Minix source tree. The binary executables are located under the /service/ directory.

== Unix device drivers ==

Like Unix and Unix-likes operating systems, Minix divides drivers in two categories, character and block devices, and they can be accessed just like regular files on the file system by the user-land through device nodes.

Driver types differ essentially in what services and operations they support.

=== Block device ===

A block device treats data in chunks called blocks, each block being composed of a constant number of bytes. Block devices support the seek operation, which allows access to any block at any moment.

Block devices generally represents storage media, such as hard disk and CD drives.

=== Character device ===

A character device treats data as a stream of bytes. Character devices do not support the seek operation and so do not have to actually represent a storage media or even a real hardware peripheral.

Character devices represents everything block devices cannot, from real hardware components (printers, serial ports) to virtual, abstract entities (TTY, random number generators...).

== Drivers implementation ==

Minix drivers are processes, but unlike other processes they have permission to access their I/O ports through the micro-kernel.

=== Low-level protocols ===

Drivers interact closely with three important components and so have specialized low-level protocols for each of the virtual file server, the reincarnation server and the micro-kernel. Like all processes, drivers communicate with message passing, memory grants and system calls so those protocols are defined in those terms.

=== High-level abstraction libraries ===

Libraries were created to provide driver developers with a higher-level abstraction interface. Besides easing development, those libraries shield the drivers from low-level protocols changes to a certain extent.

The corresponding driver abstraction libraries are :

* blockdriver : for block-oriented drivers,
* chardriver : for generic character-oriented drivers,
* inputdriver : for drivers communicating with the input server,
* netdriver : for network device drivers.</text>
      <sha1>f3djxpi8wemb6hb9b9xb2idz36k7dbk</sha1>
    </revision>
  </page>
  <page>
    <title>Block Device Protocol</title>
    <ns>0</ns>
    <id>72</id>
    <revision>
      <id>404</id>
      <parentid>92</parentid>
      <timestamp>2022-02-07T18:09:09Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>404</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="25903" sha1="7twq0mi6k8mgcutcxx363fh8khoifxp" xml:space="preserve">
This page provides the official documentation of the block device driver protocol of MINIX 3. It describes the protocol used between VFS and file system servers on one side, and block drivers on the other. The current version documents the protocol used in git commit '''8a0b9de''' and later.
If you update this document because of changes to MINIX 3, please mention the commit ID of the change in the wiki comment.


== General information ==

The following information is written for people implementing a block device driver, and people implementing a system server that talks to a block driver.

=== The libblockdriver and libbdev libraries ===

It is highly recommended that block drivers be written on top of the '''libblockdriver''' library. This library takes care of a wide range of tasks common to many or all block devices, and disk drivers in particular. The use of this library allows future protocol changes to be made in one place only. This page provides no documentation on libblockdriver itself, but tries to mention whenever libblockdriver implements a certain feature.

It is highly recommended that users of block drivers (file systems in particular) use the '''libbdev''' library. This library provides a common interface for communicating with block devices.

=== Instances ===

Each block driver instance is responsible for one or more device ''controllers''. Writers of new block drivers are highly encouraged to have each driver instance be responsible for only ''one'' controller, which itself may have several devices attached. Finer-granular work division (e.g., one driver per attached device) typically does not yield better isolation properties, and is therefore not considered beneficial.

A machine may have multiple controllers of the same type; in this case, multiple copies of the same block driver may be started. Each copy will be given a unique instance number (0 for the first instance of that particular driver, 1 for the second, and so on).

=== Initialization ===

Upon initialization, the driver must retrieve the instance number. It is passed as one of the arguments to the driver, in the form &lt;code&gt;instance=N&lt;/code&gt; where N is a decimal representation of the instance number. Obtaining the instance number is typically done by means of env_setargs() and env_parse(), as found in &lt;code&gt;&amp;lt;minix/sysutil.h&amp;gt;&lt;/code&gt;.

The driver should try to initialize the controller immediately when starting up, and abort (for example, by calling panic()) if initialization of the controller fails.

Upon (successful) startup, the block driver must announce its presence in DS. This should be done by calling the blockdriver_announce() function found in libblockdriver.

=== Requests and replies ===

The block driver protocol follows the basic request-reply model: a party requests service from a block driver by sending it a request message, and the block driver will respond that request with a reply message. Multiple requests may be sent at once. It is up to the driver to decide the order in which the requests are replied to. Internally, the driver may implement any form of parallelism, queuing, etcetera, as it sees fit. For the purpose of keeping track of its own requests, the caller supplies an (opaque) ID value in each request; the driver copies this ID into each corresponding reply.

Since requests may be sent synchronously or asynchronously, the block driver must use ''driver_receive()'' to receive a request along with the IPC primitive used to send the request. After handling the request, it should either use ''send()'' or ''sendnb()'' to reply to calls made using ''sendrec()'', or use ''asynsend3()'' with the &lt;code&gt;AMF_NOREPLY&lt;/code&gt; flag to reply to calls made using ''asynsend()'' (so that no asynchronous reply can satisfy a synchronous ''sendrec()''). This is taken care of by libblockdriver.

The &lt;code&gt;m_type&lt;/code&gt; message field contains the request or reply type. The only allowed reply type is &lt;code&gt;BDEV_REPLY&lt;/code&gt;. All message names and field aliases start with &lt;code&gt;BDEV_&lt;/code&gt;, and are defined in &lt;code&gt;&amp;lt;minix/com.h&amp;gt;&lt;/code&gt;. For forward compatibility reasons, the caller must '''zero out''' any unused message fields in the request message, and the callee must zero out unused fields in the reply message. This is typically done through &lt;code&gt;memset()&lt;/code&gt; to fill the entire message with zeroes before setting any fields on it.

=== Minor device numbers and subdevices ===

Every request includes a ''minor device number'', which tells the driver which device to use. A driver may choose its own mapping from minor device numbers to devices, and possibly to subranges within devices (e.g. [[#Partitions_and_subpartitions|partitions]]) or whatever the driver sees fit. The rest of this document uses the term ''subdevice'' to describe each of those. One or several subdevices may refer to (a subset of) a single physical device, and each subdevice has its own minor device number.

As an illustration: the floppy driver uses the high bit of the minor device number to indicate that the device should be formatted instead of written to, and uses the rest of the bits to encode the floppy drive and partition number.

=== Open and close semantics ===

Before a requesting party is allowed to issue I/O requests to a subdevice, this subdevice must first be opened using a &lt;code&gt;BDEV_OPEN&lt;/code&gt; request. The requesting party must issue a &lt;code&gt;BDEV_CLOSE&lt;/code&gt; request once it is done with the subdevice. The current system infrastructure does not allow the driver to detect whether a requesting party has exited, so it is up to the requesting party to make sure that each &lt;code&gt;BDEV_OPEN&lt;/code&gt; request is matched with a &lt;code&gt;BDEV_CLOSE&lt;/code&gt; request before it exits.

The driver is expected to keep track of open counts on a per-device (not per-subdevice) basis. The driver should assume that if a device has a nonzero open count, the other side expects the exact same physical device to remain there. Practically, this means that a hardware hot-swap or medium change should cause all subsequent requests to that device to return an error (typically &lt;code&gt;ENXIO&lt;/code&gt; for open requests and &lt;code&gt;EIO&lt;/code&gt; for transfer requests) until the last party closes the device. Similarly, the driver is expected to make available such a new device or medium only and always when the device is opened initially (i.e., whenever the per-device open count is increased from 0 to 1), and depending on the device type, (re)read its partition tables (see the section on [[#Partitions_and_subpartitions|partitions]]).

=== System interaction ===

The driver should use the [[SEF|System Event Framework]] (SEF). This framework automatically takes care of interaction with RS.

A &lt;code&gt;SIGTERM&lt;/code&gt; signal instructs the driver to shut down. However, after receiving this signal, the driver must not actually shut down until all its devices have been closed. Signals may be received by registering a signal handler callback function with SEF.

=== Driver restarts: the driver side ===

Drivers that crash or hang are restarted by the Reincarnation Server (RS); this applies to block drivers as well. Block drivers typically need not provide any explicit support for restarts, because they are essentially stateless. However, after such a restart, the driver will have lost information about previous open counts of devices.

A block driver must not specify a SEF callback routine for initialization after a restart. That is, it must not call ''sef_setcb_init_restart()''. As a result, after the driver crashes, the default SEF callback routine will cause the driver to be restarted with a new endpoint.

In addition, if the driver receives a non-open request (for example, a transfer request) that has not been preceded by an open request, it must reply with an &lt;code&gt;ERESTART&lt;/code&gt; error. This informs the caller that more (re)initialization is necessary first. This is only a workaround for what is essentially a race condition between VFS and file systems, regarding direct I/O to block-special files. Returning &lt;code&gt;ERESTART&lt;/code&gt; is taken care of by libblockdriver, although poorly: no information about endpoints is kept or used. 

=== Driver restarts: the caller side ===

Any service that uses a block driver will have to implement procedures that 1) detect and 2) recover from driver restarts.

Detection is relatively easy if ''synchronous'' communication is used. If the driver restarts during an ongoing ''sendrec()'' call, the call will be aborted with an &lt;code&gt;EDEADSRCDST&lt;/code&gt; error. In addition, after a driver restart, any ''sendrec()'' calls to the old endpoint will result in the same error. With ''asynchronous'' communication, requests and/or replies may get lost as part of the crash, and the caller may need an additional method to find out that the driver has restarted. File systems can rely on [[VFS-FS Protocol#REQ_NEW_DRIVER|REQ_NEW_DRIVER]] requests for this. Other services may have to subscribe to notifications on Data Store (DS) entries starting with the string "drv.blk.". Each block driver updates its own entry as part of the call to blockdriver_announce().

Recovery consists of first reopening all minor devices on the new driver instance, and then reissuing any previously ongoing requests. Failure during the recovery procedure may be dealt with as the caller sees fit. In general, it is encouraged that a service supports an unbounded number of block device restarts over time, but only a limited number of block device restarts during recovery.

The libbdev library implements both detection and recovery, but is written for use by file systems. Non-filesystem services may use it, but will have to implement their own DS subscription logic on top.

=== Transfers ===

The nature of block devices prescribes that all data transfer requests be idempotent. There are four types of transfer requests: &lt;code&gt;BDEV_READ&lt;/code&gt;, &lt;code&gt;BDEV_WRITE&lt;/code&gt;, &lt;code&gt;BDEV_GATHER&lt;/code&gt;, and &lt;code&gt;BDEV_SCATTER&lt;/code&gt;. &lt;code&gt;BDEV_READ&lt;/code&gt; reads a contiguous area of data from a subdevice, into a single buffer. &lt;code&gt;BDEV_WRITE&lt;/code&gt; writes a contiguous area of data to the subdevice, from a single buffer. &lt;code&gt;BDEV_GATHER&lt;/code&gt; and &lt;code&gt;BDEV_SCATTER&lt;/code&gt; also read and write a contiguous area of data from and to the subdevice (respectively), but use a vector, where each vector element provides a buffer and the size of that buffer.

All requests make use of memory grants to provide access to the buffers. In addition, the two vector requests provide the vector itself in a read-only grant. Libblockdriver takes care of converting the single-buffer requests into single-element vector requests, and of copying in the vector. All grants are owned by the caller (the request message's ''m_source'').

A transfer either succeeds or results in an error. Upon success, the transfer reply contains the number of bytes transferred as status. The size of the status field imposes a hard limit on transfer sizes of 2 GB (since negative values are error codes), but that is well beyond the expected size of any transfer anyway.

In general, the driver should transfer exactly the number of bytes requested. There are two cases where the transfer may be limited to a lower number of bytes: either the end of the medium or partition is reached (see the section on [[#Partitions_and_subpartitions|partitions]]), or the requested number of vector elements or bytes exceeds what the driver can deal with. In those cases, the reply will contain a lower number of bytes accordingly.

It is fully up to the driver to decide on restrictions for the parameters of transfers, including for example:

* byte position alignment (e.g., alignment to the medium sector size)
* alignment of total request size (e.g., a multiple of the medium sector size)
* maximum total request size (e.g., 4 MB)
* alignment of buffer size (e.g., alignment to 2 bytes)
* alignment of physical buffer address (e.g., 2-byte alignment)
* buffer memory specifics (e.g., each buffer must be physically contiguous in memory)

A driver may have to impose such restrictions because, for example, it performs DMA directly from or into the buffers provided by the caller, in which case the driver has to conform to whatever is required from the device's DMA engine. Driver writers are encouraged to have a (possibly slower) fallback mode in case that the requirements are not met, but this is not required. For optimal compatibility, callers are expected to provide buffers of physically contiguous memory only, aligned to at least a 2-byte boundary, and with a buffer size being a 2-byte multiple. For vector requests, this applies to each individual provided buffer. In general, the driver should lower the request size if a size limit is reached, and return an error for any other violation of its restrictions.

=== IOCTLs ===

The &lt;code&gt;BDEV_IOCTL&lt;/code&gt; request type is used to pass I/O control (ioctl) requests to a (sub)device. A memory grant is used to pass any extra data and/or provide a buffer to store results in.

Libblockdriver supports a set of I/O control requests for block-level tracing. These are used by the btrace(8) command line tool; they are not documented here.

Other I/O control requests are custom to the block driver type. More information about ioctls for disk block drivers can be found [[#Disk_IOCTLs|below]]. Non-disk block drivers may support their own sets of ioctls.

== Protocol messages ==

This section documents the messages used in the block driver protocol. The error lists are not exhaustive; drivers may return additional errors as they see fit.

=== BDEV_OPEN ===

Open a subdevice.

==== Request ====
{| class="wikitable"
! Type
!colspan="4"|BDEV_OPEN
|-
|rowspan="3"|'''Fields'''
| BDEV_MINOR || m10_i1 || dev_t || minor device number
|-
| BDEV_ACCESS || m10_i2 || int || access mode
|-
| BDEV_ID || m10_l1 || long || opaque request ID
|}

==== Reply ====
{| class="wikitable"
! Type
!colspan="4"|BDEV_REPLY
|-
|rowspan="2"|'''Fields'''
| BDEV_STATUS || m10_i1 || int || OK or negative error code
|-
| BDEV_ID || m10_l1 || long ||  opaque request ID, echoed from the request
|}

==== Error codes ====

{| class="wikitable"
| ENXIO || no such device or device not ready
|-
| EACCES || requested mode contains W_BIT and device is read-only
|-
| EIO || I/O error or unexpected device behavior
|}

==== Description ====

This request opens a subdevice. This must always be the first request issued by a caller, after which transfer and ioctl operations may be performed, until the caller closes the subdevice with a &lt;code&gt;BDEV_CLOSE&lt;/code&gt; request.

The access mode may consist of a bitwise combination of &lt;code&gt;R_BIT&lt;/code&gt; (open for reading), &lt;code&gt;W_BIT&lt;/code&gt; (open for writing). Read-only devices should be refused to be opened for writing, but this is purely informative to the caller. The driver is not expected to enforce access bits otherwise.

=== BDEV_CLOSE ===

Close a subdevice.

==== Request ====

{| class="wikitable"
! Type
!colspan="4"|BDEV_CLOSE
|-
|rowspan="2"|'''Fields'''
| BDEV_MINOR || m10_i1 || dev_t || minor device number
|-
| BDEV_ID || m10_l1 || long || opaque request ID
|}

==== Reply ====

{| class="wikitable"
! Type
!colspan="4"|BDEV_REPLY
|-
|rowspan="2"|'''Fields'''
| BDEV_STATUS || m10_i1 || int || OK or negative error code
|-
| BDEV_ID || m10_l1 || long ||  opaque request ID, echoed from the request
|}

==== Error codes ====

{| class="wikitable"
| ENXIO || no such device
|-
| ERESTART || subdevice has not been previously opened
|}

==== Description ====
This request closes a previously opened subdevice.

=== BDEV_READ, BDEV_WRITE ===

Perform data transfer on a subdevice, using a single buffer.

==== Request ====
{| class="wikitable"
! Type
!colspan="4"|BDEV_READ / BDEV_WRITE
|-
|rowspan="7"|'''Fields'''
| BDEV_MINOR || m10_i1 || dev_t || minor device number
|-
| BDEV_COUNT || m10_i2 || size_t || number of bytes to transfer
|-
| BDEV_GRANT || m10_i3 || cp_grant_id_t || grant (WRITE or READ) for buffer
|-
| BDEV_FLAGS || m10_i4 || unsigned int || transfer flags
|-
| BDEV_ID || m10_l1 || long || opaque request ID
|-
| BDEV_POS_LO || m10_l2 || u32_t || starting byte position (lower 32 bits)
|-
| BDEV_POS_HI || m10_l3 || u32_t || starting byte position (upper 32 bits)
|}

==== Reply ====
{| class="wikitable"
! Type
!colspan="4"|BDEV_REPLY
|-
|rowspan="2"|'''Fields'''
| BDEV_STATUS || m10_i1 || ssize_t || OK or negative error code
|-
| BDEV_ID || m10_l1 || long ||  opaque request ID, echoed from the request
|}


==== Error codes ====
{| class="wikitable"
| ENXIO || no such device
|-
| EIO || device not ready or I/O error
|-
| EINVAL || request requirements not met
|-
| ERESTART || subdevice has not been previously opened
|}

==== Description ====
These requests perform a sequential read from (&lt;code&gt;BDEV_READ&lt;/code&gt;) or write to (&lt;code&gt;BDEV_WRITE&lt;/code&gt;) the given subdevice, using a grant and size of the buffer that is used as destination or source of the data, respectively. Upon success, the number of bytes read or written is returned, which may be less than the requested number of bytes (or even zero) if the end of the subdevice was encountered during the transfer.

Drivers may use [[Kernel API#SYS_SAFECOPYFROM|sys_safecopyfrom]], [[Kernel API#SYS_SAFECOPYTO|sys_safecopyto]], or
[[Kernel API#SYS_VSAFECOPY|sys_vsafecopy]] to perform the data copying, but they may also choose to map the buffer to its physical address for DMA using either [[Kernel API#SYS_UMAP|sys_umap]] with the VM_GRANT pseudo-segment, or [[Kernel API#SYS_VUMAP|sys_vumap]]. Please note that it is currently impossible to validate the buffer grant's access type when using sys_umap, so use of sys_vumap is preferred.

The &lt;code&gt;BDEV_FLAGS&lt;/code&gt; field may be set to &lt;code&gt;BDEV_NOFLAGS&lt;/code&gt; (0), or consist of a bitwise combination of the following flags:

{| class="wikitable"
! Alias !! Value !! Meaning
|-
| BDEV_FORCEWRITE || 0x1 || ''for write requests:'' do not return until the write has made it to the physical device
|}

The driver may ignore flags that it does not recognize.

=== BDEV_GATHER, BDEV_SCATTER ===

Perform data transfer on a subdevice, using a vector of buffers.

==== Request ====
{| class="wikitable"
! Type
!colspan="4"|BDEV_GATHER / BDEV_SCATTER
|-
|rowspan="7"|'''Fields'''
| BDEV_MINOR || m10_i1 || dev_t || minor device number
|-
| BDEV_COUNT || m10_i2 || int || number of elements in the vector
|-
| BDEV_GRANT || m10_i3 || cp_grant_id_t || grant (READ) for &lt;code&gt;iovec_s_t&lt;/code&gt; vector
|-
| BDEV_FLAGS || m10_i4 || unsigned int || transfer flags
|-
| BDEV_ID || m10_l1 || long || opaque request ID
|-
| BDEV_POS_LO || m10_l2 || u32_t || starting byte position (lower 32 bits)
|-
| BDEV_POS_HI || m10_l3 || u32_t || starting byte position (upper 32 bits)
|}

==== Reply ====
{| class="wikitable"
! Type
!colspan="4"|BDEV_REPLY
|-
|rowspan="2"|'''Fields'''
| BDEV_STATUS || m10_i1 || ssize_t || number of bytes read/written, or negative error code
|-
| BDEV_ID || m10_l1 || long ||  opaque request ID, echoed from the request
|}

==== Error codes ====
{| class="wikitable"
| ENXIO || no such device
|-
| EIO || device not ready or I/O error
|-
| EINVAL || request requirements not met
|-
| ERESTART || subdevice has not been previously opened
|}

==== Description ====
These requests perform a sequential read from (&lt;code&gt;BDEV_GATHER&lt;/code&gt;) or write to (&lt;code&gt;BDEV_SCATTER&lt;/code&gt;) the given subdevice, using a vector of buffer grants and sizes that together make up the full request. The vector is provided by the caller using a (read-only) grant as well, and must contain between 1 and &lt;code&gt;NR_IOREQS&lt;/code&gt; elements, inclusive. The driver will return the actual number of bytes transferred in the &lt;code&gt;BDEV_STATUS&lt;/code&gt; field of the reply.

The vector is an array of structures of type &lt;code&gt;iovec_s_t&lt;/code&gt;, which is defined in &lt;code&gt;&lt;minix/type.h&gt;&lt;/code&gt;. Libblockdriver takes care of copying in the vector from the caller.

See [[#BDEV_READ|above]] for notes on performing data copies, and for possible values of the &lt;code&gt;BDEV_FLAGS&lt;/code&gt; field.

=== BDEV_IOCTL ===

Perform an IOCTL on the driver or a device.

==== Request ====
{| class="wikitable"
! Type
!colspan="4"|BDEV_IOCTL
|-
|rowspan="4"|'''Fields'''
| BDEV_MINOR || m10_i1 || dev_t || minor device number
|-
| BDEV_REQUEST || m10_i2 || unsigned int || I/O control request
|-
| BDEV_GRANT || m10_i3 || cp_grant_id_t || grant (READ and/or WRITE) for buffer
|-
| BDEV_ID || m10_l1 || long || opaque request ID
|}

==== Reply ====
{| class="wikitable"
! Type
!colspan="4"|BDEV_REPLY
|-
|rowspan="2"|'''Fields'''
| BDEV_STATUS || m10_i1 || int || nonnegative result value (typically OK), or negative error code
|-
| BDEV_ID || m10_l1 || long ||  opaque request ID, echoed from the request
|}

==== Error codes ====
{| class="wikitable"
| ENXIO || no such device
|-
| EIO || device not ready or I/O error
|-
| ENOTTY || request not supported on this device
|-
| ERESTART || subdevice has not been previously opened
|}

==== Description ====
This request tells the driver to perform an ioctl, which may affect the entire driver or the device identified by the given subdevice. A minor device number for an opened subdevice must be provided even for requests that are driver-wide. The interpretation of ioctls is custom to the block driver type.

A grant may or may not be provided for ioctls that do not have associated data. If it is not provided, &lt;code&gt;BDEV_GRANT&lt;/code&gt; should be set to &lt;code&gt;GRANT_INVALID&lt;/code&gt;.

== Disk drivers ==

The following extra information is provided for writers of disk block drivers in particular.

=== Partitions and subpartitions ===

In the case of disk drivers, subdevices can generally refer to devices, partitions on those devices, or subpartitions on those partitions. Libblockdriver provides code to read and parse (sub)partition tables, but it expects one of two common minor device numbering schemes to be used by the disk driver: the scheme used by the floppy driver, and the scheme used by hard disk drivers. The latter scheme supports up to eight devices per driver, four partitions per device, and four subpartitions per partition.

If the driver supports partitions, the driver is expected to read in and parse partition tables during the initial device open, even if no device or medium change took place. Changes to the on-device partition tables will not become visible until the device is fully closed first, or unless the &lt;code&gt;DIOCSETP&lt;/code&gt; ioctl is used to modify partition tables in memory. When rereading partitions from the device, any previous in-memory modifications made with &lt;code&gt;DIOCSETP&lt;/code&gt; are to be forgotten. It is recommended that partition tables be read in ''only'' during the initial device open, so as not to confuse parties that already have (sub)partitions open.

With all current drivers, it is possible to open minor device numbers that map to valid but nonexistent partitions and subpartitions. This allows a caller to use &lt;code&gt;DIOCSETP&lt;/code&gt; to make the driver's in-memory partition information match newly written on-device partition, even when the device is also open by another party. This feature is not very useful and somewhat dangerous, and may be changed in the future. In any case, &lt;code&gt;DIOCGETP&lt;/code&gt; should return a size of zero for nonexistent (sub)partitions, and any transfer requests on such (sub)partitions should either return EOF or an error.

Care must be taken with &lt;code&gt;DIOCSETP&lt;/code&gt; requests of which the sum of base and size exceed the medium size. Libblockdriver currently does and can not do so; this is a design flaw.

=== Disk transfers ===

For generic disk drivers, it is recommended for compatibility reasons that total request sizes of 512-byte multiples be supported, even if the medium sector size is larger.

=== Disk IOCTLs ===

The ioctl definitions and structures related to disk drivers can be found in &lt;code&gt;&amp;lt;sys/ioc_disk.h&gt;&amp;gt;&lt;/code&gt;.

The driver should implement the following ioctl requests: &lt;code&gt;DIOCGETP&lt;/code&gt;, &lt;code&gt;DIOCSETP&lt;/code&gt;, &lt;code&gt;DIOCFLUSH&lt;/code&gt;, &lt;code&gt;DIOCOPENCT&lt;/code&gt;. The driver may implement the following ioctl requests: &lt;code&gt;DIOCGETWC&lt;/code&gt;, &lt;code&gt;DIOCSETWC&lt;/code&gt;, &lt;code&gt;DIOCEJECT&lt;/code&gt;, &lt;code&gt;DIOCTIMEOUT&lt;/code&gt;.

The &lt;code&gt;DIOCGETP&lt;/code&gt; ioctl may be used to obtain the base, size, and geometry of a (sub)device. Geometry data may be faked if the device does not have real geometry. The &lt;code&gt;DIOCSETP&lt;/code&gt; ioctl sets the base and size of a subdevice; its effects are temporary and in-memory only. Both these calls make use of a ''struct partition'' structure that is defined in &lt;code&gt;&amp;lt;minix/partition.h&gt;&amp;gt;&lt;/code&gt;.

The &lt;code&gt;DIOCFLUSH&lt;/code&gt; ioctl tells a device to flush its write cache, returning only once this operation has completed. The &lt;code&gt;DIOCSETWC&lt;/code&gt; ioctl disables or enables the device's write cache, depending on whether the integer value passed in is zero or nonzero, respectively. On some devices, disabling the write cache also invokes a cache flush. The &lt;code&gt;DIOCGETWC&lt;/code&gt; ioctl retrieves the current state of the device's write cache, copying back a value of 1 if it is enabled  and a value of 0 if it is disabled.

The &lt;code&gt;DIOCOPENCT&lt;/code&gt; ioctl allows applications to request the open count of a particular device. An integer that contains the open count of the device is copied to the caller.

The &lt;code&gt;DIOCEJECT&lt;/code&gt; ioctl tells the driver to eject the medium from a device, if possible. There is no matching call to request the device to load a medium.

The &lt;code&gt;DIOCTIMEOUT&lt;/code&gt; ioctl sets the driver's command timeout, in clock ticks. The previous command timeout is copied back to the caller. A timeout of 0 signifies the driver default timeout. It is up to the driver to decide whether this is a device-specific operation or not.</text>
      <sha1>7twq0mi6k8mgcutcxx363fh8khoifxp</sha1>
    </revision>
  </page>
  <page>
    <title>Overview of Minix Servers</title>
    <ns>0</ns>
    <id>73</id>
    <revision>
      <id>94</id>
      <parentid>93</parentid>
      <timestamp>2021-08-28T11:52:22Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>fix link</comment>
      <origin>94</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1571" sha1="73u49fuvzcr1uixr7g1eki5duk1f0kg" xml:space="preserve">System components loaded in boot image:
* '''kernel''': Kernel + clock + system (+ idle + asyncm) + IPC
* '''pm''': Process manager
* '''[[VFS Internals|vfs]]''': Virtual File system
* '''rs''': Reincarnation Server - (re)starts servers and drivers
* '''memory''': RAM disk driver
* '''sched''': Scheduler server
* '''tty''': Console and keyboard driver
* '''ds''': Data Store Server
* '''[[VM Internals|vm]]''': Virtual Memory manager
* '''mib''': Management Information Service server - handles sysctl
* '''pfs''': Pipe File System server
* '''mfs''': Minix File System server - for the ramdisk
* '''init''': parent of all user processes

Loaded by /etc/rc:
* '''pci''': PCI bus driver
* '''input''': Keyboard/mouse input server (/dev/kbdX, dev/mouseX)
* '''pckbd''': Keyboard driver
* '''floppy''': Floppy driver(if booted from hard disk) (/dev/fdXpY)
* '''at_wini''' or '''ahci''': Disk controller driver (/dev/cXdYpZsW)
* '''procfs''': Process File System server
* '''is''': Information server (for debug dumps)
* '''readclock.drv''': manipulate the hardware real time clock
* '''devman''':  device manager for hot-plugging of hardware (with devmand daemon) (/sys)
* '''lance''': NIC driver
* '''inet''' or '''lwip''': TCP/IP protocol stack server (/dev/ethX /dev/ipX /dev/tcpX )
* '''random''': Random number generator (/dev/random)
* '''pty''': pseudo terminal driver (/dev/ptypX)
* '''uds''': Unix Domain Sockets driver (for /dev/uds)
* '''ipc''': Sys V IPC server (exists parallel to native minix IPC in kernel)
* '''log''': Buffers log output (/dev/klog)
* ...</text>
      <sha1>73u49fuvzcr1uixr7g1eki5duk1f0kg</sha1>
    </revision>
  </page>
  <page>
    <title>Overview of Minix Userland</title>
    <ns>0</ns>
    <id>74</id>
    <revision>
      <id>96</id>
      <timestamp>2021-08-28T11:56:45Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import overviewofminixuserland</comment>
      <origin>96</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2950" sha1="e3kmborw6w55rn4itof0fpapjvucbs0" xml:space="preserve">The userland is the collection of libraries and executables that users of the operating system use to get work done. They range from basic system utilities (cat, ls, sed, shell...) all the way to desktop environments, office suites, web browsers and video games.

== NetBSD userland ==

=== History ===

Since Minix 3.2.0, Minix has imported huge amounts of userland from the NetBSD project. The main consequences are :

* the source tree of Minix is the same as NetBSD (with Minix-specific code under the minix/ directory),
* build.sh allows one to cross-compile any version of Minix from almost any POSIX-compatible environment,
* most of NetBSD's userland documentation (libraries, utilities, headers...) and development process applies here,
* Minix looks like NetBSD to the untrained eye.

This replaced the classic Minix userland (which was originally designed to be compatible with Unix V7) to reduce maintenance burden, facilitate porting existing software and modernize the OS.

Remember that the majority of NetBSD userland documentation applies here, so only a cursory description will be provided here.

=== Categories of NetBSD userland ===

NetBSD userland is separated in two : the base system and extra software installed through the pkgsrc package management system. Additional software installed locally by the users don't count.

==== Base system ====

The base system is the collection of essential utilities and libraries bundled with the NetBSD core. This category is further divided in sets, which provides modular functionalities that may not be needed for every use-case (for example, BSD games aren't needed on a web server).

==== pkgsrc ====

The base system only provides enough functionality to make NetBSD self-hosting and thus is quite barren. To add additional programs and servers, the usual way is to use pkgsrc, which is a huge collection of software ported and packaged to NetBSD and others OS.

pkgin provides an interface for pkgsrc easier to use for users, comparable to GNU/Linux distribution package systems.

=== Current state ===

The transition is complete now, but the import process isn't. Progress is tracked at [[Porting NetBSD Userland|Porting NetBSD userland to Minix 3]].

== Minix userland ==

=== History ===

Minix was originally conceived as a teaching tool to circumvent Unix V7 ban on teaching its source code in university classes. It was designed to clone Unix V7 functionality and so Unix userland was reimplemented as part of the project goal.

=== Current state ===

Minix has homegrown utilities and libraries mainly to provide system administration and Minix-specific functions. The source tree layout mirrors that of NetBSD under the minix/ directory.

There are small amounts of legacy Minix userland awaiting replacement one day and some legacy utilities from the old days, who may or may not be useful or even usable, left here mostly because they cause no harm for the time being.</text>
      <sha1>e3kmborw6w55rn4itof0fpapjvucbs0</sha1>
    </revision>
  </page>
  <page>
    <title>Porting Guide</title>
    <ns>0</ns>
    <id>75</id>
    <revision>
      <id>410</id>
      <parentid>98</parentid>
      <timestamp>2022-02-07T18:36:15Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>410</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6932" sha1="3ce3gqnqgklt83gjwvytzhh2k1tdg1c" xml:space="preserve">== Porting Guide Introduction ==

Porting software to MINIX from Linux or FreeBSD is non-trivial in most cases, but not exactly rocket science either. A major part of the work often has to do with altering/extending makefiles or build scripts. Recoding major parts of a piece of software generally is required for only software that does some or all of its work in kernel space. You can help MINIX by porting packages!

For starters, read [[POSIX and Minix]], [Programming in Minix]], and
[[Pkgsrc Guide]]. The [[Wishlist]] may also be helpful for identifying functionality that hasn't been implemented in Minix yet. The information shared on those pages is partially redundant. Those who are new to MINIX may also want to read the [[Porting NetBSD Step by Step|Step by Step porting Guide for NetBSD userland]] page which contains a step-by-step guide for importing and cross-compiling NetBSD userland utilities.

== Porting Posix applications to Minix3 ==

This page shall serve as an entry-point for developers wishing to port POSIX applications (e.g., from Linux) to MINIX 3. A fair number of applications already were ported, thanks to the efforts of our contributors. Before you begin porting any application, check to see if it's already been ported. A list of packages known to compile and work is in pkgsrc in a file called [//git.minix3.org/?p=pkgsrc.git;a=blob_plain;f=minix/limited_list.pbulk;hb=refs/heads/minix-master limited_list.pbulk].

If the application hasn't been ported yet and it doesn't work 'out of the box' via pkgsrc, follow this recipe:

# Post to the MINIX newsgroup, and inform your fellow programmers about your intention.  Perhaps, somebody already is working on your package.
# Attempt to build the package in pkgsrc.
# Modify the source code to make it compile and run on MINIX 3.
# Notify the MINIX 3 maintainers about your success. Notify the upstream maintainers. Perhaps, they would like to include your patches in the original distribution.
# Send in the package for inclusion on the website and/or the official repositories.

== Recommendations for porters ==

=== Use pkgsrc ===

pkgsrc is configured with the right settings to make source code happy. The right defines are set (-D_NETBSD_SOURCE -D_POSIX_SOURCE -D_COMPAT_MINIX) with the right additional libraries (-lcompat_minix -lminlib) as well as dependency checking and patches. So start off on the right foot and start your porting effort with pkgsrc.

=== Configuration ===

As AST points out in his very recommended talk at [//fosdem.org/2010/schedule/events/867 FOSDEM],
most configure scripts are buggy. Have a look at this 
[//www.ibm.com/developerworks/linux/library/l-debcon.html Tutorial on debugging configure].

At the least, you probably will need to add detection of the ''uname'' string returned by MINIX.
That case often can be handled in the same way as other POSIX systems, such as Linux and BSD.

=== Compilation ===

At first, do not implement missing library functions, but only declare them in header files.
That way, you will be able to see which are the most important missing functions, before doing
much work. Based on the missing functions, it then is possible to determine whether or not porting is
feasible. For example, it might not be possible to port programs which use threads or memory-mapped files,
without fundamental changes. Such ports can be delayed until
the required functionality is available in MINIX. In that case, you may add both the port and
the missing features to the [[Wishlist]], specifying that the unavailability of
the latter blocks the former.

If the program can be made to work without the functions/headers, it is usually best to add autoconf checks for the features/headers and then using the generated macros (example: HAVE_SETPGID, etc). This solution is much better than simply adding &lt;code&gt;#if defined(__minix)&lt;/code&gt; everywhere. Using the autoconf feature checks will allow the packages to take advantage of new features in Minix when they are introduced with a simple re-compile (instead of another set of patches to remove &lt;code&gt;#if defined(__minix)&lt;/code&gt;).

=== Linking ===

If you added declarations, as recommended in the previous section, eventually you will receive
a linker error showing which symbols were used but not defined.  That would be the time to
implement those missing library functions, preferably in such a way that they easily can be
moved into the MINIX libraries, later on. The man pages on the
[//www.opengroup.org/onlinepubs/000095399/ Open Group website] are a good source of
information about what such calls should do exactly.

=== Eliminating warnings ===

Warnings emitted by the C compiler are a good source of information on what might be wrong in the
program you ported. It is preferable to eliminate all warnings, as that might save you a great deal
of time on testing. Do attempt to compile your program with the&lt;code&gt;-Wall&lt;/code&gt; and &lt;code&gt;-W&lt;/code&gt; flags, for maximum compiler assistance.

=== Testing ===

Testing and fixing bugs can take considerable time for software with poor portability and software
that uses features missing in MINIX. Often, programs come with test suites that provide a good
starting point.

=== Random notes ===

* Don't comment out code -- use preprocessor conditionals instead. Autoconf feature test definitions are best (example: HAVE_FOO, etc). The &lt;code&gt;__minix&lt;/code&gt; preprocessor symbol indicates when C code is being compiled on MINIX -- avoid &lt;code&gt;__minix&lt;/code&gt; if Minix might one day get the ability to use the code you are blocking out.
* In some Makefiles, "&lt;code&gt;-funsigned-char&lt;/code&gt;" was added to the CFLAGS.
* Try to be as unobtrusive as possible, to enhance your chances for inclusion in the upstream package.
* Please comment your patch inline.
* '''ioctl()''' and '''setsockopt()''' are common sources of portability problems.  Calls may be defined even though they have limited or no implementation; so, you may want to check all of those calls, in advance. In particular, make sure that each call is checked properly for error results.
* The '''recv()''', '''send()''', '''recvfrom()''', '''sendto()''', '''recvmsg()''', and '''sendmsg()''' calls do not support flags on MINIX.
* '''recvmsg()''' and '''sendmsg()''' only support unix domain sockets. Calling these functions with internet sockets will result in an error (return -1 &amp; errno ENOSYS).
* Because there is no dedicated loopback device, it is not possible to have a server listening on ''localhost'' (127.0.0.1). If you encounter that problem, you can listen on '''INADDR_ANY''' instead; but, note that it works only if there is a network connection (note that, for example, the X Window System cannot be started without one). Also, think through the security implications of accepting non-local connections.
* Use the latest version of MINIX. That makes the package more useful; and, provides you with the latest features.</text>
      <sha1>3ce3gqnqgklt83gjwvytzhh2k1tdg1c</sha1>
    </revision>
  </page>
  <page>
    <title>Useful Tools</title>
    <ns>0</ns>
    <id>76</id>
    <revision>
      <id>416</id>
      <parentid>99</parentid>
      <timestamp>2022-02-08T17:38:50Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link and formatting</comment>
      <origin>416</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1932" sha1="brxs7mxwr69wdptpx64egwmynqs7s6y" xml:space="preserve">MINIX comes with several tools that were created to ease configuration 
and development on MINIX that are not part of any standard and are therefore
unlikely to be known to people familiar with other POSIX systems. This page
describes these tools. For more in-depth information consult their man pages.

== dev2name ==

The ''dev2name'' tool converts major/minor device numbers into device names.

== dosread and friends ==

''dosread'', ''doswrite'' and ''dosdir'' allow one to manipulate FAT filesystems.
Such tools are needed because they cannot (yet) be mounted.

== isoread and friends ==

''isoread'' and ''isodir'' allow one to read files from CD-ROM ISO filesystems.
These tools were created before it was possible to mount such filesystems,
but can still occasionally be useful to obtain files quickly or test whether
a given device has an ISO filesystem.

== netconf ==

The ''netconf'' utility allows one to change the networking configuration
from the options you selected when installing. It allows disable networking,
select a different network card (PCI cards are detected, if you have a 
non-PCI card you should find out what type of card you have first) and allows
one to enable or disable DHCP.

== pkgin ==

''pkgin'' is available on MINIX 3.1.8 onwards. It allows one to install binary pkgsrc packages. Use ''pkgin up'' before the first use, then ''pkgin av'' to find packages and ''pkgin in'' to install them.

== release.sh ==

This script is not installed, but found in the tools sub-directory of the source tree. It can be used to create ISO images for installing MINIX. The script is mostly self-documenting, but it may give you some errors due to changes in the pkgsrc deployment that have been made over time.

== Obsolete tools ==

In addition to these tools which are useful nowadays, MINIX used several
other specific tools. Theirs descriptions have been moved into
[[Obsolete Tools| a separate page]].</text>
      <sha1>brxs7mxwr69wdptpx64egwmynqs7s6y</sha1>
    </revision>
  </page>
  <page>
    <title>Porting NetBSD Step by Step</title>
    <ns>0</ns>
    <id>77</id>
    <revision>
      <id>101</id>
      <timestamp>2021-08-28T13:41:21Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import portingnetbsdstepbystep</comment>
      <origin>101</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7235" sha1="qqdfax9cdr4se46r5usfw05pbd3tdzm" xml:space="preserve">Step by Step porting Guide for NetBSD userland written by zacts.

Note: This tutorial assumes familiarity with the UNIX command line, git,
email, and how to install an OS into a virtual machine. Also, I may
update my blog entries from time to time for updates.

Importing NetBSD commands into minix3 is simpler than you might initially
think. Once you understand how the process works of modifying the correct files, crossbuilding the
'''minix.git''' repo, and using git to format and send a patch, you should
have no problem importing new simple NetBSD commands.

For this tutorial, you will want to read the wiki page describing how to import NetBSD
commands into minix3 [[Porting NetBSD Userland|Porting the NetBSD Userland]].

== Step 1: Clone the minix.git repo ==

First, we must clone the '''minix.git''' repo by issuing the command:

 git clone git:''git.minix3.org/minix.git

== Step 2: Checkout the latest minix3 netbsd.git repo ==

We now want to clone the latest minix3 '''netbsd.git''' repo.

 git clone git://git.minix3.org/netbsd.git

Note: you may also use

 git remote add netbsd git://git.minix3.org/netbsd.git
 git remote update


within the minix repo to keep everything together.

== Step 3: Choose a NetBSD utility to import into minix3 ==

For this step, decide on a NetBSD utility you want to import into minix3.
You should check the official wiki guide listed above, [[Porting NetBSD Userland|Porting the NetBSD Userland]], 
and scroll down to make sure you aren't duplicating work that someone
else is working on. Another consideration is to know your skill level,
in terms of understanding C, UNIX, POSIX, and the Minix3 codebase.
You may want to chat with the Minix3 developers on the official minix3
mailing list if you have questions regarding which command you should import,
and what all would be involved in doing that:
[//groups.google.com/forum/#!forum/Minix3 Minix3 Google Groups].

== Step 4: Copy the NetBSD command into the proper subdirectory of minix/ ==

Next we will actually copy the NetBSD command into the proper subdirectory of the locally cloned minix repo. 
There are several possibilities here; the command will probably be in either the &lt;code&gt;netbsd/bin&lt;/code&gt;, &lt;code&gt;netbsd/usr.bin&lt;/code&gt;, &lt;code&gt;netbsd/usr.sbin&lt;/code&gt; subdirectories. In some cases the tool may be found in one of the &lt;code&gt;extern/*&lt;/code&gt; subdirectories.
When you find out which directory your command is located, you must then copy it into the corresponding &lt;code&gt;minix/bin&lt;/code&gt;,
&lt;code&gt;minix/usr.bin&lt;/code&gt;, &lt;code&gt;minix/usr.sbin&lt;/code&gt;, &lt;code&gt;extern/*&lt;/code&gt; directory.

== Step 5: Modify the minix ./bin, ./usr.bin, or ./usr.sbin Makefile ==

Now we must add the newly imported command into the Makefile for the corresponding &lt;code&gt;minix/bin&lt;/code&gt;,
&lt;code&gt;minix/usr.bin&lt;/code&gt;, or &lt;code&gt;minix/usr.sbin&lt;/code&gt; directory that we copied the NetBSD command into in the previous step.

'''These commands must be listed in alphabetical order within the Makefile.'''

== Step 6: Remove the old minix3 command from minix/commands ==

At this point you will need to remove the directory within &lt;code&gt;minix/minix/commands&lt;/code&gt; containing the NetBSD command, and you will also want to remove the command's entry in the &lt;code&gt;minix/minix/commands/Makefile&lt;/code&gt;.

== Step 7: Remove the old man pages for the now removed minix3 command ==

Find if the command has a &lt;code&gt;man&lt;/code&gt; page listed within one of the &lt;code&gt;minix/minix/man/&lt;/code&gt; subdirectories, and then remove the &lt;code&gt;.1&lt;/code&gt; &lt;code&gt;man&lt;/code&gt; page. Also, you will need to remove the corresponding &lt;code&gt;man&lt;/code&gt; page entry from the Makefile in the same directory of the old &lt;code&gt;man&lt;/code&gt; page.

== Step 8: Edit ./distrib/sets/lists/minix-*/mi ==

Add entries for the proper locations of the imported NetBSD
command. Also, make sure to put the word &lt;code&gt;obsolete&lt;/code&gt; after the entry for the old
command unless the new command's location is the same as the previous command's
location, and if both the old and new command share the same name.

Note that since the Minix 3.3.0, the single mi file has been split among multiple &lt;code&gt;minix-*/mi&lt;/code&gt; files.  You will have to find the right subfolder to edit the mi file for your file(s) that changed.

== Step 9: git grep for old invocations of the previous command. ==

If the old minix command had a different install path, i.e. &lt;code&gt;/usr/bin/sleep&lt;/code&gt;
instead of &lt;code&gt;/bin/sleep&lt;/code&gt;, then &lt;code&gt;git grep&lt;/code&gt; the old path:

 git grep '/usr/bin/sleep'

Remove any old invocations of the old path, unless it is part of a
test suite or another NetBSD command that references the old path in the
original upstream source code for that test suite and/or command.

== Step 10: Crossbuild and test minix.git for x86 ==

Note: This step should work on most Gnu/Linux distros, along with
FreeBSD. For this next step, make sure you have the required build
dependencies installed: '''gcc, g++, gnumake, binutils, zlibc, zlib1g, zlib1g-dev, and curl'''.
If you have any problems ask the &lt;code&gt;minix3@googlegroups.com&lt;/code&gt;
mailing list. (Note: The following example assumes you are running Debian or a Debian
variant of Linux.)

 sudo apt-get install gcc g++ make binutils zlibc zlib1g zlib1g-dev curl

Next, you will want to cross build minix with the new
changes. &lt;code&gt;cd&lt;/code&gt; into the minix directory and issue the following
command:

 ./releasetools/x86_cdimage.sh

If you have any build failures, either you don't have the required
build dependencies installed, you don't have an internet connection
(the crossbuild fetches programs during the build), or there are Minix3
related issues with porting your command. For the latter, sending a well
researched question to the '''minix3 google groups mailing list''' with a log
of the end of your
build can be helpful. The newly built ISO will be located in the &lt;code&gt;./minix&lt;/code&gt;
directory.

== Step 11: Test the x86 minix3 image in a virtual machine. ==

Now we want to test the x86 minix3 image within a virtual machine.
Boot your newly built ISO image into a virtual machine, such as VirtualBox,
and then test the install. If it installs, then you may reboot the virtual
machine, and try booting into it without the ISO image.
Now you want to invoke the command with
as many of the command's flags as possible. view the &lt;code&gt;man&lt;/code&gt; page for the newly
imported command.  Now, you will want invoke the &lt;code&gt;minix-posix&lt;/code&gt; test suite within
the virtual machine.

 /usr/tests/minix-posix/run

If the tests for your command pass, then you are good to go. Otherwise,
you may want to send a log of the tests to the mailing list if asked to do so.

== Step 12: git format-patch and git send-email. ==

Finally, once everything is tested use:

&lt;code&gt;
git format-patch --cover-letter
&lt;/code&gt;

to format a patchset to email to the google groups minix-dev mailing list.

Once you look over and review the patches, and create a cover letter, use &lt;code&gt;git send-email&lt;/code&gt; to send your patch
to the &lt;code&gt;minix-dev@googlegroups.com&lt;/code&gt; mailing list. &lt;code&gt;git help send-email&lt;/code&gt; for more details. (Also,
another great resource for help with git is the community [//git-scm.com/book Pro Git] book available from the git homepage.)</text>
      <sha1>qqdfax9cdr4se46r5usfw05pbd3tdzm</sha1>
    </revision>
  </page>
  <page>
    <title>User:Stux</title>
    <ns>2</ns>
    <id>78</id>
    <revision>
      <id>345</id>
      <parentid>170</parentid>
      <timestamp>2021-09-14T14:17:37Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>add maintenance stuff</comment>
      <origin>345</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="256" sha1="7i95z248vhtyu6o8rp2qmkenxfdmn76" xml:space="preserve">Hello Minix fans.
* http://hrwiki.org/wiki/User:Stux
* http://en.wikipedia.org/wiki/User:Stux
* https://wiki.minix3.org/doku.php

== Maintenance Notes ==

=== Templates ===
* Template link: {{t|t}}
* TODO, DONE, WONTDO: {{t|TODO}}, {{t|DONE}}, {{t|WONTDO}}</text>
      <sha1>7i95z248vhtyu6o8rp2qmkenxfdmn76</sha1>
    </revision>
  </page>
  <page>
    <title>User talk:Stux</title>
    <ns>3</ns>
    <id>79</id>
    <revision>
      <id>103</id>
      <timestamp>2021-08-31T22:15:40Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>feel free to leave a message....</comment>
      <origin>103</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="45" sha1="lpwdop3k42zl32u91trp7toyafm2v3w" xml:space="preserve">Please leave a message after the beep...
----</text>
      <sha1>lpwdop3k42zl32u91trp7toyafm2v3w</sha1>
    </revision>
  </page>
  <page>
    <title>Pkgsrc Guide</title>
    <ns>0</ns>
    <id>80</id>
    <revision>
      <id>242</id>
      <parentid>104</parentid>
      <timestamp>2021-09-10T17:04:02Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>fix link</comment>
      <origin>242</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4803" sha1="rv2f2nnyli4bi6iuffa3s0dqgxlpoei" xml:space="preserve">&lt;div round info&gt;
'''Stale page'''

This guide refers to an unofficial pkgsrc mirror on github which appears to have fallen out of date. The official git.minix3.org repositories should be used instead. The instructions need to be updated.
&lt;/div&gt;

== About ==

MINIX uses [//pkgsrc.org/ pkgsrc] to [//en.wikipedia.org/wiki/Porting port] and maintain packages of third-party software. This guide will introduce you to the basics.

== Getting started ==

1. [[Tracking Current|Update]] MINIX periodically

2. [[Installing Source Packages|Learn]] about pkgsrc

== Going online ==

1. [//github.com/ Create an account] and [//help.github.com/set-up-git-redirect add SSH keys at GitHub]

2. &lt;del&gt;[//help.github.com/fork-a-repo/ Fork] the MINIX 3 [//github.com/minix3/pkgsrc/ pkgsrc repository] on GitHub&lt;/del&gt; You should clone the official repository from git.minix3.org instead. Please update these instructions.

&lt;del&gt;This makes your repositories similar, so that updates will be quick.&lt;/del&gt;

== Setting up ==

1. Download your pkgsrc repository

First, download the official pkgsrc.

&lt;pre&gt;
cd /usr

make pkgsrc
&lt;/pre&gt;

Then, add your remote repository.

&lt;pre&gt;
cd /usr/pkgsrc

git remote add me git@github.com:you/pkgsrc.git
&lt;/pre&gt;

2. Create your minix-master branch

&lt;pre&gt;
git fetch me

git branch my-minix-master me/minix-master
&lt;/pre&gt;

3. Check-out your minix-master branch locally

&lt;pre&gt;
git checkout my-minix-master
&lt;/pre&gt;

== Starting to port a package ==

Found something in pkgsrc that you want to port to MINIX?

# Create a new branch from it to host your work
&lt;pre&gt;
git checkout -b my-package
&lt;/pre&gt;
# Install package tools
&lt;pre&gt;
# cd /usr/pkgsrc/pkgtools/pkgdiff
# bmake install
&lt;/pre&gt;
This installs several tools we'll be using.

== Making changes ==

# Get the package ready for editing

&lt;pre&gt;
cd /usr/pkgsrc/[category]/[package]

bmake patch
&lt;/pre&gt;

This applies patches, but doesn't build. Build results aren't usable for patches.

# Go to the package's work directory

&lt;pre&gt;
cd /usr/pkgsrc/work/[category]/[package]/work/[package name]
&lt;/pre&gt;

# Edit files

&lt;pre&gt;
pkgvi somefile.c
&lt;/pre&gt;

Use &lt;code&gt;EDITOR=nano pkgvi&lt;/code&gt; to use GNU nano instead of nvi.

# Go to the package directory

&lt;pre&gt;
cd /usr/pkgsrc/[category]/[package]
&lt;/pre&gt;

# Make patches

&lt;pre&gt;
mkpatches

rm patches/*.orig
&lt;/pre&gt;

# Make checksums

&lt;pre&gt;
bmake makepatchsum
&lt;/pre&gt;

# Test your changes

&lt;pre&gt;
bmake clean

bmake
&lt;/pre&gt;

# Save your work

&lt;pre&gt;
cd /usr/pkgsrc/[category]/[package]

git add distinfo patches

git commit
&lt;/pre&gt;

The commit message should provide a summary of the change. The first line of the commit message should be in the form "[category]/[package]: summary of change." Example: "print/ghostscript: add missing bsd.prefs.mk include". If it's a complex change, the commit message should provide additional explanation.

== Putting it online ==

Push this branch to your remote repository.

&lt;pre&gt;
git push me my-package
&lt;/pre&gt;

This will let others test your changes and later include them in pkgsrc.

== Telling people about it ==

When your branch is ready, let people know by posting to the Google Group.

Here's an example:

&lt;pre&gt;
Subject: [package] Ported

Hi,

I've ported [package], and my branch "my-package" is ready for testing at: https://github.com/[me]/pkgsrc.git

Thanks
&lt;/pre&gt;

When the MINIX team agrees that the package changes in your GitHub repository, they will copy the changes into MINIX's pkgsrc repository.

== Updating your changes ==

As changes in MINIX's pkgsrc repository become available, updating your repository allows your changes to merge cleanly in the future.

1. Update the official branch

&lt;pre&gt;
git checkout minix-master

cd /usr

make pkgsrc-update
&lt;/pre&gt;

2. Make your minix-master branch identical to the official one

&lt;pre&gt;
cd /usr/pkgsrc

git checkout my-minix-master

git rebase minix-master
&lt;/pre&gt;

3. Merge changes from either the official into your own

&lt;pre&gt;
git checkout my-package-port

git merge my-minix-master
&lt;/pre&gt;

4. Push your local branch up to your repository

&lt;pre&gt;
git push me my-package
&lt;/pre&gt;

== Problems? ==

=== Stuck or confused? ===

Please do your best to let people know what's happening. If you're having trouble or have an idea, then please tell someone.

The IRC channel and the Google Group are the best places for talking with the rest of the community.

=== Need to use https:// instead of git://? ===

If you use HTTPS and have an SSL-related problem when you fetch, then please use the following steps to install SSL certificates.

&lt;pre&gt;
cd /usr/pkgsrc/security/mozilla-rootcerts

bmake install

cd /usr/pkg/etc/openssl/certs

mozilla-rootcerts extract

mozilla-rootcerts rehash
&lt;/pre&gt;

== Resources ==

If you'd like to learn more about pkgsrc or need help, there are good places to go [[Resources|on this page]].</text>
      <sha1>rv2f2nnyli4bi6iuffa3s0dqgxlpoei</sha1>
    </revision>
  </page>
  <page>
    <title>Syncing Pkgsrc</title>
    <ns>0</ns>
    <id>81</id>
    <revision>
      <id>105</id>
      <timestamp>2021-09-01T16:38:00Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import syncpkgsrc</comment>
      <origin>105</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6117" sha1="4glkxxplyjlvz19tomqkj3ncxfl6huv" xml:space="preserve">&lt;div round info&gt;
This is a guide intended for Minix developers. If you just want to install software on Minix and you ended up on this page, you might want to look at the [[Installing Binary Packages]] and [[Installing Source Packages]] user guides.
&lt;/div&gt;

== Overview ==

Minix uses pkgsrc as its primary package manager, and pkgsrc is generally distributed in source form via a version control system. Most people on non-Minix systems use CVS to checkout the latest copy from the NetBSD project. Since all of the Minix specific changes and patches haven't made their way into the NetBSD version of pkgsrc yet, we maintain our version of the pkgsrc tree in own repository on [//git.minix3.org/?p=pkgsrc.git;a=summary git.minix3.org]. On a semi-regular basis we update our pkgsrc tree by merging in the changes from the NetBSD (upstream) version. Upstream uses CVS and we use git. Luckily, the folks at DragonFlyBSD maintain a git mirror of NetBSD's pkgsrc repository ([//gitweb.dragonflybsd.org/pkgsrcv2.git/shortlog/refs/heads/master here]). To update our repository, we just merge the changes from DragonFlyBSD's mirror.

== Key Concepts ==

The &lt;code&gt;master&lt;/code&gt; branch of Minix's [//git.minix3.org/?p=pkgsrc.git;a=summary pkgsrc.git] repository contains a pristine copy of the pkgsrc repository. The &lt;code&gt;minix-master&lt;/code&gt; branch contains a copy of the &lt;code&gt;master&lt;/code&gt; branch with the minix specific changes applied. We are going to be fetching the master branch from DragonFlyBSD's [//gitweb.dragonflybsd.org/pkgsrcv2.git/shortlog/refs/heads/master pkgsrcv2.git] repository and merging it into the &lt;code&gt;master&lt;/code&gt; branch of Minix's pkgsrc.git repository. From there we will merge the &lt;code&gt;master&lt;/code&gt; branch of Minix's pkgsrc.git into the &lt;code&gt;minix-master&lt;/code&gt; branch of Minix's pkgsrc.git and deal with any merge conflicts.

== The Steps ==

Get a copy of Minix's pkgsrc.git
&lt;pre&gt;
git clone gitosis@git.minix3.org:pkgsrc
cd pkgsrc
git checkout master
&lt;/pre&gt;

Add the DragonFlyBSD repository and get the changes from upstream.
&lt;pre&gt;
git remote add upstream-pkgsrc git://git.dragonflybsd.org/pkgsrcv2.git
git fetch upstream-pkgsrc
&lt;/pre&gt;

Merge the changes into master. Note, Minix's master branch mirrors DragonFlyBSD's master branch. If you get any merge conflicts at this stage, you're doing something wrong.
&lt;pre&gt;
git merge upstream-pkgsrc/master
git push
git pull
&lt;/pre&gt;

Merge the changes from Minix's master branch into the minix-master branch.
&lt;pre&gt;
git checkout minix-master
git pull
git merge master
&lt;/pre&gt;

git will tell you if automerge failed. You can use &lt;code&gt;git status&lt;/code&gt; to see the conflicts. You should fix the conflict(s), then &lt;code&gt;git add&lt;/code&gt; the changed files
&lt;pre&gt;
git add -v path/to/fixed/files
git status
&lt;/pre&gt;

When &lt;code&gt;git status&lt;/code&gt; shows that you have no more work to do and a bulk build succeeds, then you can do a commit.
&lt;pre&gt;
git commit
&lt;/pre&gt;

When you have completed the merge and done sufficient testing, you can push the changes.
&lt;pre&gt;
git push
&lt;/pre&gt;


== Hints ==

* Check the pkgsrc [[Pkgsrc Upstreaming|upstreaming]] page to see if any patches or package changes have been upstreamed since the last sync.

* Once you do the &lt;code&gt;git merge master&lt;/code&gt; step, do &lt;code&gt;git status&lt;/code&gt; to see the conflicts. A good conflict resolution strategy is to go through the list, beginning by merging changes in mk/, then moving on to toolchain packages, libraries, and finally applications.

* If you are a contributor with read-only access to minix3.org, you can follow the above steps in your private repository to get the upstream (DragonFlyBSD's &lt;code&gt;pkgsrcv2.git&lt;/code&gt;) reference as the &lt;code&gt;master&lt;/code&gt; branch, since as explained above it will merge with fast-forwarding. However, you must wait for the MINIX3 developers to perform the merge into the &lt;code&gt;minix-master&lt;/code&gt; branch.

== Common Merge Issues ==

=== New "Untracked files" with long names appear after the merge ===

Symptom:
&lt;pre&gt;
# git status
...
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#	patch-lib_libucsi_dvb_rnt__rar__over__dvb__stream__descripto
...
&lt;/pre&gt;

Cause: Minix FS has a NAME_MAX of 60. Filenames longer than 60 characters are truncated.

Solution:
&lt;pre&gt;
# mv patch-lib_libucsi_dvb_rnt__rar__over__dvb__stream__descripto patch-too-long-ab
# git rm patch-lib_libucsi_dvb_rnt__rar__over__dvb__stream__descripto*
rm 'multimedia/dvb-apps/patches/patch-lib_libucsi_dvb_rnt__rar__over__dvb__stream__descriptor.h'
# git add patch-too-long-ab
&lt;/pre&gt;
Don't forget to do 'bmake mdi' and 'git add distinfo' in the package's directory.


=== Patching Failure ===

Symptom:
&lt;pre&gt;
# bmake patch
...
=&gt; Applying pkgsrc patches for gcc44-4.4.7
2 out of 5 hunks failed--saving rejects to gcc/config.gcc.rej
Patch /usr/pkgsrc/lang/gcc44/patches/patch-ac failed
...
&lt;/pre&gt;

Cause: If upstream did a version bump, some patches might not apply to the new version.

Solution 1: Look at the patch and the file it's trying to patch. If the patch was applied upstream, you can remove it.
&lt;pre&gt;
# less patches/patch-ac
# less /usr/tmp/work/lang/gcc44/work/gcc44-4.4.7/gcc/config.gcc
# git rm patches/patch-ac
# bmake mdi
# git add distinfo
&lt;/pre&gt;

Solution 2: if it looks like it is simply a matter of the line numbers changing due to code being added/removed, you can set PATCH_FUZZ_FACTOR to cause patch to try harder. If it succeeds, you will need to remake the patch.
&lt;pre&gt;
# PATCH_FUZZ_FACTOR=-F2 bmake patch
...
# cd /usr/tmp/work/lang/gcc44/work/gcc44-4.4.7 &amp;&amp; diff -bu gcc/config.gcc.orig gcc/config.gcc &gt; /usr/pkgsrc/lang/gcc44/patches/patch-ac
# cd /usr/pkgsrc/lang/gcc44/
# bmake mdi
# git add distinfo patches/patch-ac
&lt;/pre&gt;

Solution 3: If all else fails, manually edit the file and generate a new patch.
&lt;pre&gt;
# bmake extract
...
# pkgvi /usr/tmp/work/lang/gcc44/work/gcc44-4.4.7/gcc/config.gcc
# cd /usr/tmp/work/lang/gcc44/work/gcc44-4.4.7
# diff -bu gcc/config.gcc.orig gcc/config.gcc &gt; /usr/pkgsrc/lang/gcc44/patches/patch-ac
# cd /usr/pkgsrc/lang/gcc44/
# bmake mdi
# git add distinfo patches/patch-ac
&lt;/pre&gt;</text>
      <sha1>4glkxxplyjlvz19tomqkj3ncxfl6huv</sha1>
    </revision>
  </page>
  <page>
    <title>Pkgsrc Upstreaming</title>
    <ns>0</ns>
    <id>82</id>
    <revision>
      <id>422</id>
      <parentid>388</parentid>
      <timestamp>2022-02-08T18:03:15Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Peter moved page [[Pkgsrc upstreaming]] to [[Pkgsrc Upstreaming]]: Fix typo</comment>
      <origin>388</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3440" sha1="9zz48w4a4nroulajb2akaestqcu9dyq" xml:space="preserve">== Overview ==

Minix uses pkgsrc as its primary package manager. The ''master'' branch of Minix's [//git.minix3.org/?p=pkgsrc.git;a=summary pkgsrc.git] repository contains a pristine copy of the official pkgsrc repository. The ''minix-master'' branch contains a copy of the ''master'' branch with the Minix specific changes applied. The goal is to get all of the Minix specific changes into the official upstream pkgsrc repository which is developed and maintained by the NetBSD project. However, there is some work to be done to get the changes in shape for upstream acceptance. This page is used to organize the upstreaming effort.

== Upstreaming Status ==

=== Status of pkgsrc Minix Support ===

The core pkgsrc infrastructure was modified to work on Minix. There are a number of files and core packages that need to be upstreamed. Those are listed below.

==== TODO / In Progress ====

There are some oldish bug reports that need to be resolved. [[Contributors:Thomas Cort|tcort]] is working on them with upstream. Just put "Minix" into the Search Text on the PR query form: [//www.netbsd.org/support/query-pr.html]

{| class="wikitable"
! File/Package !! Comments
|-
| databases/sqlite3 || Instead of applying the submitted patch, the upstream developer typed in the ifdef. This resulted in a typo "__minux" instead of "__minix". I'll have to submit a fix for that.
|-
| devel/libtool || High priority since this package is always a problem when syncing pkgsrc. I've joined the libtool-patches mailing list and sent in the patches.
|-
| games/nethack-lib || [//git.minix3.org/?p=minix.git;a=commit;h=7b9673cd55ccac740282c6eae9144710f078baf3 Imported usr.bin/col] from NetBSD (was required for the build), sent this [//tomcort.com/minix/nethack-minix.patch patch] to "The_DevTeam" (#H2882).
|-
| security/openssl || Fairly high priority since this package is sometimes a problem when syncing pkgsrc. I'm preparing the patches to submit.
|}

==== Upstreamed ====

The following files/packages have been upstreamed to pkgsrc since the last time we [[Syncing Pkgsrc|synced]] with upstream.

{| class="wikitable"
! File/Package
|-
| devel/rcs
|}

The following files/packages have Minix specific changes that have been upstreamed to the original authors. In most cases, after the next sync we will be able to drop some or all of the minix specific changes.

{| class="wikitable"
!File/Package !! Comments
|-
| editors/ed || Next version should work on Minix without changes. The pkgsrc maintainer said he would do a version bump soon. Remember to drop the Minix changes next sync with upstream pkgsrc.
|-
| editors/vim-share || Patch accepted, fix in version 7.3.1007
|-
| devel/ncurses || Patch accepted upstream -- it's in the source snapshots. With the next release, we should be able to drop all Minix specific changes for this package in pkgsrc. Unsure when the next release will be and when pkgsrc will adopt it.
|-
| shells/tcsh || Patches accepted upstream (Bug Report #[//bugs.gw.com/view.php?id=240 240]).  With the next release, we should be able to drop all Minix specific changes for this package in pkgsrc.
|}

== Status of Individual Packages ==

You can generate a list of packages with minix specific changes using this command:
&lt;pre&gt;
$ git diff master minix-master | egrep "\+\+\+|\-\-\-) " | cut -d ' ' -f 2 | egrep -v "(/dev/null|\.gitignore)" | cut -d '/' -f 2 ||| sort | uniq | egrep -v "mk|minix|bootstrap)"
&lt;/pre&gt;</text>
      <sha1>9zz48w4a4nroulajb2akaestqcu9dyq</sha1>
    </revision>
  </page>
  <page>
    <title>Pkgsrc on ARM</title>
    <ns>0</ns>
    <id>83</id>
    <revision>
      <id>107</id>
      <timestamp>2021-09-01T16:56:28Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import pkgsrconarm</comment>
      <origin>107</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3748" sha1="p2v71nozxkdxj2k7gcn12n1kgxelojz" xml:space="preserve">== Overview ==

Right now, no pkgsrc packages are available on the ARM port for MINIX3. Of course we would love to have pkgsrc on ARM - in fact, it will be a necessity for many real-world uses of MINIX3 on the Beagle platforms. However, current technical shortcomings prevent this.

Ideally, pkgsrc would be crosscompiled with MINIX3-on-ARM as target, just like MINIX3 itself needs to be crosscompiled for ARM. However, the main problem with this approach is that crosscompiling pkgsrc is not yet supported properly by pkgsrc itself. This is a larger problem that would have to be, and hopefully eventually will be, addressed by the NetBSD/pkgsrc community. It is unlikely that we can pull this off ourselves.

Crosscompiling is necessary not only to compile the packages for the ARM platform, but also to compile them for MINIX3; thus, compiling from Linux on ARM as host platform would still require crosscompilation. This means that the only way to avoid having to crosscompile at all, is to compile the pkgsrc packages natively from the MINIX3-on-ARM platform itself (as is done for MINIX3-on-x86 as well). With the current situation, this gives us two options.

The first option is to compile the packages from the beagle* hardware itself. This would probably have to involve an external (USB) hard disk connected to the BeagleBone Black/White, formatted with ext2 to allow for long file names, to host the entire pkgsrc environment. We currently do have a USB stack and mass storage driver for the BBB/BBW, so doing so should not require extensions to the current system. However, it is possible that the beagle* hardware is too weak to pull this off in any reasonable time frame (if at all, due to, say, too little RAM); we simply don't know, and won't know until somebody actually tries.

The second option is to use the [[Minix on Linaro QEMU ARM|Linaro QEMU emulator]] with its BeagleXM support. This would potentially be much faster than on real hardware. However, it would be difficult (even though not necessarily impossible) to do this without networking support: pkgsrc generally downloads whatever it needs on the fly from its sources, and without networking support, one would have to make sure that all needed components are available on the local storage in the emulator already. MINIX3 currently does not support the emulator's USB host controller, nor its USB network device. It should be possible to implement those. It may also be possible to find another way to get networking to work, e.g., by somehow enabling virtio-net for the emulator.

In both cases, it is likely that many problems will have to be solved for the actual pkgsrc compilation process, both for bootstrapping pkgsrc itself and for building packages. After all, none of this has ever been tested. Any progress in any direction would be highly welcome though, and we encourage anyone who takes a shot at this to publish their results, even if partial and ending in problems only.

== Getting started ==

Quoting sambuc on IRC (2016-02-09):

 I would first look to bootstrap pkgsrc on minix/arm. You can take a look at https://github.com/Stichting-MINIX-Research-Foundation/pkgsrc-ng/blob/3.3.0/minix/pbulk-ng.sh to see the exact way we bootstrap on minix/x86
 the first step is to do what is within the lines 270-332
 then you will be able to use bmake to compile anything you want from pkgsrc
 you don't need to build the chroot for now. This is mainly a safety net to ensure a clean environment on minix/x86
 and as those steps take a couple of hours already, even on intel, we copy the chroot, to be able to restart from the step n-1 when needed
 iirc, the strict minimum to do to get bmake &amp; pkgsrc working is line 273-297, then you have bmake available</text>
      <sha1>p2v71nozxkdxj2k7gcn12n1kgxelojz</sha1>
    </revision>
  </page>
  <page>
    <title>Minix on ARM</title>
    <ns>0</ns>
    <id>84</id>
    <revision>
      <id>108</id>
      <timestamp>2021-09-03T11:02:53Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import minixonarm</comment>
      <origin>108</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7839" sha1="anbd9jqpvf57k2blgyxtfh8lri0whfr" xml:space="preserve">This page describes how to build and run Minix/ARM.


== Target ==

The Minix ARM port targets the
[//beagleboard.org/hardware-xm BeagleBoard-xM] and its QEMU based emulator, 
the [//beagleboard.org/Products/BeagleBone BeagleBone] 
and the [//beagleboard.org/Products/BeagleBone%20Black BeagleBone Black] products from the BeagleBoard community. These are all based on system on chip designs from TI and all contain a Cortex-A8 ARM core.

The code is developed and integrated in the same (master) code branch as the official MINIX3 x86 port.

== Feature Matrix ==

This is a preliminary list of what's supported and what isn't. Feel free to add anything important that was left off the list and/or update the list with the latest developments.

{| class="wikitable"
! Drivers !! BeagleBone Black !! BeagleBone (White) !! BeagleBoard-xM
|-
| tty (Terminal)|| yes || yes || yes
|-
| mmc (Multimedia Card)|| yes || yes || yes
|-
| eMMC (Internal Multimedia Card)|| yes || no || no
|-
| i2c (Inter-Integrated Circuit)|| yes || yes || yes
|-
| fb (Frame Buffer) || no || no || yes
|-
| EDID Reading (Extended Display Identification Data) || yes || yes || yes
|-
| eeprom || yes || yes || yes
|-
| gpio (General Purpose Input/Output) || yes || yes || yes
|-
| readclock || yes || yes || yes
|-
| PMIC (Power Management IC) || yes || yes || yes
|-
| ethernet || yes || yes || no
|-
| usb (Universal Serial Bus) HCD || yes || yes || no
|-
| usb mass storage || yes || yes || no
|-
| usb hubs || yes || yes || no
|-
| spi (Serial Peripheral Interface Bus) || no || no || no
|-
| pwm (Pulse-width modulation) || no || no || no
|-
| adc (Analog to Digital Converter) || no || no || no
|-
| audio || no || no || no
|-
| '''Kernel Features''' || || || 
|-
| reboot || yes || yes || yes
|-
| Power-Off || yes || yes || no
|-
| '''Miscellaneous Features''' || || || 
|-
| Capes / Expansion Boards || yes || yes || no
|}

{| class="wikitable"
! Supported Capes / Expansion Boards !! Status
|-
| [//circuitco.com/support/index.php?title=BeagleBone_Weather BeagleBone Weather] || yes
|}

Please note that pkgsrc, the package repository used by MINIX3, is not yet available on ARM at this moment. See [[Pkgsrc on ARM|this document]] for an explanation as to why and how we hope to move forward on this.

Note that the framebuffer (fb) driver is not supported on the Black and White models.  You will need a serial interface cable to connect.  Please review [//dave.cheney.net/2013/09/22/two-point-five-ways-to-access-the-serial-console-on-your-beaglebone-black Dave Cheney's article] on connecting via the serial port.  Users of Apple products may want to review [//pbxbook.com/other/mac-tty.html Mike's PBX Cookbook article] on using Terminal for serial communication.  In Terminal, the command 'screen /dev/tty.usbmodem* 115200' works well (replace the * with the appropriate label).
== Building Minix/ARM  ==

First do a checkout of the code

&lt;pre&gt;
$ mkdir -p $HOME/minix
$ cd $HOME/minix
$ git clone git://git.minix3.org/minix src
$ cd src
&lt;/pre&gt;

Secondly configure your build by creating a .settings file. 

For the BeagleBoard-xM use these settings:
&lt;pre&gt;
# beagleboard-xm
U_BOOT_BIN_DIR=build/omap3_beagle/
CONSOLE=tty02
&lt;/pre&gt;

For the BeagleBone(s) use the following settings:
&lt;pre&gt;
#beaglebone (and black)
U_BOOT_BIN_DIR=build/am335x_evm/
CONSOLE=tty00
&lt;/pre&gt;

Now launch the build by calling the image creation script (This will call the [[Cross Compiling|cross compiling]] script with a machine set to "evbearm-el". NOTE: if you get errors during this step, please check that page!):
&lt;pre&gt;
$ ./releasetools/arm_sdimage.sh
&lt;/pre&gt;

If you receive the error "**Skipping image creation: missing tool 'mcopy'" do

&lt;pre&gt;
pkgin install mtools
&lt;/pre&gt;

If there are no errors, the result is a file called minix_arm_sd.img in your src directory. This image can be copied onto an SD-Card using dd:
&lt;pre&gt;
sudo dd if=minix_arm_sd.img of=/dev/mmcblk0 bs=1M oflag=direct
&lt;/pre&gt;

WARNING Just make sure your file system did not mount the sd-card while you where dd'ing.
== Running Minix/ARM ==

Once the sd-card is inserted on the BeagleBoard-xM (or BeagleBone) press the reset button and watch the serial for messages. Alternatively you can start the same image in the emulator (Read about that in   [[Minix on Linaro QEMU ARM]]). For information on network booting, see the [[Netbooting ARM]] article.

&lt;pre&gt;
## Starting application at 0x80200000 ...
MINIX booting

MINIX 3.2.1. Copyright 2012, Vrije Universiteit, Amsterdam, The Netherlands
MINIX is open source software, see http://www.minix3.org
Started VFS: 8 worker thread(s)
starting mmc driver
mmc_block(info)Initializing the MMC block device
mmc_host_mmchs(info)Using instance number 0
mmc_block(info)System event framework fresh start
Root device name is /dev/c0d0p1s0
/dev/c0d0p1s0: clean
/dev/c0d0p1s0 is mounted on /
none is mounted on /proc
date: timed: no such device or address
Tue Jan  1 00:00:00 GMT 2013
/dev/c0d0p1s2: clean
/dev/c0d0p1s1: clean
size on /dev/imgrd set to 0kB
Multiuser startup in progress ...
Starting services: randomrm /dev/eth0
rm /dev/eth
mknod /dev/psip0 c 7 1
ln /dev/psip0 /dev/psip
mknod /dev/ip0 c 7 2
ln /dev/ip0 /dev/ip
mknod /dev/tcp0 c 7 3
ln /dev/tcp0 /dev/tcp
mknod /dev/udp0 c 7 4
ln /dev/udp0 /dev/udp
mknod /dev/ipstat c 7 0
inet: unable to read random data from /dev/random: resource temporarily unavailable
inet: using current time for random-number seed
 inet ipc.
Starting daemons: update cron syslogd.
Starting networking: nonamed.
Local packages (start):  done.
 Minix  Release 3 Version 2.1  (console)

10.0.0.1 login:
&lt;/pre&gt;

=== Ethernet Configuration ===

If you're using a BeagleBone or BeagleBone Black, there is an ethernet driver available. It's configured through &lt;code&gt;/etc/inet.conf&lt;/code&gt;. Running &lt;code&gt;netconf&lt;/code&gt; as usual will let you select the right driver, which is &lt;code&gt;lan8710a&lt;/code&gt;.

To enable services like telnet/ftp/etc you can create an &lt;code&gt;rc.daemons&lt;/code&gt; file.
&lt;pre&gt;
mv /etc/rc.daemons.dist /etc/rc.daemons
vi /etc/rc.daemons
&lt;/pre&gt;

Restart the system for the changes to take effect.
&lt;pre&gt;
reboot
&lt;/pre&gt;

If the system hangs on reboot after starting the service 'random,' shut down the board entirely, then bring it back up. This will completely reset the ethernet chip and prevent issues when bringing up the inet interface from a non-default configuration.  Typing 'Control-c' will interrupt the multi-user boot process and go to single user.  Type

&lt;pre&gt;
shutdown -h now
&lt;/pre&gt;

to properly unmount the file system and shut down.  Unplug the power supply from the board, wait briefly, then plug the power supply back in.
== Videos ==

* A video showing the above steps of obtaining and building the system [//www.youtube.com/watch?v=J9UOtVU6lKY is here].
* A video showing how to use gdb to debug a minix from a qemu [//www.youtube.com/watch?v=Wni_Yw-2b88 is here].
* A video showing how to use Code Composer studio to debug the BeagleBone White [//www.youtube.com/watch?v=ra8STql8pJM is here].

== Want to contribute? ==

Great, that's what I wanted to hear! Help with documentation, making the above procedure more clean, hardware support, debugging, running the test set and finding and debugging problems! Check the [[Resources|resources page]] for more information on how to join the community. 

See ARM-specific (or not ARM-specific!) points on the [[Wishlist]] page for the current list of todo's.

== ARM Manuals ==

The ARM Cortex-A8 processor is used in the Minix-supported BeagleBoard and BeagleBone devices. Many ARM documents require registration and some are behind a paywall, but the following is freely available from the ARM site as of October 2016:

* [//infocenter.arm.com/help/topic/com.arm.doc.ddi0344k/DDI0344K_cortex_a8_r3p2_trm.pdf Cortex-A8 Revision: r3p2 Technical Reference Manual]</text>
      <sha1>anbd9jqpvf57k2blgyxtfh8lri0whfr</sha1>
    </revision>
  </page>
  <page>
    <title>Testing Minix on ARM</title>
    <ns>0</ns>
    <id>85</id>
    <revision>
      <id>109</id>
      <timestamp>2021-09-04T19:13:40Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import testingminixarm</comment>
      <origin>109</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9738" sha1="ls1kuxd0ol3n7xhwy6cyk59j94avgvv" xml:space="preserve">This page provides a list of actionable items to perform a thorough set of tests on Minix/arm to validate the functionality of various device drivers. It's designed to be manually executed by a person when major changes are made and before releases to ensure that everything still functions as expected. The majority of tests included here are tests that cannot easily be automated; for example, testing the response of a light sensor (TSL2550) to a lamp turning on in a room. To complete the entire test script, you'll need all of the supported hardware: BeagleBone, BeagleBone Black, BeagleBoard-xM, Weather Cape. Additional I2C devices that can be plugged into the expansion header would be helpful too.


== General Overview ==

The tests are broken down by board (BeagleBone, BeagleBone Black, BeagleBoard-xM). Some tests are duplicated for multiple boards, but they should still be done due to differences in the chips on each board. For example, the BeagleBone and BeagleBone Black use different revisions of the TPS65217 PMIC. Additionally, it may be beneficial to try the tests on different revisions of each board.

== Common Tests ==

These tests should work across all of the supported boards.

=== Test Suite ===

/!\ Warning: running the test suite could take several hours.

/!\ Warning: at time of writing, not all tests pass on arm.

There is a suite of tests which can be run to ensure that many of the software features are working properly.
&lt;pre&gt;
cd /usr/tests/minix-posix
sh run
&lt;/pre&gt;

=== real time clock, readclock, and rebooting ===

The boards each have a hardware real time clock, similar to the CMOS clock on i386. It should keep track of time while the board is running and between reboots.

Run the date command to see the current date/time. It should be wrong due to the board's lack of a battery back-up. Set the system date/time and run date again to see the new, correct, date/time.
&lt;pre&gt;
date
date 201309161200
date
&lt;/pre&gt;

Write the date/time to the hardware real time clock.
&lt;pre&gt;
readclock -w
&lt;/pre&gt;

Check that the system date/time is still going. Next, set the system date back in time. We're going to verify that the hardware clock contains the right date/time be reading the hardware clock. Run date to see that the system clock is back in time. Run readclock to read the hardware clock. Run date again to see that the correct date/time have been read from the hardware clock.
&lt;pre&gt;
date
date 201301010000
date
readclock
date
&lt;/pre&gt;

Next we'll test the reboot feature and ensure that the real time clock keeps working between reboots.
&lt;pre&gt;
reboot
&lt;/pre&gt;

Log in and run the date command. It should have the right date/time.
&lt;pre&gt;
date
&lt;/pre&gt;

=== gpio ===

Testing this driver requires either additional hardware or a multi-meter and wire. ''TODO'' expand this section.

=== tty ===

You can test this implicitly by using the serial console for some or all of the other tests. You can also try transfering small files with zmodem. In picocom, just do &lt;code&gt;Ctrl+a+s&lt;/code&gt;. Full instructions can be found [//wiki.minix3.org/en/UsersGuide/SerialConsoles#Transfering_Files_via_ZMODEM here].

=== mmc ===

This driver is also tested implicitly since without it, you wouldn't be able to do much. You can do more intense tests by copying and moving files around and checking their md5 checksums.

=== padconf ===

The padconf (i.e. pinmux) is another hard to test peripheral. Some notes: when the padconf call isn't functioning properly, the 3rd i2c bus on the BeagleBone and BeagleBone Black will fail.

== BeagleBone and BeagleBone Black Tests ==

=== lan8710a ===

Configure the network the normal Minix way with &lt;code&gt;netconf&lt;/code&gt; and then &lt;code&gt;reboot&lt;/code&gt; to apply the settings.
&lt;pre&gt;
netconf
reboot
&lt;/pre&gt;

Try some network-enabled commands to transfer files. Check that they transfered OK.
&lt;pre&gt;
fetch https://www.minix3.org/doc/raccoon-3.jpg
ping minix3.org
ftp ftp.minix3.org
&lt;/pre&gt;

You can also run servers like telnet. On the BeagleBone, run these commands to create a user, setup the telnet server, and reboot. When the system comes back up, you should be able to telnet to your BealgeBone and login as 'dummy' with the chosen password.
&lt;pre&gt;
useradd -m dummy
passwd dummy
echo "daemonize tcpd telnet in.telnetd" &gt; /etc/rc.daemons
reboot
&lt;/pre&gt;

=== Power-Off ===

Running &lt;code&gt;shutdown -p&lt;/code&gt; should cause the board to power-off. The system will halt and the power lights will turn off.
&lt;pre&gt;
shutdown -p
&lt;/pre&gt;

=== EEPROM Driver ===

The BeagleBones each have an EEPROM with board information. Read the data off of the EEPROM and display it.
&lt;pre&gt;
dd if=/dev/eepromb1s50 of=/root/eeprom.dat bs=128 count=1
hexdump -C /root/eeprom.dat
&lt;/pre&gt;

Verify the data. The first 4 bytes in the hex display should be "aa 55 33 ee". In the ASCII display, you should see "A335BONE" on the BeagleBone and "A335BNLT" on the BeagleBone Black.

=== eepromread utility ===

For this test, just watch the boot messages. If the utility is working properly, after the "Starting i2c device drivers" message you should see "Detected BeagleBone" for the original BeagleBone and "Detected BeagleBone Black" for the BeagleBone Black.

=== i2cscan utility ===

This is tricky to test as it uses the user level /dev/i2c interface. The /dev interface only exposes devices not being managed by a driver. All of the on-board devices have drivers; therefore, the i2cscan program won't find any of the on-board devices. The solution is to add additional devices (example: wire in an EEPROM chip to the expansion header) or temporarily disable some of the i2c devices in the rc script.

When you've got devices on the bus that aren't being managed by a driver, run the i2cscan program like this (devices are labelled /dev/i2c-1 to /dev/i2c-3):
&lt;pre&gt;
i2cscan -r /dev/i2c-3
&lt;/pre&gt;

== BeagleBone Tests ==

=== Weather Cape ===

==== Cape Support ====

For this test, just watch the boot messages. The cape should be automatically detected. Where it says "Starting i2c device drivers:", you should see "tsl2550 sht21 bmp085 http" in addition to the regular drivers.

==== bmp085 driver ====

The BMP085 senses temperature and pressure. Temperature is in Celsius and pressure is in Pascals. The temperature value might be slightly higher than room temperature due to heat coming from the BeagleBone.
&lt;pre&gt;
cat /dev/bmp085b3s77
&lt;/pre&gt;

==== sht21 driver ====

The SHT21 senses temperature and humidity. Temperature is in Celsius and humidity is relative (0-100%). The temperature value might be a few degrees above the temperature reported by the BMP085, again this is likely due to self-heating.
&lt;pre&gt;
cat /dev/sht21b3s40 
&lt;/pre&gt;

==== tsl2550 driver ====

The TSL2550 senses ambient light. Illuminance is in Lux. Turning on and off lights in the room should cause the value to go up and down.
&lt;pre&gt;
cat /dev/tsl2550b3s39 
&lt;/pre&gt;

==== weatherstation demo ====

This test requires the BeagleBone be connected to the network. Use ifconfig to determine your BeagleBone's IP address.
&lt;pre&gt;
ifconfig
&lt;/pre&gt;

Then, on another system, enter that address into your web browser. After a few seconds, a visual display of the weather sensor values should come up.

== BeagleBone Black Tests ==

=== Power-Off via Power Button ===

Press the power button; it's the button closest to the ethernet connector. It should cause the board to do a safe shutdown and power-off. Pressing the power button again should cause it to boot back up.

=== EDID Reading ===

The frame buffer driver doesn't support the BeagleBone Black yet, but a driver for reading EDID via the TDA19988 HDMI Transmitter has been developed. With it, the frame buffer driver can ask the attached display what modes/resolutions it supports. While the TDA19988 driver is meant to be accessed directly by the frame buffer driver, it can be tested from the shell by creating a block device file with an unused major number and doing a read with the dd command. Here are the commands to run:
&lt;pre&gt;
cd /dev
mknod tda19988 b 32 0
chmod 600 tda19988
/bin/service down tda19988.1.3470
/bin/service up /usr/sbin/tda19988 -label tda19988.1.3470 \
 -dev /dev/tda19988 \
 -args 'cec_bus=1 cec_address=0x34 hdmi_bus=1 hdmi_address=0x70'
dd if=/dev/tda19988 of=/root/edid.dat count=1 bs=128
hexdump -C /root/edid.dat
&lt;/pre&gt;
The data should start with the magic number "00 ff ff ff ff ff ff 00" and be 128 bytes long. Note, be sure the uHDMI connector is inserted properly; with a bulky uHDMI to HDMI adaptor, the uHDMI connector can become unseated easily.

== BeagleBoard-xM Tests ==

=== frame buffer ===

The frame buffer driver is pretty limited. For example, there isn't support for console on frame buffer yet. However, we can test out what's been implemented so far. You'll need to get the splash program. It isn't in mainline Minix, but you can get it [//github.com/tcort/minix-i2c/tree/splash here]. Simply boot the board with a display connected. Login and run the &lt;code&gt;splash&lt;/code&gt; program:
&lt;pre&gt;
splash
&lt;/pre&gt;
If everything worked, you should be seeing some raccoons on the display.

=== EDID Reading ===

EDID is data stored on a chip inside the display. The data contains information about the display and it's supported modes/resolutions. On the xM, it's read by the frame buffer driver via a direct call to the cat24c256 driver. We can get at the data through the cat24c256's /dev interface. The hexdump command will display the data that was read. Note: due to a limitation of the EEPROM driver's /dev interface, the first by will be missing from the dump.
&lt;pre&gt;
dd if=/dev/eepromb3s50 of=/root/eeprom.dat bs=128 count=1
hexdump -C /root/eeprom.dat
&lt;/pre&gt;
The data should start with the magic number "ff ff ff ff ff ff 00". The missing 0th byte is "00".</text>
      <sha1>ls1kuxd0ol3n7xhwy6cyk59j94avgvv</sha1>
    </revision>
  </page>
  <page>
    <title>Early Boot</title>
    <ns>0</ns>
    <id>86</id>
    <revision>
      <id>110</id>
      <timestamp>2021-09-04T19:20:51Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import earlyboot</comment>
      <origin>110</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8868" sha1="dhmllw8j5ovpxqx33vgqnb3aitke9wj" xml:space="preserve">This page details several crucial aspects of the Minix kernel booting.

== Outside Minix itself: multiboot setup procedure ==

Minix assumes a Multiboot-compliant boot loader has loaded its components into memory. This means the kernel and executables of boot-time processes are loaded somewhere in memory. The kernel is loaded at a location specified in its ELF header, the other executables are loaded at arbitrary locations. The bootloader passes control to the kernel at its entry point specified in its [//en.wikipedia.org/wiki/Executable_and_Linkable_Format ELF header]. You can discover the entry point of the kernel by reading the output of &lt;code&gt;objdump -x kernel&lt;/code&gt;. Typical output is &lt;code&gt;start address 0x00400000&lt;/code&gt;. The entry point is specified by the kernel [//wiki.osdev.org/Linker_Scripts linker script]] in &lt;code&gt;kernel/arch/i386/kernel.lds&lt;/code&gt; by the &lt;code&gt;ENTRY(symbol)&lt;/code&gt; directive.

So the end result of the multiboot loading procedure is: the kernel is loaded at its desired address in memory; 32-bit, protected mode, 0-based, 4GB-sized segments are loaded, protected mode is on and paging is off. The kernel can execute because its symbols (i.e. data/code references) correspond to correct addresses in memory. These addresses, i.e. the symbol addresses and where to load the sections so that the references are correct, are specified in the kernel linker script as well. Control is passed to its entry point and it can execute normally.

Theoretically the Minix kernel can be booted with any [//www.gnu.org/software/grub/manual/multiboot/multiboot.html multiboot]-compliant loader, such as GRUB. The stock Minix boot loader is the NetBSD boot loader.

== Kernel Entry point ==

nO X86, the Minix kernel begins executing at its entry point with symbol MINIX in &lt;code&gt;arch/i386/head.S&lt;/code&gt;. The initial entry has to be assembly first as some state has to be initialized that C compilers assume is initialized, specifically the stack pointer has to point to a usable area of memory. Part of the multiboot protocol is to leave a magic number in &lt;code&gt;%eax&lt;/code&gt; and a pointer to the multiboot information structure in &lt;code&gt;%ebx&lt;/code&gt;. So the assembly sets the stack pointer and calls the first C function, passing it &lt;code&gt;%eax&lt;/code&gt; and &lt;code&gt;%ebx&lt;/code&gt; for verification and information.

== Physical and virtual addressing in the kernel ==

A source of some complexity in kernel addressing is the dichotomy between physical and virtual addressing. As there can be no page table loaded at start time, initially the kernel must address all of its code and data using physical addressing. This means that the addresses of all symbols correspond to their physical address in memory. To make this possible, we tell the boot loader where the kernel is to be loaded and set the symbol addresses accordingly. This load address is &lt;code&gt;_kern_phys_base&lt;/code&gt; in the linker script. The statement &lt;code&gt;. = _kern_phys_base&lt;/code&gt; before the first section will make the load and virtual addresses of symbols in the first sections start with that constant. This ensures symbols are loaded at the expected place and references will work normally as soon as the kernel starts executing.

The kernel, however, must logically execute at the &lt;code&gt;top&lt;/code&gt; of virtual address space, i.e. at a high address. This is because the kernel shares the virtual address space with the currently running process, and constraining user processes to be linked (i.e. execute) at a certain minimal address, also bounding kernel size and kernel virtual address space usage, is unacceptable.

Of course loading the kernel to such a high address physically is also impossible, as it's unlikely memory exists there.

=== Setting up the mapping ===

So an important part of the kernel's early execution is to set up a page table that will map high-memory references to the physical location of the kernel, in other words, map it in at the desired high location and continue executing there. This happens in the first C function that is executed and is called by &lt;code&gt;head.S&lt;/code&gt;: &lt;code&gt;pre_init.c:pre_init()&lt;/code&gt;. It creates the page table, mapping the virtual address of its current execution 1:1 to its current physical addresses (logically nothing changes), and also mapping the high address range to the current physical addresses, allowing execution to occur there. Once the mapping is done, the function returns and the assembly code in &lt;code&gt;head.S&lt;/code&gt; will call the &lt;code&gt;kmain()&lt;/code&gt; function, making the CPU jump to the highly mapped region. The start of the high region, in virtual addressing of course, is &lt;code&gt;_kern_vir_base&lt;/code&gt;.

=== Separating lowly and highly mapped symbols ===

The kernel initially executes in the low, i.e. physical, region. In this phase it may not reference any symbols for use in the high region at all, because those are not accessible using those addresses yet; the CPU will try to access high physical addresses and most likely memory doesn't exist there. At best silent nonsense references happen (even if it's real memory it's still nonsense as there is no kernel data there), at worst it'll mess up some hardware that is mapped there.

Correspondingly, once the kernel starts executing in the high region, it should not reference any lowly mapped symbols as that part of the virtual address space does not belong to the kernel any more; everything below &lt;code&gt;_kern_vir_base&lt;/code&gt; is the domain of the currently executing process and the kernel can't use anything below that for itself. As before, references to lowly mapped symbols would be disastrous.

The solution chosen in Minix is to separate the two regions by putting the lowly mapped symbols in a separate namespace. All object files that are run in the initial phase get prepended a prefix &lt;code&gt;%%__%%k_unpaged_&lt;/code&gt; to all its symbol definitions and symbol references. This way neither region can accidentally access symbols in the other region. Of course they can deliberatly do that by prepending this prefix; e.g.t he lowly mapped code in head.S jumps into the highly mapped code starting with &lt;code&gt;kmain&lt;/code&gt; because &lt;code&gt;kmain&lt;/code&gt; is actually declared &lt;code&gt;%%__%%k_unpaged_kmain&lt;/code&gt;, accomplished by a &lt;code&gt;#define&lt;/code&gt; in &lt;code&gt;proto.h&lt;/code&gt;. This is done so that the prototype for &lt;code&gt;kmain&lt;/code&gt; makes sense both in the unpaged and the paged code, where it has different names.

=== Specifying high/low symbol linkage ===

The lowly mapped symbols are collected by their object file names with prefix &lt;code&gt;unpaged_*.o&lt;/code&gt;. These files are made in &lt;code&gt;arch/i386/Makefile.inc&lt;/code&gt;, where an &lt;code&gt;objcopy&lt;/code&gt; is performed to give symbols the prefix also. in &lt;code&gt;kernel.lds&lt;/code&gt; all &lt;code&gt;unpaged_*.o&lt;/code&gt; objects are collected and linked with the low, physically referenced address. Then the pointer is increased to raise it to &lt;code&gt;_kern_vir_base&lt;/code&gt; where the rest of the symbols are linked. To make sure the remaining sections are still loaded at a low address, despite having high link addresses, the &lt;code&gt;AT()&lt;/code&gt; directive is used. An example of the result from &lt;code&gt;objdump -x kernel&lt;/code&gt; output:

&lt;pre&gt;
    LOAD off    0x00001000 vaddr 0x00400000 paddr 0x00400000 align 2'''12
    LOAD off    0x00004000 vaddr 0x00403000 paddr 0x00403000 align 2'''12
    LOAD off    0x00006020 vaddr 0xf040f020 paddr 0x0040f020 align 2'''12
    LOAD off    0x0001c000 vaddr 0xf0425000 paddr 0x00425000 align 2'''12
&lt;/pre&gt;

This demonstrates the first two sections being loaded and linked at low address, and the last two sections being loaded at a low address yet linked at high addresses.

==== NetBSD boot loader caveat ====

The NetBSD boot loader does not use the physical address field to load the sections; rather it takes the virtual address and masks some of the high bits off. This means that the virtual and physical addresses of sections must correspond exactly with this masking. This is buried in &lt;code&gt;arch/x86/include/loadfile_machdep.h&lt;/code&gt; as:

&lt;pre&gt;
#define LOADADDR(a)         ((((u_long)(a)) &amp; 0x07ffffff) + offset)
&lt;/pre&gt;

I.e. the physical address must equal the virtual address masked with &lt;code&gt;0x07ffffff&lt;/code&gt; to be loaded at the expected place by the NetBSD loader.
== Kernel starts VM ==

The first responsibility of the kernel is to set up architecture-dependent basics, and then make VM runnable. As VM manages the memory and the virtual address space of all processes, it is preferable it does that for all processes, including boot processes. It can't for itself of course. So part of the kernel initialization is to make a page table for VM, so that it is mapped where it expects to be mapped, and start executing it. VM will then create virtual address spaces (i.e. page tables and its own high-level data structures) for the other boot-time processes.</text>
      <sha1>dhmllw8j5ovpxqx33vgqnb3aitke9wj</sha1>
    </revision>
  </page>
  <page>
    <title>From Power-on to the Login Prompt</title>
    <ns>0</ns>
    <id>87</id>
    <revision>
      <id>111</id>
      <timestamp>2021-09-04T19:50:44Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import frompowerontologinprompt</comment>
      <origin>111</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7300" sha1="f5wt1glutbsdeu2e9nfdpg2essxmjzq" xml:space="preserve">== Boot monitor ==
When the power is turned on, the typical PC will try to read the first sector from the BIOS's boot device, such as the first floppy disk or the first hard disk, into memory, and execute it. The code obtained from the hard disk (from the so-called master boot sector) immediately will replace itself by the code found in the first sector of the active partition. Thus, the PC now is executing the bootstrap code found in the first sector of &lt;code&gt;/dev/fd0&lt;/code&gt;, &lt;code&gt;/dev/c0d0p0&lt;/code&gt;, &lt;code&gt;/dev/c0d0p1&lt;/code&gt;, &lt;code&gt;/dev/c0d0p2&lt;/code&gt;, or &lt;code&gt;/dev/c0d0p3&lt;/code&gt; (assuming the boot disk is attached to controller 0).

In Minix's case, that bootstrap code loads the NetBSD boot loader, a multiboot-compliant boot loader that is able to boot Minix. The multiboot protocol loads the kernel and executables of boot-time processes (''modules'') somewhere in memory, according to the configuration settings and the commands entered.

== System image ==
/!\ '''''Slightly stale: informations about criticity, order, and numbers are out of date.'''''

The MINIX 3 system is made up of the union of several independent programs:
{| class="wikitable"
! Package !! Source !! Resiliency !! Comments
|-
| Kernel || &lt;code&gt;src/kernel&lt;/code&gt; || Critical ||
|-
| Process Manager server || &lt;code&gt;src/servers/pm&lt;/code&gt; || Critical || Should be number 0 (just after kernel), API calls assume it.
|-
| Virtual File System server || &lt;code&gt;src/servers/vfs&lt;/code&gt; || Critical || Should be number 1, API calls assume it.
|-
| Resurrection Service || &lt;code&gt;src/servers/rs&lt;/code&gt; || Critical ||
|-
| || &lt;code&gt;src/drivers/memory&lt;/code&gt; || ''unknown'' ||
|-
| || &lt;code&gt;src/drivers/tty&lt;/code&gt; || ''unknown'' ||
|-
| || &lt;code&gt;src/servers/ds&lt;/code&gt; || ''unknown'' ||
|-
| Minix File System service || &lt;code&gt;src/servers/mfs&lt;/code&gt; || Fail-safe || For the root file system on ''/dev/imgrd''
|-
| Virtual Memory manager || &lt;code&gt;src/servers/vm&lt;/code&gt; || Critical || Should be number 8, mmap*() API calls assume it
|-
| || &lt;code&gt;src/servers/pfs&lt;/code&gt; || ''unknown'' ||
|-
| Init process || &lt;code&gt;src/servers/init&lt;/code&gt; || ''unknown'' ||
|}

''Critical'' above means that a &lt;code&gt;panic()&lt;/code&gt; inside that server will bring the whole system down. ''Fail-safe'', on the other hand, means that MINIX 3 should be able to handle a failure of that server, usually by re-starting the driver.

== System initialization, 'rc' scripts ==
The MINIX 3 system is running now, the different tasks initialize themselves. &lt;code&gt;rs&lt;/code&gt; is the parent of all MINIX 3 ''system'' processes, while ''init'' is the grandparent of all ''user'' processes; note that the word ''user'' is used here in constrast to ''system'' processes; and, does not refer to the user-mode - kernel-mode distinction (all processes are user-mode in MINIX). A small file system, contained in RAM inside the 'memory' driver, is mounted as &lt;code&gt;/&lt;/code&gt;. &lt;code&gt;init&lt;/code&gt; is responsible for starting login processes on each terminal; but first, it runs &lt;code&gt;/etc/rc&lt;/code&gt;, a shell script.
== Image ramdisk ==
The ramdisk itself is build within the &lt;code&gt;src/drivers/ramdisk&lt;/code&gt; directory.

The image ramdisk contains several drivers which are used to boot the system fully:
{| class="wikitable"
! Package !! Source !! On ramdisk !! Comments
|-
| at_wini || &lt;code&gt;src/drivers/at_wini&lt;/code&gt; || &lt;code&gt;bin/at_wini&lt;/code&gt; ||
|-
| bios_wini || &lt;code&gt;src/drivers/bios_wini&lt;/code&gt; || &lt;code&gt;bin/bios_wini&lt;/code&gt; ||
|-
| floppy || &lt;code&gt;src/drivers/floppy&lt;/code&gt; || &lt;code&gt;bin/floppy&lt;/code&gt; ||
|-
| pci || &lt;code&gt;src/drivers/pci&lt;/code&gt; || &lt;code&gt;bin/pci&lt;/code&gt; || Usually needed by the &lt;code&gt;at_wini&lt;/code&gt; driver
|-
| Minix File System service || &lt;code&gt;src/servers/mfs&lt;/code&gt; || &lt;code&gt;sbin/mfs&lt;/code&gt; || For the real root file system
|-
| Ext2 File System service || &lt;code&gt;src/servers/ext2&lt;/code&gt; || &lt;code&gt;sbin/ext2&lt;/code&gt; || If real root is using EXT2 (Linux)
|}

It also needs several commands, to perform the initialization,
{| class="wikitable"
! **Package** !! Source !! On ramdisk !! Comments
|-
| cdprobe || &lt;code&gt;src/commands/cdprobe/cdprobe.c&lt;/code&gt; || &lt;code&gt;bin/cdprobe&lt;/code&gt; ||
|-
| loadramdisk || &lt;code&gt;src/commands/simple/loadramdisk.c&lt;/code&gt; || &lt;code&gt;bin/loadramdisk&lt;/code&gt; ||
|-
| ash || &lt;code&gt;src/commands/ash/*&lt;/code&gt; || &lt;code&gt;bin/sh&lt;/code&gt; ||
|-
| service || &lt;code&gt;src/servers/rs/service.c&lt;/code&gt; || &lt;code&gt;bin/service&lt;/code&gt; ||
|-
| sysenv || &lt;code&gt;src/commands/simple/sysenv.c&lt;/code&gt; || &lt;code&gt;bin/sysenv&lt;/code&gt; ||
|-
|}



and several support files
{| class="wikitable"
! Package !! Source !! On ramdisk !! Comments
|-
| Access Control List || &lt;code&gt;src/etc/system.conf&lt;/code&gt; || &lt;code&gt;etc/system.conf&lt;/code&gt; ||
|-
| || &lt;code&gt;src/etc/mtab&lt;/code&gt; || &lt;code&gt;etc/mtab&lt;/code&gt; || Empty file
|-
| || &lt;code&gt;src/etc/passwd&lt;/code&gt; || &lt;code&gt;etc/passwd&lt;/code&gt; || Needed for running service
|-
| || &lt;code&gt;src/drivers/memory/ramdisk/rc&lt;/code&gt; || &lt;code&gt;etc/rc&lt;/code&gt; || Actual instructions
|-
|}



== Root file system initialization ==
&lt;code&gt;/etc/rc&lt;/code&gt; checks the state of the system, and starts some daemons. It sets the system timezone if needed, the keyboard translation to the mapping in &lt;code&gt;/etc/keymap&lt;/code&gt; if present, followed by a call to [//www.minix3.org/manpages/man8/readclock.8.html readclock(8)] to set MINIX 3's time from the hardware clock. Next, the file systems are checked if necessary, and the &lt;code&gt;/usr&lt;/code&gt; file system is mounted.

== Multiuser initialization ==
The system now is ready for multi-user start-up. &lt;code&gt;/etc/rc&lt;/code&gt; calls &lt;code&gt;/usr/etc/rc&lt;/code&gt;. That cleans out &lt;code&gt;/tmp/&lt;/code&gt; and &lt;code&gt;/usr/tmp/&lt;/code&gt;, and resets or cycles log files (by running &lt;code&gt;/usr/etc/daily&lt;/code&gt;), starts the [//www.minix3.org/manpages/man8/update.8.html update(8)] and [//www.minix3.org/manpages/man8/cron.8.html cron(8)] daemons, and initializes the network services.

&lt;code&gt;/usr/etc/rc&lt;/code&gt; runs any scripts that might have been installed into &lt;code&gt;/usr/local/etc/rc.d/&lt;/code&gt; by packages. Finally, &lt;code&gt;/etc/rc&lt;/code&gt; runs &lt;code&gt;/usr/local/etc/rc&lt;/code&gt; to initialize the system in a site- or host-dependent way.

== Init ==
&lt;code&gt;Init&lt;/code&gt; reads &lt;code&gt;/etc/ttytab&lt;/code&gt;, and starts a [//www.minix3.org/manpages/man8/getty.8.html getty(8)] for each enabled terminal line, in order to allow a user to log in. &lt;code&gt;Getty&lt;/code&gt; asks for a user-name, checks a password with [//www.minix3.org/manpages/man1/login.1.html login(1)], changes to the user's home directory, and spawns a shell, as specified according to the [//www.minix3.org/manpages/man5/passwd.5.html /etc/passwd(5)] file.

== Shell ==
The shell is a command interpreter, which is a waiting process. Then the waiting process interprets and executes what the user typed. Programs that the user may run are stored by the file system. Execution of a program is accomplished by forking a child process. Then the child can access the system calls. After returning from the system call and ending of the child process the shell waits user input.

The shell starts by interpreting the &lt;code&gt;/etc/profile&lt;/code&gt; and &lt;code&gt;$HOME/.profile&lt;/code&gt; scripts, which sre used to set up respectively the ''system'' and ''user'' default values and parameters. On MINIX, &lt;code&gt;$HOME/.profile&lt;/code&gt; also executes the instructions from &lt;code&gt;$HOME/.ashrc&lt;/code&gt;.</text>
      <sha1>f5wt1glutbsdeu2e9nfdpg2essxmjzq</sha1>
    </revision>
  </page>
  <page>
    <title>Magic Debug Keys</title>
    <ns>0</ns>
    <id>88</id>
    <revision>
      <id>114</id>
      <timestamp>2021-09-04T19:55:36Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import magicdebugkeys</comment>
      <origin>114</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1646" sha1="0bf4qmwtdis3rdro6al297fmxnbcve8" xml:space="preserve">These keys trigger diverse low-level information dumps. They are handled by the information server (is) and contains mostly kernel and core services state dumps.

Due to the copious amount of text triggered by the magic debugging keys, most of them only outputs a screen's worth of contents at a time. If you see &lt;code&gt;--more--&lt;/code&gt; at the bottom of the screen, you can hit the magic debug key again to continue the output.

The list of currently available magic debugging keys may be queried with &lt;code&gt;Shift + F5&lt;/code&gt;.

'''Note:''' Function keys are only valid from the first console (ttyc0).

== Function key mappings  ==
{| class="wikitable"
! key !! Description              
|-
| F1 || Kernel processes table             
|-
| &lt;del&gt;F2&lt;/del&gt; || &lt;del&gt;Processes memory maps&lt;/del&gt;              
|-
| F3 || System Image                       
|-
| F4 || Processes privileges               
|-
| F5 || Boot monitor parameters            
|-
| F6 || IRQ hooks and policies             
|-
| F7 || Kernel messages                    
|-
| F8 || VM status and process maps         
|-
| F10 || Kernel parameters                  
|-
| &lt;del&gt;F11&lt;/del&gt; || &lt;del&gt;Timing details (if enabled)&lt;/del&gt;        
|-
| Shift + F1 || Process manager process table      
|-
| Shift + F2 || Signals                            
|-
| Shift + F3 || Filesystem process table           
|-
| Shift + F4 || Device/Driver mapping              
|-
| Shift + F5 || Print keys mappings                
|-
| Shift + F6 || Reincarnation server process table 
|-
| Shift + F8 || Data store contents                
|-
| Shift + F9 || Processes with stack traces        
|-
|}</text>
      <sha1>0bf4qmwtdis3rdro6al297fmxnbcve8</sha1>
    </revision>
  </page>
  <page>
    <title>I2C Device Driver Programming</title>
    <ns>0</ns>
    <id>89</id>
    <revision>
      <id>398</id>
      <parentid>151</parentid>
      <timestamp>2022-02-07T17:58:44Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Driver Skeleton */ Fix link</comment>
      <origin>398</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22242" sha1="ja71j5l1pvyfew1lo5v7uvsqj0l1fo5" xml:space="preserve">This guide walks you through the steps of creating your own device driver for an I2C device in C on Minix3 using the i2cdriver library. The current version of this guide documents the features used in git commit '''75bd300''' and later. If you update this document because of changes to MINIX 3, please mention the commit ID of the change in the wiki comment.

This guide is for Minix device drivers which run as services and interface with the bus driver directly via Minix IPC. You should also be aware that Minix supports the same /dev/i2c interface that is provided by NetBSD and OpenBSD. That interface is defined here: [//git.minix3.org/?p=minix.git;a=blob;f=sys/dev/i2c/i2c_io.h;hb=HEAD|dev/i2c/i2c_io.h]. Depending on your needs, it may be easier or more appropriate to use the /dev interface. Usage is documented on the [[I2C /dev Interface|I2C /dev interface]] page.

== General Overview ==

Developing an I2C device driver isn't too difficult because the bus interface is simple and straightforward, and Minix provides an i2cdriver library to handle tasks that would be repeated in every driver, including the more advanced stuff like querying DS for the bus' endpoint. This guide will show you how to add your own driver to the system and use libi2cdriver. It uses the TDA19988 driver as an example. Before you begin, it is suggested that you read [[I2C Internals|I2C Subsystem Internals]] and [[I2C Device Protocol|The I2C Protocol]] as those will give you additional insight into the Minix I2C subsystem.

== Service Definition ==

In order for our driver to function properly, it must be defined in etc/system.conf. That file defines what each service/driver can do. Add an entry for your driver. Here I'm specifying that ipc between the driver, system, reincarnation server, data store server, and the i2c driver should be allowed.
&lt;pre&gt;
service tda19988
{
	ipc SYSTEM RS DS i2c;
};
&lt;/pre&gt;

A cleaner alternative is for the driver to have its own file in /etc/system.conf.d/.

== Build System ==

The first step is to create a directory for your driver's source code under the ''drivers'' directory.
&lt;pre&gt;
mkdir drivers/tda19988
&lt;/pre&gt;

Next, we need to create drivers/tda19988/Makefile to instruct the build system on how it should be built.
&lt;syntaxHighlight lang="Makefile"&gt;
# Makefile for the tda19988 HDMI framer found on the BeagleBone Black.
PROG=	tda19988
SRCS=	tda19988.c

DPADD+=	${LIBI2CDRIVER} ${LIBSYS} ${LIBTIMERS}
LDADD+=	-li2cdriver -lsys -ltimers

MAN=

CPPFLAGS+=	-I${NETBSDSRCDIR}

.include &lt;minix.service.mk&gt;
&lt;/syntaxHighlight&gt;

Then, we need to edit drivers/Makefile so that our driver is included in the build. Find the list of drivers that get built on ARM, and add your driver to that list. It goes in the ARM-only section for now as ARM is the only Minix platform with I2C support. Note, there are two of these and you'll want to add your driver to the longer one towards the bottom in the ${MKIMAGEONLY} != "yes" section.
&lt;pre&gt;
*if ${MACHINE_ARCH} == "earm"
SUBDIR=  cat24c256 fb gpio i2c mmc log tda19988 tty random
*endif
&lt;/pre&gt;

We also need to tell the build system about the binaries we wish to be included in the installation. This is done by adding a line to distrib/sets/lists/minix/md.evbarm listing the installation path of the driver.
&lt;pre&gt;
./service/tda19988				minix-sys
&lt;/pre&gt;

Editing those Makefiles and adding the install path to the file list is all that is needed to add a driver to the build system. Now we're ready to start writing some code.

== Driver Skeleton ==

The following section goes step by step through the code that you should have in almost any I2C driver and explains a bit about what it does and how it works. All lines are being added to our driver's source: drivers/tda19988/tda19988.c

You should include minix/i2c.h which defines the minix_i2c_ioctl_exec_t structure which will hold your read/write requests and the results of the operation. You will also need to include minix/i2cdriver.h which defines the library functions available. The minix/drivers.h and minix/ds.h headers should also be included. Additionally, you may want to include headers for library functions (stdlib.h, string.h, etc).
&lt;syntaxHighlight lang="c"&gt;
#include &lt;minix/ds.h&gt;
#include &lt;minix/drivers.h&gt;
#include &lt;minix/i2c.h&gt;
#include &lt;minix/i2cdriver.h&gt;
&lt;/syntaxHighlight&gt;

This next step is optional but highly recommended. Minix provides a simple logging framework which is very flexible. You simply include the minix/log.h header, define an instance of struct log, and then use the log_*(&amp;log, "") functions in your code.
&lt;syntaxHighlight lang="c"&gt;
#include &lt;minix/log.h&gt;

/* logging - use with log_warn(), log_info(), log_debug(), log_trace(), etc */
static struct log log = {
	.name = "tda19988",
	.log_level = LEVEL_INFO,
	.log_func = default_log
};
&lt;/syntaxHighlight&gt;

Next, we'll define a list of valid slave addresses for the device. Typically, I2C devices have a predefined slave address or can be configured to have an address that's within a range of predefined slave addresses. The list of valid addresses is used to validate that the user is pointing the driver at the right device. The list ends with a special end of list value, 0x00. Here the driver has 4 possible addresses; the last two bits are configurable by setting pins high or low on our particular device, the TDA19988. Again, take note that the list ends with a NULL byte, 0x00.
&lt;syntaxHighlight lang="c"&gt;
static i2c_addr_t valid_addrs[5] = {
	0x34, 0x35, 0x36, 0x37, 0x00
};
&lt;/syntaxHighlight&gt;

There are a few global variables that we need to define. Those relate to the slave address of the device that this instance of the driver is driving as well as the bus that the particular device we want to drive is on. If you hadn't guessed it already, one aspect of the design is that there will be 1 instance of the driver per I2C device. This simplifies the programming model and helps isolate the damage a sick driver can cause.
&lt;syntaxHighlight lang="c"&gt;
/* the bus that this device is on (counting starting at 1) */
static uint32_t bus;

/* slave address of the device */
static i2c_addr_t address;

/* endpoint for the driver for the bus itself. */
static endpoint_t bus_endpoint;
&lt;/syntaxHighlight&gt;

Now we'll move on to the main() function and discuss driver initialization. Since the driver is flexible and can be used to drive devices on different buses, the user needs a way to point the driver at a specific device on a specific bus. To do that, the user passes the bus number and slave address to the driver via the service(8) command using the -args option. Minix provides a nice set of argument parsing functions, so all you have to do is call env_setargs() and then i2cdriver_env_parse() to extract the bus and slave address, and validate the slave address. A negative return code is used to indicate that the bus or slave address parameters were either not specified or totally invalid. A positive return code is used to indicate that the address was not in the expected address list. It's up to the driver author to decide what to do in that case (maybe the user knows what he/she is doing and you accept the input?). A return code of 0 means the bus and slave addresses were valid.
&lt;syntaxHighlight lang="c"&gt;
int
main(int argc, char *argv[])
{
	int r;

	env_setargs(argc, argv);

	r = i2cdriver_env_parse(&amp;bus, &amp;address, valid_addrs);
	if (r &lt; 0) {
		log_warn(&amp;log, "Expecting -args 'bus=X address=0xYY'\n");
		log_warn(&amp;log, "Example -args 'bus=1 address=0x34'\n");
		return EXIT_FAILURE;
	} else if (r &gt; 0) {
		log_warn(&amp;log,
		    "Invalid slave address for device, expecting 0x34-0x37\n");
		return EXIT_FAILURE;
	}

	...
&lt;/syntaxHighlight&gt;

The next thing we want to do in main() is call a function that we'll define soon called sef_local_startup(). It will initialize the [[SEF|System Event Framework (SEF)]] for our driver. SEF is a framework that handles the live updating and self-healing aspects of Minix. I won't discuss the whole thing here, but more info is in the SEF link above as well as in the general [[Driver Programming|driver programming]] guide.
&lt;syntaxHighlight lang="c"&gt;
	...

	sef_local_startup();

	...
&lt;/syntaxHighlight&gt;

Add a function prototype at the top of your C file.
&lt;syntaxHighlight lang="c"&gt;
static void sef_local_startup(void);
&lt;/syntaxHighlight&gt;

Then implement the function.
&lt;syntaxHighlight lang="c"&gt;
static void
sef_local_startup(void)
{
	/*
	 * Register init callbacks. Use the same function for all event types
	 */
	sef_setcb_init_fresh(sef_cb_init);
	sef_setcb_init_lu(sef_cb_init);
	sef_setcb_init_restart(sef_cb_init);

	/*
	 * Register live update callbacks.
	 */
	/* Agree to update immediately when LU is requested in a valid state. */
	sef_setcb_lu_prepare(sef_cb_lu_prepare_always_ready);
	/* Support live update starting from any standard state. */
	sef_setcb_lu_state_isvalid(sef_cb_lu_state_isvalid_standard);
	/* Register a custom routine to save the state. */
	sef_setcb_lu_state_save(sef_cb_lu_state_save);

	/* Let SEF perform startup. */
	sef_startup();
}
&lt;/syntaxHighlight&gt;

Next, we'll implement the state save and state restore functions. List the prototypes at the top of the file.
&lt;syntaxHighlight lang="c"&gt;
static int sef_cb_lu_state_save(int);
static int lu_state_restore(void);
&lt;/syntaxHighlight&gt;

Here we're just saving the bus and address information and restoring it using the [[DataStore|Data Store API]]. The bus endpoint will be re-queried during an update/restart so it doesn't need to be preserved.
&lt;syntaxHighlight lang="c"&gt;
static int
sef_cb_lu_state_save(int UNUSED(state))
{
	ds_publish_u32("bus", bus, DSF_OVERWRITE);
	ds_publish_u32("address", address, DSF_OVERWRITE);
	return OK;
}

static int
lu_state_restore(void)
{
	/* Restore the state. */
	u32_t value;

	ds_retrieve_u32("bus", &amp;value);
	ds_delete_u32("bus");
	bus = (int) value;

	ds_retrieve_u32("address", &amp;value);
	ds_delete_u32("address");
	address = (int) value;

	return OK;
}
&lt;/syntaxHighlight&gt;

Finally, we're at the last SEF related function, sef_cb_init(). This callback is to (re-)initialize the driver. Here's the prototype to put at the top of the file.
&lt;syntaxHighlight lang="c"&gt;
static int sef_cb_init(int type, sef_init_info_t * info);
&lt;/syntaxHighlight&gt;

The initialization function uses the i2cdriver library to perform a number of setup tasks. The endpoint of the bus driver is queried and set with i2cdriver_bus_endpoint(). A reservation is made with the bus driver so that only this driver can access the specified slave address with i2cdriver_reserve_device(). Next, a call to i2cdriver_subscribe_bus_updates() adds a subscription for updates from the bus driver about restarts. This will be used later to automatically update the bus driver's endpoint if it is restarted. It will allow your driver to survive the bus driver being restarted. Finally, i2cdriver_announce() is called. This announces that the driver is up and helps the bus driver deal with I2C device drivers being restarted. You'll want to replace "DO DRIVER SPECIFIC INIT HERE" with code to initialize any internal data structures your driver uses.
&lt;syntaxHighlight lang="c"&gt;
static int
sef_cb_init(int type, sef_init_info_t * UNUSED(info))
{
	int r;

	if (type == SEF_INIT_LU) {
		/* Restore the state. */
		lu_state_restore();
	}


	/** DO DRIVER SPECIFIC INIT HERE **/


	/* look-up the endpoint for the bus driver */
	bus_endpoint = i2cdriver_bus_endpoint(bus);
	if (bus_endpoint == 0) {
		log_warn(&amp;log, "Couldn't find bus driver.\n");
		return EXIT_FAILURE;
	}

	/* claim the device */
	r = i2cdriver_reserve_device(bus_endpoint, address);
	if (r != OK) {
		log_warn(&amp;log, "Couldn't reserve device 0x%x (r=%d)\n",
		    address, r);
		return EXIT_FAILURE;
	}

	if (type != SEF_INIT_LU) {

		/* sign up for updates about the i2c bus going down/up */
		r = i2cdriver_subscribe_bus_updates(bus);
		if (r != OK) {
			log_warn(&amp;log, "Couldn't subscribe to bus updates\n");
			return EXIT_FAILURE;
		}

		i2cdriver_announce(bus);
		log_debug(&amp;log, "announced\n");
	}

	return OK;
}
&lt;/syntaxHighlight&gt;

That covers all of the initial setup that you'll have to do. The next part depends on your specific needs.

== Choosing Driver Interface Model ==

Now it's time to start thinking about how your driver will be used. Will other services or drivers be sending Minix IPC messages to it? Will it be accessed through a device file? Your choice here sort of dictates how you develop the rest of your driver. For the particular driver that is the focus of this tutorial, the TDA19988, it doesn't make a lot of sense to provide a device file interface (what can a user program do with an HDMI framer?), but it does make a lot of sense to provide a Minix IPC interface since the frame buffer driver will need to access it.

If you need documentation for block device drivers see: [[Block Device Protocol]]. If you need documentation for character device drivers see: [[Driver Programming]]. Some simple examples of each are: the cat24c256 driver (block) and the i2c bus driver (char).

== Main Message Loop ==

Nearly all Minix drivers spend their time blocked, waiting for a Minix IPC message to arrive. They decode the message, perform some work, and most of the time they send a reply with the result. For character device drivers and block device drivers, there is a specific set of messages that need to be implemented. In these cases and a few others (network drivers for instance), libraries provide main message loop functions that call callbacks (example: chardriver_task() and blockdriver_task()). There is no i2cdriver_task() because there are no universal actions that apply to all I2C devices. Instead, we have to develop our own main message loop.

Here we're going to add some more code to the main() function. This is our main message loop. It doesn't do much now, but we'll be adding to it later once the message types are defined for our driver. Currently it just replies with OK. You'll also notice that notifications from DS get special handling. Earlier, in the init code, we subscribed to updates from DS about the bus driver. Here is where those get processed. It will help our driver survive if the i2c bus driver restarts.
&lt;syntaxHighlight lang="c"&gt;
...

	endpoint_t user, caller;
	message m;
	int ipc_status;

...

	while (TRUE) {

		/* Receive Message */
		r = sef_receive_status(ANY, &amp;m, &amp;ipc_status);
		if (r != OK) {
			log_warn(&amp;log, "sef_receive_status() failed\n");
			continue;
		}

		if (is_ipc_notify(ipc_status)) {

			if (m.m_source == DS_PROC_NR) {
				/* bus driver changed state, update endpoint */
				i2cdriver_handle_bus_update(&amp;bus_endpoint, bus, address);
			}

			/* Do not reply to notifications. */
			continue;
		}

		caller = m.m_source;
		user = m.USER_ENDPT;

		/* TODO/XXX: HANDLE MESSAGES HERE */

		/* Send Reply */
		m.m_type = TASK_REPLY;
		m.REP_ENDPT = user;
		m.REP_STATUS = OK;

		r = sendnb(caller, &amp;m);
		if (r != OK) {
			log_warn(&amp;log, "sendnb() failed\n");
			continue;
		}
	}

	return 0;
}
&lt;/syntaxHighlight&gt;

That concludes the generic code that you need for an I2C device driver. The next task is to design the messages that your driver will handle, define the message types in include/minix/com.h, add a switch statement in main on m.m_type, and handle the messages.

== Helpful i2cdriver Library Functions ==

The [//git.minix3.org/?p=minix.git;a=blob;f=include/minix/i2cdriver.h;hb=HEAD minix/i2cdriver.h] header defines the set of functions provided by the i2cdriver library. This library contains common functions useful throughout many I2C drivers.

=== i2cdriver_exec ===

The i2cdriver_exec function does the heavy lifting when it comes to accessing the bus. Given the endpoint for an i2c bus driver, it can send a minix_i2c_ioctl_exec_t to the bus, and return the response. As described earlier, your driver can look-up the bus endpoint using i2cdriver_bus_endpoint().

=== i2creg_read/write/set/clear ===

Filling a minix_i2c_ioctl_exec_t for every read/write operation requires too much work. Additionally, most I2C devices work in a similar way; the device has registers which are addressed before a read or write. To make things simple, the i2cdriver library provides several functions for reading and writing from and to I2C device registers. Below are some examples from existing drivers:

i2creg_read8 performs a 1 byte read of the given register. Here, the TDA19988 driver is reading the CEC_STATUS_REG register and storing the value in val.
&lt;syntaxHighlight lang="c"&gt;
i2creg_read8(cec_bus_endpoint, cec_address, CEC_STATUS_REG, &amp;val);
&lt;/syntaxHighlight&gt;

i2creg_write8 performs a one byte write to the given register. Here, the TDA19988 driver is writing CEC_ENABLE_ALL_MASK to the CEC_ENABLE_REG.
&lt;syntaxHighlight lang="c"&gt;
i2creg_write8(cec_bus_endpoint, cec_address, CEC_ENABLE_REG, CEC_ENABLE_ALL_MASK);
&lt;/syntaxHighlight&gt;

i2creg_read24 is similar to the i2creg_read8 above, but instead of reading just one byte, it reads 3 bytes. There is also a i2creg_read16. Here, the BMP085 driver is reading a 24-bit value from SENSOR_VAL_MSB_REG and storing the result in 'up'.
&lt;syntaxHighlight lang="c"&gt;
i2creg_read24(bus_endpoint, address, SENSOR_VAL_MSB_REG, &amp;up)
&lt;/syntaxHighlight&gt;

i2creg_set_bits8 performs a read of the given register, sets the specified bits, and writes the value back to the register. Here, the TPS65950 driver is setting the STOP_RTC_BIT bit in the RTC_CTRL_REG to 1.
&lt;syntaxHighlight lang="c"&gt;
i2creg_set_bits8(bus_endpoint, addresses[ID4], RTC_CTRL_REG, (1 &lt;&lt; STOP_RTC_BIT));
&lt;/syntaxHighlight&gt;

i2creg_clear_bits8 performs a read of the given register, clears the specified bits, and writes the value back to the register. Here, the TPS65950 driver is clearing the STOP_RTC_BIT bit in the RTC_CTRL_REG to 0.
&lt;syntaxHighlight lang="c"&gt;
i2creg_clear_bits8(bus_endpoint, addresses[ID4], RTC_CTRL_REG, (1 &lt;&lt; STOP_RTC_BIT));
&lt;/syntaxHighlight&gt;

i2creg_raw_read8 and i2creg_raw_write8 work like i2creg_read8 and i2creg_write8 but do not send the register address. Here are some examples from the TSL2550 and BMP085 drivers:
&lt;syntaxHighlight lang="c"&gt;
i2creg_raw_read8(bus_endpoint, address, &amp;val);
i2creg_raw_write8(bus_endpoint, address, CMD_SOFT_RESET);
&lt;/syntaxHighlight&gt;

== Code Formatting ==

There is a [[Coding Style|coding style]] guide which explains how your code should be formatted. In short, it's the NetBSD [//git.minix3.org/?p=minix.git;a=blob_plain;f=share/misc/style;hb=HEAD style] (based on [//en.wikipedia.org/wiki/Kernel_Normal_Form Kernel Normal Form]). You should use the style for all new code. 

If you want to ensure that your code conforms to that style, there is an [//git.minix3.org/?p=minix.git;a=blob_plain;f=share/misc/indent.pro;hb=HEAD indent.pro] file that can be used with the [//www.gnu.org/software/indent/ indent] utility. If you're using GNU indent, not all of the options in the official indent.pro file are accepted (GNU indent is different than the indent that ships with NetBSD and Minix), so I use the following options in my ~/.indent.pro file for GNU indent.
&lt;pre&gt;
-bap
-br
-ce
-ci4
-cli0
-d0
-di0
-i8
-ip8
-l79
-nbc
-ncdb
-ndj
-nfc1
-nlp
-npcs
-psl
-sc
-sob
&lt;/pre&gt;

== Compiling your Code ==

Instructions for compiling Minix/arm are available on the [//wiki.minix3.org/en/DevelopersGuide/MinixOnARM Minix on ARM] page.

== Starting Your Driver ==

Assuming your driver compiled okay, you can boot up Minix and start up an instance of the driver. Remember to follow the labelling suggestions in the I2C internals guide.

=== Manually ===

With no device file:
&lt;pre&gt;
service up /service/tda19988 -label tda19988.1.34 -args 'bus=1 address=0x34'
&lt;/pre&gt;

With a device file:
&lt;pre&gt;
service up /service/cat24c256 -dev /dev/eepromb1s50 -label cat24c256.1.50 -args 'bus=1 address=0x50'
&lt;/pre&gt;

=== Automatically at Boot ===

Inside etc/usr/rc there is a section that starts up the I2C bus drivers and the drivers for the specific board that Minix is running on. To get your driver to start at boot, simply add it in the CASE statement for the specific boards that the chip is used on.

You'll notice that 'up' is a function that calls the service command. It fills in the path to the driver, so you don't specify the /usr/sbin path like you do when you manually bring up the driver.

With no device file:
&lt;pre&gt;
up tda19988 -label tda19988.1.34 -args 'bus=1 address=0x34'
&lt;/pre&gt;

With a device file:
&lt;pre&gt;
up cat24c256 -dev /dev/eepromb1s50 -label cat24c256.1.50 -args 'bus=1 address=0x50'
&lt;/pre&gt;

== Contributing your Driver to Minix ==

If you develop a new I2C driver for Minix, please consider [[How to Contribute|contributing]] it to the Minix project so that everyone can benefit from your work. If you have trouble with the contribution process, contact the Minix3 project using the resources [[Resources|listed on this page]].

== Documentation ==

If you contribute your driver to Minix, we would also welcome some documentation along with it. As English isn't everyone's native language, feel free to ask for some help on this part if you aren't entirely comfortable writing long texts.

=== Wiki ===

If the driver is to be accessed by other drivers, create a wiki page describing the valid message types and possible responses. An example is the [[I2C Device Protocol]] document. It lists the messages that the I2C bus driver will accept and what reply codes could be returned.

=== Source Code ===

Try to use comments to explain your code. Don't go overboard, but at least explain the tricky parts. Also, a brief intro at the top of the main C file explaining what the driver is to be used for is nice.

You can add a README.txt file to the source directory for your driver explaining a bit about it, maybe where to find documentation on the hardware, any limitations (hardware or otherwise), and possible future improvements if you wish.

== Other Things Not Covered Here ==

=== Device Files ===

The TDA19988 doesn't have a device file interface. In the event that your driver needs one. Here are the steps for defining the device file.

* Add the definition to include/minix/dmap.h so others know the device number is in use.
* Teach MAKEDEV how to make the device file by editing commands/MAKEDEV/MAKEDEV.sh</text>
      <sha1>ja71j5l1pvyfew1lo5v7uvsqj0l1fo5</sha1>
    </revision>
  </page>
  <page>
    <title>POSIX and MINIX 3</title>
    <ns>0</ns>
    <id>90</id>
    <revision>
      <id>117</id>
      <timestamp>2021-09-05T19:44:50Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import posixandminix</comment>
      <origin>117</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3609" sha1="8q3888sd9rev3mh8mbyxbf1w7fspbak" xml:space="preserve">MINIX 3 is POSIX conformant. This document discusses what that means.

==  What is POSIX?  ==

&lt;pre&gt; 
"To make it possible to write programs that could run on any UNIX
system, IEEE developed a standard for UNIX, called POSIX, that most
versions of UNIX now support.  POSIX defines a minimal system call
interface that conformant UNIX systems must support.  In fact, some
other operating systems now also support the POSIX interface."
##- Operating Systems Design and Implementation, 2nd ed., p. 11
&lt;/pre&gt;

Before the release of Minix 2.0.0, efforts were made to check
it against the then-current version of the official POSIX standard,
&lt;code&gt;International Standard ISO/IEC 9945-1&lt;/code&gt;, also known as 
&lt;code&gt;ANSI/IEEE Std 1003.1, First edition, 1990-12-07&lt;/code&gt;.  
The full name of the document is &lt;code&gt;Information Technology -- Portable Operating System Interface (POSIX)
part 1: System Application Programming Interface (API) [C Language]&lt;/code&gt;. 
There have been a number of revisions and extensions since 1990. As of early
2005, the latest version of the basic document is known as
&lt;code&gt;IEEE Std 1003.1, 2004 Edition, Single UNIX Specification Version 3
&lt;/code&gt;.

==  Where Can I Get a Copy of the POSIX Standard? ==

Hard copy is available from the
[//www.ieee.org/ IEEE (Institute of Electrical and Electronics Engineers)]]
in New York.  It's expensive, however.  Even paying to have a PDF document e-mailed to you is quite
expensive.  You can get information on purchasing IEEE documents on-line at https://standards.ieee.org/.  
You might also do well to look in the engineering library of a local university.

Possibly more useful than the IEEE document, and certainly considerably
less expensive, is the book
[//www.oreilly.com/catalog/posix/index.html POSIX Programmer's Guide],
by Donald Lewine, published by O'Reilly.  It's listed at about US$35 on
[//www.amazon.com/exec/obidos/tg/detail/-/0937175730/qid=1109451696/sr=1-6/ref=sr_1_6/103-8500237-7807003?v=glance&amp;amp;s=books Amazon],
with used copies from US$16 (prices noted Feb 2005).

The [//www.opengroup.org/ Open Group]
has the [//www.unix.org/version3/ Single Unix Specification]
online.  They want you to register, but you can read documents on-line
for free.  You can also buy hard copy or text on CD-ROMs, from their
site, but these are expensive, too.

==  Does POSIX Compliance Mean I Can Compile Any Program from Another POSIX-Compliant System on MINIX 3?  ==

Well, maybe...  in principle, yes, but many systems (Minix included)
provide extensions to the basic C library functions defined by POSIX,
so you may have to deal with these in porting a program.  Also,
standards, no matter how carefully defined, may contain elements that
can be interpreted more than one way.  Many things outside the scope of
a standards document may make porting a program difficult.  The GNU
version of the ''make(1)'' utility, for instance, provides
facilities that are not present in the Minix version; you might have to
either port GNU make first or devote some effort to modifying a
Makefile before you could compile on Minix a package developed on a
GNU-ish system.  Finally there may be basic assumptions about system
resources that affect how a program works.  One that often affects
Minix users is the lack of virtual memory -- programmers writing for
environments that provide virtual memory may assume that memory is
effectively unlimited.  This is very much a problem with 16-bit Minix;
for 32-bit Minix it is becoming less problematic as newer computers
come equipped with amounts of physical memory undreamed of just a few
years ago.</text>
      <sha1>8q3888sd9rev3mh8mbyxbf1w7fspbak</sha1>
    </revision>
  </page>
  <page>
    <title>Minix API</title>
    <ns>0</ns>
    <id>91</id>
    <revision>
      <id>118</id>
      <timestamp>2021-09-05T19:52:03Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import minixapi</comment>
      <origin>118</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3012" sha1="nbqs2hs0q3gczejz4zgh5kby9oh6xk0" xml:space="preserve">&lt;div round info&gt;
'''Stale page'''

The contents of this page must be revised to reflect the current state of MINIX3.
&lt;/div&gt;

== Introduction ==

MINIX 3 is highly modular. The system consists of components, some of which offer services to
other components, some of which use services offered by other components, and some of which do both.
A component offering services does so through its Application Programming Interface (API), which
is a set of parameterized methods that other components can invoke. This invocation is done by having
the service user call a library function that constructs a short fixed-length message containing the
method number and the parameters which is then sent to the service provider. After the service
provider has finished its work, it sends back a reply message. Invocations are normally blocking,
but in some cases non-blocking calls are available. To write a component, it is necessary to understand 
the APIs the component offers and those it uses. The purpose of this document is to provide
component writers with links to the various APIs.

== The Kernel ==
The kernel offers an API that is used by the drivers and servers for obtaining kernel services.
Kernel calls fall roughly in the following categories: I/O, copying, time management, ...
Not every kernel call may be available to every system component; a bit map in each process table
entry tells which kernel calls the process can make.
The bit map for a component is created by hand after the driver is finished, based on which calls it needs.
In this way, accidental invocations of kernel calls the driver should not be making are caught.
The complete set of kernel calls is described in the kernel reference manual, available [[Kernel API|here]].

== Device Drivers ==
Drivers have three APIs: with the kernel, the file server, and the reincarnation server, respectively.
The kernel API allows drivers to obtain kernel services, such as performing I/O and moving data
between address spaces.
The file server API defines the services drivers provide to the file server, such as reading and
writing blocks of data.
Finally, the reincarnation server API defines the way the reincarnation checks if drivers are still
alive and how drivers must respond to avoid being killed.
These three APIs are described in the following documents.

{| class="wikitable"
! API !! Service provider !! Service User
|-
| [[Kernel API|Kernel calls]] || Kernel ||  Device drivers
|-
| Driver calls || Driver ||  File server
|-
| Reincarnation ||  Driver ||  Reincarnation server
|}

== Servers ==
The servers are called by user programs to obtain POSIX services. In turn, they make kernel calls
and calls to drivers to get their work done. Here are the relevant APIs for servers.

{| class="wikitable"
! API !! Service provider !! Service User
|-
| [[Kernel API|Kernel calls]] ||  Kernel ||  Server
|-
| Driver calls || Driver || File server
|-
| Reincarnation || Server || Reincarnation server
|-
| POSIX || Server || User programs
|}</text>
      <sha1>nbqs2hs0q3gczejz4zgh5kby9oh6xk0</sha1>
    </revision>
  </page>
  <page>
    <title>System Event Framework</title>
    <ns>0</ns>
    <id>92</id>
    <revision>
      <id>119</id>
      <timestamp>2021-09-07T13:56:54Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import sef</comment>
      <origin>119</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2140" sha1="6mr9n588va8kaqdcv6qq6xf2wgke6aj" xml:space="preserve">&lt;div round info&gt;
'''Stale page'''

The contents of this page must be revised to reflect the current state of MINIX3.
&lt;/div&gt;

== Introduction ==
This is a stub for the ''System Event Framework (SEF)'', a component of the system library that deals with system events in a centralized and convenient way.

As of now, the framework has 2 entry points declared in ''&lt;minix/sef.h&gt;'' and defined in ''lib/syslib/sef.c'':

&lt;pre&gt;
_PROTOTYPE( void sef_startup, (void) );
_PROTOTYPE( int sef_receive, (endpoint_t src, message *m_ptr) );
&lt;/pre&gt;
Every system service (server or device driver) must call ''sef_startup()'' at startup time to handle initialization and ''sef_receive()'' when receiving a message. The developer can register callbacks to provide handlers for each particular type of event. When no callback is registered for one particular event, the default behavior is assumed (read the default callback is called). The developer can also reuse some predefined callback implementations provided by SEF for each particular event type.

Ideally, all the cross-cutting concerns should be integrated into SEF. The SEF framework is, however, still WIP.  So far, the following event types have been integrated into SEF:

* '''Initialization''': triggered by initialization messages sent by the ''Reincarnation Server'' when a service is started. The API and the predefined callback implementations are declared in ''&lt;minix/sef.h&gt;'' and defined in ''lib/syslib/sef_init.c''.
* '''Ping''': triggered by keep-a-live messages sent by the ''Reincarnation Server'' periodically to check the status of a system service. The API and the predefined callback implementations are declared in 
''&lt;minix/sef.h&gt;'' and defined in ''lib/syslib/sef_ping.c''.
* '''Live update''': triggered by live update messages sent by the ''Reincarnation Server'' when an update is available for a particular system service. The API and the predefined callback implementations are declared in ''&lt;minix/sef.h&gt;'' and defined in ''lib/syslib/sef_liveupdate.c''.

== Feedback ==
Questions / Comments / Interested in getting involved? Let '''[mailto:cgiuffr@few.vu.nl us]''' know.</text>
      <sha1>6mr9n588va8kaqdcv6qq6xf2wgke6aj</sha1>
    </revision>
  </page>
  <page>
    <title>SEF</title>
    <ns>0</ns>
    <id>93</id>
    <redirect title="System Event Framework" />
    <revision>
      <id>120</id>
      <timestamp>2021-09-07T13:57:41Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>link to System Event Framework</comment>
      <origin>120</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="36" sha1="0a7rm8hje9y0kisrafevq468mdk2l7r" xml:space="preserve">#REDIRECT [[System Event Framework]]</text>
      <sha1>0a7rm8hje9y0kisrafevq468mdk2l7r</sha1>
    </revision>
  </page>
  <page>
    <title>VM calls</title>
    <ns>0</ns>
    <id>94</id>
    <revision>
      <id>121</id>
      <timestamp>2021-09-07T14:02:12Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import vmcalls</comment>
      <origin>121</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4753" sha1="cvsbmptmvlcb7uh4z51496f0jeztp0h" xml:space="preserve">Some basic VM call documentation.

== Secondary cache ==

The secondary block cache is a mechanism to utilize all available system memory as a disk cache. This functionality has to be in VM because it must be able to free the cache blocks if memory is needed for anything else, without blocking on it. I.e. it cannot rely on any other process to first free memory.

It is intended to be used by filesystem processes to store blocks it evicts from its own cache, hence the name 'secondary cache' and the use of the word 'block' and most of the time.

=== Logical Interface ===

Blocks are identified by a &lt;code&gt;(dev, dev_off)&lt;/code&gt; pair. This pair uniquely
identifies a cache block in VM.  These numbers have meaning to VM too:
dev is the full device number (i.e. major together with minor) of the
device it resides on, and dev_off is the offset from the minor device.

Furthermore each block has an inode and an inode offset associated
with it. If the block is a file data block, this inode number must be a
number uniquely identifying this file. Otherwise the inode number must
be VMC_NO_INODE and the inode offset is irrelevant. The inode metadata
is informational, they needn't be unique in the VM cache.

Logically there are four operations:

# Set a block. The caller passes the virtual address of the block, its length, and its identification to VM. VM will keep that block and the metadata in its cache. This is the way to indicate a new cache block to VM, for possible later retrieval. The &lt;code&gt;(dev, dev_off)&lt;/code&gt; pair is required and is unique; a possible existing block with that ID will be removed from the cache.
# Map a block. The caller passes the &lt;code&gt;(dev, dev_off)&lt;/code&gt; pair to VM, together with further metadata. If the block exists, VM maps the cache block in and returns the address to the caller. VM updates its notion of the inode and inode offset of the block.
# Forget a block. The caller passes a &lt;code&gt;(dev, dev_off)&lt;/code&gt; pair to VM, along with a block size. If the block exists, VM throws it out of the cache.
# Clear blocks. The caller passes a &lt;code&gt;dev&lt;/code&gt; device identifier to VM, and VM removes all blocks associated with that device from its cache.

=== C Interface ===

There are four calls, &lt;code&gt;vm_set_cacheblock&lt;/code&gt;, &lt;code&gt;vm_map_cacheblock&lt;/code&gt;, &lt;code&gt;vm_forget_cacheblock&lt;/code&gt;, and &lt;code&gt;vm_clear_cache&lt;/code&gt;.

&lt;syntaxHighlight lang="c"&gt;
int vm_set_cacheblock(void *block, dev_t dev, off_t dev_offset,
ino_t ino, off_t ino_offset, u32_t *flags, int blocksize, int setflags);
&lt;/syntaxHighlight&gt;

This call indicates a new block to VM. If the block is not inode data, ino
must be VMC_NO_INODE. flags points to a 32-bit flags field that is a mask
of VMMC_* values. This is currently unused but it is to be expected that
in the future, VM will evict blocks not marked by VMMC_BLOCK_LOCKED or
VMMC_DIRTY, so callers must set these when in use or dirty, respectively.

The &lt;code&gt;setflags&lt;/code&gt; field should generally be set to zero, but the caller may supply &lt;code&gt;VMSC_ONCE&lt;/code&gt; to indicate that the block should be used only for immediate use to map in a mmap'ed page, and not be cached beyond that. The &lt;code&gt;VMSC_ONCE&lt;/code&gt; flag prevents cached blocks from going stale and is used by file systems that do not have a block cache and do not track updates to file contents.

The caller has allocated memory for block and filled it with the correct
data already.

The call returns OK or an error code.

&lt;syntaxHighlight lang="c"&gt;
void *vm_map_cacheblock(dev_t dev, off_t dev_offset,
        ino_t ino, off_t ino_offset, u32_t *flags, int blocksize);
&lt;/syntaxHighlight&gt;

This call requests the block identified by the device number and offset to
be mapped in. It returns an address on success or MAP_FAILED on failure (e.g.
block not found). VM updates its notion of the inode metadata with the
parameters if the block was already in the cache.

&lt;syntaxHighlight lang="c"&gt;
int vm_forget_cacheblock(dev_t dev, off_t dev_offset, int blocksize);
&lt;/syntaxHighlight&gt;

This call requests that the block identified by the device number and offset be thrown out of the VM cache. Any previous inode association for this block is therefore broken as well. The call returns OK on success, even if no matching block was found. An error code is returned if the given parameter are invalid.

&lt;syntaxHighlight lang="c"&gt;
int vm_clear_cache(dev_t dev);
&lt;/syntaxHighlight&gt;

This call requests that VM forget all blocks associated with the given device. This call should be used (directly or indirectly) by file systems when 1) they get a &lt;code&gt;REQ_FLUSH&lt;/code&gt; request from VFS, and 2) when they successfully unmount. This ensures that no stale blocks remain in VM, which could cause corruption upon recall later.</text>
      <sha1>cvsbmptmvlcb7uh4z51496f0jeztp0h</sha1>
    </revision>
  </page>
  <page>
    <title>VTreeFS</title>
    <ns>0</ns>
    <id>95</id>
    <revision>
      <id>123</id>
      <timestamp>2021-09-07T15:43:23Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import vtreefs</comment>
      <origin>123</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17714" sha1="psqcy9zp4kggd8bxbyhi7dundggcqjh" xml:space="preserve">The VTreeFS library provides a common base that allows the rapid development of read-only, in-memory, hierarchical file systems. Originally designed to form the basis of both DevFS and ProcFS (still ongoing efforts), it is both flexible and easy to use. The library provides the following functionality:
# the main message loop of the file system;
# generic handlers for the requests from VFS;
# an interface to manipulate the virtual file system tree;
# callback hooks for refreshing of directories, and reading from regular files and symbolic links.
In essence, constructing a file system using VTreeFS consists of little more than implementing the appropriate callback hooks, and starting VTreeFS from the file system's main() function.

Applications wishing to use VTreeFS, must include the library's public header file, &lt;code&gt;&lt;minix/vtreefs.h&gt;&lt;/code&gt;. They must link against the vtreefs library, the fsdriver library, and the sys library, and in that order (&lt;code&gt;-lvtreefs -lfsdriver -lsys&lt;/code&gt;).

== Inodes ==

An application that uses the library, can add and remove directories and other files. All files (including directories) are represented using the primary object of the library: the '''inode'''. The library essentially manages a fully connected tree of inodes. API calls are provided to navigate the tree, and retrieve and manipulate inode properties. The inode object itself is opaque to the application.

Hard links are not supported, so every inode except the root inode is also an entry into its parent directory. The entry is identified in that directory by name. The names are bounded in length to save memory.

VTreeFS is set up to be fairly "memory conscious" in general: the number of inodes to allocate has to be specified at start-up time by the application, and this set of inodes will be preallocated. It is not possible to create more inodes than this number. As a result, no dynamic memory allocation takes place once VTreeFS has finished initializing.

== Indexes ==

To satisfy the requirements of ProcFS, an inode may also have an index associated with the entry into the directory. This optional index determines the inode's position when getting returned by a getdents() call. This allows the application to guarantee that certain directory entries will show up in getdents() output exactly once, even if these entries are deleted and readded between getdents() calls.

Indexed inodes have another property: if VTreeFS runs out of inodes, it will first try to delete unused indexed entries. Applications that used indexed entries are expected to recreate any needed indexed entries from its callback functions. This allows ProcFS to expose a dynamically generated tree that when fully expanded would by far exceed the number of preallocated inodes, while still being able to provide accurate views of any parts of this tree to the callers. Since indexed entries are very specific to ProcFS, further explanation on this subject is left out of this document.

A typical file system will have no use for indexed entries, and simply specify &lt;code&gt;NO_INDEX&lt;/code&gt; and zero indexed entries in inode creation calls.

== The API ==

For reference, the VTreeFS header file is reproduced in its entirety here.

&lt;syntaxHighlight lang="C"&gt;
#ifndef _MINIX_VTREEFS_H
#define _MINIX_VTREEFS_H

struct inode;
typedef int index_t;
typedef void *cbdata_t;

#define NO_INDEX	((index_t) -1)

/* Maximum file name length, excluding terminating null character. It is set
* to a low value to limit memory usage, but can be changed to any value.
*/
#define PNAME_MAX	24

struct inode_stat {
	mode_t mode;		/* file mode (type and permissions) */
	uid_t uid;		/* user ID */
	gid_t gid;		/* group ID */
	off_t size;		/* file size */
	dev_t dev;		/* device number (for char/block type files) */
};

struct fs_hooks {
	void (*init_hook)(void);
	void (*cleanup_hook)(void);
	int (*lookup_hook)(struct inode *inode, char *name, cbdata_t cbdata);
	int (*getdents_hook)(struct inode *inode, cbdata_t cbdata);
	int (*read_hook)(struct inode *inode, off_t offset, char '''ptr,
		size_t *len, cbdata_t cbdata);
	int (*rdlink_hook)(struct inode *inode, char *ptr, size_t max,
		cbdata_t cbdata);
	int (*message_hook)(message *m);
};

extern struct inode *add_inode(struct inode *parent, char *name, index_t index,
	struct inode_stat *stat, index_t nr_indexed_entries, cbdata_t cbdata);
extern void delete_inode(struct inode *inode);

extern struct inode *get_inode_by_name(struct inode *parent, char *name);
extern struct inode *get_inode_by_index(struct inode *parent, index_t index);

extern char const *get_inode_name(struct inode *inode);
extern index_t get_inode_index(struct inode *inode);
extern cbdata_t get_inode_cbdata(struct inode *inode);

extern struct inode *get_root_inode(void);
extern struct inode *get_parent_inode(struct inode *inode);
extern struct inode *get_first_inode(struct inode *parent);
extern struct inode *get_next_inode(struct inode *previous);

extern void get_inode_stat(struct inode *inode, struct inode_stat *stat);
extern void set_inode_stat(struct inode *inode, struct inode_stat *stat);

extern void start_vtreefs(struct fs_hooks *hooks, unsigned int nr_inodes,
	struct inode_stat *stat, index_t nr_indexed_entries);

#endif /* _MINIX_VTREEFS_H */
&lt;/syntaxHighlight&gt;

=== API functions ===

'''add_inode''' adds an inode into a ''parent'' inode (which must be a directory), with the given ''name'' - a string that must consist of no more than &lt;code&gt;PNAME_MAX&lt;/code&gt; characters. If the ''index'' parameter is not equal to &lt;code&gt;NO_INDEX&lt;/code&gt;, it indicates the index position for the inode in the parent directory. The ''stat'' parameter points to a filled structure of inode metadata. This structure's ''mode'' field determines the file type and the access permissions (see &lt;code&gt;/usr/include/sys/stat.h&lt;/code&gt;); directories (&lt;code&gt;S_IFDIR&lt;/code&gt;), regular files (&lt;code&gt;S_IFREG&lt;/code&gt;), character-special files (&lt;code&gt;S_IFCHR&lt;/code&gt;), block-special files  (&lt;code&gt;S_IFBLK&lt;/code&gt;), and symbolic links (&lt;code&gt;S_IFLNK&lt;/code&gt;) are supported. The ''uid'', ''gid'', ''size'' and ''dev'' fields specify the owning user and group ID, the size of the inode, and the device number (for block and character special files), respectively. The ''nr_indexed_entries'' parameter is only used for new directories (&lt;code&gt;S_IFDIR&lt;/code&gt;), and indicates the range (0 to nr_indexed_entries-1) reserved for inodes with index numbers; this value may be 0 for directories that do not care about index numbers. The ''cbdata'' parameter specifies a caller-defined value passed to hook calls affecting this inode.

'''delete_inode''' removes the given ''inode''. If the inode is a directory, all of its children will be removed recursively as well. The actual deletion may be deferred if the inode is still open. It will then automatically be removed once it is closed, and no callback functions will be called on it in the meantime.

'''get_inode_by_name''' and '''get_inode_by_index''' return an inode given a directory and either a name or an index number. They may fail, and in that case return &lt;code&gt;NIL_INODE&lt;/code&gt; and &lt;code&gt;NO_INDEX&lt;/code&gt;, respectively.

'''get_inode_name''' and '''get_inode_index''' return the name and index (or &lt;code&gt;NO_INDEX&lt;/code&gt;) of a given inode, as assigned with the add_inode() call. The name pointer may simply point into the inode. '''get_inode_cbdata''' returns the cbdata value for an inode.

'''get_root_inode''', '''get_parent_inode''', '''get_first_inode''' and '''get_next_inode''' allow walking through the virtual tree of inodes, respectively retrieving the virtual tree's root inode, the parent inode of a given inode, the first child inode of a given parent, and the next inode in a series of children (given the previous result of get_first_inode() or get_next_inode()). The last three may return &lt;code&gt;NIL_INODE&lt;/code&gt; if the directory does not have a parent (only in the case of the root directory), has no children, or has no more children, respectively.

'''get_inode_stat''' and '''set_inode_stat''' retrieve and manipulate inode metadata. Note that the file type of the inode must not be changed after creation.

'''start_vtreefs''' starts the main loop of the vtree file system library, accepting requests from VFS and possibly other sources (passing those on to the application), and making the appropriate callbacks to the application based on the hooks given by the application. Due to limitations of the SEF framework, this API call never returns; when VTreeFS is instructed to shut down, it will exit by itself. The ''hooks'' parameter specifies a structure of function pointers; see the next section for details. The ''nr_inodes'' parameter specifies the maximum number of inodes, which will also be preallocated at startup. Upon being started, the vtreefs library has to create a root inode; the ''stat'' and ''nr_indexed_entries'' parameters of start_vtreefs() determine the initial parameters of this root inode.

=== Callback hooks ===

The fs_hooks structure that must be provided to the ''start_vtreefs'' call, contains the following hook function pointers. 

'''init_hook''' is called when the file system is mounted. At this point, VTreeFS has initialized itself, and it is possible to add inodes to the tree.

'''cleanup_hook''' is called when the file system is unmounted. The application should use this function to perform any cleanup it wants to do itself, because this is always the last hook call before the entire process exits.

'''lookup_hook''' is called every time a lookup for an entry other than "." and ".." is made on an inode that is a directory and is search-accessible by the caller of the &lt;code&gt;REQ_LOOKUP&lt;/code&gt; call. The hook call is made right before the library does the actual name lookup. The provided ''inode'' is the directory inode, and ''cbdata'' is the callback data of that inode. ''name'' is the path component being looked up. This hook allows the application to do for example the following things safely:
* populate the given directory inode with child inodes, leaving the precise lookup of the given ''name'' to the library;
* delete the directory inode.
In the latter case, the hook implementation should return an error (typically &lt;code&gt;ENOENT&lt;/code&gt;) to indicate that the lookup function should not continue; this is the error that will be returned to VFS. If &lt;code&gt;OK&lt;/code&gt; is returned from the lookup function, the library continues the lookup.

'''getdents_hook''' is called every time a &lt;code&gt;REQ_GETDENTS&lt;/code&gt; call is made on a directory inode. The hook call is made right before the library does the actual directory entry enumeration. The ''inode'' parameter is the inode of this directory, and ''cbdata'' is the callback data of this inode. The same semantics apply as for ''lookup_hook'' above.

'''read_hook''' is called when a user process reads from a regular (&lt;code&gt;S_IFREG&lt;/code&gt;) file inode. ''inode'' and ''cbdata'' are the inode and callback data of this regular file, respectively. ''offset'' is the zero-based offset into the file from which reading should start, and ''len'' points to the requested read length. The hook implementation may return an error indicating why the file cannot be read. If the hook returns &lt;code&gt;OK&lt;/code&gt;, then the library assumes that:
''' ''ptr'' is filled with a &lt;code&gt;char *&lt;/code&gt; pointer to a static array containing the data to return, and,
''' ''len'' is filled with the length of the data (which may be less, but not more, than the original value of ''len'').
However, if EOF (is reached for the file, then the hook must return &lt;code&gt;OK&lt;/code&gt;, and a length of 0 in ''len''. The ''ptr'' value is then unused. As a sidenote, while returning a pointer to the data may seem strange, this construction avoids the extra overhead of copying the data from the application to the library on every read.

'''rdlink_hook''' is called when a user process reads from a symbolic link (&lt;code&gt;S_IFLNK&lt;/code&gt;) inode. ''inode'' and ''cbdata'' are the inode and callback data of this symlink. ''ptr'' is a pointer to a memory area within the library, of size ''max''. The hook implementation can write a path name string of up to ''max'' bytes into ''ptr'', including the terminating '\0' character.

'''message_hook''' is called whenever the library's main loop receives a message from a source other than VFS. The ''message'' parameter points to the message received. It is fully up to the hook implementer to decide what to do with the message; the library will not send a reply by itself. The return value is ignored.

All hook pointers given in the fs_hooks structure may be &lt;code&gt;NULL&lt;/code&gt;, in which case sensible defaults will be used.

If a file system is mounted and unmounted more than once during its process lifetime (as is the case for ProcFS, for example), the ''init_hook'' and ''cleanup_hook'' hooks may be called more than once as well. The constructed tree is not destroyed at unmount time, so the init hook should be careful not to recreate nodes that already exist. This behavior is not ideal and may be changed later.

== An example ==

Below is a very simple TestFS file system that makes use of VTreeFS to expose a single file called "test" which contains a textual representation of the current time. TestFS consists of two files, Makefile and testfs.c, which must both be placed in the same directory.

We start with the Makefile:

&lt;syntaxHighlight lang="make"&gt;
# Makefile for TestFS server
PROG=	testfs
SRCS=	testfs.c

DPADD+=	${LIBVTREEFS} ${LIBFSDRIVER} ${LIBSYS}
LDADD+=	-lvtreefs -lfsdriver -lsys

CFLAGS+= -D_NETBSD_SOURCE=1

MAN=

BINDIR?= /service

.include &lt;bsd.prog.mk&gt;
&lt;/syntaxHighlight&gt;

Then testfs.c:

&lt;syntaxHighlight lang="c"&gt;
#include &lt;minix/drivers.h&gt;
#include &lt;minix/vtreefs.h&gt;
#include &lt;sys/stat.h&gt;
#include &lt;time.h&gt;
#include &lt;assert.h&gt;

static void my_init_hook(void)
{	
	/* This hook will be called once, after VTreeFS has initialized.
	 */
	struct inode_stat file_stat;
	struct inode *inode;

	/* We create one regular file in the root directory. The file is
	 * readable by everyone, and owned by root. Its size as returned by for
	 * example stat() will be zero, but that does not mean it is empty.
	 * For files with dynamically generated content, the file size is
	 * typically set to zero.
	 */
	file_stat.mode = S_IFREG | 0444;
	file_stat.uid = 0;
	file_stat.gid = 0;
	file_stat.size = 0;
	file_stat.dev = NO_DEV;

	/* Now create the actual file. It is called "test" and does not have an
	 * index number. Its callback data value is set to 1, allowing it to be
	 * identified with this number later.
	 */
	inode = add_inode(get_root_inode(), "test", NO_INDEX, &amp;file_stat, 0,
		(cbdata_t) 1);

	assert(inode != NULL);
}

static int my_read_hook(struct inode *inode, off_t offset, char '''ptr,
	size_t *len, cbdata_t cbdata)
{
	/* This hook will be called every time a regular file is read. We use
	 * it to dyanmically generate the contents of our file.
	 */
	static char data[26];
	const char *str;
	time_t now;

	/* We have only a single file. With more files, cbdata may help
	 * distinguishing between them.
	 */
	assert((int) cbdata == 1);

	/* Generate the contents of the file into the 'data' buffer. We could
	 * use the return value of ctime() directly, but that would make for a
	 * lousy example.
	 */
	time(&amp;now);

	str = ctime(&amp;now);

	strcpy(data, str);

	/* If the offset is beyond the end of the string, return EOF. */
	if (offset &gt; strlen(data)) {
		*len = 0;

		return OK;
	}

	/* Otherwise, return a pointer into 'data'. If necessary, bound the
	 * returned length to the length of the rest of the string. Note that
	 * 'data' has to be static, because it will be used after this function
	 * returns.
	 */
	*ptr = data + offset;

	if (*len &gt; strlen(data) - offset)
		*len = strlen(data) - offset;

	return OK;
}

/* The table with callback hooks. */
struct fs_hooks my_hooks = {
	my_init_hook,
	NULL, /* cleanup_hook */
	NULL, /* lookup_hook */
	NULL, /* getdents_hook */
	my_read_hook,
	NULL, /* rdlink_hook */
	NULL  /* message_hook */
};

int main(void)
{
	struct inode_stat root_stat;

	/* Fill in the details to be used for the root inode. It will be a
	 * directory, readable and searchable by anyone, and owned by root.
	 */
	root_stat.mode = S_IFDIR | 0555;
	root_stat.uid = 0;
	root_stat.gid = 0;
	root_stat.size = 0;
	root_stat.dev = NO_DEV;

	/* Now start VTreeFS. Preallocate 10 inodes, which is more than we'll
	 * need for this example. No indexed entries are used.
	 */
	start_vtreefs(&amp;my_hooks, 10, &amp;root_stat, 0);

	/* The call above never returns. This just keeps the compiler happy. */
	return 0;
}
&lt;/syntaxHighlight&gt;

From the directory that contains both these files, TestFS can be built with ''make'' and installed with ''make install''.

After installation, one more step is needed before TestFS can be mounted. TestFS is a system server, so it needs its own entry in ''/etc/system.conf''. This entry can be very simple, because TestFS needs no privileges beyond those given to it by default. The entry should therefore look like this:

&lt;pre&gt;
service testfs {
};
&lt;/pre&gt;

Now you should be able to mount TestFS:

&lt;pre&gt;
mount -t testfs none /mnt
&lt;/pre&gt;

If everything worked as expected, a file called "test" should show up in /mnt now. If you issue ''cat /mnt/test'', you will be presented with the current time. The time is renewed on every read.

Finally, TestFS can be unmounted again with the following command:

&lt;pre&gt;
umount /mnt
&lt;/pre&gt;

== References ==

This document is based heavily on the original [[minixwiki:soc:2009:procanddevfs:designdocument|VTreeFS design document]], although that document is no longer updated with changes to VTreeFS.</text>
      <sha1>psqcy9zp4kggd8bxbyhi7dundggcqjh</sha1>
    </revision>
  </page>
  <page>
    <title>DataStore</title>
    <ns>0</ns>
    <id>96</id>
    <revision>
      <id>124</id>
      <timestamp>2021-09-07T17:15:41Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import datastore</comment>
      <origin>124</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14810" sha1="g07323mex25h0ym19zd0ao8alltgwek" xml:space="preserve">&lt;div round info&gt;
'''Stale page'''

The contents of this page must be revised to reflect the current state of MINIX3.
&lt;/div&gt;

The MINIX 3 DataStore (DS) server allows components to back up data and
retrieve it after a restart and allows them to exchange data indirectly. 
For each publish request, an entry is stored in DS.

Currently DS supports 5 types of data: U32 (unsigned int), STRING (null-terminated string), MEM (memory range), MAP (mapped 
memory range), and LABEL (as name server).

For U32, STRING and MEM, when published, DS stores a copy of the data,
and programs can retrieve this copy later. U32 and STRING are 
short enough that the data can be passed directly in a message, so they are more efficient.
A MEM value has to be granted access first.

For MAP, DS maps the memory range to DS's address space, which gives
a real-time view of that range in a given process. What's more, 
snapshots can be made any time.

Entries in the 4 types above are stored under a
component-specified identifier, which is a string, called key-name.
However, the key-name is not unique because of different types.
This means that there may be 2 entries will same key-name, but
different types. Therefore components have to use both the key-name and 
type to retrieve/delete the stored data.

For LABEL, it builds an one-to-one (bijection) mapping between a name
and a number to allow it to be used as a name server. Because of the 
bijection, there's a difference with other types; the LABEL
entries are not identified by key-name/type. There won't be 2 
entries with same name, or with same number. This assures that you can
retrieve the name by its number, and retrieve the number by its name.

U32, STRING and MEM entries can be overwritten by key-name; LABEL can be
overwritten by label-name or label-num; while MAP can't
be overwritten.

All types of entries can be subscribed, through the key-name (or 
the string if LABEL type). 
If the subscribed entry is created, changed or deleted, DS 
will notify the subscriber. An exception
is the MAP type. Since its data changes invisibly to DS, the
changes will not cause any notifications.

After getting a notification, the subscriber can check which entry was changed, which will give the key-name and type. Then you can use them to retrieve the changed data. Note that one notification may end up being delivered when multiple entries have changed, so the subscriber must call ds_check in a loop until ENOENT is returned.


== API ==

All function prototype and flags (described in the following section)
are defined in ''include/minix/ds.h''.

=== Brief view ===

* ''ds_publish_xxx'' - publish some data to DS.
* ''ds_retrieve_xxx'' - retrieve an entry from DS.
* ''ds_delete_xxx'' - delete an entry in DS.
* ''ds_snapshot_map'' - make a snapshot of mapped memory range.
* ''ds_subscribe'' - subscribe changes.
* ''ds_check'' - check which entry changed.

=== U32 functions ===

==== ds_publish_u32 ====

''int ds_publish_u32(const char *ds_name, u32_t value, int flags);''

Publish an unsigned int. If exists, overwrite it.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''value'': value of unsigned int
* ''flags'': combined by DSF_PRIV_RETRIEVE, DSF_PRIV_OVERWRITE, DSF_PRIV_SUBSCRIB, and DSF_OVERWRITE.

''RETURN VALUE:''
* If there is no free slot, return EAGAIN;
* If there is already an unsigned int stored, identified by the same ''ds_name'', return EEXIST;
* Otherwise, return OK.

==== ds_retrieve_u32 ====

''int ds_retrieve_u32(const char *ds_name, u32_t *value);''

Retrieve an unsigned int. 

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''value'': [OUT] contains the value of u32, after return

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.

==== ds_delete_u32 ====

''int ds_delete_u32(const char *ds_name);''

Delete an unsigned int.

''PARAMETERS:''
* ''ds_name'': component-specified identifier

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.

=== STRING functions ===

==== ds_publish_str ====

''int ds_publish_str(const char *ds_name, const char *string, int flags);''

Publish a string.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''string'': null-terminated string
* ''flags'': combined by DSF_PRIV_RETRIEVE, DSF_PRIV_OVERWRITE, DSF_PRIV_SUBSCRIB, and DSF_OVERWRITE.

''RETURN VALUE:''
* If there is no free slot, return EAGAIN;
* If there is already a string stored, identified by the same ''ds_name'', return EEXIST;
* Otherwise, return OK.

==== ds_retrieve_str ====

''int ds_retrieve_str(const char *ds_name, char *value, size_t length);''

Retrieve a string.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''value'': contains the string after return, including null byte
* ''length'': maximum length of the resulting string, excluding null byte

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.

/!\ WARNING: the supplied buffer must be at least one byte larger than the given length, for the final null byte

==== ds_delete_str ====

''int ds_delete_str(const char *ds_name);''

Delete a string.

''PARAMETERS:''
* ''ds_name'': component-specified identifier

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.

=== MEM functions ===

==== ds_publish_mem ====

''int ds_publish_mem(const char *ds_name, void *vaddr, size_t length, int flags);''

Publish a memory range. If specified, it can overwrite an older entry
with the new memory range, regardless of its length.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''vaddr'': virtual address of memory range
* ''length'': length of memory range
* ''flags'': combined by DSF_PRIV_RETRIEVE, DSF_PRIV_OVERWRITE, DSF_PRIV_SUBSCRIB, and DSF_OVERWRITE.

''RETURN VALUE:''
* If there is no free slot, return EAGAIN;
* If there is not enough memory in DS, return ENOMEM;
* Otherwise, return OK.

==== ds_retrieve_mem ====

''int ds_retrieve_mem(const char *ds_name, char *vaddr, size_t *length);''

Retrieve (part of) a memory range.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''vaddr'': retrieve the memory range into a buffer beginning from this virtual address.
* ''length'': length of the buffer. DS will retrieve #size data, where #size = MIN(''length'', length of memory range stored in DS).  [OUT] After return, ''length'' contains the actual copy data length.

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.


==== ds_delete_mem ====

''int ds_delete_mem(const char *ds_name);''

Delete a memory range.

''PARAMETERS:''
* ''ds_name'': component-specified identifier

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.


=== MAP functions ===

==== ds_publish_map ====

''int ds_publish_map(const char *ds_name, void *vaddr, size_t length, int flags);''

Publish a part of a memory range, using a mapping.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''vaddr'': virtual address of memory range, must be aligned to 4K.
* ''length'': length of memory range, must be aligned to 4K.
* ''flags'': combined by DSF_PRIV_RETRIEVE, and DSF_PRIV_SNAPSHOT 

''RETURN VALUE:''
* If there is no free slot, return EAGAIN;
* If there is not enough memory in DS, return ENOMEM;
* If ''vaddr'' or ''length'' is not aligned to 4K, return EINVAL;
* If there is already a mapping memory range identified by the same ''ds_name'', return EEXIST;
* Otherwise, return OK.


==== ds_snapshot_map ====

''int ds_snapshot_map(const char *ds_name, int *nr_snapshot);''

Make a snapshot of a mapped memory range.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''nr_snapshot'': [OUT] this will contain the index of the snapshot. This should be used to specify which snapshot needs to be retrieved, as ''nr_snapshot'' in ds_retrieve_map().

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* If there is not enough memory in DS, return ENOMEM;
* Otherwise, return OK.

==== ds_retrieve_map ====

''int ds_retrieve_map(const char *ds_name, char *vaddr, size_t *length, int nr_snapshot, int flags);''

Retrieve (part of) a mapped memory range or snapshot.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''vaddr'': retrieve the memory range into a buffer beginning from this virtual address.
* ''length'': length of the buffer. DS will retrieves #size data, where #size = MIN(''length'', length of memory range stored in DS).  [OUT] After return, ''length'' contains the actual copy data length.
* ''nr_snapshot'': the snapshot number to retrieve; only relevant if ''flags'' is set to ''DSMF_COPY_SNAPSHOT''
* ''flags'': if ''DSMF_MAP_MAPPED'', map the mapped data; if ''DSMF_COPY_MAPPED'', retrieve the mapped data; if ''DSMF_COPY_SNAPSHOT'', retrieve a specific snapshot

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* If ''nr_snapshot'' is out of range, return EINVAL;
* Otherwise, return OK.

==== ds_delete_map ====

''int ds_delete_map(const char *ds_name);''

Delete a mapped memory range, and its snapshots, if any.

''PARAMETERS:''
* ''ds_name'': component-specified identifier

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.

=== LABEL functions ===

==== ds_publish_label ====

''int ds_publish_label(const char *ds_name, endpoint_t value, int flags);''

Publish a label, (name, number);

''PARAMETERS:''
* ''ds_name'': component-specified identifier, label's name
* ''value'': label's endpoint
* ''flags'': combined using DSF_PRIV_RETRIEVE, DSF_PRIV_OVERWRITE, DSF_PRIV_SUBSCRIB, and DSF_OVERWRITE.

''RETURN VALUE:''
* If there is no free slot, return EAGAIN;
* If there is already a label with the same name or endpoint, which was published by other process, then: 1) if DSF_OVERWRITE is set in ''flags'', but DSF_PRIV_OVERWRITE was given when published, return EPERM; 2) if DSF_OVERWRITE is not set in ''flags'', return EEXIST;
* Otherwise, return OK.


==== ds_retrieve_label_endpt ====

''int ds_retrieve_label_num(const char *ds_name, endpoint_t *num);''

Retrieve a label's endpoint.

''PARAMETERS:''
* ''ds_name'': component-specified identifier
* ''num'': [OUT] contains the label's endpoint, after return

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.

==== ds_retrieve_label_name ====

''int ds_retrieve_label_name(char *ds_name, endpoint_t num);''

Retrieve a label's name.

''PARAMETERS:''
* ''ds_name'': a buffer of DS_MAX_KEYLEN in size, that will contain the label's name upon return
* ''num'': label's endpoint

''RETURN VALUE:''
* If there is no label with number ''num'', return ESRCH;
* Otherwise, return OK.


==== ds_delete_label ====

''int ds_delete_label(const char *ds_name);''

Delete a label.

''PARAMETERS:''
* ''ds_name'': component-specified identifier

''RETURN VALUE:''
* If there is no entry identified by ''ds_name'', return ESRCH;
* Otherwise, return OK.

=== SUBSCRIBE functions ===

==== ds_subscribe ====

''int ds_subscribe(const char *regex, int flags);''

Subscribe to an entry's changes.

''PARAMETERS:''
* ''regex'': regular expression for the entries that you want to subscribe to.
* ''flags'': combined using: DSF_OVERWRITE, DSF_INITIAL, and one of 4 types, which are DSF_TYPE_U32, DSF_TYPE_STR, DSF_TYPE_MEM and DSF_TYPE_MAP.  If none of these types is set, then subscribe all types.
    

''RETURN VALUE:''
* If there is no free slot, return EAGAIN;
* If this process has already subscribed to something, and DSF_OVERWRITE is not set in ''flags'', return EEXIST;
* Otherwise, return OK.


==== ds_check ====

''int ds_check(char *ds_name, int *type);''

Check which subscribed memory range has changed. This function will give you
which entry has changed, then you can use the returned key and type to call
''ds_retrieve_xxx'' to get the changed data.

''PARAMETERS:''
* ''ds_name'': a buffer of DS_MAX_KEYLEN in size, that will contain the key name upon return
* ''type'': pointer to an integer that will contain the entry type upon return

''RETURN VALUE:''
* If this process didn't subscribe to anything, return ESRCH;
* If there is no memory range changed among the process' subscriptions, return ENOENT; This case happens if the entry is deleted before ''ds_check()''.
* Otherwise, return OK.

= Flags =

''DSF_PRIV_RETRIEVE, DSF_PRIV_OVERWRITE, DSF_PRIV_SUBSCRIB, DSF_PRIV_SNAPSHOT''
Set private. If one of these flags is set, then this entry will not be retrieved, overwritten, subscribed, or snapshot by other processes.  Used when publishing data.

''DSF_TYPE_U32, DSF_TYPE_STR, DSF_TYPE_MEM, DSF_TYPE_MAP, DSF_TYPE_LABEL''
Used when subscribing to data.

''DSF_OVERWRITE''
If there is an entry identified by the same key-name, if set, overwrite it.  Used when publishing data.

''DSF_INITIAL''
If set, check whether there is any entry matching this subscription instantly.  Used when subscribing to data.


== Test ==

There are 2 system processes to test DataStore, ''dstest'' and ''subs''. They are located in &lt;code&gt;/usr/src/test/ds&lt;/code&gt;.

''dstest'' tests all new APIs of DS, except ds_subscribe() and ds_check().
test_u32, test_str, test_mem, test_label and test_map test U32, STR, MEM, LABEL
and MAP type respectively.

Invalid invocations are tested too.
If the same erroneous parameters are tested in former type, it will not be tested
in a new type. For example, publishing an entry with same label-name, but without 
DSF_OVERWRITE set is tested in test_u32, so it's not tested in other types again.
New type tests only test new features, which belong to the new type only.

''subs'' tests ds_subscribe() and ds_check(). This server subscribes 
the U32 (identified by 'test_u32') in ''dstest''. When ''dstest'' runs,
''subs'' catches it.

See the ''README'' with test file for more details.

== Others ==

=== DS dump ===

Press Shift+F8 to show the data store dump.

=== Message ===

The DS request message is ''mess_2'' ::

&lt;syntaxHighlight lang="c"&gt;
typedef struct {
	int m2i1, m2i2, m2i3;
	long m2l1, m2l2;
	char *m2p1; short m2s1;
} mess_2;
&lt;/syntaxHighlight&gt;

* ''m2i1'' (DS_KEY_GRANT) and ''m2s1'' (DS_KEY_LEN) are used to contain the grant ID and length of the key name, respectively.
* where needed, ''m2l1'' (DS_VAL) and ''m2l2'' (DS_VAL_LEN) are used to contain the grant ID and length for the value, respectively.
* ''m2i2'' (DS_FLAGS) is used to contain flags.

=== Page Table ===

For storing memory, we don't know how much memory DS needs. So DS should have its own
page table, to allocate memory dynamically.</text>
      <sha1>g07323mex25h0ym19zd0ao8alltgwek</sha1>
    </revision>
  </page>
  <page>
    <title>RTC Device Protocol</title>
    <ns>0</ns>
    <id>97</id>
    <revision>
      <id>125</id>
      <timestamp>2021-09-07T17:27:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import rtcprotocol</comment>
      <origin>125</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3812" sha1="3n5fki8yalwvjlbk2cjr3e2k1flly34" xml:space="preserve">This page provides the official documentation of the RTC device protocol of MINIX 3. It describes the protocol used between the readclock command and the readclock driver as well as the protocol used between readclock and other drivers. The current version documents the protocol used in git commit '''039c8db774''' and later. If you update this document because of changes to MINIX 3, please mention the commit ID of the change in the wiki comment.

== General Overview ==

The RTC device protocol provides a means of getting and setting the time of hardware clocks. For devices that power off via an alarm, a method for setting the alarm is also provided. Drivers should use the grant based message *_G for communicating with readclock, and user programs should use the pointer based messages. Currently, only PM is allowed to set the power off alarm, and only root is allowed to set the time.

=== RTCDEV Flags ===

You may set various flags that affect how the time is written or read. You may bit-wise OR flags. If you don't wish to use any flags, set RTCDEV_FLAGS to RTCDEV_NOFLAGS.

{| class="wikitable"
| RTCDEV_Y2KBUG || Interpret 1980 as 2000 for RTC w/Y2K bug
|-
| RTCDEV_CMOSREG || Also set the CMOS clock register bits
|-
| RTCDEV_NOFLAGS || No flags set
|}

=== RTCDEV Messages ===

==== RTCDEV_GET_TIME_G ====

Get the time from the hardware clock.

'''Request fields'''

{| class="wikitable"
| RTCDEV_GRANT || m2_i3 || grant || Grant where the time should be stored
|-
| RTCDEV_FLAGS || m2_s1 || short || Any combination of flags or RTCDEV_NOFLAGS.
|}

'''Reply fields'''

* ''none''

'''Response fields'''

{| class="wikitable"
| RTCDEV_STATUS || m2_i2 || OK or error code
|}

'''Description'''

Gets the time from the real time clock and writes it to the grant.

==== RTCDEV_SET_TIME_G ====

Set the time in the hardware clock.

'''Request fields'''

{| class="wikitable"
| RTCDEV_GRANT || m2_i3 || grant || Grant where the time should be stored
|-
| RTCDEV_FLAGS || m2_s1 || short || Any combination of flags or RTCDEV_NOFLAGS
|}

'''Reply fields'''

* ''none''

'''Response fields'''

{| class="wikitable"
| RTCDEV_STATUS || m2_i2 || OK or error code
|}

'''Description'''

Sets the time of the real time clock to the time given in the request.

==== RTCDEV_GET_TIME ====

Get the time from the hardware clock.

'''Request fields'''

{| class="wikitable"
| RTCDEV_TM || m2_p1 || pointer || struct tm * where the time should be stored.
|-
| RTCDEV_FLAGS || m2_s1 || short || Any combination of flags or RTCDEV_NOFLAGS.
|}

'''Reply fields'''

* ''none''

'''Response fields'''

{| class="wikitable"
| RTCDEV_STATUS || m2_i2 || OK or error code
|}

'''Description'''

Gets the time from the real time clock and writes it to the caller's struct tm.

==== RTCDEV_SET_TIME ====

Set the time in the hardware clock.

'''Request fields'''

{| class="wikitable"
| RTCDEV_TM || m2_p1 || pointer || struct tm * where the time should be stored.
|-
| RTCDEV_FLAGS || m2_s1 || short || Any combination of flags or RTCDEV_NOFLAGS.
|}

'''Reply fields'''

* ''none''

'''Response fields'''

{| class="wikitable"
| RTCDEV_STATUS || m2_i2 || OK or error code
|}

'''Description'''

Sets the time of the real time clock to the time given in the request.

==== RTCDEV_PWR_OFF ====

Set the time to cut the power.

'''Request fields'''

* ''none''

'''Reply fields'''

* ''none''

'''Response fields'''

{| class="wikitable"
| RTCDEV_STATUS || m2_i2 || OK or error code
|}

'''Description'''

The BeagleBone and BeagleBone Black use an alarm in the real time clock to power off the the board. Use this message to set the alarm. The alarm is set to 3 seconds from the current time and then the real time clock is disabled. The kernel will re-enable the clock when the system is in a good state to be powered down.</text>
      <sha1>3n5fki8yalwvjlbk2cjr3e2k1flly34</sha1>
    </revision>
  </page>
  <page>
    <title>Userspace scheduling</title>
    <ns>0</ns>
    <id>98</id>
    <revision>
      <id>126</id>
      <timestamp>2021-09-07T17:30:17Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import userspacescheduling</comment>
      <origin>126</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1905" sha1="a76ceh8zlno8x8zhok4ve2dutlksgpz" xml:space="preserve">== How does it work? ==
Scheduling in Minix is simple multi-priority round robin. Each runnable process is in a priority queue and has a quantum assigned. The assigned quantum of each process is periodically decreased. Each process is associated with a scheduler, e.g. a process that is responsible for making scheduling decisions for such a process.

The ''kernel'' retains a very simple round robin scheduler which always picks the process at the head of the highest priority queue. This does not guarantee that processes will not starve. It also contains a default policy. If a process is not associated with any userspace scheduler and runs out of its quantum, the quantum is renewed. If a process is associated with a scheduler, a message generated by the kernel on behalf of the process is sent to the scheduler every time the process runs out of its quantum. A process that runs out of its quantum is blocked (not runnable) until the scheduler decides.

The scheduler can change the process priority and time quantum. &lt;code&gt;sys_schedule()&lt;/code&gt; is used to change the priority and quantum and thus can make the process runnable again.

The userspace scheduler can use &lt;code&gt;sef_receive_status()&lt;/code&gt; to check whether the message was generated by the kernel or whether the massage is a fake sent by a process. This information is reliable.

== Advantages over the in-kernel scheduler ==
No need to make any changes in the kernel if a different scheduling policy is required. The ability to change the priority and time quantum allows implementation of a wide range of scheduling algorithms

== Current status ==
SCHED is the ''userspace'' scheduler for most processes. The some core system processes are scheduled by kernel using the default policy. You can find the details of the design and implementation in the projects final [//www.minix3.org/docs/scheduling/report.pdf report] by Bjorn Swift</text>
      <sha1>a76ceh8zlno8x8zhok4ve2dutlksgpz</sha1>
    </revision>
  </page>
  <page>
    <title>EDID Reading</title>
    <ns>0</ns>
    <id>99</id>
    <revision>
      <id>128</id>
      <timestamp>2021-09-07T17:34:00Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import edidreading</comment>
      <origin>128</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2906" sha1="hehk760je14k08puum9s1ru92s4h063" xml:space="preserve">This page provides the official documentation for EDID reading in MINIX 3. It describes how EDID is read by the frame buffer driver from various sources. The current version documents code in git commit '''26f14d6b''' and later. If you update this document because of changes to MINIX 3, please mention the commit ID of the change in the wiki comment.

== General Overview ==

"Extended display identification data (EDID) is a data structure provided by a digital display to describe its capabilities to a video source....The channel for transmitting the EDID from the display to the graphics card is usually the I²C bus" - [//en.wikipedia.org/wiki/Extended_display_identification_data Wikipedia].

== General Design ==

The frame buffer driver (fb) will look for a provider of EDID. If one is available, fb will request/transfer the data, do validation, parse the data into "struct edid_info", and call a function in the arch specific part of the code to apply the EDID settings.

== Providers of EDID ==

Each board has it's own way to access EDID.

=== BeagleBoard-xM ===

The 3rd I2C bus is connected, through a logic level translator IC, to the HDMI connector itself. It's possible to read the EDID info with the eeprom driver.

=== BeagleBone Black ===

Access to EDID is done through the TDA19988 HDMI Transmitter on the first I2C bus. The TDA19988 is pretty complicated and has it's own driver. It provides two I2C interfaces CEC (0x34) and HDMI (0x70). The driver accesses the CEC interface to enable the HDMI interface (which is disabled at power-up), sets up interrupts on the chip, initiates a transfer between the display and the chip, and then transfers data from the chip.

=== BeagleBone White ===

There's no on-board video, but the DVI cape wires the 2nd I2C bus to the DVI connector. Again, the eeprom driver should be used for reading the EDID.

== Finding the EDID Provider ==

As we've seen above, the driver with the EDID information will vary from board to board. Instead of hardcoding the logic into fb to decide where to read EDID from, the rc script just passes the label of the driver responsible for the EDID to the service command. Something like this:
 service up /usr/sbin/fb -dev /dev/fb0 -args edid.${minor}=${label_of_driver_with_edid}
The minor number is included because, in the future, one might want to support multiple frame buffer devices (dual monitors).

== Transferring EDID to FB ==

The EEPROM driver already implements the block device protocol, so we use that instead of coming up with a new message type, etc. To read EDID, fb just does a block device read request for 128 bytes from offset 0.

== Leveraging Existing Code ==

NetBSD provides a set of functions for validating, parsing, and printing EDID. These have been imported into the Minix tree so that the FB driver can use them. Man page [//netbsd.gw.com/cgi-bin/man-cgi?edid++NetBSD-current here].</text>
      <sha1>hehk760je14k08puum9s1ru92s4h063</sha1>
    </revision>
  </page>
  <page>
    <title>I2C Internals</title>
    <ns>0</ns>
    <id>100</id>
    <revision>
      <id>399</id>
      <parentid>129</parentid>
      <timestamp>2022-02-07T17:59:56Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>399</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9119" sha1="huwf3y0z82kzjz2t1ycnnvzmguukhtd" xml:space="preserve">This page provides the official documentation of the I2C internals of MINIX 3. It describes the overarching design themes used in the I2C subsystem as well as the I2C bus driver itself. The current version documents I2C in git commit '''fdbede5''' and later. If you update this document because of changes to MINIX 3, please mention the commit ID of the change in the wiki comment.


== General Overview ==

[//en.wikipedia.org/wiki/I%C2%B2C I2C] (Inter-Integrated Circuit) is a bus type commonly used in embedded systems to transfer data between a central processor and external integrated circuits such as eeproms, sensors, real time clocks, power management chips, and other such integrated circuits. I2C controllers are built into the processors on the BeagleBone, BeagleBone Black, and BeagleBoard-xM. Since they provide access to useful devices (power management, HDMI framer, eeprom, expansion boards, etc), support was added to Minix.

Note: in an attempt to reduce the size of this document, the author tries not to repeat information. For example, the names and numbers section discuses how device files are named (/dev/i2c-1, /dev/i2c-2, etc). That information is not repeated in the NetBSD/OpenBSD /dev Interface section.

== Terminology ==

=== Bus Drivers ===

I2C bus drivers are I2C bus managers, one instance per bus. They read and write to and from the I2C registers on the SoC to transfer data on the bus. For example, the I2C drivers directly manipulate the I2C controllers on the Cortex-A8 processor.

=== Device Drivers ===

I2C device drivers are I2C-bus-attached-device-specific drivers, one instance per I2C attached device. They communicate with the chips on the bus through the i2c bus drivers.

=== Service Labels ===

Labels are an RS concept used to uniquely identify driver instances, specified by the service command which is used to start and stop driver instances.

== Names and Numbers ==

=== Bus Numbering Conventions ===

The am335x/dm37xx hardware I2C controllers are counted starting at 0. For example, on the BeagleBone Black the buses are named i2c0, i2c1, and i2c2. However, in software they are numbered starting from 1. For example, the hardware I2C controller on the am335x SoC named i2c0 corresponds to the device file /dev/i2c-1 which is backed by the driver labelled i2c.1.

=== Device File Naming ===

The device files for the bus drivers are named using the bus numbers used in software: /dev/i2c-1 for the first bus, /dev/i2c-2 for bus 2, etc.

The device files for specific devices are named using the device name, bus number, and slave address in the form /dev/${device}b${bus_number}s${slave_addr}. For example, the device file for the eeprom on bus 3 with slave address 0x54 would be /dev/eepromb3s54

=== Service Labels ===

==== Bus Driver Labels ====

I2C bus drivers are required to be labelled in the following form: i2c.N (where N is the bus number). For example, i2c.1 is for the first I2C bus. This is because device drivers look up the bus drivers' endpoint using the label. The endpoint is the 'address' that other processes use when sending a message. If the bus driver has a different label, device drivers won't be able to find them when they look up the endpoint using the i2c.N label format. Similarly, device drivers register with DS to receive updates about their bus driver restarting. When subscribing for updates, driver construct the regular expression using the label format described above.

==== Device Driver Labels ====

I2C device driver labels only have special meaning to humans. Their format can be completely arbitrary, but for consistency's sake, it makes sense to use the same scheme for all device drivers. That scheme is as follows: driver_name.N.A (where N is the bus number and A is the slave address in hex). For example, cat24c256.1.50 is for a CAT24C256 EEPROM on I2C bus 1 having slave address 0x50.

Caveat: when reserving a device on the bus, the bus driver makes note of the label of the device driver. This is so that if the device driver is restarted, the bus driver can update the reservation table with the new endpoint of the device driver. The catch is that if you restart a driver for the same device, same bus, same slave address, and use a different label, the reservation will fail because it was reserved using the original label. The "fix" is to reboot or restart the device driver with the original label.

== Starting I2C Bus and Device Drivers ==

Within the /usr/etc/rc script, there is a block of shell script which brings up the I2C bus drivers. Then, the eepromread utility is invoked. It attempts to read an EEPROM on bus 1 with slave address 0x50. This is used to detect the board that Minix is running on. Based on the results, the proper device drivers for the board are started with the service command. Refer to that script for hints about the commands to use to start I2C drivers.

Each driver is single threaded and responsible for one and only one physical device or controller. Separate instances of each driver are started for each bus and each device. For example, on the BeagleBone Black there are 3 I2C buses. Thus, there should be 3 instances of the bus driver started. If 2 EEPROMs are attached, 2 instances of the EEPROM driver should be started. 

Caveat: device drivers reserve their devices with the bus driver. Once a device driver claims a device, it can no longer be accessed via the /dev/i2c-N interface. All access to that device must happen through an interface provided by the device driver.

== User Tools ==

There are a couple of user level tools which interact with I2C devices. Both use the /dev/i2c-N interface, so be aware that i2cscan won't detect devices claimed by drivers and eepromread won't be allowed to read the EEPROM if a driver instance for the device has been started.

=== i2cscan ===

This is a small utility imported from NetBSD. It probes the bus for devices. It uses several methods for detecting devices. However, not all methods are supported by all I2C controllers. For example, the default scan method uses a feature not supported by the I2C controllers on the BeagleBones and BeagleBoards. You should use the '-r' option on those systems to scan using only the 1 byte read method. Also note that i2cscan is not perfect and may not find all devices on the bus as some address ranges are skipped and the 1 byte read method may not find certain devices.

=== eepromread ===

This is a small Minix utility for reading the EEPROM. It's mainly used for board identification and testing. It can interpret the on board EEPROM contents as well as display the first 256 bytes of the EEPROM in HEX and ASCII.

== External Interfaces ==

=== Minix IPC Interface ===

The I2C bus driver accepts messages sent by device drivers. The message types are documented on the [[I2C Device Protocol|I2C Protocol]] wiki page. The cat24c256 driver source in conjunction with the libi2cdriver source provide a nice example of how to use this interface.

==== NetBSD/OpenBSD ====

The /dev interface implemented in NetBSD and OpenBSD is very simple and atomic. All operations happen through the 1 ioctl() call (passing a ioctl_exec_t structure), and none depend on prior calls. Everything needed is in one struct that's passed via ioctl(). Since the generic i2c bus driver only handles 1 request at once, calls from different processes at the same time don't conflict.

The main structure, ioctl_exec_t, contains pointers. Since a structure containing pointers passed via ioctl() will not pass the data pointed to, a translation must be done to "flatten" the structure. A flat version named minix_ioctl_exec_t has fixed size buffers. Before forwarding the request to VFS, libc does a translation from ioctl_exec_t to minix_ioctl_exec_t. When VFS replies, the result is translated back into the original ioctl_exec_t.

The definition of the interface is available [//cvsweb.netbsd.org/bsdweb.cgi/~checkout~/src/sys/dev/i2c/i2c_io.h?rev=1.3&amp;content-type=text/plain&amp;only_with_tag=MAIN here].

== Reservation System ==

As aluded to above, the bus drivers each maintain a table of reserved devices on their specific bus. A reservation is required before performing read/write operations on the bus using Minix IPC to the bus driver. Access through the /dev/i2c-N interface can only be to devices that haven't been reserved by a driver.

== Adding support for new I2C Controllers ==

The i2c bus driver separates the generic code that will be the same for all buses (the /dev interface, the IPC interface, the reservation system, validation, etc) and the bus specific driver code. The bus specific code simply has to provide an initialization function and set a function pointer to a minix_i2c_ioctl_exec_t handler that looks like this:
 int process(minix_i2c_ioctl_exec_t * ioctl_exec);

== libi2cdriver ==

The i2cdriver library provides common I2C device driver functions that handle tasks which would be repeated in nearly every I2C device driver. A full tutorial on developing a driver using this library is currently being developed and will be posted to the wiki soon.</text>
      <sha1>huwf3y0z82kzjz2t1ycnnvzmguukhtd</sha1>
    </revision>
  </page>
  <page>
    <title>VFS Internals</title>
    <ns>0</ns>
    <id>101</id>
    <revision>
      <id>130</id>
      <timestamp>2021-09-07T17:47:06Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import vfsinternals</comment>
      <origin>130</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="43007" sha1="ooowxlnf4bqnnpd8x1sfowdbnfmyqe6" xml:space="preserve">== General description of responsibilities ==
VFS implements the file system in cooperation with one or more File Servers
(FS). The File Servers take care of the actual file system on a partition. That
is, they interpret the data structure on disk, write and read data to/from
disk, etc. VFS sits on top of those File Servers and communicates with
them. Looking inside VFS, we can identify several roles. First, a role of VFS
is to handle most POSIX system calls that are supported by Minix. Additionally,
it supports a few calls necessary for libc. The following system calls are
handled by VFS:

access, chdir, chmod, chown, chroot, close, creat, fchdir, fcntl, fstat,
fstatfs, fstatvfs, fsync, ftruncate, getdents, ioctl, link, llseek, lseek,
lstat, mkdir, mknod, mount, open, pipe, read, readlink, rename, rmdir, select,
stat, statvfs, symlink, sync, truncate, umask, umount, unlink, utime, write.

Second, it maintains part of the state belonging to a process (process state is
spread out over the kernel, VM, PM, and VFS). For example, it maintains state
for select(2) calls, file descriptors and file positions. Also, it cooperates
with the Process Manager to handle the fork, exec, and exit system calls.
Third, VFS keeps track of endpoints that are supposed to be drivers for
character or block special files. File Servers can be regarded as drivers for
block special files, although they are handled entirely different compared
to other drivers.

The following diagram depicts how a read() on a file in /home is being handled:
&lt;pre&gt;
      ----------------
      | user process |
      ----------------
             ^      ^
             |      |
           read(2)   \
             |        \
             V         \
      ----------------  |
      |      VFS     |  |
      ----------------  |
                    ^   |
                    |   |
                    V   |
  ------- -------- ---------
  | MFS | |  MFS | |  MFS  |
  |  /  | | /usr | | /home |
  ------- -------- ---------
&lt;/pre&gt;
Diagram 1: handling of read(2) system call

The user process executes the read system call which is delivered to VFS. VFS
verifies the read is done on a valid (open) file and forwards the request
to the FS responsible for the file system on which the file resides. The FS
reads the data, copies it directly to the user process, and replies to VFS
it has executed the request. Subsequently, VFS replies to the user process
the operation is done and the user process continues to run.

== General architecture ==
VFS works roughly identical to every other server and driver in Minix; it
fetches a message (internally referred to as a job in some cases), executes
the request embedded in the message, returns a reply, and fetches the next
job. There are several sources for new jobs: from user processes, from PM, from
the kernel, and from suspended jobs inside VFS itself (suspended operations
on pipes, locks, or character special files). File Servers are regarded as
normal user processes in this case, but their abilities are limited. This
is to prevent deadlocks. Once a job is received, a worker thread starts
executing it. During the lifetime of a job, the worker thread might need
to talk to several File Servers. The protocol VFS speaks with File Servers
is fully documented on the Wiki at [0]. The protocol fields are defined in
&lt;minix/vfsif.h&gt;. If the job is an operation on a character or block special
file and the need to talk to a driver arises, VFS uses the Character and
Block Device Protocol. See [1]. This is sadly not official documentation,
but it is an accurate description of how it works. Luckily, driver writers
can use the libchardriver and libblockdriver libraries and don't have to
know the details of the protocol.

== Worker threads ==
Upon start up, VFS spawns a configurable amount of worker threads. The
main thread fetches requests and replies, and hands them off to idle or
reply-pending workers, respectively. If no worker threads are available,
the request is queued. There are 3 types of worker threads: normal, a system
worker, and a deadlock resolver. All standard system calls are handled by
normal worker threads. Jobs from PM and notifications from the kernel are taken
care of by the system worker. The deadlock resolver handles jobs from system
processes (i.e., File Servers and drivers) when there are no normal worker
threads available; all normal threads might be blocked on a single worker
thread that caused a system process to send a request on its own. To unblock
all normal threads, we need to reserve one thread to handle that situation.
VFS drives all File Servers and drivers asynchronously. While waiting for
a reply, a worker thread is blocked and other workers can keep processing
requests. Upon reply the worker thread is unblocked.
As mentioned above, the main thread is responsible for retrieving new jobs and
replies to current jobs and start or unblock the proper worker thread. Given
how many sources for new jobs and replies there are, the work for the main
thread is quite complicated. Consider Table 1.
&lt;pre&gt;
---------------------------------------------------------
| From                 |  normal  | deadlock |  system  |
---------------------------------------------------------
 msg is new job
---------------------------------------------------------
| PM                   |          |          |    X     |
+----------------------+----------+----------+----------+
| Notification from    |          |          |          |
| the kernel           |          |          |    X     |
+----------------------+----------+----------+----------+
| Notification from    |          |          |          |
| DS or system process |    X     |    X     |          |
+----------------------+----------+----------+----------+
| User process         |    X     |          |          |
+----------------------+----------+----------+----------+
| Unsuspended process  |    X     |          |          |
---------------------------------------------------------
 msg is reply
---------------------------------------------------------
| File Server reply    |  resume  |          |          |
+----------------------+----------+----------+----------+
| Sync. driver reply   |  resume  |          |          |
+----------------------+----------+----------+----------+
| Async. driver reply  | resume/X |    X     |          |
---------------------------------------------------------
&lt;/pre&gt;
Table 1: VFS' message fetching main loop. X means 'start thread'.

The reason why asynchronous driver replies get their own thread is for the
following. In some cases, a reply has a thread blocked waiting for it which
can be resumed (e.g., open). In another case there's a lot of work to be
done which involves sending new messages (e.g., select replies). Finally,
DEV_REVIVE replies unblock suspended processes which in turn generate new jobs
to be handled by the main loop (e.g., suspended reads and writes). So depending
on the reply a new thread has to be started. Having all this logic in the main
loop is messy, so we start a thread regardless of the actual reply contents.
When there are no worker threads available and there is no need to invoke
the deadlock resolver (i.e., normal system calls), the request is queued in
the fproc table. This works because a process can send only one system call
at a time. When implementing kernel threads, one has to take this assumption
into account.
The protocol PM speaks with VFS is asynchronous and PM is allowed to
send as many request to VFS as it wants. It is impossible to use the same
queueing mechanism as normal processes use, because that would allow for
just 1 queued message. Instead, the system worker maintains a linked list
of pending requests. Moreover, this queueing mechanism is also the reason
why notifications from the kernel are handled by the system worker; the
kernel has no corresponding fproc table entry (so we can't store it there)
and the linked list has no dependencies on that table.
Communication with drivers is asynchronous even when the driver uses the
synchronous driver protocol. However, to guarantee identical behavior,
access to synchronous drivers is serialized. File Servers are treated
differently. VFS was designed to be able to send requests concurrently to
File Servers, although at the time of writing there are no File Servers that
can actually make use of that functionality. To identify which reply from an
FS belongs to which worker thread, all requests have an embedded transaction
identification number (a magic number + thread id encoded in the mtype field
of a message) which the FS has to echo upon reply. Because the range of valid
transaction IDs is isolated from valid system call numbers, VFS can use that
ID to differentiate between replies from File Servers and actual new system
calls from FSes. Using this mechanism VFS is able to support FUSE and ProcFS.

== Locking ==
To ensure correct execution of system calls, worker threads sometimes need
certain objects within VFS to remain unchanged during thread suspension
and resumption (i.e., when they need to communicate with a driver or File
Server). Threads keep most state on the stack, but there are a few global
variables that require protection: the fproc table, vmnt table, vnode table,
and filp table. Other tables such as lock table, select table, and dmap table
don't require protection by means of exclusive access. There it's required
and enough to simply mark an entry in use.

=== Locking requirements ===
VFS implements the locking model described in [2]. For completeness of this
document we'll describe it here, too. The requirements are based on a threading
package that is non-preemptive. VFS must guarantee correct functioning with
several, semi-concurrently executing threads in any arbitrary order. The
latter requirement follows from the fact that threads need service from
other components like File Servers and drivers, and they may take any time
to complete requests.
# Consistency of replicated values. Several system calls rely on VFS keeping a replicated representation of data in File Servers (e.g., file sizes, file modes, etc.).
# Isolation of system calls. Many system calls involve multiple requests to FSes. Concurrent requests from other processes must not lead to otherwise impossible results (e.g., a chmod operation on a file cannot fail halfway through because it's suddenly unlinked or moved).
# Integrity of objects. From the point of view of threads, obtaining mutual exclusion is a potentially blocking operation. The integrity of any objects used across blocking calls must be guaranteed (e.g., the file mode in a vnode must remain intact not only when talking to other components, but also when obtaining a lock on a filp).
# No deadlock. Not one call may cause another call to never complete. Deadlock situations are typically the result of two or more threads that each hold exclusive access to one resource and want exclusive access to the resource held by the other thread. These resources are a) data (global variables) and b) worker threads.
## Conflicts between locking of different types of objects can be avoided by keeping a locking order: objects of different type must always be locked in the same order. If multiple objects of the same type are to be locked, then first a "common denominator" higher up in the locking order must be locked. 
## Some threads can only run to completion when another thread does work on their behalf. Examples of this are drivers and file servers that do system calls on their own (e.g., ProcFS, PFS/UNIX Domain Sockets, FUSE) or crashing components (e.g., a driver for a character special file that crashes during a request; a second thread is required to handle resource clean up or driver restart before the first thread can abort or retry the request).
# No starvation. VFS must guarantee that every system call completes in finite time (e.g., an infinite stream of reads must never completely block writes). Furthermore, we want to maximize parallelism to improve performance. This leads to:
# A request to one File Server must not block access to other FS processes. This means that most forms of locking cannot take place at a global level, and must at most take place on the file system level.
# No read-only operation on a regular file must block an independent read call to that file. In particular, (read-only) open and close operations may not block such reads, and multiple independent reads on the same file must be able to take place concurrently (i.e., reads that do not share a file position between their file descriptors).

=== Three-level Lock ===
From the requirements it follows that we need at least two locking types: read
and write locks. Concurrent reads are allowed, but writes are exclusive both
from reads and from each other. However, in a lot of cases it possible to use
a third locking type that is in between read and write lock: the serialize
lock. This is implemented in the three-level lock [2]. The three-level
lock provides:

* TLL_READ: allows an unlimited number of threads to hold the lock with the same type (both the thread itself and other threads); ''N * concurrent''.
* TLL_READSER: also allows an unlimited number of threads with type TLL_READ, but only one thread can obtain serial access to the lock; ''N * concurrent + 1 * serial''.
* TLL_WRITE: provides full mutual exclusion; ''1 * exclusive + 0 * concurrent + 0 * serial''.

In absence of TLL_READ locks, a TLL_READSER is identical to TLL_WRITE. However,
TLL_READSER never blocks concurrent TLL_READ access. TLL_READSER can be
upgraded to TLL_WRITE; the thread will block until the last TLL_READ lock
leaves and new TLL_READ locks are blocked. Locks can be downgraded to a
lower type. The three-level lock is implemented using two FIFO queues with
write-bias. This guarantees no starvation.

=== Data structures subject to locking ===
VFS has a number of global data structures. See Table 2.
&lt;pre&gt;
--------------------------------------------------------------------
| Structure  | Object description                                  |
+------------+-----------------------------------------------------|
| fproc      | Process (includes process's file descriptors)       |
+------------+-----------------------------------------------------|
| vmnt       | Virtual mount; a mounted file system                |
+------------+-----------------------------------------------------|
| vnode      | Virtual node; an open file                          |
+------------+-----------------------------------------------------|
| filp       | File position into an open file                     |
+------------+-----------------------------------------------------|
| lock       | File region locking state for an open file          |
+------------+-----------------------------------------------------|
| select     | State for an in-progress select(2) call             |
+------------+-----------------------------------------------------|
| dmap       | Mapping from major device number to a device driver |
--------------------------------------------------------------------
&lt;/pre&gt;
Table 2: VFS object types.

An fproc object is a process. An fproc object is created by fork(2)
and destroyed by exit(2) (which may, or may not, be instantiated from the
process itself). It is identified by its endpoint number ('fp_endpoint')
and process id ('fp_pid'). Both are unique although in general the endpoint
number is used throughout the system.
A vmnt object is a mounted file system. It is created by mount(2) and destroyed
by umount(2). It is identified by a device number ('m_dev') and FS endpoint
number ('m_fs_e'); both are unique to each vmnt object. There is always a
single process that handles a file system on a device and a device cannot
be mounted twice.
A vnode object is the VFS representation of an open inode on the file
system. A vnode object is created when a first process opens or creates the
corresponding file and is destroyed when the last process, which has that
file open, closes it. It is identified by a combination of FS endpoint number
('v_fs_e') and inode number of that file system ('v_inode_nr'). A vnode
might be mapped to another file system; the actual reading and writing is
handled by a different endpoint. This has no effect on locking.
A filp object contains a file position within a file. It is created when a file
is opened or anonymous pipe created and destroyed when the last user (i.e.,
process) closes it. A file descriptor always points to a single filp. A filp
always point to a single vnode, although not all vnodes are pointed to by a
filp. A filp has a reference count ('filp_count') which is identical to the
number of file descriptors pointing to it. It can be increased by a dup(2)
or fork(2). A filp can therefore be shared by multiple processes.
A lock object keeps information about locking of file regions. This has
nothing to do with the threading type of locking. The lock objects require
no locking protection and won't be discussed further.
A select object keeps information on a select(2) operation that cannot
be fulfilled immediately (waiting for timeout or file descriptors not
ready). They are identified by their owner ('requestor'); a pointer to the
fproc table. A null pointer means not in use. A select object can be used by
only one process and a process can do only one select(2) at a time. Select(2)
operates on filps and is organized in such a way that it is sufficient to
apply locking on individual filps and not on select objects themselves. They
won't be discussed further.
A dmap object is a mapping from a device number to a device driver. A device
driver can have multiple device numbers associated (e.g., TTY). Access to
a driver is exclusive when it uses the synchronous driver protocol.

=== Locking order ===
Based on the description in the previous section, we need protection for
fproc, vmnt, vnode, and filp objects. To prevent deadlocks as a result of
object locking, we need to define a strict locking order. In VFS we use the
following order:

fproc -&gt; [exec] -&gt; vmnt -&gt; vnode -&gt; filp -&gt; [block special file] -&gt; [dmap]

That is, no thread may lock an fproc object while holding a vmnt lock,
and no thread may lock a vmnt object while holding an (associated) vnode, etc.
Fproc needs protection because processes themselves can initiate system
calls, but also PM can cause system calls that have to be executed in their
name. For example, a process might be busy reading from a character device
and another process sends a termination signal. The exit(2) that follows is
sent by PM and is to be executed by the to-be-killed process itself. At this
point there is contention for the fproc object that belongs to the process,
hence the need for protection.
The exec(2) call is protected by a mutex for the following reason. VFS uses a
number of variables on the heap to read ELF headers. They are on the heap due
to their size; putting them on the stack would increase stack size demands for
worker threads. The exec call does blocking read calls and thus needs exclusive
access to these variables. However, only the exec(2) syscall needs this lock.
Access to block special files needs to be exclusive. File Servers are
responsible for handling reads from and writes to block special files; if
a block special file is on a device that is mounted, the FS responsible for
that mount point takes care of it, otherwise the FS that handles the root of
the file system is responsible. Due to mounting and unmounting file systems,
the FS handling a block special file may change. Locking the vnode is not
enough since the inode can be on an entirely different File Server. Therefore,
access to block special files must be mutually exclusive from concurrent
mount(2)/umount(2) operations. However, when we're not accessing a block
special file, we don't need this lock.

=== Vmnt (file system) locking ===
Vmnt locking cannot be seen completely separately from vnode locking. For
example, umount(2) fails if there are still in-use vnodes, which means that
FS requests [0] only involving in-use inodes do not have to acquire a vmnt
lock. On the other hand, all other request do need a vmnt lock. Extrapolating
this to system calls this means that all system calls involving a file
descriptor don't need a vmnt lock and all other system calls (that make FS
requests) do need a vmnt lock.
&lt;pre&gt;
-------------------------------------------------------------------------------
| Category          | System calls                                            |
+-------------------+---------------------------------------------------------+
| System calls with | access, chdir, chmod, chown, chroot, creat, dumpcore+,  |
| a path name       | exec, link, lstat, mkdir, mknod, mount, open, readlink, |
| argument          | rename, rmdir, stat, statvfs, symlink, truncate, umount,|
|                   | unlink, utime                                           |
+-------------------+---------------------------------------------------------+
| System calls with | close, fchdir, fcntl, fstat, fstatvfs, ftruncate,       |
| a file descriptor | getdents, ioctl, llseek, pipe, read, select, write      |
| argument          |                                                         |
+-------------------+---------------------------------------------------------+
| System calls with | fsync++, sync, umask                                    |
| other or no       |                                                         |
| arguments         |                                                         |
-------------------------------------------------------------------------------
&lt;/pre&gt;
Table    3: System call categories.
+ path name argument is implicit, the path name is "core.&lt;pid&gt;"
++ although fsync actually provides a file descriptor argument, it's only
used to find the vmnt and not to do any actual operations on

Before we describe what kind of vmnt locks VFS applies to system calls with a
path name or other arguments, we need to make some notes on path lookup. Path
lookups take arbitrary paths as input (relative and absolute). They can start
at any vmnt (based on root directory and working directory of the process doing
the lookup) and visit any file system in arbitrary order, possibly visiting
the same file system more than once. As such, VFS can never tell in advance
at which File Server a lookup will end. This has the following consequences:
* In the lookup procedure, only one vmnt must be locked at a time. When moving from one vmnt to another, the first vmnt has to be unlocked before acquiring the next lock to prevent deadlocks.
* The lookup procedure must lock each visited file system with TLL_READSER and downgrade or upgrade to the lock type desired by the caller for the destination file system (as VFS cannot know which file system is final). This is to prevent deadlocks when a thread acquires a TLL_READSER on a vmnt and another thread TLL_READ on the same vmnt. If the second thread is blocked on the first thread due to it acquiring a lock on a vnode, the first thread will be unable to upgrade a TLL_READSER lock to TLL_WRITE.

We use the following mapping for vmnt locks onto three-level lock types:
&lt;pre&gt;
-------------------------------------------------------------------------------
| Lock type  |  Mapped to  | Used for                                         |
+------------+-------------+--------------------------------------------------+
| VMNT_READ  | TLL_READ    | Read-only operations and fully independent write |
|            |             | operations                                       |
+------------+-------------+--------------------------------------------------+
| VMNT_WRITE | TLL_READSER | Independent create and modify operations         |
+------------+-------------+--------------------------------------------------+
| VMNT_EXCL  | TLL_WRITE   | Delete and dependent write operations            |
-------------------------------------------------------------------------------
&lt;/pre&gt;
Table 4: vmnt to tll lock mapping

The following table shows a sub-categorization of system calls without a
file descriptor argument, together with their locking types and motivation
as used by VFS.
&lt;pre&gt;
-------------------------------------------------------------------------------
| Group       | System calls | Lock type  | Motivation                        |
+-------------+--------------+------------+-----------------------------------+
| File open   | chdir,       | VMNT_READ  | These operations do not interfere |
| ops.        | chroot, exec,|            | with each other, as vnodes can be |
| (non-create)| open         |            | opened concurrently, and open     |
|             |              |            | operations do not affect          |
|             |              |            | replicated state.                 |
+-------------+--------------+------------+-----------------------------------+
| File create-| creat,       | VMNT_EXCL  | File create ops. require mutual   |
| and-open    | open(O_CREAT)| for create | exclusion from concurrent file    |
| ops         |              | VMNT_WRITE | open ops. If the file already     |
|             |              | for open   | existed, the VMNT_WRITE lock that |
|             |              |            | is necessary for the lookup is    |
|             |              |            | not upgraded                      |
+-------------+--------------+------------+-----------------------------------+
| File create-| pipe         | VMNT_READ  | These create nameless inodes      |
| unique-and- |              |            | which cannot be opened by means   |
| open ops.   |              |            | of a path. Their creation         |
|             |              |            | therefore does not interfere with |
|             |              |            | anything else                     |
+-------------+--------------+------------+-----------------------------------+
| File create-| mkdir, mknod,| VMNT_WRITE | These operations do not affect    |
| only ops.   | slink        |            | any VFS state, and can therefore  |
|             |              |            | take place concurrently with open |
|             |              |            | operations                        |
+-------------+--------------+------------+-----------------------------------+
| File info   | access, lstat| VMNT_READ  | These operations do not interfere |
| retrieval or| readlink,stat|            | with each other and do not modify |
| modification| utime        |            | replicated state                  |
+-------------+--------------+------------+-----------------------------------+
| File        | chmod, chown,| VMNT_READ  | These operations do not interfere |
| modification| truncate     |            | with each other. They do need     |
|             |              |            | exclusive access on the vnode     |
|             |              |            | level                             |
+-------------+--------------+------------+-----------------------------------+
| File link   | link         | VMNT_WRITE | Identical to file create-only     |
| ops.        |              |            | operations                        |
+-------------+--------------+------------+-----------------------------------+
| File unlink | rmdir, unlink| VMNT_EXCL  | These must not interfere with     |
| ops.        |              |            | file create operations, to avoid  |
|             |              |            | the scenario where inodes are     |
|             |              |            | reused immediately. However, due  |
|             |              |            | to necessary path checks, the     |
|             |              |            | vmnt is first locked VMNT_WRITE   |
|             |              |            | and then upgraded                 |
+-------------+--------------+------------+-----------------------------------+
| File rename | rename       | VMNT_EXCL  | Identical to file unlink          |
| ops.        |              |            | operations                        |
+-------------+--------------+------------+-----------------------------------+
| Non-file    | sync, umask  | VMNT_READ  | umask does not involve the file   |
| ops.        |              | or none    | system, so it does not need       |
|             |              |            | locks. sync does not alter state  |
|             |              |            | in VFS and  is atomic at the FS   |
|             |              |            | level                             |
-------------------------------------------------------------------------------
&lt;/pre&gt;
Table 5: System call without file descriptor argument sub-categorization

=== Vnode (open file) locking ===
Compared to vmnt locking, vnode locking is relatively straightforward. All
read-only accesses to vnodes that merely read the vnode object's fields are
allowed to be concurrent. Consequently, all accesses that change fields
of a vnode object must be exclusive. This leaves us with creation and
destruction of vnode objects (and related to that, their reference counts);
it's sufficient to serialize these accesses. This follows from the fact
that a vnode is only created when the first user opens it, and destroyed
when the last user closes it. A open file in process A cannot be be closed
by process B. Note that this also relies on the fact that a process can do
only one system call at a time. Kernel threads would violate this assumption.

We use the following mapping for vnode locks onto three-level lock types:
&lt;pre&gt;
-------------------------------------------------------------------------------
| Lock type  |  Mapped to  | Used for                                         |
+------------+-------------+--------------------------------------------------+
| VNODE_READ | TLL_READ    | Read access to previously opened vnodes          |
+------------+-------------+--------------------------------------------------+
| VNODE_OPCL | TLL_READSER | Creation, opening, closing, and destruction of   |
|            |             | vnodes                                           |
+------------+-------------+--------------------------------------------------+
| VNODE_WRITE| TLL_WRITE   | Write access to previously opened vnodes         |
-------------------------------------------------------------------------------
&lt;/pre&gt;
Table 6: vnode to tll lock mapping

When vnodes are destroyed, they are initially locked with VNODE_OPCL. After
all, we're going to alter the reference count, so this must be serialized. If
the reference count then reaches zero we obtain exclusive access. This should
always be immediately possible unless there is a consistency problem. See
section 4.8 for an exhaustive listing of locking methods for all operations on
vnodes.

=== Filp (file position) locking ===
The main fields of a filp object that are shared between various processes
(and by extension threads), and that can change after object creation,
are filp_count and filp_pos. Writes to and reads from filp object must be
mutually exclusive, as all system calls have to use the latest version. For
example, a read(2) call changes the file position (i.e., filp_pos), so two
concurrent reads must obtain exclusive access. Consequently, as even read
operations require exclusive access, filp object don't use three-level locks,
but only mutexes.

System calls that involve a file descriptor often access both the filp and
the corresponding vnode. The locking order requires us to first lock the
vnode and then the filp. This is taken care of at the filp level. Whenever
a filp is locked, a lock on the vnode is acquired first. Conversely, when
a filp is unlocked, the corresponding vnode is also unlocked. A convenient
consequence is that whenever a vnode is locked exclusively (VNODE_WRITE),
all corresponding filps are implicitly locked. This is of particular use
when multiple filps must be locked at the same time:
* When opening a named pipe, VFS must make sure that there is at most one filp for the reader end and one filp for the writer end.
* Pipe readers and writers must be suspended in the absence of (respectively) writers and readers.
Because both filps are linked to the same vnode object (they are for the same
pipe), it suffices to exclusively lock that vnode instead of both filp objects.

In some cases it can happen that a function that operates on a locked filp,
calls another function that triggers another lock on a different filp for
the same vnode. For example, close_filp. At some point, close_filp() calls
release() which in turn will loop through the filp table looking for pipes
being select(2)ed on. If there are, the select code will lock the filp and do
operations on it. This works fine when doing a select(2) call, but conflicts
with close(2) or exit(2). Lock_filp() makes an exception for this situation;
if you've already locked a vnode with VNODE_OPCL or VNODE_WRITE when locking
a filp, you obtain a "soft lock" on the vnode for this filp. This means
that lock_filp won't actually try to lock the vnode (which wouldn't work),
but flags the vnode as "skip unlock_vnode upon unlock_filp." Upon unlocking
the filp, the vnode remains locked, the soft lock is removed, and the filp
mutex is released. Note that this scheme does not violate the locking order;
the vnode is (already) locked before the filp.

A similar problem arises with create_pipe. In this case we obtain a new vnode
object, lock it, and obtain two new, locked, filp objects. If everything works
out and the filp objects are linked to the same vnode, we run into trouble
when unlocking both filps. The first filp being unlocked would work; the
second filp doesn't have an associated vnode that's locked anymore. Therefore
we introduced a plural unlock_filps(filp1, filp2) that can unlock two filps
that both point to the same vnode.

=== Lock characteristics per request type ===
For File Servers that support concurrent requests, it's useful to know which
locking guarantees VFS provides for vmnts and vnodes, so it can take that
into account when protecting internal data structures. READ = TLL_READ,
READSER = TLL_READSER, WRITE = TLL_WRITE. The vnode locks applies to the
REQ_INODE_NR field in requests, unless the notes say otherwise.
&lt;pre&gt;
------------------------------------------------------------------------------
| request      | vmnt    | vnode   | notes                                   |
+--------------+---------+---------+-----------------------------------------+
| REQ_BREAD    |         | READ    | VFS serializes reads from and writes to |
|              |         |         | block special files                     |
+--------------+---------+---------+-----------------------------------------+
| REQ_BWRITE   |         | WRITE   | VFS serializes reads from and writes to |
|              |         |         | block special files                     |
+--------------+---------+---------+-----------------------------------------+
| REQ_CHMOD    | READ    | WRITE   | vmnt is only locked if file is not      |
|              |         |         | already opened                          |
+--------------+---------+---------+-----------------------------------------+
| REQ_CHOWN    | READ    | WRITE   | vmnt is only locked if file is not      |
|              |         |         | already opened                          |
+--------------+---------+---------+-----------------------------------------+
| REQ_CREATE   | WRITE   | WRITE   | The directory in which the file is      |
|              |         |         | created is write locked                 |
+--------------+---------+---------+-----------------------------------------+
| REQ_FLUSH    |         |         | Mutually exclusive to REQ_BREAD and     |
|              |         |         | REQ_BWRITE                              |
+--------------+---------+---------+-----------------------------------------+
| REQ_FSTATFS  |         |         |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_FTRUNC   | READ    | WRITE   | vmnt is only locked if file is not      |
|              |         |         | already opened                          |
+--------------+---------+---------+-----------------------------------------+
| REQ_GETDENTS | READ    | READ    | vmnt is only locked if file is not      |
|              |         |         | already opened                          |
+--------------+---------+---------+-----------------------------------------+
| REQ_INHIBREAD|         | READ    |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_LINK     | READSER | WRITE   | REQ_INODE_NR is locked READ             |
|              |         |         | REQ_DIR_INO is locked WRITE             |
+--------------+---------+---------+-----------------------------------------+
| REQ_LOOKUP   | READSER |         |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_MKDIR    | READSER | WRITE   |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_MKNOD    | READSER | WRITE   |                                         |
+--------------+---------+---------+-----------------------------------------+
|REQ_MOUNTPOINT| WRITE   | WRITE   |                                         |
+--------------+---------+---------+-----------------------------------------+
|REQ_NEW_DRIVER|         |         |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_NEWNODE  |         |         | Only sent to PFS                        |
+--------------+---------+---------+-----------------------------------------+
| REQ_PUTNODE  |         | READSER | READSER when dropping all but one       |
|              |         | or WRITE| references. WRITE when final reference  |
|              |         |         | is dropped (i.e., no longer in use)     |
+--------------+---------+---------+-----------------------------------------+
| REQ_RDLINK   | READ    | READ    | In some circumstances stricter locking  |
|              |         |         | might be applied, but not guaranteed    |
+--------------+---------+---------+-----------------------------------------+
| REQ_READ     |         | READ    |                                         |
+--------------+---------+---------+-----------------------------------------+
|REQ_READSUPER | WRITE   |         |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_RENAME   | WRITE   | WRITE   |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_RMDIR    | WRITE   | WRITE   |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_SLINK    | READSER | READ    |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_STAT     | READ    | READ    | vmnt is only locked if file is not      |
|              |         |         | already opened                          |
+--------------+---------+---------+-----------------------------------------+
| REQ_STATVFS  | READ    | READ    | vmnt is only locked if file is not      |
|              |         |         | already opened                          |
+--------------+---------+---------+-----------------------------------------+
| REQ_SYNC     | READ    |         |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_UNLINK   | WRITE   | WRITE   |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_UNMOUNT  | WRITE   |         |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_UTIME    | READ    | READ    |                                         |
+--------------+---------+---------+-----------------------------------------+
| REQ_WRITE    |         | WRITE   |                                         |
-----------------------------------------------------------------------------+
&lt;/pre&gt;
Table 7: VFS-FS requests locking guarantees

== Recovery from driver crashes ==
VFS can recover from block special file and character special file driver
crashes. It can recover to some degree from a crashed File Server (which we
can regard as a driver).

=== Recovery from block drivers crashes ===
When reading or writing, VFS doesn't communicate with block drivers directly,
but always through a File Server (the root File Server being default). If the
block driver crashes, the File Server does most of the work of the recovery
procedure. VFS loops through all open files for block special files that
were handled by this driver and reopens them. After that it sends the new
endpoint to the File Server so it can finish the recover procedure. Finally,
the File Server will retry pending requests if possible. However, reopening
files can cause the block driver to crash again. When that happens, VFS will
stop the recovery. A driver can return ERESTART to VFS to tell it to retry
a request. VFS does this with an arbitrary maximum of 5 attempts.

=== Recovery from character driver crashes ===
Character special files are treated differently. Once VFS has found out a
driver has been restarted, it will stop the current request (if there is
any). It makes no sense to retry requests due to the nature of character
special files. If a character special driver can restart without changing
endpoints, this merely results in the current request (e.g., read, write, or
ioctl) failing and allows the user process to reissue the same request. On
the other hand, if a driver restart causes the driver to change endpoint
number, all associated file descriptors are marked invalid and subsequent
operations on them will always fail with a bad file descriptor error.

=== Recovery from File Server crashes ===
At the time of writing we cannot recover from crashed File Servers. When
VFS detects it has to clean up the remnants of a File Server process (i.e.,
through an exit(2)), it marks all associated file descriptors as invalid
and cancels ongoing and pending requests to that File Server. Resources that
were in use by the File Server are cleaned up.

[0] [[VFS-FS Protocol]]

[1] https://www.cs.vu.nl/~dcvmoole/minix/blockchar.txt

[2] https://www.minix3.org/theses/moolenbroek-multimedia-support.pdf</text>
      <sha1>ooowxlnf4bqnnpd8x1sfowdbnfmyqe6</sha1>
    </revision>
  </page>
  <page>
    <title>File:Fork.png</title>
    <ns>6</ns>
    <id>102</id>
    <revision>
      <id>131</id>
      <timestamp>2021-09-07T17:53:00Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>131</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-07T17:53:00Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Fork.png</filename>
      <src>https://wiki.iberty.cf/images/4/4c/Fork.png</src>
      <size>16456</size>
      <sha1base36>opuuajyt9q0lguwu9aio56jt7w1lsuz</sha1base36>
      <rel>4/4c/Fork.png</rel>
      <contents encoding="base64">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
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Mmap.png</title>
    <ns>6</ns>
    <id>103</id>
    <revision>
      <id>132</id>
      <timestamp>2021-09-07T17:53:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>132</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-07T17:53:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Mmap.png</filename>
      <src>https://wiki.iberty.cf/images/b/ba/Mmap.png</src>
      <size>17845</size>
      <sha1base36>68c5vcen8688aa39uckftsgw2ato747</sha1base36>
      <rel>b/ba/Mmap.png</rel>
      <contents encoding="base64">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
tbUp/0aX8VBnc5iklitsBHXeY9ToJheoc139NyDqDhVuKysrO3z4cFVVlYy2o6PDkKizOUxSyxU2
gjrvMWp0kwvUua7+GxB1rz/9wr59+w4ePCijFbYr/zqJ8VBnc5iklitsBHXeY9ToJheoc139NyDq
yja8+Oqrr8pohe2yklX+RUrjoc7mMEktV9gI6rzHqNFNLlDnuvpvQNRVbC09cOCAjHb//v0CduWf
RDce6mwOk9RyhY2gznuMGt3kAnWuq/+gDtSBOlCHUaAO1IE6shHUjd6QW1renDYtxsfHZwjnDu0s
UAfqRnazF4cjEp+gzoNQ57YZJbWMV8HvvfdrZvPOUQw8DzFqZJMI1IE62675/FmTJ4fl5Cz81a/O
gTpWdaDODdukSRP++7/bh1lihlNTWNWBumG+/9AZ6pTGxx+ffuSRednZD4A6UAfqPKeagDpQB+pG
EnU3rvgvZ8LCTGr/zp2FUVGTx4wZI7vy9nPt2mxZ+ckmDfXd6B/+cLGo6ImYmMjg4Ft27Hha6fzT
nzq2b/9ebOyUkJBJjz764CeftCj99fWvJSZODwoKuP322w4cKHLQ6TbUyTD37n32S1+aGhDg/5Wv
xDc3l5WVbZs2LUbuJzn5TovluHKY1frukiVzQ0NN8k784YfT//Vfz/avOK++ukWGoJx49Wpl/9ey
6ZVeUOekUcP38wc/WHvrraHyo7y8b3366XmX2jjgkG3ejL2bl6R46qml0i85IieqsWEzHXw0cibA
bBKuz0VG0ShtrbCX/vb8URv2iowBkssV+ei24BxCwjq+/gjO3cig7qGHZv/TP9Uqu3IrGRlJ//iP
NbKlp3/jhReeVPqLi/Nmz/56b+97v/5147p12Upnaen6uXPlpU9I58qVWevXr1T6b7st/OjRHWL6
3//9qdzcxQ463Ym6BQvS5P5lDl56Ke+WWyY8+OCsDz44oezOmjVDOeyuu6Y1NOz/r/9q+81vmvPz
lz3++MP9S8/ixekfflgtJ27b9lRq6tf6v5ZNr3SEOmeMGr6fEmYff3xaNmls3fqXLrVxwCHbvBl7
N//8848/8ECqpIxsmZkpamzYSwdt6g0YYPYWcw7ePrvTKG2tsDdee/6oDXtFxgDJ5Yp8dFtwDiFh
B7z+SM3dUFAnFixffr9sav9HH51UD4uLm9rdfUxpy7uq+PgopX3HHdH932RNnx7b0/P5+/d//ud6
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
oA7UgTrPRd2uXRuioibfemvoE098U32cBNR5gj+gTl/BCepAHX8YjL93hVH8YTACFdSBOlAH6jAK
1IE6UEc2gjqqCagDdaAO1IE6KjioA3WgDtSBOlBHBccoUEc+ehrqrK+Uyjl63OTOh4k6XYzdwTDd
llr6DZIh2GiYIWOUhyeXN+ejq+u/DdTpfRsO6vQ+TLellmE25yu4l29eZZTuUMc2YP3/AuquX+m6
cviEsh3bvuutTS8dXL/19adfKNvwoo6213f/jYxz3759ZWVlZrO5ubnZGdTpbuw2h+kGGSNIBmWj
wYaMUR6bXOSj6+r/F1CnVXV1tSDx4MGDcs6repPcs9y53L+Moq2tzRnU6XHs/YfpZuk6SIZmozGG
jFGen1xem48uqv92USfrvqqqKjla2Lhfb5J7ljuX+5dRdHR0DBZ1ehl7/2G6WboOkqHZaIwhY5Tn
J5fX5qOL6r9d1AkM5TihoqwBD+tNcs9y53L/MorOzs7Bok4vY+8/TDdL10EyNBuNMWSM8vzk8tp8
dFH9t4s6OUJ4KIc2Nzef1ZvknuXO5f5lFD09PYNFnV7G3n+Ybpaug2RoNhpjyBjl+cnltfnoovpv
F3UG06BQhxBCyEj1H9SBOoQQAnWgDiGEkAFQ5w2bPdSxsbGxsRl7+/+xO6i8S8skxAAAAABJRU5E
rkJggg==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Mmap-file.png</title>
    <ns>6</ns>
    <id>104</id>
    <revision>
      <id>133</id>
      <timestamp>2021-09-07T17:53:30Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>133</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-07T17:53:30Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Mmap-file.png</filename>
      <src>https://wiki.iberty.cf/images/2/24/Mmap-file.png</src>
      <size>30289</size>
      <sha1base36>4b4hpl4xw2vzqdmt9t55zdpmnuu0m3r</sha1base36>
      <rel>2/24/Mmap-file.png</rel>
      <contents encoding="base64">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
ah4/fnzE7eEpVt7BwcGdO3fGxsbOHkYKL7/8slQqPz116lRiYqK/v//dd98thU8//VTd8N13333g
gQcChklPT//oo4/sUd6zZ8/ed9998kbh4eHKM3D2KK9w6NChuLi4u+66SzY/fPgwygsATs6JEyeU
mUoKKC8AuL3yTmDSe+yxx6KioubMmePr67to0aKNGzfevHlzupTXLc8cygsAAADgSOV1kuagvCgv
AAAAAMqL8gIAAACgvCgvygsAAACA8qK8KC8AAAAAyusEyjv45a3uM5dc/TXY3TsB5XW5tltspvvh
Hn1yXGfNzZpMUDSWGY8plwHluuLkippkrTl/oryynpRd/dV95uIElNfl2m6xme6He/TJcZ01N2sy
QdFYZjymXAaU64qTK2qSteZYUN6BoyV/d6XcFV8D75RMUnldou02mumu86/r9skJnDW3aTJB0Vhm
PKZcBpSri5NraZLt5lhQXtnm//2/m674+s+XyyepvC7RdhvNdNf513X75ATOmts0maBoLDMeUy4D
ytXFybU0yXZz3FB5zxYWV1VVXbp06fLly1evXu3p6XFL5bXYTOZfNzhrKK/nBEWvYMZjymVAObk4
uaLyWmuOGyrvqfzXysrKzpw5U11dLa3t7Ox0S+W12EzmXzc4ayiv5wRFr2DGY8plQDm5OLmi8lpr
jhsq7y9f/umJEyc++OADaa04vgi+WyqvxWYy/7rBWUN5PScoegUzHlMuA8rJxckVlddac9xQecv2
vP6LX/xCWiuOX1VV1dra6pbKa7GZzL9ucNZQXs8Jil7BjMeUy4BycnFyReW11hw3VN6KopL3339f
Wvvee++J4F++fNktlddiM5l/3eCsobyeExS9ghmPKZcB5eTi5IrKa605KC/Ky/zLXExQNJYZD1Be
plyUF+XlAsD86zFzcVvbR4sXR3t5eU1g24lthfK6dGMtdpgp6Qkor/tNuVPbMdx79rCW1ZRniPKi
vE49zlFe5Gb6Xo8++hdVVUdmsJ87SVDTfW12myu0tsOooTHjMeWivCjvjMyrU6O8Xn9k4cKQ3NzV
f//3V1Be7vKivO43F8+bN/d//s+OSU5nk5nXuMvrWo212GFQXqZclHeSIXCXd4aVVyn8zd/Ufe97
K3Nyvovyorwor/vJzWTmU5TXAxtr8VyjvEy5KC/K6w7K+/Ue/3NTSIherT9yJD8ycqG3t7csyq/7
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
8+batWu3bdum1L/00kvK+m1tbUlJSRbv8o6utLY3i2ksWLDg+PHjZrP5iy++eOaZZ2zvwcZdXvsP
w9/fv6+vT7sfSVUquSBxbQY6EmmgvCgvygtTgP3PEIi3Xb16VSmLn8liR0eHumjRz3p6esLCwtTN
6+vrlXJdXZ16C9NafVxcXGNjo1K+du1aRESEUpYV1PVra2vtVF5re7OYxqJFi4qKin77299qf2Rt
D+NSXms70el0zqa8PGpDFEBH8sA0UF6UF+WFMT60qi5WV1cnJyfr9Xrl/+/PmjVLXcFkMillKYjk
2a4X4dN+TsDHx0e1Q+36diqvtb1Z5LPPPlu5cmVgYGBMTExZWZntPYxLea3tJCoqasSgMBqNUkmv
AwBAeVFelBecUXmjo6NLSkq6uroGBwflX632qXdnpWDxLq+2PjY2tqWlZfRhaO/y1tXV2am81vZm
gzt37nzwwQehoaG29+Dt7W2/8lrbSXZ29uHDh7U1xcXFq1evptcBAKC8KC/KC86ovOKIJ0+eNJvN
zc3NWVlZWu1LS0tTPrMrhR07dtiuLywsTE1NFbsdGBioqalZtWqVUp+Xl6euLyvYqbzW9mYRcU1l
TVHehQsX2t5DcHCwquATPgz5JWHFihXaYzAYDEePHqXXAQCgvCgvygvOqLynTp2KjY319fUNDw8v
KirSap/yzQx6vX7jxo3ql9daqx8aGpLN4+Li/Pz84uPjpeco9bJCTk6OrCybqN/YMKZrWtubRUpL
S6UJOp1u6dKlp0+ftr2HgoKCefPmTfIw+vr6goKCmpqalMXGxsYZ/1MU7oe57Ubn8bNDpgGiAACU
F+VFeT0Ohz1DYO27aR3/N4GdIY3R7NmzZ/ny5UpZCjP+B4fd8lEbUd7KkIzLOa/2NbR6eBTAmCIN
lBflRXk97jdalNfxadAxZtB6y30SpXWfxj99491f2XPTl14BjCnPSQPlRXlRXuYdN1ReL0vQJdz+
8izWe+6uNGngOV2qFMa86YupAGMK5UV5UV6Ul3mHNIjCJa33/Nxl0savX96JFX6pNm760iuAMYXy
orwoL8rrqnMNL168Rr68EytDVnafuTTmmswhgPKivCgvyovyusZcY/s0eWwyPF/iIVH0VNQon22Q
V4VvcqV+RVVo5m9fOTrQ0cUAAcaUJ6eB8qK8KC/KC+Buvnt+nqHC/9G6x35888MLDBAAQHlRXpTX
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
/wOL3QAG/fj74AAAAABJRU5ErkJggg==
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Pagefault.png</title>
    <ns>6</ns>
    <id>105</id>
    <revision>
      <id>134</id>
      <timestamp>2021-09-07T17:53:51Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>134</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-07T17:53:51Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Pagefault.png</filename>
      <src>https://wiki.iberty.cf/images/a/a5/Pagefault.png</src>
      <size>22659</size>
      <sha1base36>hp7esaxqkk6h3f17g70nl2233b7j8mc</sha1base36>
      <rel>a/a5/Pagefault.png</rel>
      <contents encoding="base64">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
jxo1Snn5/PPZU6de7ePjHRNz7ZkzRcpudt6OaQ25aUmq27Y9cs01wd7eY77zncj6+oKCgg3TpoUp
RTGZ9im7dXbuv+OOOQEBvuPHj7399qQ//ammd8tarabl8uWXx3Ny7g0LC/Lzu+qZZ9a4w7glsfz8
56smTQqQ6DIyfnzpUov9PD//vPn++xfJ9smTA+WNarxWTwoPCxypkdWrTI8PkaWq6oXo6OlSR6nm
iy/mDKCOQzWA9bhi2Loy2ApNXZEdVq1aKv9XFllR7wIOSdPSsQPuWPtNa/Uw7H/+CDaqI1dRO0Ob
I2+3utgJ0Gpvu9i5YL8ujgxb9mPp81seTCb9Nq0DB7ZOnOi/f/+zysa8vKw5c2SMP/jnP9cuWzY/
K2uZuvNtt816770K9WVqatLbb5dKw23YcH98/Pf6fDumNRymtWBBQnf3AanCk09mXHXV2IULE8+d
O6i8TEycoez23e9Oq67e8emnTX/9a31m5uJ77rm9d8tarablsmlTxqxZ18nXksquXr3UTUwrOXnm
u+8elkVWcnP/j/08H3vsnptvjpdzRJaUlFg1XkdOij5rZOsq02OHq6+esHfvM3Kt+f3vy9LTUwdQ
xyEcwCyvGLZCsBWauiKXQgn/nXfKZUlK+sHjj983hE1Lxw64Y+03rdXD6PPzR6pRHbmK2snEkbdb
XewEaLW3XexcsF8XR4Yt+7H0+S0PJpP+mdavfrV+ypSJLS2vqxunTw83m7/R8A8+qBJNVnc+f/6Q
5Xvff79KWf/kk8YrrjD0+XZMazhM68KFSrUKtopiuXz44W9CQib3btk+3/itb4Va/VHJtcetjo5i
Zb29fW9kZIj9PCMigtUfYeWNarz9PSms1shB0woNnbx160N/+EO5rRr1WcchHMAsrxi2QrAVmroi
O6hVkCNXqzAkTUvHDknH9m5aq4fR5+ePVKM6chW1k0l/L8KOBGj1Q1zsXHD8t4e2hi37sfT5LQ8m
k/6ZlhziI4/cbblRimR5l9jT01Pd+auvTtj6jbv60s7bMa3hMC1HXh479sbs2T/w9x+vFMXLy9P+
aG21WD4+3p991uxupqV+y7IiCdjPU3ZQb1zL/v06KfqskYOm1dq6S366DQz0nTYt7NChXw2gjkM4
gFleMWyFYCs0dcXygC2rMCRNS8cOuGPtN639ktn6/JFqVEdeOpiJI2054LPexc4F+3VxfNiyFUuf
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
r3/962nTpvn4+MTExJjNZjuHJxw5ciQ6Olp2njp16ksvvWRno/1AxnmMnjBhwsMPPyzHo5S2u7s7
KysrJCTE19d30aJF7e3tg28X5mNqDSpCJtSFDEHjqY78Ux7EDJKTk9+7jKxs2LBB2f7d7363pqbm
s88++/DDDzMzM++55x5l+2OPPXbzzTdfuExKSopqP/n5+XPmzHn77bf/8pe/LFu2TCSjt0XZ+kz7
pmX/npb8rwULFpw7d07k6amnnrrqqqsWLlwoySovExMT7R/e1VdfXVxcLLb0hz/8IT093c5G+4Fs
9/heY2NjQkKCalrZ2dlxcXG1tbUnT55MTU2VzxmSduG01NqPSoRAJtSFDEHLqWrCtM6ePfvNra+O
jsjIyN77fPTRRyEhIcp6RESEeqNI3qg60PTp0zs7O5X1P/7xj1OnTrUvSZafOUjTev/995X1Tz/9
VF5+8MEH6ssrrrjC/uGFhoY+99xz77zzjuVnWt1oPxClVyoqKlTTkiSrqqqU9ZaWluDgYM5zrhFk
AtSFDMEdTevzzz9X1mXFx8dHWT9+/Pjs2bP9/f2VX9t5eXkp22UHdYa77K86kDiN5a/5PD09e0uS
rc8cpGk58tLW4Z04cSI1NTUwMHDatGllZWV2NtoPROkVk8mkmpZs7/EVOc+5RpAJUBcyBLe+pyUr
6j0tWdm5c+ef//znv//97/JfVVls3dOKioo6f/68fROy9ZkiJZ9++qmy/sEHH/QWrFGjRg3StGwd
nsI//vGP0tLSoKAgOxvtB9L7npZsr6ur4zznGkEmQF3IEFzftOzPiE9JSVHmacnK448/rmwXw9i/
f/+lS5fkKO+44w5VLB599FF1ntZNN92kbv/lL3+ZnJxsMpm++OKLM2fOLF68uLf62PrM+Pj4J554
4pNPPnn77bcXLlzY27QmTpwonzwY07J1eEuWLBFflI0iVVOmTLGz0X4gyjytG2+8UTWtnJwc+b7E
vTo7O8vKyhYsWDD4dmE+ptagImRCXcgQNJ7qyD/lQf3bQ39//5/+9KfqbwYPHToUFRU1ZsyYsLCw
5557ThWLzz///L777pOd5S0bN26UHdQ/7pPdpk+fbjAYrr322pKSkt7qY+sz29vbY2JilL/1e/75
53ubVn5+vp+fn62/PXTkpa3D2717txySfOno6Oiamho7G+0HMtZjdGBg4Jo1a0aPHq2Utru7Ozc3
NzIy0tvbW964Y8cOtermhuOt23Z3mzo5xwAAAFzftAb83ra2tmuuuYZ/9FB9npbYWGhoqCOFF9Mq
DkyuWrimo7Ke0wAAAADT+ierV6/+4IMPfv/738+ZM2fNmjVolgTygkd0fX19XFzc3Xff7WDtRbb2
eM6UDigJX9jy85e5xQUAAIBpfTPnKSQkZNKkSffee686k92dkUACPLwDAwOXLFnS0dHhePlFtvaO
S5QmKPSMKTLEc4sLAABAl6ZlZ0Y8jOy/xvP1rxHHz5K3K0vh6Fg7t7iYj6k1qAiZUBcyBI2n6ryn
PLDoaRk1szhw7uldpX3uyVk64j8qEQKZUBcyBC2nOvLP04KRvafVtru0yBCvaNPeq2YZJ6bsC5r3
24e2dDafUPqDf9aaKy+ZAHUhQ1LFtDCtgfSKqln7rr656IqEynmZJ3+9r0d/YFpceckEqAsZkiqm
hWn1u1dEswpHxxZ6xVjexOrdH/a/aEFBgdForK9nHj1XXjIB6kKGpDpypsWMeK2ZVlth2d6rZvW+
idVf09qxY8euXbtqamo4XUcEZsiSCXUhQ9B4qiP/lAdwvmmZG443bthu9SYWpgUAAIBpgZOmTGFa
AAAAmBZgWgAAAJgWYFoAAACYFjPiMS1MSxcwQ5ZMqAsZgsZT5SkPmBampe8flQiBTKgLGYKWU8W0
MC1Mi2sEmQB1IUNSxbQA0wKuvGRCXcgQMC1MC9MCrrxkAtSFDEnVqabFjHg3Ny0PDw8NnmDFxcXh
4eEDO7b+vmvt2rVJSUnKemJi4oMPPjgk3wIzZMmEupAhaDxVnvKAabmvaV133XXbt28f2Hv79R21
t7f7+/tXV1crLysrKwMCAs6ePcs1DgDAHW6bYVqYlpua1rhx48xm8yBNy5FvLS8vLzk52XJLYmLi
1q1buQABAGBagGm5rGkN5qj6ZVrz58/Pz8+33LJ58+Zbb72VCxAAAKYFmNZATKuzs3PZsmV+fn4T
JkxYv369qiNms3n58uUTLiMr9m8pybsefvjhwMBA+Zy77rpLPlPZfuTIkXnz5snGcePGpaSktLa2
qh++dOlS5YvKG9Uv2t3dnZWVFRIS4uvru2jRovb2duXDVex8Zg+R6iFYPT5EeP3117/97W8bDIbg
4OCnn35a2RgaGnr06FHLz6murg4LC+MCBACAaTEjHtMaiGk98MAD8fHxjY2NDQ0NMTExqohkZmbK
9obLyPaVK1faNy3lQwRZWbVqlbJ9+vTpb7755tmzZ0+fPp2WlrZ48WJle0ZGRmJiorJ/QkKC+kWz
s7Pj4uJqa2tPnjyZmpqanp7e26JsfaZ90+q9w6RJk7Zt2ybO95vf/ObHP/6xstHHx6ejo8NyN7E9
2Tj4AjFDlkyoCxmCxlPlKQ+Y1rCYVlhYWEVFhbJeXl6u6khoaKjldvv3deRd6s6HDx+2unNbW1tQ
UJD64ZWVlcq6vFH9opGRkVVVVcp6S0tLcHCwVUmy+pn9Na2rr746Nzf3t7/9reVGg8EwTKbFX32T
CXUhQ9B4qpgWpjUspiVuYTKZlHVZUXWkx3Z5ad+0rO5cUlISGxvr6+ur/NrOy8tL/XD115GWX1Sc
xvLXfJ6enr0lydZn9te0Dhw4MHfuXD8/v/Dw8IKCAlUBe0RUXV0tG7nyMhpRFyBDTAvTwrQGe0/r
8OHDg7+nJSvqzrKSl5d34sSJrq4u+a/lh1u9pxUREVFXV2f18y0P2OpnWt6Oam5u7i1Yo0aN6v3J
586de/nllydOnKi8nD9//jPPPGO5w+bNm2+55RauvIxG1AXIENPCtDCtgZhWZmZmQkKCOsVK9ZKM
jAx1nlZsbKy8tG9a6ofIijqpSwzmhRdeMJvNtbW18+bNs/xwdZ7WjTfeqG7PycmRLyru1dnZWVZW
tmDBgt6mZeszZ8yYsXr16vb2dtmenJzc27QCAgJUHRTEn5QvJKY1efJkZaM43OzZsy2/taSkpC1b
tnDlZTSiLkCGmBYz4jGtgZiW8meAvr6+gYGBln97aDKZ0tLSlL89lBX1l4O2TEv520P5nDvvvFP9
zeArr7wSERExevToKVOm5ObmWn74kiVLlC+6Zs0a2UHZ3t3dLbtFRkZ6e3tHRUXJMfc2LVufWV5e
Hh0drfwt4caNG3ubVnZ29vjx49WXW7dulc+R/b/97W+/+eabysaOjg5/f/8jR44oL6uqqno8udTc
cLx12+5uU2d/C8QMWTKhLmQIGk+VpzxgWsNiWkPCYJ53dejQoSGZCDVUrFu3btasWcq6rPT+13jE
tIoDk2uWPtJRWc+1DwDAlW6bYVqYluuY1ooVK5qbm+vr6+Pi4u6++259nY0iW3s8Z0qq/xl1x/Ff
vjaAW1wAAIBpAaZlxah6MzDTysnJCQoKCgwMXLJkSY8HK+hFtoquSJBgiwzxssItLgAATAswreG6
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
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Pagefault-file.png</title>
    <ns>6</ns>
    <id>106</id>
    <revision>
      <id>135</id>
      <timestamp>2021-09-07T17:54:02Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>135</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-07T17:54:02Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Pagefault-file.png</filename>
      <src>https://wiki.iberty.cf/images/3/3b/Pagefault-file.png</src>
      <size>43026</size>
      <sha1base36>m1qzpxqwtgf3rn6143ik000n7x1h7xi</sha1base36>
      <rel>3/3b/Pagefault-file.png</rel>
      <contents encoding="base64">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
mY8Qc4TQW61W4fQOh4NTw6TAkCxSAioEqCvSCH6tV8WvzH548z7n681zlmP2waz1crlwbgq28xEh
kBJQIUBdkUaQa726fmX23etv/+zb9cN/ZRbQeqBHSAmoEKCuSAOtV4zWA1oP9AgpARUC1BVpoPVo
PVqP1nOiBFICKgSoK9JA6wM+ZBaUqPUMAAo26BFSAioEqCvSCH6tD7VfmYUQ0HoAAACAkIEHXAJa
DwAAAIDWo/WA1gMAAACg9Wg9oPUAAAAAaP0kaD1DZhkyC/QIKQEVAtQVaahT61XxK7PAAy6BHiEl
oEKAuiKN0Nb6yXnA5V9+99//dvbiuE/iY8ZxbX/5rz/g8d60fvDy1StHWyZoEp8y7uscvGJTyllp
QrMNnh4JWCcGLM+JTklBNcwxFWzHEcUTwoU3oXXlT+UE1TUrGK5WHkMbovUTF9q4J+Btdz6m9ZKC
B/n02+6LeLw3rZdKR0HTlaOnlHIlUFy2Qd6JIZOngmqYY4rigdAoPH8qh+PLn9CGaL2CQvO2Ox60
3rlvz7+drQ/Cyfn8HrTeH60P2h4c3puK03pFZKuITgyBPBVXwxxTFA8ovfD8rxyuWf6E5lHrgzw0
37vjQevFe/73fy8F4fSbM/VovT9aH7Q9OLw3Faf1ishWEZ0YAnkqroY5pigeUHrh+V85XLP8Cc2j
1gd5aL53R3la3/b8S729vZcvXx4cHHzrrbd+//vfo/XK1fpjNbsMBkNLS8uZM2f6+vr6+/u5Eiju
XDm2TgwZrVdQDXNMUTwQGlrvT+VwzfInNOVqvbfdUZ7WNzy19+TJk11dXefPnxdm/84776D1ytX6
VzY9VVdXd/To0ebmZlGaVquVK4HizpVj68SQ0XoF1TDHFMUDoaH1/lQO1yx/QlOu1nvbHeVp/Y8e
f07sxokTJ4TZX758+a233kLrlav1Lz325KFDh15++WXRp+KPTvEXJ1cCxZ0rx9aJIaP1CqphjimK
B0JD6/2pHK5Z/oSmXK33tjvK0/ofbn/2Bz/4gdiNkydP9vb2Xr9+Ha1XrtbXbX76e9/7nihN8Uen
wWAwm81cCRR3rhxbJ4aM1iuohjmmKB4IDa33p3K4ZvkTmnK13tvuKE/r9bV7hNYfOXKkoaGhq6tr
cHAQrVeu1ovePHz4sCjNF198UfypdubMGa4EijtXjq0TQ0brFVTDHFMUD4SG1vtTOVyz/AlNuVrv
bXfQerSeqxoKgtZjZhxTFA+Fh9aj9Wg9Wo/Wo/WcK9F6zIxjiuKh8NB6tF4pWh8WFhawLfb2WWg9
Wq/aK0FPzw/mz08Z22E4cQcvWo+ZhaRdeTzcxvc4onhCtfAmWpZCSeu9ZTXuGaL1aD1aP5mHGQoy
fLr77s8aDHuD7TITnFofsJMVZhaqWu9+uMnlhNZTeGg9Wh8MFyC0Hq3nTqfiFWTmzOnvvWe5yQMq
qP424249BG0NeDzc0HoKD60f3xC4W4/Wo/VovUoV5GYOQLSeGuaYuvnDDa2n8NB6tD4Etf7ChVcT
E2fv27dZtP/nf6w7djw6b97cmJiZ69bd94c/9MgL7927KSlpzpQpU6SX3/te9e23fyIqKjIr686r
VxukxXy8Ha0fd60XqR48+PgddyRGRk771KfSzOa6urqn5s9PkTrFbj8uLeZ0nvjqV5fGxmpnzpz+
5S/n//a3Z4arocfedJ/+8pcLNTUPp6QkREfftnv3Y2rQehHLP/3TxtmzY0V069d/7f33z/nO8733
LI88skrMnzMnTrxRjtfjQRHmhj995NHmh6xETJ2dL2RkLBD9KHrz8OGaMfTjBGn9kBOItxOFtwzl
hlhg48Y14l/FJBry/VfV1rDijil/Tlk+riP+vN3j57ofKcPrytsnBuzYgYkrPI8d5+2U63Hh0QrP
xJ12fJ9jA3bB8n3N8rgZ43usjZfW+3lK8X2FHXFrb353Rqf1J0/unzUr5sSJ56WZe/ZULV0qsjj1
H//RXVKyoqqqRF74S19a/Ktftcsvi4vzf/GLFtElTz31iE732RHfjtZPhNYXFeW6XCdFLzzzzPrb
bpt+3315b7xxSnqZl7dQWuzTn57f1fXiH//Y97vfmcvLV3/9618e7ogee9N92rlz/eLFnxOfJXq2
snKNSrS+oCDzzTfbxCQatbX/4DvPb37z61/8ok4cI2Jatixbjtefg2LEPvJ2k37IAp/4RHxj425x
vv6Xf2ktKyseQz9OnNa7n0C8ZeItQ7khTo6iL375S6OY8vM//+ST31B5DSvumPLnlOXjkPHn7SPe
LBxeV94+MWDHDkxc4XnsOG+nXI8Lj1Z4Ju604/scG7ALlu9rlsfNGN9jbRy13p9TirzxHq+wI27t
ze/OKLT+O9/ZPnfurHPnfiTPXLBgnsPx4R8ov/51p/iLRF74+vXX3N/79tudUvvdd3tvuUUz4tvR
+onQ+rfe6pB7wVunuE//9V+vJyXNGX5tG/GNn/xkssc7oKGt9QMDTVLbZmtMS0vynWdqaqL8x714
oxzvaA8Kj33kp9YnJ8/Zv3/rv/6r0VsfjdiPE6f17icQb5l4y1BuiAXkThE7IneKamtYcceUP6cs
H4fMaM94fmq9t08M2LEDE1d4I3ac+ynX48KjLdSJO+34PsdOygVr+DXL42aM77E2jlrvzylF3niP
V9gRt/bmd2cUWi/69fHHH3KfKXbD/f+2hIeHywv/7W8XvX1NSn7p4+1o/URovT8vz5//8ZIln4+J
mSl1SkREuG819NhZUVGRf/qTRW1aL++yaIgEfOcpFpC/EyKWH9VBMWIf+an1VuvR4uL8uDjt/Pkp
r732nTH048RpvfsJxFsm3jKUG+7b794pqq1hxR1T/rz08zoyqqdV+tZ6b58YsGMHJq7wPHacj9P4
8IVHW6gTd9rxfY4N2AXL9zXL9yk6AKGNSuv9eSk3PF5hR9zam9+dUWj9L39pFH9G/PM/b5RnpqfP
+8UvWsa8836+Ha0PpNaLP5d/8IMd//7vZ//6V6v474hq6LGzRBGr+W69aMh3Hbzl6e3mhz8Hhbd1
itPBu+/2Su233+4c3mXSV9WHTEKgT53an5AQN4Z+nDitd3/pLZObuVuvzhoOSa2/ycvQGLTe2ycG
7NiBiSs8jx3n7ZTrceHRFurEnXb8vFs/EResIdcaH17hcTMCGdrEab3HK+yIW3vzuzO679b/6lft
IuVnny2XZu7bt7mgIPPaNcP775/r729YvXrZqHbez7ej9YHUelF8x4/vFX+Xv/HGqa9+demotF5u
P/PMB18OE2tQ1Xfrly3Llr4jKBry17i95fnEE2XyVxXvuSd7VAeFt3XqdJ996qlH/vCHnp///NR9
9+UN77JZs2LEmuX13H//PeJMKj5InHTmzp01hn4MjNZ7y8Rbhu4hy9+tX7Lk89/85tdVXsMhqfU3
eRkag9Z7+8SAHTswcYXnseO8nXI9LjzaQp24047vc+yEXrCGXGt8eIXHzQhkaBOn9R6vsN62dhx3
Z9RPwnn77c6/+7s7nn76H6VByvv3b12wYJ5GE3nnnZ+Uh9L6ufN+vh2tD6TWt7QcEH+5TZs2NSUl
QfTO2LT+z38+X11dlpQ0JyZm5t69m1T1JByxy//4j38v//9Kb3n+6U+Wb3zjK2Jh8RZxNIkF/D8o
vK1T/ImflXWnNO7+4MHHPQ71i46+TX559Oi3xHrE8hkZC7q6XhxDPwZG671l4i1D95ArKu6XnoQj
GvL/2VRtDYek1t/kZWgMWu/tEwN27MDEFZ7HjvN2yvW48GgLdeJOO/48CWeCLlhDrjU+vMLjZgQy
tInTeo9XWG9bO46746/WB9WjOtF6nlsf5AoyqunKFf0ddySq7cHt41urk5IhZjahx1RoTxQPhTeJ
z61X2wWL59aj9Wg9V7UJ1/rKyjVvv915/fprS5d+4bHHHkDrxzBNboaYGVpP8VB4KtF6RV+w0Hq0
Hq3nqjbhWr9v3+akpDmzZ8c+/PBX5KGuaL2CMsTMlG5XYZ6geCg8tD7ELlhoPVqP1nNV486ikr6E
Qw1jVxQPoPUcX2g9Wo/Wc1VDQdB6zIxjiuKh8NB6tB6tR+vRerSecyVaj5lxTFE8FB5aj9aj9Wg9
Wo/Wo/WYGXbFsUPxUHhoPVqP1qP1aD1XArSeGsauKB5A6zm+0PphWu98fo94TxBOYsPQen+0Pmh7
0GNvKkvrFZGtIjoxBPJUXA1zTFE8oPTC879yuGb5E5pHrQ/y0HzvjgetD/IJrR9R6xU0KU7rmcar
E0MmT8yMY4riofCCsHI4vvwJzaPWK3p3Pqb1f/mvP/y2+6I0nT34w+bnvnOsZtcPtz8bVNORQ4eF
1ot9OHnyZG9v7/Xr19F6uSIHr9iuHD0lTU079h3Z9szLVbUvPfZk3eang3N6af93RVEeOnSorq7O
YDCYzeagvRIoLtsg78SQyVNBNcwxRfFAaBSeP5XD8eVPaEO0XkGhedudMG+mePny5a6urhMnTgiB
PhJkiE0SGyY2T2zkW2+9hdbLFelOS0uLCOrll18Wvf69IEZsnthIsalig/v6+hRxVVBKtkrpRKXn
qcQa5piieEDRhTeqyuGa5S20IVqvrNA87o5XrR8cHDx//rxQ55MnTzYEGWKTxIaJzRMb+c4776D1
HivyzJkzzc3Nor/FX3IvBjFi88RGik0VG2y1WhVxJVBKtkrpRKXnqcQa5piieEDRhTeqyuGa5S00
H1of/KF53B2vWv/WW28Jab58+XJvb29XkCE2SWyY2Dyxkb///e/Reo8VKf50Ez0t/oYzGAxHgxix
eWIjxaaKDe7v71fElUAp2SqlE5WepxJrmGOK4gFFF96oKodrlrfQfGh98IfmcXe8ar3Q5XfeeUd4
8/Xr1weDDLFJYsPE5omNfP/999F6jxUp+lj89SY622w2nwlixOaJjRSbKjbY4XAo4kqglGyV0olK
z1OJNcwxRfGAogtvVJXDNctbaD60PvhD87g7YThxqGo9AAAAAHjDh9YrdHfQerQeAAAAAK1H6wGt
BwAAAEDr0XoYF61nYmJiYmJiYmIa1RRiEvX/AdZIhIqMSOC0AAAAAElFTkSuQmCC
      </contents>
    </upload>
  </page>
  <page>
    <title>VM Internals</title>
    <ns>0</ns>
    <id>107</id>
    <revision>
      <id>136</id>
      <timestamp>2021-09-07T17:57:21Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import vminternals</comment>
      <origin>136</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7451" sha1="j740ygn11csboez8k9uqbgpw0vd13be" xml:space="preserve">== General ==

In order to encapsulate VM functionality, PM is split in process
management and memory management. The memory management task is called
VM and implements the memory part of the fork, exec, exit, etc calls,
by being called synchronously by PM when those calls are done.  This has
made PM architecture independent.

A typical interaction between userland, PM and VM looks like this, for the
&lt;code&gt;fork()&lt;/code&gt; call:

[[File:Fork.png]]

== VM server ==

VM manages memory (keeping track of used and unused memory, assigning
memory to processes, freeing it, ..).

There is a clear split between architecture dependent and independent
code in VM. For i386 and ARM, there are intel page tables that reside in
VM's address space. VM maps these into its own address space, by editing
its own page table, so it can edit them directly.

=== Data structures ===

The most important data structures in VM describe the memory a process
is using in detail. Page tables are written purely from these data
structures. They are owned and manipulated by functions in region.c. They
are:

==== Regions ====

A region, described by a 'struct vir_region' or region_t, is a contiguous
range of virtual address space that has a particular type and some
parameters. Its type determines its properties and behaviour (see
'memory types' later). It needn't have any real memory instantiated in it
(yet). At any time, a region is of a fixed size in virtual address space.
Some types can be resized when requested (typically the brk() call)
though. Virtual regions have a staring address and a length, both page-aligned.

Virtual regions have a fixed-sized array of pointers to physical regions
in them. Every entry represents a page-sized memory block. If non-NULL, that
block is instantiated and points to a phys_region, describing the physical
block of memory.

==== Physical regions ====

Physical regions, described by a 'struct phys_region,' exist to reference
physical blocks. Physical blocks describe a physical page of memory. An
extra level of indirection is needed because it is necessary to reference
the same page of physical memory more than once, and keep a reference
count of it to (efficiently) know when a page is referenced 0, once or
more than once. 'blocks' here can be used interchangeably with pages.

==== Physical blocks ====

A physical block, described by a 'struct phys_block,' describes a single
page of physical memory. It has the address, and a reference count.

==== Memory types ====

Each memory type is described by the data structure struct mem_type in
memtype.h. They are instantiated in mem_*.c source files and declared
in glo.h (mem_type_*). This is neatly abstracts different behaviour of
different memory types when it comes to forking, pagefaulting, and so on,
making the higher level data structures and code to manipulate them quite
generic.

==== Cache ====

The in-VM disk block cache data structures and code to manipulate it
is contained in cache.c. Each cache block is page-sized and is uniquely
identified by a (device, device offset) pair. It furthermore has (inode,
inode offset) as extra information but this is not guaranteed to be
unique by VM, nor is it guaranteed to be present. the inode number might
be VMC_NO_INODE, meaning the the disk block isn't part of inode data
or its inode number isn't known (e.g. because it ended up in the cache
through a block device and not through a file).

The block contents are a 'Physical block' pointer, and being in the cache
counts as a 'reference' in its refcount.

Blocks are indexed by two hash tables: one, the (device, device offset)
pair, and two, the (inode, inode offset) pair. A block is only present
in the 2nd hashtable if it is in an inode at all (inode != VMC_NO_INODE).

Furthermore cache blocks are on an LRU chain to be used for eviction in
out-of-memory conditions.

=== Typical call structure ===

Calls into VM are received from 3 main sources: userland, PM and the kernel.
In all cases, a typical flow of control is

* Receive message in main.c
* Do call-specific work in call-specific file, e.g. mmap.c, cache.c
* This manipulates high-level data structures by invoking functions in region.c
* This updates the process pagetable by invoking functions in pagetable.c

An example is mmap, when just used to allocate memory:

[[File:Mmap.png]]

A more complicated example is where mmap is used to map in a file. VM must know
the corresponding device and inode number, and does a lookup on the FD by calling
VFS asynchronously to do so:

[[File:Mmap-file.png]]
 
=== Handling absent memory: pagefaults, memory handling: calls from the kernel ===

There are two major cases in which memory is needed that can't be used
directly:

* memory in a range that is mapped logically, but not physically (currently that is on-demand anonymous memory)
* memory that is mapped physically, but readonly as it's mapped in more than once (shared between processes that have forked), and so can't be written to directly.

VM makes sure the page is mapped readonly in the second case. There is
no page table entry in the first case.

There are two major situations in which either of these cases can arise:

* a process uses the memory itself (page fault)
* the kernel wants to use that memory

In both cases the 'call' is generated by the kernel and arrives in VM
through a 'kernel signal' in the form of a message.

The kernel must check for these cases whenever it wants to touch memory;
e.g. in IPC but also in copying memory to/from processes in kernel
context. If the kernel detects this, it stores this event, notifies VM,
doesn't reply to the requester yet, and continues its event loop. VM then
handles the situation (specifically, mapping in a copy of the page, or an
entirely new page, as the case may be) and sends a message to the kernel.

Pagefaults are memory-type specific. How a pagefault in anonymous memory
might look:

[[File:Pagefault.png]]

If a pagefault is in a file-mapped region, the cache is queried for the
presence of the right block. If it isn't there, a request to VFS will
have to happen asynchronously for the block to appear in the cache.
Once VFS indicates the request is complete, the pagefault code is simply
re-invoked the same way.

[[[File:Pagefault-file.png]]

== Physical / contiguous memory ==

Many areas in the system, inside and outside the kernel, assume memory
that is contiguous in the virtual address space is also contiguous in
physical memory, but this assumption is no longer true. Therefore all
instances of umap calls in the kernel had to be checked to see

* whether an extra lookup had to be done to get the real physical address
* whether that code assumes the memory is contiguous physically, and the memory is present even

Processes that need physically contiguous memory specifically have to
ask for it. A warning in the kernel is printed if an old umap function
is called. A new umap segment (VM_D as opposed to D) was added that
does a physically-contiguous check, but doesn't print a warning (the
VM_D is meant to indicate that the caller is aware that memory isn't
automatically contiguous physically, and that if it wants it to be,
it has made arrangements for that itself, e.g. use alloc_contig()).

== Drivers ==

Drivers have been updated to

* Request contiguous memory if necessary (DMA)
* Request it below 16MB physical memory (DMA; lance and floppy) or below 1MB physical memory (BIOS driver)</text>
      <sha1>j740ygn11csboez8k9uqbgpw0vd13be</sha1>
    </revision>
  </page>
  <page>
    <title>RTC Protocol</title>
    <ns>0</ns>
    <id>108</id>
    <redirect title="RTC Device Protocol" />
    <revision>
      <id>137</id>
      <timestamp>2021-09-07T17:58:09Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Redirected page to [[RTC Device Protocol]]</comment>
      <origin>137</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33" sha1="0uwtmi3o1hv8t4cplvcmtwy2i2wu8re" xml:space="preserve">#REDIRECT [[RTC Device Protocol]]</text>
      <sha1>0uwtmi3o1hv8t4cplvcmtwy2i2wu8re</sha1>
    </revision>
  </page>
  <page>
    <title>I2C /dev Interface</title>
    <ns>0</ns>
    <id>109</id>
    <revision>
      <id>139</id>
      <timestamp>2021-09-07T18:03:43Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import i2cdevinterface</comment>
      <origin>139</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3702" sha1="75jp3y0vjcu199tuq882jtx01m2ugbn" xml:space="preserve">This guide walks you through the steps of creating a user program that accesses the i2c bus via the /dev/i2c interface. The current version of this guide documents the features used in git commit '''8a643e5''' and later. If you update this document because of changes to MINIX 3, please mention the commit ID of the change in the wiki comment.

This guide is for "normal" user programs. You should also be aware that you can create a driver service that can interface with the i2c bus driver directly via Minix IPC. That is documented in [[I2C Device Driver Programming]]. In most cases, you will want to create a full driver for the device. However, if you want to make a portable user space program that can access i2c devices and work out of the box on Minix, NetBSD, and OpenBSD, then you can do it using the /dev/i2c interface.

== General Overview ==

The same /dev/i2c interface that is provided by NetBSD and OpenBSD is available on Minix. That interface is defined here: [//git.minix3.org/?p=minix.git;a=blob;f=sys/dev/i2c/i2c_io.h;hb=HEAD dev/i2c/i2c_io.h]. The general idea is that the program would open() the appropriate i2c device file, prepare a i2c_ioctl_exec_t structure, perform an ioctl(), and finally close() the device.

== Device File Naming ==

The device files that user programs need to access are named after the bus they correspond to. For example, &lt;code&gt;/dev/i2c-1&lt;/code&gt; corresponds to the first i2c bus, &lt;code&gt;/dev/i2c-2&lt;/code&gt; corresponds to the second i2c bus, etc. This is true even if the hardware manual labels the first i2c bus as i2c0. 

== Device Access ==

There are a few things to consider. Permission to access the i2c bus is controlled by the file permissions on the device file. For example, if &lt;code&gt;/dev/i2c-3&lt;/code&gt; is owned by root and has a mode of 600, only programs running as root will have access to the bus. It's important to consider who will be using your application and the level of security needed.

In addition, the i2c bus driver has a reservation system that only full drivers, running as services, have access to. The /dev interface only allows access to unclaimed devices. This is to prevent user programs from taking over devices being driven by full drivers. If there is a device driver for a particular device, your program can't access that device through &lt;code&gt;/dev/i2c-N&lt;/code&gt;, instead your program has to contact that driver directly. Also think about the implications of other user programs accessing the device your program is accessing.

== Limitations ==

There are limits on the maximum amount of data that can be transfered in one step, &lt;code&gt;I2C_EXEC_MAX_CMDLEN&lt;/code&gt; and &lt;code&gt;I2C_EXEC_MAX_BUFLEN&lt;/code&gt;. If you need to transfer more than those limits, you will need to either increase those limits or find a way to split your request into multiple chunks. Note, those constants have different values on Minix and NetBSD. At the time of writing they are 128 on Minix and 32 on NetBSD, but they could change in the future. A well written program will use those constants and not hardcoded lengths.

It would also be important to keep in mind that the bus is shared. On the BeagleBones and BeagleBoard-xM, there are several I2C devices on-board with drivers that periodically access the bus. Your request may be delayed if other programs/drivers are using the bus. This is important to think about with time dependent applications.

== Example Programs ==

There are a couple of examples of using the /dev/i2c interface in the Minix source tree. Those examples are [//git.minix3.org/?p=minix.git;a=tree;f=usr.sbin/i2cscan;hb=HEAD i2cscan] and [//git.minix3.org/?p=minix.git;a=tree;f=commands/eepromread;hb=HEAD eepromread].</text>
      <sha1>75jp3y0vjcu199tuq882jtx01m2ugbn</sha1>
    </revision>
  </page>
  <page>
    <title>Data Link Protocol</title>
    <ns>0</ns>
    <id>110</id>
    <revision>
      <id>140</id>
      <timestamp>2021-09-07T18:45:49Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import datalinkprotocol</comment>
      <origin>140</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13297" sha1="8j1c2i88mzsmeg5s1xe89u9sgpjciy8" xml:space="preserve">This page provides the official documentation of the Data Link protocol of MINIX 3. It describes the protocol used between the inet server, and ethernet drivers that control network interface card (NIC) hardware. The current version documents the protocol used in SVN revisions '''9568''' and later. If you update this document because of changes to MINIX 3, please mention the revision number of the change in the wiki comment.


== General information ==

The following information is written mainly for people implementing an ethernet driver.

=== Instances ===

Each ethernet driver instance is responsible for exactly one ethernet card. A machine may have multiple ethernet cards of the same type; in this case, multiple copies of the same ethernet driver will be started. Each copy will be given a unique instance number (0 for the first instance of that particular driver, 1 for the second, and so on).

It is up to the driver to decide how to map instances to ethernet cards. This should be reasonably stable across machine boots, to make sure that the user's per-instance configuration will consistently apply to the same instance. The typical approach is to iterate linearly over PCI devices at startup time, skipping N matching PCI devices before reserving the next one.

=== Initialization ===

Upon initialization, the driver must retrieve the instance number. It is passed as one of the arguments to the driver, in the form &lt;code&gt;instance=N&lt;/code&gt; where N is a decimal representation of the instance number. Obtaining the instance number is typically done by means of env_setargs() and env_parse(), as found in &lt;code&gt;&amp;lt;minix/sysutil.h&amp;gt;&lt;/code&gt;.

The driver should try to initialize the device immediately when starting up, and fail initialization (for example, by means of panic()) if successful initialization of the device fails. Please note that for legacy reasons, this is not common practice in existing ethernet drivers.

Upon (successful) startup, the ethernet driver must announce its presence in DS. This should be done by calling the netdriver_announce() function found in libnetdriver.

=== Requests and replies ===

The basic protocol consists of inet sending requests to the ethernet driver, and the driver sending replies. The &lt;code&gt;m_type&lt;/code&gt; message field contains the request or reply type. All message names and field aliases are defined in &lt;code&gt;&amp;lt;minix/com.h&gt;&amp;gt;&lt;/code&gt;. The first request issued by inet will always be a &lt;code&gt;DL_CONF&lt;/code&gt; request, although more &lt;code&gt;DL_CONF&lt;/code&gt; requests may be issued later.

Inet will not send a new request until it has received a reply for the previous request. As such, the driver must always respond to each request with a reply immediately. In the case of the &lt;code&gt;DL_READV_S&lt;/code&gt; and &lt;code&gt;DL_WRITEV_S&lt;/code&gt; data transfer requests, this may lead to one immediate reply message to acknowledge a request, and one reply message later to complete the request. See the section on data transfer below. The two other requests, &lt;code&gt;DL_CONF&lt;/code&gt; and &lt;code&gt;DL_GETSTAT_S&lt;/code&gt;, follow a more strict request-reply form.

Ethernet drivers should use the netdriver_receive() function from libnetdriver to receive messages. The send() primitive should be used to send replies back to inet.

=== Data transfer ===

Like all other requests, data transfer is always initiated by inet. Inet will send a &lt;code&gt;DL_READV_S&lt;/code&gt; request when it is ready to receive a packet. It will send a &lt;code&gt;DL_WRITEV_S&lt;/code&gt; request to indicate that a packet should be sent.

The driver may not always be able to satisfy the send or receive request immediately, for example because there are no packets in the receive queue, or because the send queue is full. If the driver is able to satisfy the request immediately, it should send a &lt;code&gt;DL_TASK_REPLY&lt;/code&gt; with the appropriate &lt;code&gt;DL_PACK_&lt;/code&gt; flag set in the &lt;code&gt;DL_FLAGS&lt;/code&gt; field (and, in the case of receives, with &lt;code&gt;DL_COUNT&lt;/code&gt; set appropriately).

If the driver is ''not'' able to satisfy the request immediately, it should immediately send a &lt;code&gt;DL_TASK_REPLY&lt;/code&gt; with a value of &lt;code&gt;DL_NOFLAGS&lt;/code&gt; (0) in &lt;code&gt;DL_FLAGS&lt;/code&gt;, to indicate that the request has been received but is still pending. Once the driver has been able to satisfy such a pending request (because a new packet arrived, or enough previous data were sent to be able to queue the new packet), it should send another &lt;code&gt;DL_TASK_REPLY&lt;/code&gt; message, with the appropriate &lt;code&gt;DL_PACK_&lt;/code&gt; flag set in &lt;code&gt;DL_FLAGS&lt;/code&gt; (and possibly with the &lt;code&gt;DL_COUNT&lt;/code&gt; field set, see above). This usually happens in response to an interrupt; if the same interrupt happens to satisfy both a pending receive and a pending send request, one single &lt;code&gt;DL_TASK_REPLY&lt;/code&gt; message may be used to acknowledge both; in that case, &lt;code&gt;DL_STAT&lt;/code&gt; would contain the bitwise OR'ed combination of &lt;code&gt;DL_PACK_SEND&lt;/code&gt; and &lt;code&gt;DL_PACK_RECV&lt;/code&gt;, and &lt;code&gt;DL_COUNT&lt;/code&gt; would contain the size of the received packet.

In other words, while a send or receive request must be acknowledged immediately with a reply, the request itself will stay pending until a matching &lt;code&gt;DL_PACK_&lt;/code&gt; flag is set in a reply. The driver will never receive another request of the same (&lt;code&gt;DL_READV_S&lt;/code&gt;, &lt;code&gt;DL_WRITEV_S&lt;/code&gt;) type while the previous request has not yet fully completed.

=== System interaction ===

The driver should use the [[System Event Framework]] (SEF). This framework automatically takes care of interaction with the Reincarnation Server (RS).

The driver should register a signal handler callback function through SEF, and immediately perform an exit from the callback function when it gets a SIGTERM signal. Before exiting, the driver should stop the device.

The driver will typically interact with the PCI server to find and reserve hardware devices. Description of this interaction is beyond the scope of this document.

== Protocol messages ==

This section documents the messages used in the ethernet driver protocol.

=== Configuration ===

The &lt;code&gt;DL_CONF&lt;/code&gt; message has two purposes. First, it specifies what promiscuity/multicast/broadcast mode the ethernet card should be changed to. Second, it requests the ethernet hardware address of the card. The driver may receive multiple &lt;code&gt;DL_CONF&lt;/code&gt; messages over the course of its lifetime. The &lt;code&gt;DL_CONF&lt;/code&gt; request looks like this:

{| class="wikitable"
! Request !!colspan="3"|DL_CONF !! request configuration and set mode
|-
| '''Fields''' || DL_MODE || m2_l1 || unsigned int || flag field stating what mode(s) the NIC should have
|}

The &lt;code&gt;DL_MODE&lt;/code&gt; field is a bitwise combination of the following possible flags:

{| class="wikitable"
! Alias !! Value !! Meaning**
|-
| DL_PROMISC_REQ || 0x1 || promiscuous mode
|-
| DL_MULTI_REQ || 0x2 || multicast mode
|-
| DL_BROAD_REQ || 0x4 || broadcast mode
|}

These flags indicate what types of packets are to be received, in addition to packets addressed specifically to the ethernet device's hardware address. The alias &lt;code&gt;DL_NOMODE&lt;/code&gt; equals 0 and is used when none of the above flags are set.

The ethernet driver should change the mode of the hardware device to the mode indicated by these flags, and respond with the following reply:

{| class="wikitable"
! Reply !!colspan="3"|DL_CONF_REPLY !! provide ethernet configuration
|-
|rowspan="2"|'''Fields''' || DL_STAT || m3_i1 || int || result code
|-
| DL_HWADDR || m3_ca1 || ether_addr_t || ''upon success:'' ethernet hardware address
|}

The result code must be either &lt;code&gt;OK&lt;/code&gt; to indicate success, or a negative error code. If the driver cannot successfully reserve and interact with the device, this error code is expected to be &lt;code&gt;ENXIO&lt;/code&gt;. Upon success, The ethernet hardware address (aka MAC address) is to be stored in the result message as well. The ether_addr_t structure is defined in &lt;code&gt;&amp;lt;net/gen/ether.h&amp;gt;&lt;/code&gt;.

The driver may use the first &lt;code&gt;DL_CONF&lt;/code&gt; message to initialize the hardware. However, it is recommended that the driver do this immediately at startup. The driver can then be hardcoded to return a &lt;code&gt;OK&lt;/code&gt; response to &lt;code&gt;DL_CONF&lt;/code&gt; requests. In the long term, the &lt;code&gt;DL_STAT&lt;/code&gt; field may be removed.

=== Statistics ===

At any time after a device has been first configured with a &lt;code&gt;DL_CONF&lt;/code&gt; message, inet may request packet transmission and error statistics from the driver:

{| class="wikitable"
! Request !!colspan="3"|DL_GETSTAT_S !! request ethernet statistics
|-
| '''Fields''' || DL_GRANT || m2_l2 || cp_grant_id_t || grant (WRITE) for ''eth_stat_t'' structure
|}

Upon receiving this request, the ethernet driver must fill the fields of an "eth_stat_t" structure as best it can, use [[Kernel API#sys_safecopyto|sys_safecopyto]] to copy it out to the caller's provided grant, and send the following reply message.

{| class="wikitable"
! Reply !! DL_STAT_REPLY !! provide ethernet statistics
|-
| '''Fields''' ||colspan="2"|''none''
|}

The driver should not reset the statistics after processing this message.
The eth_stat_t structure is defined in &lt;code&gt;&amp;lt;net/gen/eth_io.h&amp;gt;&lt;/code&gt;, along with rough descriptions of what each field means.

There is currently no userland tool that prints these statistics.

=== Data transfer ===

The request from inet to receive a packet looks like this:

{| class="wikitable"
! Request !!colspan="3"|DL_READV_S !! receive ethernet packet
|-
|rowspan="2"|'''Fields''' || DL_GRANT || m2_l2 || cp_grant_id_t || grant (READ) for ''iovec_s_t'' vector
|-
| DL_COUNT || m2_i3 || int || number of vector elements
|}

The request comes with a grant for a vector that specifies grants and sizes for the destination buffers. For the driver, the process of copying out a packet consists of copying in the vector (using [[Kernel API#sys_safecopyfrom|sys_safecopyfrom]]), and repeatedly copying out (using [[Kernel API#sys_safecopyto|sys_safecopyto]]) the next &lt;code&gt;iov_size&lt;/code&gt; bytes of the received packet to the next &lt;code&gt;iov_grant&lt;/code&gt; grant as specified by that element of the vector, until the entire packet is copied out ([[Kernel API#sys_vsafecopy|sys_vsafecopy]] may be used as well). The vector itself is DL_COUNT * sizeof(iovec_s_t) bytes in size, and DL_COUNT will not exceed NR_IOREQS. The total size of the buffers specified by the vector is guaranteed to be at least ETH_MAX_PACK_SIZE_TAGGED bytes, which should be large enough to receive the packet; if not, the driver may truncate the packet or simply panic. The driver itself should remove any trailing CRC bytes from the ethernet packet before copying it out. The driver must ensure that the resulting packet is at least ETH_MIN_PACK_SIZE bytes. Smaller packets (''runt frames'') must be thrown away.

The request from inet to send a packet looks like this:

{| class="wikitable"
! Request !!colspan="3"|DL_WRITEV_S !! send ethernet packet
|-
|rowspan="2"|'''Fields''' || DL_GRANT || m2_l2 || cp_grant_id_t || grant (READ) for ''iovec_s_t'' vector
|-
| DL_COUNT || m2_i3 || int || number of vector elements
|}

Similar to the receive request, the send request includes a vector that specify grants and sizes for the buffers that contain the packet data. The process of copying in the packet consists of copying in the vector, and repeatedly copying in the next &lt;code&gt;iov_size&lt;/code&gt; bytes of the packet to send to the next &lt;code&gt;iov_grant&lt;/code&gt;w grant as specified by that element of the vector, until the entire packet is copied in. The total size of the packet is guaranteed to be at least &lt;code&gt;ETH_MIN_PACK_SIZE&lt;/code&gt; bytes and at most &lt;code&gt;ETH_MAX_PACK_SIZE_TAGGED&lt;/code&gt; bytes. Depending on the underlying hardware, the driver may have to copy in the vector before being able to determine whether there is room in the send queue to send the entire packet.

The reply message for both &lt;code&gt;DL_READV_S&lt;/code&gt; and &lt;code&gt;DL_WRITEV_S&lt;/code&gt; requests is the same. It may acknowledge a request and/or signify completion of a pending request. When signifying completion a receive request, it must specify the size of the received packet. The message looks like this:

{| class="wikitable"
! Reply !!colspan="3"|DL_TASK_REPLY !! acknowledge pending or successful data transfer
|-
|rowspan="2"|'''Fields''' || DL_FLAGS || m2_l1 || unsigned long || completion flags
|-
| DL_COUNT || m2_i3 || int || ''if DL_PACK_RECV is set:'' received packet size, in bytes
|}

The completion flags in &lt;code&gt;DL_FLAGS&lt;/code&gt; may be a bitwise combination of the following flags:

{| class="wikitable"
! Alias !! Value !! Meaning
|-
| DL_PACK_SEND || 0x1 || the send request has been completed
|-
| DL_PACK_RECV || 0x2 || the receive request has been completed
|}

The alias &lt;code&gt;DL_NOFLAGS&lt;/code&gt; equals 0 and is typically used to indicate that the just-received send or receive request could not be satisfied immediately, and is now pending.

Inet guarantees that all grants, including the grant for the vector, stay valid until the driver has acknowledged that the request has been completed. Thus, the driver need not save a copy of the vector contents before sending a &lt;code&gt;DL_NOFLAGS&lt;/code&gt; task reply; it can simply save the vector grant (and size).</text>
      <sha1>8j1c2i88mzsmeg5s1xe89u9sgpjciy8</sha1>
    </revision>
  </page>
  <page>
    <title>I2C Device Protocol</title>
    <ns>0</ns>
    <id>111</id>
    <revision>
      <id>141</id>
      <timestamp>2021-09-07T18:52:38Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import i2cprotocol</comment>
      <origin>141</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3328" sha1="qcluwr5cdxi4riiec17jqbgu9dt9fiv" xml:space="preserve">This page provides the official documentation of the I2C protocol of MINIX 3. It describes the protocol used between the I2C device drivers and the I2C bus driver. The current version documents the protocol used in git commit '''550fdfb''' and later. If you update this document because of changes to MINIX 3, please mention the commit ID of the change in the wiki comment.


== General Overview ==

Drivers for individual I2C devices (example: the TPS65217C power management IC), henceforth called ''I2C device drivers'', don't access the bus directly. Instead, they message a driver for the I2C bus itself, henceforth called an ''I2C bus driver''. The bus driver is responsible for providing a consistent interface across different I2C controller hardware and for mediating access to the I2C bus.

The protocol is pretty simple and messages are only initiated by I2C device drivers. The I2C bus driver handles the messages and replies. There are only two message types used. The first, BUSC_I2C_RESERVE, is used by drivers to reserve a device on the bus. A reservation is required before performing read/write operations on the bus. Read/write operations are done with the BUSC_I2C_EXEC which passes a minix_i2c_ioctl_exec_t structure, a flattened version of the NetBSD I2C interface i2c_ioctl_exec_t.

== I2C Messages ==

=== BUSC_I2C_RESERVE ===

Reserve an I2C device.

'''Request fields'''

{| class="wikitable"
| DEVICE || m2_i1 || int || Slave address of the I2C device being reserved
|}

'''Reply fields'''

* ''none''

'''Reply codes'''

{| class="wikitable"
| OK || Device reserved okay
|-
| EBUSY || Already reserved by another endpoint
|-
| EINVAL || Invalid slave address
|}

'''Description'''

An I2C device driver sends this message to the I2C bus driver with the slave address it wishes to reserve for exclusive access. The I2C bus driver, which manages the reservations, will reserve the device if the slave address is a valid I2C slave address and it isn't reserved by another driver.

=== BUSC_I2C_EXEC ===

Perform a read/write operation on the I2C bus.

'''Request fields'''

{|
| IO_GRANT || m2_p1 || cp_grant_id_t || read/write grant for a minix_i2c_ioctl_exec_t
|}

'''Reply fields'''

* ''none''

'''Reply codes'''

{| class="wikitable"
| OK || Operation executed successfully
|-
| EBUSY || Device is reserved by another driver or bus busy indicator never went low before timeout expired (shouldn't happen normally, but could happen if the user adds one or more masters to the bus)
|-
| EINVAL || Invalid value in minix_i2c_ioctl_exec_t
|-
| EIO || Hardware I2C controller reported an error. In most cases, the generic driver will log the error (level WARN) and attempt a soft reset of the I2C controller
|-
| EPERM || Attempting to use a device without reserving it first. This is only for requests from drivers. Requests from VFS, which implies access by a user program through the /dev interface, can't reserve devices and can only use unreserved devices
|}

'''Description'''

An I2C device driver sends this message to the I2C bus driver with a grant containing a minix_i2c_ioctl_exec_t structure. The I2C bus driver checks the validity of the data in the grant, verifies the reservation, performs the operation requested, puts the results into the structure, and replies to the I2C device driver.</text>
      <sha1>qcluwr5cdxi4riiec17jqbgu9dt9fiv</sha1>
    </revision>
  </page>
  <page>
    <title>Minix User's Guide</title>
    <ns>0</ns>
    <id>112</id>
    <revision>
      <id>274</id>
      <parentid>262</parentid>
      <timestamp>2021-09-10T20:40:05Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>updated links</comment>
      <origin>274</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2213" sha1="661vpdav6gtbs9m8r0m4hf3vdw4h5fs" xml:space="preserve">The Users Guide provides information on how to install and configure MINIX 3. If you're new to MINIX 3, you should start here.

'''Part I: Getting Started'''

# '''Introduction'''
## [[Welcome to MINIX 3]]
# '''Installing MINIX 3'''
## [[Requirements|Hardware Requirements]]
## [[Disk Partitions]]
## [[Installing Minix 3|Doing the Installation]]
## [[Post Installation|Post-Installation Configuration]]
## [[Running Multiple Operating Systems]]
## [[Installation Troubleshooting|Troubleshooting]]
## [[OS Data Exchanging|Exchanging data between operating systems]]
# '''Installing Applications'''
## [[Installing Binary Packages]]
## [[Installing Source Packages]]
# '''The X Window System'''
## [[Introduction to X]]
## [[Window Managers]]
# '''Virtualization'''
## [[Running on VMware]]
&lt;!-- ## [[Running on VMware Fusion (ES)]] --&gt;
## [[Running on Qemu (and KVM)]]
## [[Running on Bochs]]
## [[Running on Parallels]]
## [[Running on VirtualBox]]
## [[Running on VirtualPC 2007]]

'''Part II: Using MINIX 3 '''

# '''Common Text-Based Applications'''
## [[Command Line Interface]]
## [[Manual Pages]]
## [[Text Editors]]
## [[GNU Utilities|The GNU Utilities]]
## [[GNU Development Tools]]
# '''Internet Applications'''
## [[Web Browsers]]
## [[Email Applications]]
## [[File Transfer]]
## [[Apache and PHP]]
# '''Peripherals'''
## [[BeagleBone Weather]]

'''Part III: System Administration '''

# '''Basic System Administration'''
## [[Introduction to System Administration]]
## [[Setting Root Password|Setting the Root Password]]
## [[Managing User Accounts]]
## [[Working with Storage]]
## [[Serial Consoles]]
## [[Manual Pages for Administrators]]
# '''Starting and Stopping MINIX 3'''
## [[Boot Monitor|The Boot Monitor]]
## [[Running Multiple Operating Systems]]
## [[Shutting Down the System|Shutting Down]]
# '''Configuration and Tuning'''
## [[Installation Optimizations]]
## [[APIC|APIC mode]]
## [[SATA|SATA]]
# '''Security'''
## [[Securing MINIX|Securing MINIX 3]]
## [[Setting Up SSH|Setting Up the SSH Daemon]]
# '''Networking'''
## [[Network Configuration]]
## [[Booting with PXE|Booting over the network using PXE]]
# '''Technical Notes'''
## [[Harmless Diagnostic|Harmless Diagnostic Messages]]</text>
      <sha1>661vpdav6gtbs9m8r0m4hf3vdw4h5fs</sha1>
    </revision>
  </page>
  <page>
    <title>POSIX and Minix</title>
    <ns>0</ns>
    <id>113</id>
    <redirect title="POSIX and MINIX 3" />
    <revision>
      <id>146</id>
      <parentid>145</parentid>
      <timestamp>2021-09-07T22:11:17Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>fix typo</comment>
      <origin>146</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="31" sha1="eiu6ci40lhw1bljxv1axo7o5d5rdxb0" xml:space="preserve">#REDIRECT [[POSIX and MINIX 3]]</text>
      <sha1>eiu6ci40lhw1bljxv1axo7o5d5rdxb0</sha1>
    </revision>
  </page>
  <page>
    <title>Welcome to MINIX 3</title>
    <ns>0</ns>
    <id>114</id>
    <revision>
      <id>153</id>
      <timestamp>2021-09-08T09:05:55Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import welcome to minix</comment>
      <origin>153</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1384" sha1="n721fbi9rwtys69dj3gt9e3ro3cn5tm" xml:space="preserve">MINIX 3 is an open-source operating system designed to be highly reliable, flexible, and secure. It is loosely based on previous versions of MINIX, but it is fundamentally different in many key ways. MINIX 1 and 2 were intended as teaching tools; MINIX 3 adds the new goal of being usable as a serious system on embedded computers and for applications requiring high reliability.

The operating system is extremely small, with the part that runs in kernel mode under 15000 lines of executable code. The parts that run in user mode are divided into small modules, well insulated from one another. For example, each device driver runs as a separate user-mode process so a bug in a driver (by far the biggest source of bugs in any operating system) cannot bring down the entire OS. In fact, most of the time when a driver crashes it is automatically replaced without requiring any user intervention, without requiring rebooting, and without affecting running programs. These features, the tiny amount of kernel code, and other aspects greatly enhance system reliability.
MINIX 3 is initially targeted at the following areas:

* Applications where very high reliability is required
* Embedded systems (e.g., cameras, DVD recorders, cell phones)
* Applications where the GPL is too restrictive (MINIX 3 uses a BSD-type license)
* Education (e.g., operating systems courses at universities)</text>
      <sha1>n721fbi9rwtys69dj3gt9e3ro3cn5tm</sha1>
    </revision>
  </page>
  <page>
    <title>Requirements</title>
    <ns>0</ns>
    <id>115</id>
    <revision>
      <id>275</id>
      <parentid>154</parentid>
      <timestamp>2021-09-10T20:41:22Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>/* Firmware */ update link</comment>
      <origin>275</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5612" sha1="20i08x8ayb01omx5ohicjtzlng6trzc" xml:space="preserve">== CPU Compatibility ==

{| class="wikitable"
! Architecture !! Models !! Notes
|-
| 32-bit x86 || i586 (Pentium) family and later || Pentium 4s sometimes have trouble
|-
| 64-bit x86 || (none reported) || Supported by 32-bit emulation
|-
| ARMv7 || Cortex-A8 || [[Minix on ARM|Build instructions]]
|}

== Memory ==

{| class="wikitable"
! Version !! Minimum !! Recommended
|-
| [[Tracking Current|Current]] || 32 MiB || 1 GiB
|-
| 3.2.1 || 64 MiB || 1 GiB
|}

== Storage ==

{| class="wikitable"
! Minimum !! Recommended
|-
| 635 MB || 8 GB
|}

One [[Disk Partitions|MBR-style primary partition]] is required. IDE and [[SATA]] drives are supported.

== Firmware ==

MINIX includes a boot loader, which currently requires BIOS (not UEFI) firmware. [[Running Multiple Operating Systems|Other boot managers (like GRUB)]] could be used if they support the multiboot protocol.

== Peripherals ==

A small number of peripheral devices (audio cards, etc.) are supported. Currently there is no support for USB or FireWire.

== Networking ==

The following Ethernet cards are supported.

* 3com 501/503/509
* AMD Lance (PCI)
* Attansic/Atheros L2
* DEC 21140
* Intel Pro/100
* Intel Pro/1000
* Orinoco Prism-based (Wi-Fi)
* Realtek 8139
* Realtek 8169
* NE2000-class, like NS DP8390, WD8003E, Realtek 8019 or 8029
* Virtio network device (emulated by VirtualBox)
* lan8710a (on BeagleBone, BeagleBone Black)

For more information, see [[Networking Configuration|Network Configuration]].

=== Intel Pro/100 Models Supported ===

The information in the following table is derived from &lt;code&gt;/usr/src/drivers/fxp/fxp.conf&lt;/code&gt; and &lt;code&gt;/usr/src/drivers/pci/pci_table.c&lt;/code&gt;.

{| class="wikitable"
! Name                                        !! Vendor ID !! Device ID
|-
| Intel Corporation 82801CAM PRO/100 VE       || 8086      || 1031
|-
| Intel Corporation 82801CAM PRO/100 VE       || 8086      || 1032
|-
| Intel Corporation 82801DB PRO/100 VE (MOB)  || 8086      || 103d
|-
| Intel Corporation 82562 PRO/100 VE          || 8086      || 1064
|-
| Intel !EtherExpressPro100 82557/8/9         || 8086      || 1229
|-
| Intel !EtherExpressPro100 82562EM           || 8086      || 2449
|-
| Intel !EtherExpressPro100 82559ER           || 8086      || 1209
|}

=== Intel Pro/1000 Models Supported ===

The information in the following table is derived from &lt;code&gt;/usr/src/drivers/e1000/e1000.conf&lt;/code&gt; and &lt;code&gt;/usr/src/drivers/pci/pci_table.c&lt;/code&gt;.

{| class="wikitable"
! Name                                       !! Vendor ID !! Device ID
|-
| Intel PRO/1000 MT Desktop Adapter          || 8086      || 100E
|-
| Intel PRO/1000 GT Desktop Adapter          || 8086      || 107C
|-
| Intel PRO/1000 Gigabit Network Connection  || 8086      || 10CD
|-
| Intel 82574L Gigabit Network Connection    || 8086      || 10D3
|-
| Intel 82567LM Gigabit Network Connection   || 8086      || 10DE
|-
| Intel 82571EB Gigabit Ethernet Controller  || 8086      || 105E
|}

=== Realtek 8139 Models Supported ===
The information in the following table is derived from &lt;code&gt;/usr/src/drivers/rtl8139/rtl8139.conf&lt;/code&gt;, &lt;code&gt;/usr/src/drivers/pci/pci_table.c&lt;/code&gt;, https://pci-ids.ucw.cz/read/PC/, and https://pcidatabase.com/.

{| class="wikitable"
! Name                                             !! Vendor ID !! Device ID
|-
| Realtek RTL8139                                  || 10ec      || 8139
|-
| SpeedStream 1012 PCMCIA 10/100 Ethernet          || 02ac      || 1012
|-
| Texas Microsystems RTL8139C 10/100 Ethernet      || 1065      || 8139
|-
| Accton SMC2TX (EN-1207D Fast Ethernet)           || 1113      || 1211
|-
| D-Link RTL8139                                   || 1186      || 1300
|-
| D-Link DFETXD CardBus PC Card                    || 1186      || 1340
|-
| ???                                              || 11db      || 1234
|-
| Allied Telesyn RTL81xx Fast Ethernet             || 1259      || a117
|-
| Allied Telesyn RTL81xx Fast Ethernet             || 1259      || a11e
|-
| Northern Telecom 10/100BaseTX [RTL81xx]          || 126c      || 1211
|-
| Abocom RTL8139 [FE2000VX] CardBus Fast Ethernet  || 13d1      || ab06
|-
| Edimax Computer RTL81xx Fast Ethernet            || 1432      || 9130
|-
| Planex FNW-TX CardBus Fast Ethernet              || 14ea      || ab06
|-
| PlanexRTL81xx RealTek Ethernet                   || 14ea      || ab07
|-
| DELTA Electronics RTL81xx RealTek Ethernet       || 1500      || 1360
|-
| Peppercon AG ROL/F Fast Ethernet with ROL        || 1743      || 8139
|-
| Addtron Technology RTL8139 Ethernet              || 4033      || 1360
|}

==== Realtek 8169 Models Supported ====
The information in the following table is derived from &lt;code&gt;/usr/src/drivers/rtl8169/rtl8169.conf&lt;/code&gt;, &lt;code&gt;/usr/src/drivers/pci/pci_table.c&lt;/code&gt;, and https://pci-ids.ucw.cz/read/PC/.

{| class="wikitable"
! Name                                              !! Vendor ID !! Device ID
|-
| Realtek RTL8129                                   || 10ec      || 8129
|-
| Realtek RTL8169/8110 Family Gigabit NIC           || 10ec      || 8167
|-
| Realtek RTL8169                                   || 10ec      || 8169
|-
| RTL8111/8168 PCI Express Gigabit Ethernet         || 10ec      || 8168
|-
| D-Link DGET Gigabit Ethernet Adapter              || 1186      || 4300
|-
| Allied Telesyn International Gigabit Ethernet     || 1259      || c107
|-
| Netgear Gigabit Ethernet Adapter                  || 1385      || 8169
|-
| US Robotics Realtek 8169S chip                    || 16ec      || 0116
|-
| Linksys Instant Gigabit Desktop Network Interface || 1737      || 1032
|}</text>
      <sha1>20i08x8ayb01omx5ohicjtzlng6trzc</sha1>
    </revision>
  </page>
  <page>
    <title>Wiki Guide</title>
    <ns>0</ns>
    <id>116</id>
    <revision>
      <id>407</id>
      <parentid>406</parentid>
      <timestamp>2022-02-07T18:12:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* How to edit this Wiki */ Fix one more link</comment>
      <origin>407</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2509" sha1="5kuhcqcmcday7fra0h1s9w1etbbr52r" xml:space="preserve">This guide will serve as intro to the MINIX 3 wiki. It will tell you how to navigate and modify this wiki.

== Overview ==

Here are some good starting points if you're new to the wiki:

* [[Minix User's Guide]]
* [[Minix Developer's Guide]]
* [[FAQ]]

== Contributing to the Wiki ==

Please contribute to this wiki. With your help, we can create some great documentation for MINIX 3. If you have ideas for documentation, please go ahead and add your content to the wiki. If you would like to discuss your ideas, send a message to the [http://groups.google.com/group/minix3 Google Group].

Please register as a wiki user (and log in), so that you may edit pages in this wiki. Please use ''FirstnameLastname'' (e.g., ''AndyTanenbaum'') as your account ID. If you already have an account, please log in.


== How to edit this Wiki ==

:''See: [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents]
This wiki is running [[Wikipedia:Mediawiki|Mediawiki]]. Please see the [https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents Editing Guide] for more information.


=== Guidelines ===

Here are some formatting guidelines. Please follow them so that the entire handbook has the same look and feel. You should browse through the wiki to get the feel of things; use the ''Preview'' button to check that your change look as intended. 

* Please use &lt;code&gt;&lt;nowiki&gt;[[&lt;/nowiki&gt;Full Title Text]]&lt;/code&gt; links such as [[Minix User's Guide]], as opposed to links with underscores.

* Start each page with a mixed-case title like this (analogous to &lt;code&gt;&lt;nowiki&gt;&lt;h2&gt;&lt;/nowiki&gt;&lt;/code&gt; in HTML):

&lt;pre&gt;
   == Title ==
&lt;/pre&gt;
* Divide your page into sections, each starting with a mixed-case header like this (analogous to &lt;code&gt;&lt;nowiki&gt;&lt;h2&gt;&lt;/nowiki&gt;&lt;/code&gt;):

&lt;pre&gt;
=== Introduction ===
&lt;/pre&gt;

* Further subdivisions should be mixed-case like this:
&lt;pre&gt;
==== How to Get Started ====
&lt;/pre&gt;
&lt;!-- Mediawiki has no such restrictions:
Note that, for all headings, there must be a space after the equal signs at the beginning of the heading, and a space before the equal signs at the end of the headings. Trailing white space at the end of a heading is forbidden!
--&gt;
* Link to other wiki pages like this:

&lt;pre&gt;
   [[Name of Page|Text to Display]]
&lt;/pre&gt;

* Link to Web pages like this:
&lt;pre&gt;
   [http:''www.minix3.org/doc/ MINIX 3 documentation]
&lt;/pre&gt;

* Program names among normal text should be in italics, like this:
&lt;pre&gt;
   ''mkfs''
&lt;/pre&gt;
* Program names inside example code should be in plain text.</text>
      <sha1>5kuhcqcmcday7fra0h1s9w1etbbr52r</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC</title>
    <ns>0</ns>
    <id>117</id>
    <revision>
      <id>332</id>
      <parentid>160</parentid>
      <timestamp>2021-09-12T13:50:23Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Google Summer of Code */  fix link</comment>
      <origin>332</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1425" sha1="takpoj2x76bsomo93ae1mxij0lfuy73" xml:space="preserve">== Google Summer of Code ==

Every summer, Google sponsors a Summer of Code project in which students are paid to work on open source projects. MINIX 3 participated in this program in 2008, 2009, 2010, 2011, and 2012.

To find out more about the Google Summer of Code projects, please see:
* [[GSOC 2018|2018]]
* [[GSOC 2017|2017]]
* [[GSOC 2013|2013]]
* [[GSOC 2012|2012]]
* [[GSOC 2011|2011]]
* [[GSOC 2010|2010]]
* [[GSOC 2009|2009]]

For those applying for Google Summer of Code, here are a list of useful resources:

* [[GSOC Project Ideas|MINIX 3 GSoC Ideas Page]]
* [[GSOC Application|MINIX 3 GSoC Application Template]]
* [[Minix User's Guide|MINIX 3 Users Guide (Has info on how to install MINIX in various VMs)]]
* [[Minix Developer's Guide|MINIX 3 Developers Guide]]
* [[Publications|MINIX 3 Publications]]
* [http://www.minix3.org/download Minix 3 Download Page]
* [http://www.minix3.org Minix 3 Website]
* [http://www.minix3.org/news MINIX 3 News]
* [http://twitter.com/minix3 MINIX 3 Twitter]
* [http://groups.google.com/group/minix3 MINIX 3 Google Group]
* [irc://irc.libera.chat/minix MINIX 3 IRC (#minix on Libera.Chat)]
* [https://github.com/Stichting-MINIX-Research-Foundation/minix Browse MINIX 3 sources]
* [https://github.com/Stichting-MINIX-Research-Foundation/minix/issues MINIX 3 Bug Tracker]
* [[Tracking Current|Tracking Current Sources]]
* [http://www.booki.cc/gsocstudentguide GSoC Student Guide]</text>
      <sha1>takpoj2x76bsomo93ae1mxij0lfuy73</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC Application</title>
    <ns>0</ns>
    <id>118</id>
    <revision>
      <id>413</id>
      <parentid>382</parentid>
      <timestamp>2022-02-08T17:14:28Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix links</comment>
      <origin>413</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4610" sha1="19zdtqgwcw5xgz6joor5lb100n6pdl6" xml:space="preserve">&lt;div center round important&gt;
If you haven't visited our ''[[GSOC|ideas page]]'' yet, please do that before reading this page.
&lt;/div&gt;

== Application Page for the MINIX 3 Google Summer of Code Project ==

Your application should contain the following information. Keep it focused on MINIX 3 and make sure it indicates you have given it some thought. Try to convince us that you will be able to carry your ideas to a successful completion. Remember: you are applying for a job, competing against candidates that want the same position. Your application is your salespitch that ''makes the case'' for why we should pick you. '''Treat your GSOC application as you would a job application.'''

A generic proposal sent to many organizations will be stored in /dev/null. If at all possible, please send an email with an attachment containing a scanned image of your official transcript of grades to info@minix3.org. As mentioned on the [[GSOC|ideas page]], your chances of being accepted are hugely improved by demonstrating that you have installed MINIX 3 and made some contribution, such as accomplishing some subtask of your proposed project.

Also, please read the [http://en.flossmanuals.net/GSoCStudentGuide/ GSoC Student Guide] page before applying. It will help you create a high quality proposal and thereby increase your chance of being selected.

=== 1. Personal Information ===
Name
Address
Phone number(s)
E-mail address
Web page (if you have one)
IRC nickname (if you have one)

=== 2. Education ===

Name of each educational institution you have attended in reverse chronological order going back to high school, listing the years in attendance, the majors (if any) and the degrees earned (with dates). Also list the degree you expect from your current school and when. List any prizes, awards, or merit scholarships you won based on your abilities. Class rank and similar information is also useful if available.

=== 3. Work and Open Source Experience ===

Relevant jobs you have held in reverse chronological order, giving employer name, job title, period you worked there, and your job duties. If it was a programming job, make this a brief description like: "I had a summer job working for company X writing a program to do inventory management in a pet store." Also, include experiences contributing to open source software (OSS) projects here.

=== 4. C Programming Experience ===

Here is your chance to describe why you are a great C programmer. How long have been programming in C? The experience can relate to one of the above jobs, to a course you took, to your hobby, or anything else.

=== 5. Operating System Experience ===

Tell which operating systems you are familiar with, how familiar, kernel programming you have done, and so on. If you have any previous experience with MINIX, tell us about it here.

=== 6. Which Project(s) Do You Want to Work On? ===

List your first choice, second choice, etc. After each one, give a weight of how much you want to work on this one. For example

# Porting Pkgsrc Programs (50)
# lwIP (40)
# Automated Test Framework (10)

This means you prefer porting application programs or lwIP support with a small preference for the former project and would also be willing to work on the automated test framework. The sum of the weights must be 100. Saying you will do anything doesn't show much enthusiasm and will not impress us. Putting all your eggs in one basket (listing only one project with weight 100) increases your chance of getting it but means if you are not our first choice, you get nothing.

=== 7. How Will You Successfully Complete Your Project? ===

For your first choice, create a high-level design and make a week-by-week timeline with milestones, that is, what will be delivered on what date. Think about design tradeoffs, various phases of coding, your testing, release to the community for testing, optimization, and documentation. If you need any special hardware or software, include its acquisition in the timeline. Also, discuss any topics you will need to learn in order to complete the project.

Your proposal should convince us that you will successfully complete your project. You should put some serious thought into this question.

=== 8. Motivation ===

Why do you want to work on MINIX 3 as opposed to the many other interesting open-source projects? Can you work full time this summer or do you have any time conflicts (courses, exams, work) this summer?

=== 9. Application Procedure ===

To apply, go to Google's [http://www.google-melange.com/ application page].

[[GSOC|Back to MINIX 3 Summer of Code Ideas Page]]</text>
      <sha1>19zdtqgwcw5xgz6joor5lb100n6pdl6</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2009</title>
    <ns>0</ns>
    <id>119</id>
    <revision>
      <id>333</id>
      <parentid>162</parentid>
      <timestamp>2021-09-12T13:53:35Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Google Summer of Code 2009 */ fix links</comment>
      <origin>333</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="338" sha1="jrs8rmxcrpbhync2oyv4lc8mdkwmoty" xml:space="preserve">== Google Summer of Code 2009 ==

MINIX 3 is pleased to participate in Google Summer of Code 2009.

Below is the list of projects for Google Summer of Code 2009:

* [[Memory Grants (GSoC project)|Memory Grants]]
* [[Shared Memory]]
* [[Proc and Dev File Systems]]
* [[Performance Measuring using Hardware Performance Monitoring Counters]]</text>
      <sha1>jrs8rmxcrpbhync2oyv4lc8mdkwmoty</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2010</title>
    <ns>0</ns>
    <id>120</id>
    <revision>
      <id>357</id>
      <parentid>339</parentid>
      <timestamp>2021-09-14T17:27:41Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Google Summer of Code 2010 */  fix link</comment>
      <origin>357</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="335" sha1="jm7uu99yql5fzisb40qkuz877asm2v7" xml:space="preserve">== Google Summer of Code 2010 ==

MINIX 3 is pleased to participate in Google Summer of Code 2010.

Below is the list of projects for Google Summer of Code 2010:

* [[Minix Firewall|MINIX firewall]]
* [[Multiboot Compliance|Multiboot compliance]]
* [[Pkgsrc (GSOC Project)|Porting Pkgsrc]]
* [[Unix Domain Sockets|Unix domain sockets]]</text>
      <sha1>jm7uu99yql5fzisb40qkuz877asm2v7</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2011</title>
    <ns>0</ns>
    <id>121</id>
    <revision>
      <id>363</id>
      <parentid>164</parentid>
      <timestamp>2021-09-14T18:09:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Google Summer of Code 2011 */ fix links</comment>
      <origin>363</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="397" sha1="nf2gh5ztvh27d65yv2t952o0hsitahg" xml:space="preserve">== Google Summer of Code 2011 ==

MINIX 3 is pleased to participate in Google Summer of Code 2011.

Below is the list of projects for Google Summer of Code 2011:

* [[Debugger Support]]
* [[FUSE Support]]
* [[NetBSD Userland (GSOC Project)]]
* [[Pkgsrc Upstreaming (GSOC Project)|Pkgsrc Upstreaming and Application Porting]]

Here are the proposed [[GSOC 2011 Projects|projects]] we had this year.</text>
      <sha1>nf2gh5ztvh27d65yv2t952o0hsitahg</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2012</title>
    <ns>0</ns>
    <id>122</id>
    <revision>
      <id>374</id>
      <parentid>165</parentid>
      <timestamp>2022-02-07T10:01:23Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Google Summer of Code 2012 */ Fix links</comment>
      <origin>374</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="440" sha1="a4wcq1wli6mbont3wewbazxbxee0vl3" xml:space="preserve">== Google Summer of Code 2012 ==

MINIX 3 is pleased to participate in Google Summer of Code 2012.

Below is the list of projects for Google Summer of Code 2012:

* [[Fault Injection Tool|LLVM-based Fault Injection Tool]]
* [[GNU Toolchain (GSOC Project)|Porting newer GCC, Binutils, and GDB and Upstreaming]]
* [[Lwip Integration|lwip Support and MINIX Integration]]

Here are the proposed [[GSOC 2012 Projects|projects]] we had this year.</text>
      <sha1>a4wcq1wli6mbont3wewbazxbxee0vl3</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2013</title>
    <ns>0</ns>
    <id>123</id>
    <revision>
      <id>383</id>
      <parentid>169</parentid>
      <timestamp>2022-02-07T12:22:26Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Google Summer of Code 2013 */ Fix links</comment>
      <origin>383</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="151" sha1="3us65ihjyku0nbaw1h5664h93niv1g4" xml:space="preserve">== Google Summer of Code 2013 ==

MINIX 3 was not part of Google Summer of Code 2013.

That year [[GSOC Application]] and [[GSOC 2013 Projects]] pages.</text>
      <sha1>3us65ihjyku0nbaw1h5664h93niv1g4</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2017</title>
    <ns>0</ns>
    <id>124</id>
    <revision>
      <id>167</id>
      <timestamp>2021-09-09T13:36:20Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>import page</comment>
      <origin>167</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3617" sha1="6dbbabgdell8816rek92e68m2ko6798" xml:space="preserve">== MINIX 3 and Google Summer of Code 2017 ==

This year, MINIX 3 is participating in [https://summerofcode.withgoogle.com/about/ Google Summer of Code] under the umbrella of the [http://gsoc.microkernel.info/ Microkernel Devroom] confederation. This page provides a preliminary list of student projects and mentors. Right now, this page is preliminary: it is neither complete nor necessarily accurate. If you are a student interested in taking up one of the GSoC projects listed below, please contact mentors as appropriate. More instructions will follow soon. If you would like to sign up as a MINIX 3 mentor or make changes to this page, please coordinate with [mailto:david@minix3.org David van Moolenbroek].

=== Project: MINIX 3 and embedded ARM platforms ===

Mentor: [mailto:minix@encambio.com Michael Schloh von Bennewitz]

MINIX 3 aims to be suitable for use on the high end of embedded ARM platforms. Important steps have been made in that direction, but there is much more work to be done. In this project, a concrete goal in that direction will be arranged together with the student, which could range from porting MINIX 3 to a board similar to those supported already, to implementing drivers to support for example Serial Peripheral Interface (SPI) and/or Controller Area Network (CAN) bus devices.

=== Project: Porting MINIX 3 to new ARM board vendors ===

Mentor: [mailto:jblbeurope@gmail.com Jean-Baptiste Boric]

The MINIX 3 ARM port is currently hard-coded to only support the Beagle family of boards. Eventually we will need to support new boards from other vendors in order to expand our horizons. Tasks include among others bootstrapping MINIX 3 on new ARM platforms, writing lots of device drivers, adding flat device tree and multi-vendor support, removing hard-coded Beagle boards assumptions...

Any ARM board is a potential candidate, but the following are especially wanted:
* Raspberry Pi 2/3: a bare-bones proof of concept port [https://github.com/Stichting-MINIX-Research-Foundation/minix/pull/134 exists], but there is a lot of work to do before it can be merged and reach feature parity with the Beagles
* QEMU's ARM virt: most ARM board have a fixed hardware configuration and are not suited for heavy-duty tasks like bulk compilation of pkgsrc packages, so there is a need for a highly modular and scalable ARM platform

Completing a port can be a long endeavor spanning several months, so a complete port supporting every last feature of a given board is not expected.

=== Project: rump ===

Mentor: [mailto:jblbeurope@gmail.com Jean-Baptiste Boric]

The rump anykernel essentially turns large parts of the NetBSD kernel (notably drivers, file systems and network stack) into portable, reusable components that can run anywhere. Adding rump support to MINIX would drastically boost the number of file systems and hardware peripherals supported by the operating system, vastly improving its usability on physical hardware along with tons of utilities like fs-utils or the rump server.

It has been proven that the rump components themselves [https://github.com/Stichting-MINIX-Research-Foundation/minix/pull/185 will compile] with little to no modification inside the MINIX tree, but there is no suitable hypercall implementation to build rump programs in user-space or glue code to run them inside the service or driver layer. We basically have a big heap of libraries without the needed foundations to make use of them.

Note: this is a really, really tough project for students looking for a really, really tough challenge. When in doubt, consider applying for another project.</text>
      <sha1>6dbbabgdell8816rek92e68m2ko6798</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2018</title>
    <ns>0</ns>
    <id>125</id>
    <revision>
      <id>168</id>
      <timestamp>2021-09-09T13:39:37Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>import page</comment>
      <origin>168</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2979" sha1="6682c6vywm3tdh8j2oedo0kswqsrpl4" xml:space="preserve">== MINIX 3 and Google Summer of Code 2018 ==

This year, MINIX 3 is participating in [https://summerofcode.withgoogle.com/about/ Google Summer of Code] under the umbrella of the [http://gsoc.microkernel.info/ Microkernel Devroom] confederation. This page provides a preliminary list of student projects and mentors. Right now, this page is preliminary: it is neither complete nor necessarily accurate. If you are a student interested in taking up one of the GSoC projects listed below, please contact mentors as appropriate. More instructions will follow soon. If you would like to sign up as a MINIX 3 mentor or make changes to this page, please coordinate with [mailto:lionel@minix3.org Lionel Sambuc].

=== Project: Intel 64bit Support ===

Mentor: [mailto:jean-baptiste@minix3.org Jean-Baptiste Boric]

MINIX 3 is currently 32-bit only. There are several task to be completed in order to have a full 64-bit port. Not all are expected to be achieved as a single project.

* '''Enable toolchain support and definition of MINIX x86-64.''' This requires to adapt as needed LLVM and GNU binutils in order to define the OS support for this platform.

* '''Compile the whole system in x86_64.''' At this point the executable code will be x86-64 binary, but it will still behave as a 32-bit OS, with only 32-bit address spaces per process.

* '''Adapt the system types to 64bit.''' Some adaptations and correction will be needed in order to make sure that all the OS data types are adapted to 64bit.

* '''Adapt the virtual memory manager of MINIX 3 to allow all the physical memory to be used.''' Add support to the memory manager to allow the use of all the physical RAM available, but with processes with 4GB address spaces still.

* '''Adapt the memory model of processes to use 64bit ranges.''' Add support to the memory manager to allow the use of 64bit address

=== Project: rump ===

Mentor: [mailto:jean-baptiste@minix3.org Jean-Baptiste Boric]

The rump anykernel essentially turns large parts of the NetBSD kernel (notably drivers, file systems and network stack) into portable, reusable components that can run anywhere. Adding rump support to MINIX would drastically boost the number of file systems and hardware peripherals supported by the operating system, vastly improving its usability on physical hardware along with tons of utilities like fs-utils or the rump server.

It has been proven that the rump components themselves [https://github.com/Stichting-MINIX-Research-Foundation/minix/pull/185 will compile] with little to no modification inside the MINIX tree, but there is no suitable hypercall implementation to build rump programs in user-space or glue code to run them inside the service or driver layer. We basically have a big heap of libraries without the needed foundations to make use of them.

Note: this is a really, really tough project for students looking for a really, really tough challenge. When in doubt, consider applying for another project.</text>
      <sha1>6682c6vywm3tdh8j2oedo0kswqsrpl4</sha1>
    </revision>
  </page>
  <page>
    <title>VFS-FS Protocol</title>
    <ns>0</ns>
    <id>126</id>
    <revision>
      <id>401</id>
      <parentid>172</parentid>
      <timestamp>2022-02-07T18:03:30Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>401</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="74434" sha1="388209cfpguubnm0mp25x5ovinxkh9z" xml:space="preserve">&lt;div round info&gt;
As of git commit '''[//git.minix3.org/?p=minix.git;a=commit;h=89c9de7 89c9de7]''', file system services should be written against the '''fsdriver''' library rather than the protocol as described here. Documentation describing this library will follow shortly. For now, the best resource for information is the combination of this page and the source code of libfsdriver.
&lt;/div&gt;

&lt;div round info&gt;
All request and reply message fields have been replaced as part of MINIX3.3.0. This document has not yet been updated with that change.
&lt;/div&gt;

This page provides the official documentation of the VFS-FS protocol of MINIX 3. It describes the protocol used between the VFS server and file servers responsible for mounted file systems. The current version documents the protocol used in Git commit '''[//git.minix3.org/?p=minix.git;a=commit;h=71cd1dd 71cd1dd]'''. If you update this document because of changes to MINIX 3, please mention the revision number of the change in the wiki comment.

== General information ==
The following information is written mainly for people implementing a file server.

=== Request and replies ===
All requests made in the VFS-FS protocol come from VFS; the file server only sends replies. Every request must be answered with exactly one reply. The first request from VFS is [[#REQ_READSUPER|REQ_READSUPER]]; the last request is [[#REQ_UNMOUNT|REQ_UNMOUNT]]. The file server must use sef_receive() or sef_receive_status() to receive messages, and should use send() to send replies.

The &lt;code&gt;&lt;minix/vfsif.h&gt;&lt;/code&gt; header file provides the definitions for requests, replies and message fields. VFS puts the request code in the type field of the request message. Request codes are always in the range &lt;code&gt;VFS_BASE&lt;/code&gt; to &lt;code&gt;VFS_BASE+NREQS&lt;/code&gt;, exclusive. The file server puts reply code for a request in the type field of the reply message. This is always OK (0) or a negative error code. Any request not implemented by the file server must return &lt;code&gt;EINVAL&lt;/code&gt; or, preferably, &lt;code&gt;ENOSYS&lt;/code&gt;.

It is possible for the file server to send a request to VFS in response to a request from VFS. Such requests always have a positive nonzero request code, which allows them to be distinguished from replies. VFS will process requests from a FS in reply to its own request, repeatedly, until it receives an actual reply. Support for such nested calls is limited and may break arbitrarily. Currently, VFS allows only the getsysinfo() system call to be invoked this way, for use by ProcFS.

=== System interaction ===
The driver should use the [[SEF|System Event Framework]] (SEF). This framework automatically takes care of interaction with the Reincarnation Server (RS).

[[#REQ_UNMOUNT|REQ_UNMOUNT]] is not a request for termination. Once the file system has been unmounted, the file server should terminate upon receipt of a SIGTERM signal. The file server must not terminate from a SIGTERM as long as the file system is still mounted (this situation can occur upon system shutdown), but should then terminate after processing a subsequent unmount request. In other words, the file server should terminate after it received a SIGTERM signal ''and'' it has been unmounted.  The file system may, but need not support receipt of another [[#REQ_READSUPER|REQ_READSUPER]] request after being unmounted.

Signals may be received by registering a signal handler callback function using the SEF API. Aside from the messages recognized by SEF, the file server will in principle not receive any messages besides requests from VFS.

=== General behavior ===
If a file server returns an error in response to a request, that request is expected not to have had any effect: the state of the file server is exactly the same before and after the request, and no "progress" has been made in any sense.

A notable exception to these are the &lt;code&gt;EENTERMOUNT&lt;/code&gt;, &lt;code&gt;ELEAVEMOUNT&lt;/code&gt; and &lt;code&gt;ESYMLINK&lt;/code&gt; pseudo-errors returned by &lt;code&gt;[[#REQ_LOOKUP|REQ_LOOKUP]]&lt;/code&gt;. These errors are interpreted by VFS as part of the path lookup process, and are never passed back to the application. No other requests must return these errors.

=== Inodes ===
VFS requests mainly revolve around inodes. In the VFS-FS protocol, inodes represent open files (of any type, including directories) in the system. Many requests operate on an inode, or on a directory entry (see below). An inode is uniquely identified by its inode number; the file server is responsible for picking inode numbers for its files. Inode number 0 is reserved and may mean "no inode" in some contexts.

Upon success, certain requests ([[#REQ_READSUPER|REQ_READSUPER]], [[#REQ_LOOKUP|REQ_LOOKUP]], [[#REQ_CREATE|REQ_CREATE]], [[#REQ_NEWNODE|REQ_NEWNODE]]) open an inode. Each open request for an inode increases that inode's reference count: the number of times the inode is opened by VFS. The [[#REQ_PUTNODE|REQ_PUTNODE]] request decreases an open inode's reference count, effectively closing the inode when its reference count has reached zero again. A file server should only treat the reference count as an indicator whether the inode is open or not. The actual reference count is meaningless, as VFS may delay [[#REQ_PUTNODE|REQ_PUTNODE]] requests for as long as the file remains open, or drop all but one references at any time.

VFS caches open inodes including some metadata, in the form of vnodes. Cached metadata includes the file's mode, size, owner UID and GID, and special device number. VFS only refers to open inodes in requests. That is, if an inode number is passed as part of a VFS request, the associated inode will have a nonzero reference count in the file server.

=== Grants ===
Data transferred between VFS (or the user process) and the FS that is not put in the request/reply messages, is passed using memory grants. An FS can use [[Kernel API#SYS_SAFECOPYFROM|sys_safecopyfrom]] (for READ grants) or [[Kernel API#SYS_SAFECOPYTO|sys_safecopyto]] (for WRITE grants) to retrieve or store data. These functions may not succeed; any errors thrown by these functions must be passed back to VFS.

For grants used to pass strings from VFS to the file server, the provided grant and string length will include the terminating '\0' character. A notable exception is &lt;code&gt;[[#REQ_SLINK|REQ_SLINK]]&lt;/code&gt;, which provides an unterminated string for the link target; similarly, &lt;code&gt;REQ_RDLINK&lt;/code&gt; is expected to return an unterminated string. In all other cases, file servers may check for a positive nonzero length and the presence of the terminating '\0' character as part of protection against VFS bugs.

=== Directory entries ===
Several calls manipulate directory entries. A directory entry is always provided in the form of a containing directory inode number, which is guaranteed to be an inode for a directory by VFS, and a last path component, which is a name string passed via a grant (usually in the &lt;code&gt;REQ_GRANT&lt;/code&gt; field of the request message) and a string length (usually in the &lt;code&gt;REQ_PATH_LENGTH&lt;/code&gt; field).

Such a name string will never contain a '/' slash character, or contain a '\0' character anywhere else but at the end. As indicated above, it is guaranteed to end with a '\0' character, and the passed string length will include that character. The maximum string length, including terminating '\0' character, is limited to &lt;code&gt;PATH_MAX+1&lt;/code&gt; bytes. A file server is free not to accept long names by returning an &lt;code&gt;ENAMETOOLONG&lt;/code&gt; error.

VFS generally does not perform any other checks on the last path component of such directory entries, leaving those up to each file server. For example, when VFS requests the creation of a new directory entry, a file server will have to make sure that an entry with that name does not already exist in that directory.

=== Protection ===
VFS takes care of all checks to make sure that no write requests are sent to a read-only file system. In principle, the file system should never have to return an &lt;code&gt;EROFS&lt;/code&gt; error. A file server may choose to perform this check itself anyway, to protect against VFS bugs.

VFS performs all access permission checks, with one exception. During lookups, when an inode is used as a directory in the process of resolving a path, the file server needs to check whether the caller has search access for that directory. A file server may choose to perform other checks itself as well to protect against VFS bugs, but may not always be able to, since not all requests provide the caller's user and group ID.

=== Device drivers ===
Every file server is responsible for raw transfers from ([[#REQ_BREAD|REQ_BREAD]]) and to ([[#REQ_BWRITE|REQ_BWRITE]]) the device that it has been mounted on. This allows it to keep its cache synchronized. Before such raw transfers are initiated, VFS will send a [[#REQ_NEW_DRIVER|REQ_NEW_DRIVER]] request to the file server to indicate which driver label to use. The root file server has more responsibilities as far as this is concerned; see the next section.

MINIX 3 supports restarting crashed device drivers. This includes the block device drivers that file systems are mounted on. File servers may assume a crash-only model: a block device driver either returns a valid response to a request, or communication results in an error. This may be an IPC-level error or an &lt;code&gt;ERESTART&lt;/code&gt; response code. IPC-level errors may be transient, and the file server should retry the original request at least once to see if another IPC-level error is generated. If so, the FS may assume that the device driver has become fully unavailable. An &lt;code&gt;ERESTART&lt;/code&gt; response code indicates the driver has been restarted and the file server should reissue a &lt;code&gt;[[Block Device Protocol|BDEV_OPEN]]&lt;/code&gt; to the driver before retrying the request. Other non-IPC error codes may be transient. For robustness, the FS may choose to retry an operation a few times before propagating up the error. If at all possible, the file system should use the ''libbdev'' library to talk to block device drivers, which transparently takes care of all these issues.

=== Root file server ===
The root file server (serving the "/" partition) has a number of additional responsibilities that other file servers do not have. In particular:

* It is responsible for all block devices that have not been mounted.
** It is currently the only file server that has to support &lt;code&gt;[[#REQ_FLUSH|REQ_FLUSH]]&lt;/code&gt;, to flush its cache for certain unmounted devices.
** It is also the only file server that will receive &lt;code&gt;[[#REQ_NEW_DRIVER|REQ_NEW_DRIVER]]&lt;/code&gt; requests for devices other than the one it is mounted on.

=== Pipes and sockets ===
While file systems may support files of type named pipe (S_IFIFO) and of type socket (S_IFSOCK), they need not implement support for pipe communication nor unix domain socket communication. This is all handled by the [[Pipe File Server]] (PFS). PFS is also responsible for cloned devices and is consequently the only file server that has to support [[#REQ_NEWNODE|REQ_NEWNODE]], to create deleted open files.

== Protocol messages ==
This specification reflects the protocol as it should be implemented, not how it is implemented by MFS. In particular, old and deprecated requests are not and should not be included.

The entire VFS-FS protocol is entirely &lt;code&gt;POSIX-&lt;/code&gt;oriented. Any deviation from the requirements imposed by &lt;code&gt;POSIX&lt;/code&gt; in this specification is unintentional except when mentioned explicitly. For convenience, links to the relevant [//www.opengroup.org Open Group] function specifications and file access (&lt;code&gt;ATIME&lt;/code&gt;), modification (&lt;code&gt;MTIME&lt;/code&gt;) and change (&lt;code&gt;CTIME&lt;/code&gt;) time-stamp update requirements are provided.

The reply codes in this document are advisory and mostly aimed at indicating additional restrictions needed for &lt;code&gt;POSIX&lt;/code&gt; compliance. Not all of them may be applicable to every file server, and a file server may send other error codes where appropriate. Errors resulting from protocol validation checks (e.g. &lt;code&gt;EROFS&lt;/code&gt;), and sys_safecopy.. errors, are not included.

The requests are ordered according to the following rough categorization:

* [[#Mounting_and_unmounting|Mounting and unmounting]]
** &lt;code&gt;[[#REQ_READSUPER|REQ_READSUPER]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_UNMOUNT|REQ_UNMOUNT]]&lt;/code&gt;
* [[#Inode_open_and_close_functions|Inode open and close functions]]
** &lt;code&gt;[[#REQ_LOOKUP|REQ_LOOKUP]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_CREATE|REQ_CREATE]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_NEWNODE|REQ_NEWNODE]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_PUTNODE|REQ_PUTNODE]]&lt;/code&gt;
* [[#Inode_use_functions|Inode use functions]]
** &lt;code&gt;[[#REQ_READ|REQ_READ]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_WRITE|REQ_WRITE]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_PEEK|REQ_PEEK]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_GETDENTS|REQ_GETDENTS]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_INHIBREAD|REQ_INHIBREAD]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_FTRUNC|REQ_FTRUNC]]&lt;/code&gt;
* [[#Inode_metadata_retrieval_and_manipulation|Inode metadata retrieval and manipulation]]
** &lt;code&gt;[[#REQ_STAT|REQ_STAT]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_CHOWN|REQ_CHOWN]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_CHMOD|REQ_CHMOD]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_UTIME|REQ_UTIME]]&lt;/code&gt;
* [[#Directory_entry_manipulation|Directory entry manipulation]]
** &lt;code&gt;REQ_CREATE&lt;/code&gt; (see above)
** &lt;code&gt;[[#REQ_MKDIR|REQ_MKDIR]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_MKNOD|REQ_MKNOD]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_LINK|REQ_LINK]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_UNLINK|REQ_UNLINK]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_RMDIR|REQ_RMDIR]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_RENAME|REQ_RENAME]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_SLINK|REQ_SLINK]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_RDLINK|REQ_RDLINK]]&lt;/code&gt;
* [[#Miscellaneous_file_system_operations|Miscellaneous file system operations]]
** &lt;code&gt;[[#REQ_MOUNTPOINT|REQ_MOUNTPOINT]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_STATVFS|REQ_STATVFS]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_SYNC|REQ_SYNC]]&lt;/code&gt;
* [[#Block_I.2bac8-O_functions|Block I/O functions]]
** &lt;code&gt;[[#REQ_FLUSH|REQ_FLUSH]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_NEW_DRIVER|REQ_NEW_DRIVER]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_BREAD|REQ_BREAD]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_BWRITE|REQ_BWRITE]]&lt;/code&gt;
** &lt;code&gt;[[#REQ_BPEEK|REQ_BPEEK]]&lt;/code&gt;

=== Mounting and unmounting ===
==== REQ_READSUPER ====
Mount the file system.

'''Request fields'''
{| class="wikitable"
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for the label of the block device driver to use
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the label
|-
| REQ_DEV || m9_l5 || dev_t || device number of block device to mount
|-
| REQ_FLAGS || m9_s3 || int || flag field containing a bitwise combination of the following possible flags:
REQ_RDONLY (the file system is mounted read-only),
REQ_ISROOT (the file system is the root file system)
|}

'''Reply fields'''
{| class="wikitable"
| RES_INODE_NR || m9_l1 || ino_t || ''upon success:'' inode number of the root inode
|-
| RES_MODE || m9_s2 || mode_t || ''upon success:'' mode of the root inode
|-
| RES_FILE_SIZE_HI || m9_l2 || u32_t || ''upon success:'' file size of the root inode (upper 32 bits)
|-
| RES_FILE_SIZE_LO || m9_l3 || u32_t || ''upon success:'' file size of the root inode (lower 32 bits)
|-
| RES_UID || m9_s4 || uid_t || ''upon success:'' user ID of the root inode
|-
| RES_GID || m9_s1 || gid_t || ''upon success:'' group ID of the root inode
|-
| RES_FLAGS || m9_s3 || u16_t || ''upon success:'' result flags, either RES_NOFLAGS or a bitwise combination of:
RES_THREADED (the file system supports multiple concurrent requests),&lt;br/&gt;
RES_HASPEEK (the file system supports the PEEK and BPEEK calls),&lt;br/&gt;
RES_64BIT (the file system can handle 64-bit offsets)
|}

'''Reply codes'''

{|
| EINVAL || label too long
|-
| EINVAL || unable to retrieve endpoint from DS using label
|-
| EINVAL || opening device driver failed
|-
| EINVAL || reading superblock failed
|-
| OK || file system initialized and mounted
|}

'''Description'''

* This is the first request sent by VFS to any file server. Upon receiving this request, the file server is expected to initialize itself. This typically includes opening the given device and reading the file system's superblock from it; the file server can first obtain the driver endpoint by querying DS with the label name. If the call succeeds, the file server is expected to open the root inode (setting its reference count to 1), and return its details to VFS.

'''Notes'''

* The label is null-terminated, and the given length includes the terminating '\0' character. The maximum label size is always at most &lt;code&gt;DS_MAX_KEYLEN&lt;/code&gt;, but VFS currently uses a hardcoded size of 16 (including '\0').

----

==== REQ_UNMOUNT ====
Unmount the file system.

'''Request fields'''

* ''none''

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || file system unmounted
|}

'''Description'''

* This is the last request sent by VFS to any file server. It indicates that the file system is to be unmounted, and all of its resources to be cleaned up. This typically includes writing out any dirty data and closing the associated device. Analogous to how &lt;code&gt;REQ_READSUPER&lt;/code&gt; opens the root inode, &lt;code&gt;REQ_UNMOUNT&lt;/code&gt; must close the root inode by decreasing its reference count with 1. VFS assumes that this function succeeds, and will ignore returned error codes.

'''Notes'''

* After this request is finished, all inodes will have a reference count of zero.
* If the file server supports secondary (VM) caching, it must tell VM to invalidate any blocks associated with the backing device, using &lt;code&gt;vm_clear_cache()&lt;/code&gt;. Failure to do so could cause corruption due to block aliasing (the same block being accessible through multiple devices). File servers that use libminixfs can use &lt;code&gt;lmfs_invalidate()&lt;/code&gt;.

----

=== Inode open and close functions ===
==== REQ_LOOKUP ====
Resolve a path string to an inode.

'''Request fields'''
{| class="wikitable"
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ|WRITE) of the buffer containing the pathname
|-
| REQ_PATH_LEN || m9_s2 || int || length of the remaining part of the string to resolve
|-
| REQ_PATH_SIZE || m9_l5 || size_t || total size of the buffer
|-
| REQ_DIR_INO || m9_l3 || ino_t || inode number of the starting directory
|-
| REQ_ROOT_INO || m9_l4 || ino_t || inode number of the root directory of the caller, or 0 if not on this file system
|-
| REQ_FLAGS || m9_s3 || int || flag field containing a bitwise combination of the following possible flags:
PATH_RET_SYMLINK (do not resolve a symlink as the last path component),
PATH_GET_UCRED (copy credentials from VFS instead of using REQ_UID and REQ_GID)
|-
| REQ_UID || m9_s4 || uid_t || user ID of the caller
|-
| REQ_GID || m9_s1 || gid_t || group ID of the caller
|-
| REQ_GRANT2 || m9_l1 || cp_grant_id_t || memory grant (READ) of the ''vfs_ucred_t'' structure containing supplemental group data
|-
| REQ_UCRED_SIZE || m9_s4 || size_t || total size of ''vfs_ucred_t'' structure
|}

'''Reply fields'''
{| class="wikitable"
| RES_INODE_NR || m9_l1 || ino_t || ''upon success:'' resulting file inode number
|-
| RES_MODE || m9_s2 || mode_t || ''upon success:'' resulting file mode
|-
| RES_FILE_SIZE_HI || m9_l2 || u32_t || ''upon success:'' resulting file size (upper 32 bits)
|-
| RES_FILE_SIZE_LO || m9_l3 || u32_t || ''upon success:'' resulting file size (lower 32 bits)
|-
| RES_DEV || m9_l4 || dev_t || ''upon success:'' resulting file device number
|-
| RES_UID || m9_s4 || uid_t || ''upon success:'' resulting file user ID
|-
| RES_GID || m9_s1 || gid_t || ''upon success:'' resulting file group ID
|-
| RES_INODE_NR || m9_l1 || ino_t || ''upon EENTERMOUNT:'' inode number of the mountpoint inode
|-
| RES_OFFSET || m9_s2 || int || ''upon EENTERMOUNT and ELEAVEMOUNT and ESYMLINK:'' new starting offset of string within buffer
|-
| RES_SYMLOOP || m9_s3 || unsigned short || ''upon EENTERMOUNT and ELEAVEMOUNT and ESYMLINK:'' number of symbolic links followed
|}

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || provided path length exceeds what file server can handle
|-
| ENAMETOOLONG || any of the path components is longer than the file system supports
|-
| ENOTDIR || any of the intermediate path components is not a directory
|-
| EACCES || the caller has no search access permission on any of the intermediate directories
|-
| ENFILE || no inodes are available in memory
|-
| ELOOP || more than SYMLOOP_MAX symlinks were encountered during the lookup
|-
| ENAMETOOLONG || resulting path to copy back (including terminating '\0') does not fit in provided buffer
|-
| EENTERMOUNT || a mountpoint was encountered
|-
| ELEAVEMOUNT || ".." is followed from the file system root and the file system root is not the caller root inode
|-
| ESYMLINK || an absolute symlink was encountered
|-
| OK || inode successfully looked up and opened
|}

'''Description'''

* This request resolves a path string to an inode. The path is null-terminated; the file server may use &lt;code&gt;REQ_PATH_LEN&lt;/code&gt; to determine how many bytes it needs to copy in before starting resolution. This length includes the terminating '\0' character.
* The path resolution starts at the inode given by &lt;code&gt;REQ_DIR_INO&lt;/code&gt;. This is always a directory.
* In the path, path components are separated by '/' slash characters. Multiple consecutive slash characters are to be treated like one single slash character. A single "." dot path component refers to the current directory resolved so far; two ".." dots refer to the parent directory of the directory resolved so far. Path names ending in a slash have an implied single dot as last path component: they refer to the directory resolved so far. If the given path is empty, the path resolves to the starting inode. A slash at the beginning of the path name has no special meaning, but if the entire path consists of only slashes, this case should be treated as being followed by a dot rather than being empty.
* Whenever an inode is used as a directory in a lookup, the file server must check that the caller has search access permissions on that directory, using the directory's mode and the given caller credentials - see below. An inode is used as a directory when it is not the last path component. As indicated, a path component followed by a slash is never the last path component. If an empty path was given, the starting inode is not considered to be accessed as a directory. One exception to the access permission check requirements relates to leaving mountpoints; see below.
* If the given root inode (&lt;code&gt;REQ_ROOT_INO&lt;/code&gt;) is nonzero, this inode is a directory, and the file server must never allow a path lookup to go below this inode. A lookup on ".." from the root inode uses that root inode as a directory but should resolve to that root inode itself, rather than its parent. If the given root inode is zero, the caller's root directory is on another file system and need not be considered.
* Lookups may cross mountpoints. If a lookup on ".." is performed from the file system root (and that inode is not also the caller's root directory), the file server must return the &lt;code&gt;ELEAVEMOUNT&lt;/code&gt; pseudo-error to VFS, along with an offset pointing to the first character of the ".." path component or any slash character directly preceding it. If a lookup encounters an inode previously marked as mountpoint (using &lt;code&gt;REQ_MOUNTPOINT&lt;/code&gt;), the file server must return the &lt;code&gt;EENTERMOUNT&lt;/code&gt; pseudo-error to VFS, along with the inode number of the mountpoint and the offset pointing to the first character after the path component identifying the mountpoint (which is typically either a '/' slash character or the terminating '\0' character). It is possible that an inode marked as a mountpoint is encountered even when going up the tree - in this case, too, the inode should indeed be treated as a mountpoint and generate an &lt;code&gt;EENTERMOUNT&lt;/code&gt; error.
* The main exception to the behavior with respect to mountpoints, is if the given starting inode is a mountpoint itself. In this case, the first path component after the mountpoint is guaranteed by VFS to be "..". When leaving a mountpoint this way, the file server must skip the search access permissions check on the mountpoint directory, even though it is used as directory. In essence, the properties of the mountpoint directory are entirely hidden.
* &lt;code&gt;REQ_FLAGS&lt;/code&gt; is a bitwise OR'ed mask of flags. If it has the &lt;code&gt;PATH_RET_SYMLINK&lt;/code&gt; flag set, and the last path component of the path is a symbolic link, then the result of the lookup must be that symbolic link inode; otherwise, the lookup must continue with the contents of the symbolic link. All other path components that resolve to symbolic links must be followed, up to &lt;code&gt;SYMLOOP_MAX&lt;/code&gt; times during the lookup. The count of symbolic link resolutions must be returned if the lookup results in &lt;code&gt;EENTERMOUNT&lt;/code&gt;, &lt;code&gt;ELEAVEMOUNT&lt;/code&gt; and &lt;code&gt;ESYMLINK&lt;/code&gt;. If a symbolic link is resolved during the lookup process, then the symbolic link followed by any remaining part of the original path must be used as the new remaining path. If the symbolic link is relative (i.e. it does not start with a '/' slash), the file server is expected to continue resolving the path. If the symbolic link is absolute (i.e. it starts with a slash), then the file server must return the &lt;code&gt;ESYMLINK&lt;/code&gt; pseudo-error to VFS. In general, when the file server resolves a symbolic link and then proceeds to return an &lt;code&gt;EENTERMOUNT&lt;/code&gt;, &lt;code&gt;ELEAVEMOUNT&lt;/code&gt; or &lt;code&gt;ESYMLINK&lt;/code&gt; pseudo-error, it must copy back the remaining part of the changed path back into the given granted buffer. The file server must null-terminate the path, and be careful not to exceed the total &lt;code&gt;REQ_PATH_SIZE&lt;/code&gt; size.
* The caller credentials that are used for directory search access checks, may be passed in either of two ways. If the &lt;code&gt;PATH_GET_UCRED&lt;/code&gt; flag is not set in the &lt;code&gt;REQ_FLAGS&lt;/code&gt; field, then &lt;code&gt;REQ_UID&lt;/code&gt; and &lt;code&gt;REQ_GID&lt;/code&gt; are to be used as the caller's user and group ID, respectively. If &lt;code&gt;PATH_GET_UCRED&lt;/code&gt; is set, the file system must instead copy in a ''vfs_ucred_t'' structure from VFS, from the grant identified by &lt;code&gt;REQ_GRANT2&lt;/code&gt;.  This supplies the caller's user ID, group ID, and a set of supplemental group IDs. The caller is considered to be part of all these groups. The &lt;code&gt;REQ_UCRED_SIZE&lt;/code&gt; field should be used to make sure that VFS and the file server agree on the size of the ''vfs_ucred_t'' structure. The file server may choose to copy in only the given number of bytes if the size is smaller than it expects. A larger size should be considered to be an error.
* Upon success, the resulting inode is opened (increasing its reference count with 1) and its details are returned to VFS. Upon entering a mountpoint (&lt;code&gt;EENTERMOUNT&lt;/code&gt;), the inode number of the mountpoint is returned but its reference count remains unchanged.

'''Notes'''

* If the given root directory inode is nonzero, a file server may choose to continue resolving absolute symlinks itself.
* See [[#Implementing_the_lookup_request|this]] section for a possible approach to implementing most of the requirements above.

----

==== REQ_CREATE ====
Create a regular file.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number of the containing directory for the new file
|-
| REQ_MODE || m9_s3 || mode_t || mode for the file
|-
| REQ_UID || m9_s4 || uid_t || user ID for the file
|-
| REQ_GID || m9_s1 || gid_t || group ID for the file
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for the last path component
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the last path component
|}

'''Reply fields'''
{| class="wikitable"
| RES_INODE_NR || m9_l1 || ino_t || ''upon success:'' inode number of created file
|-
| RES_MODE || m9_s2 || mode_t || ''upon success:'' mode of created file
|-
| RES_FILE_SIZE_HI || m9_l2 || u32_t || ''upon success:'' file size of created file (upper 32 bits)
|-
| RES_FILE_SIZE_LO || m9_l3 || u32_t || ''upon success:'' file size of created file (lower 32 bits)
|-
| RES_UID || m9_s4 || uid_t || ''upon success:'' user ID of created file
|-
| RES_GID || m9_s1 || gid_t || ''upon success:'' group ID of created file
|}

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || the last path component is longer than the file system supports
|-
| EEXIST || an entry with that name already exists in the given directory
|-
| ENFILE || no inodes are available
|-
| ENOSPC || no space is left on the device
|-
| EFBIG || the containing directory can not handle any more entries
|-
| ENOENT || the containing directory has been removed
|-
| OK || regular file created and opened
|}

'''Description'''

* This request creates a new regular file with the given properties, opens it (setting its reference count to 1), and returns its actual details to VFS.

'''Notes'''

* The given mode includes the &lt;code&gt;S_IFREG&lt;/code&gt; type.
* The resulting file size will typically be zero.
* This is a write request, and will not be sent to read-only file systems.
* Open Group links: [//www.opengroup.org/onlinepubs/009695399/functions/open.html open], [//www.opengroup.org/onlinepubs/009695399/functions/creat.html creat]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the new file's &lt;code&gt;ATIME&lt;/code&gt;, &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt;, and the containing directory's &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; are updated.

----

==== REQ_NEWNODE ====
Create an open, unlinked file.

'''Request fields'''
{| class="wikitable"
| REQ_MODE || m9_s3 || mode_t || mode for the inode
|-
| REQ_DEV || m9_l5 || dev_t || device number for the inode
|-
| REQ_UID || m9_s4 || uid_t || user ID for the inode
|-
| REQ_GID || m9_s1 || gid_t || group ID for the inode
|}

'''Reply fields'''
{| class="wikitable"
| RES_INODE_NR || m9_l1 || ino_t || ''upon success:'' inode number of the resulting inode
|-
| RES_MODE || m9_s2 || mode_t || ''upon success:'' mode of the resulting inode
|-
| RES_FILE_SIZE_HI || m9_l2 || u32_t || ''upon success:'' size of the resulting inode (upper 32 bits)
|-
| RES_FILE_SIZE_LO || m9_l3 || u32_t || ''upon success:'' size of the resulting inode (lower 32 bits)
|-
| RES_DEV || m9_l4 || dev_t || ''upon success:'' device number of the resulting inode
|-
| RES_UID || m9_s4 || uid_t || ''upon success:'' user ID of the resulting inode
|-
| RES_GID || m9_s1 || gid_t || ''upon success:'' group ID of the resulting inode
|}

'''Reply codes'''
{| class="wikitable"
| ENFILE || no inodes are available
|-
| OK || temporary inode created and opened
|}

'''Description'''

* This request creates an open but unlinked file. If successful, an inode with a reference count of 1 is returned; this inode exists until its reference count is decreased to zero again. Currently, only the pipe file server will get &lt;code&gt;[[#REQ_NEWNODE|REQ_NEWNODE]]&lt;/code&gt; requests.

'''Notes'''

* The given device number is only relevant for block-special and character-special files.
* The resulting file size will typically be zero.
* Only PipeFS will get this request.
* This is a write request, and would in principle not be sent to read-only file systems.
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the resulting file's &lt;code&gt;ATIME&lt;/code&gt;, &lt;code&gt;MTIME&lt;/code&gt; and &lt;code&gt;CTIME&lt;/code&gt; are updated.

----

==== REQ_PUTNODE ====
Decrease an open file's reference count.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_COUNT || m9_l2 || int || number of references to drop
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || reference count decreased
|}

'''Description'''

* This request tells the file server to decrease the reference count of an inode, closing the file if the reference count reaches zero. VFS assumes that this function succeeds, and will ignore returned error codes.

'''Notes'''

* VFS will always decrease the count by at least one, and at most the total count.
* VFS may delay putnode requests for as long as the file remains open.

----

=== Inode use functions ===
==== REQ_READ ====
Read from a file.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (WRITE) to store the resulting data in
|-
| REQ_SEEK_POS_HI || m9_l3 || u32_t || seek position into the open file (upper 32 bits)
|-
| REQ_SEEK_POS_LO || m9_l4 || u32_t || seek position into the open file (lower 32 bits)
|-
| REQ_NBYTES || m9_l5 || size_t || number of bytes to read
|}

'''Reply fields'''
{| class="wikitable"
| RES_SEEK_POS_HI || m9_l3 || u32_t || ''upon success:'' resulting file position (upper 32 bits)
|-
| RES_SEEK_POS_LO || m9_l4 || u32_t || ''upon success:'' resulting file position (lower 32 bits)
|-
| RES_NBYTES || m9_l5 || size_t || ''upon success:'' number of bytes read
|}

'''Reply codes'''
{| class="wikitable"
| OK || results successfully (partially) read, or EOF reached
|}

'''Description'''

* This call should store as many bytes as can fit and do not exceed the end of file into the given buffer, starting from the given seek position. The seek position should be advanced accordingly. If the given position points at or beyond the end of file, zero bytes (EOF) should be returned successfully, and the position must not be advanced further.

'''Notes'''

* This call is not used for block or character special files.
* The number of bytes to read is always positive and nonzero.
* Open Group link: [www.opengroup.org/onlinepubs/009695399/functions/read.html read]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, file's &lt;code&gt;ATIME&lt;/code&gt; is updated.

----

==== REQ_WRITE ====
Write to a file.

'''Request field'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) containing the data to write
|-
| REQ_SEEK_POS_HI || m9_l3 || u32_t || seek position into the open file (upper 32 bits)
|-
| REQ_SEEK_POS_LO || m9_l4 || u32_t || seek position into the open file (lower 32 bits)
|-
| REQ_NBYTES || m9_l5 || size_t || number of bytes to write
|}

'''Reply fields'''
{|
| RES_SEEK_POS_HI || m9_l3 || u32_t || ''upon success:'' resulting file position (upper 32 bits)
|-
| RES_SEEK_POS_LO || m9_l4 || u32_t || ''upon success:'' resulting file position (lower 32 bits)
|-
| RES_NBYTES || m9_l5 || size_t || ''upon success:'' number of bytes written
|}

'''Reply codes'''
{| class="wikitable"
|  ENOSPC || no space is left on the device
|-
| EFBIG || the write would make the resulting file size too big
|-
| OK || results successfully written
|}

'''Description'''

* This call call should write all bytes to the given seek position of the file, possibly extending the file size. If the position is already beyond the end of the file, the gap between the current end of file and the new data should be filled with zeroes (using file holes if supported).

'''Notes'''

* This call is not used for block or character special files.
* The number of bytes to write is always positive and nonzero.
* This is a write request, and will not be sent to read-only file systems.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/write.html write]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the file's &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; are updated.

----

==== REQ_PEEK ====
Request filesystem to retrieve the requested inode data.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_SEEK_POS_HI || m9_l3 || u32_t || seek position into the open file (upper 32 bits)
|-
| REQ_SEEK_POS_LO || m9_l4 || u32_t || seek position into the open file (lower 32 bits)
|-
| REQ_NBYTES  || m9_l5 || size_t || number of bytes to read
|}


'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || peek done, see REQ_NBYTES reply to see how many were available, filesystem cache metadata
|-
| ENOSYS || filesystem does not implement REQ_PEEK and mmap() call of files opened on this FS should fail
|}

'''Description'''
* This call operates just like &lt;code&gt;[[#REQ_READ|REQ_READ]]&lt;/code&gt;, but the results are not copied anywhere except for to the in-filesystem cache. It is to support a to-be-merged mmap implementation in which filesystem cache blocks are annotated with inode number/offset information that VM can then use to share pages of with processes.
* The (future) mmap implementation makes one important assumption based on the result of REQ_PEEK. If it returns ENOSYS, mmap() can not work as relies on REQ_PEEK to make the blocks visible to VM. mmap() will fail gracefully when it is called on FD's that represent open inodes on this FS. More significantly, if REQ_PEEK does not return ENOSYS, it is assumed that REQ_PEEK also informs the cache code of inode metadata.
* Therefore, filesystems must do both (implement REQ_PEEK and inform the cache code of inode metadata), or make REQ_PEEK always return ENOSYS. Otherwise the mmap() may succeed but page accesses will fail, causing disasters in general and most of all when exec() uses mmap().

----

==== REQ_GETDENTS ====
Retrieve directory entries.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number of the directory
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (WRITE) to store resulting struct dirent entries and names in
|-
| REQ_MEM_SIZE || m9_l5 || size_t || size of given memory grant
|-
| REQ_SEEK_POS_HI || m9_l3 || u32_t || seek position into the open file (upper 32 bits)
|-
| REQ_SEEK_POS_LO || m9_l4 || u32_t || seek position into the open file (lower 32 bits)
|}

'''Reply fields'''
{| class="wikitable"
| RES_SEEK_POS_HI || m9_l3 || u32_t || ''upon success:'' new seek position into the file (upper 32 bits)
|-
| RES_SEEK_POS_LO || m9_l4 || u32_t || ''upon success:'' new seek position into the file (lower 32 bits)
|-
| RES_NBYTES || m9_l5 || size_t || ''upon success:'' the amount of resulting bytes stored, with 0 for EOF
|}

'''Reply codes'''
{| class="wikitable"
| ENOENT || the given file position is not aligned to the internal data structures (file system specific)
|-
| EINVAL || the given buffer is too small to store even one entry (including padding)
|-
| OK || stored zero or more entries in the user's buffer
|}

'''Description'''

* This call should store as many entries as can fit and are still present into the given buffer, starting from the entry identified by the given seek position. The seek position should be advanced accordingly. If the given position points beyond the last entry, zero entries should be returned successfully, and the position must not be advanced further.

'''Notes'''

* What the position represents is entirely up to the FS. it could just represent a counter, in which case &lt;code&gt;ENOENT&lt;/code&gt; will never have to be thrown. While seeks to unaligned positions are not allowed, seeks beyond the directory end should just be taken as EOF.
* Each stored entry is of type &lt;code&gt;struct dirent&lt;/code&gt;, with member &lt;code&gt;d_name&lt;/code&gt; containing the null-terminated name of the directory entry and extra padding to make the following &lt;code&gt;struct dirent&lt;/code&gt; 32-bit aligned.
* Each dirent's &lt;code&gt;d_off&lt;/code&gt; indicates the (file-system specific) position of that entry, and &lt;code&gt;d_reclen&lt;/code&gt; represents the total size of the returned &lt;code&gt;struct dirent&lt;/code&gt; including name and padding.
* Open Group link (closest match): [//www.opengroup.org/onlinepubs/009695399/functions/readdir.html readdir]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the &lt;code&gt;ATIME&lt;/code&gt; of the directory is updated.

----

==== REQ_FTRUNC ====
Set size, or free space, of an open file.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_TRC_START_HI || m9_l2 || u32_t || new file size or starting position (inclusive) of region to free (upper 32 bits)
|-
| REQ_TRC_START_LO || m9_l3 || u32_t || new file size or starting position (inclusive) of region to free (lower 32 bits)
|-
| REQ_TRC_END_HI || m9_l4 || u32_t || zero or ending position (exclusive) of region to free (upper 32 bits)
|-
| REQ_TRC_END_LO || m9_l5 || u32_t || zero or ending position (exclusive) of region to free (lower 32 bits)
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| EFBIG || the resulting file would be too big
|-
| OK || file size changed and/or holes created
|}

'''Description'''

* The meaning of this request depends on whether the &lt;code&gt;REQ_TRC_END&lt;/code&gt; value is zero or not. If it is zero, the size of the given file has to be adjusted, truncating or expanding the file to the size passed in &lt;code&gt;REQ_TRC_START&lt;/code&gt;. Expanding means filling with zeroes, using file holes if supported. If &lt;code&gt;REQ_TRC_END&lt;/code&gt; is not zero, then the region within the file from &lt;code&gt;REQ_TRC_START&lt;/code&gt; to &lt;code&gt;REQ_TRC_END&lt;/code&gt; is to be freed, using file holes if possible. File servers that do not support file holes should zerofill the given region, providing the same net effect to the caller. In any case, freeing space alone must not change the file size.

'''Notes'''

* VFS guarantees that this call is issued only on regular files.
* VFS guarantees that if &lt;code&gt;REQ_TRC_END&lt;/code&gt; is nonzero, it is greater than &lt;code&gt;REQ_TRC_START&lt;/code&gt;, and no greater than the file size.
* Regions for freeing space are not aligned on block boundaries. On block-oriented file systems that do support file holes, the file server may still have to zero part of the first and last block that the region covers partially.
* This is a write request, and will not be sent to read-only file systems.
* Open Group links: [//www.opengroup.org/onlinepubs/009695399/functions/ftruncate.html ftruncate], [//www.opengroup.org/onlinepubs/009695399/functions/truncate.html truncate]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the file's &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; are updated, even when the file size has not changed.

----

==== REQ_INHIBREAD ====
Mark file as target of seek operation.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || request processed successfully
|}

'''Description'''

* This request may help determine a file system's read-ahead behavior. After a seek, the file server may choose not to do aggressive read-ahead along with the next read call, because it is likely that another seek will follow after (for applications following a seek-read-seek-read pattern). The next read call may enable read-ahead for the read after that (seek-read-read) again.

'''Notes'''

* This scheme assumes only one reader per file at any time.

----

=== Inode metadata retrieval and manipulation ===
==== REQ_STAT ====
Retrieve file status.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (WRITE) to store resulting "struct stat" in
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || result stored in buffer
|}

'''Description'''

* The file server is requested to fill a "struct stat" structure with details about the given file, and copy it out using the provided grant.

'''Notes'''

* The st_dev field of the structure should be set to the value provided with the initial &lt;code&gt;[[#REQ_READSUPER|REQ_READSUPER]]&lt;/code&gt; request.
* Open Group links: [//www.opengroup.org/onlinepubs/009695399/functions/fstat.html fstat], [//www.opengroup.org/onlinepubs/009695399/functions/stat.html stat]
* Open Group update (2008): [//pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html sys/stat.h]

----

==== REQ_CHOWN ====
Change file ownership.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_UID || m9_s4 || uid_t || new user ID for the file
|-
| REQ_GID || m9_s1 || gid_t || new group ID for the file
|}

'''Reply fields'''
{| class="wikitable"
| RES_MODE || m9_s2 || mode_t || ''upon success:'' resulting inode mode
|}

'''Reply codes'''
{| class="wikitable"
| OK || ownership changed
|}

'''Description'''

* This request changes ownership of the given file to a new user and group ID. The file server is expected to clear the setuid and setgid bits from the file, and send back the resulting mode to VFS for synchronization of the vnode's cached mode.

'''Notes'''

* This is a write request, and will not be sent to read-only file systems.
* Open Group links: [//www.opengroup.org/onlinepubs/009695399/functions/fchown.html fchown], [//www.opengroup.org/onlinepubs/009695399/functions/chown.html chown]
* &lt;code&gt;POSIX&lt;/code&gt; notes: the &lt;code&gt;CTIME&lt;/code&gt; of the file is updated.

----

==== REQ_CHMOD ====
Change file mode.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_MODE || m9_s3 || mode_t || new mode for the file
|}

'''Reply fields'''
{| class="wikitable"
| RES_MODE || m9_s2 || mode_t || ''upon success:'' resulting inode mode
|}

'''Reply codes'''
{| class="wikitable"
| OK || mode changed
|}

'''Description'''

* This request changes the access permissions part (but not the type part) of the mode of the given inode. The resulting mode is sent back to VFS.

'''Notes'''

* The access permissions mask to use on the given mode is 07777 octal, and defined as &lt;code&gt;ALL_MODES&lt;/code&gt; in &lt;code&gt;&lt;minix/const.h&gt;&lt;/code&gt;.
* This is a write request, and will not be sent to read-only file systems.
* Open Group links: [//www.opengroup.org/onlinepubs/009695399/functions/fchmod.html fchmod], [//www.opengroup.org/onlinepubs/009695399/functions/chmod.html chmod]
* &lt;code&gt;POSIX&lt;/code&gt; notes: the &lt;code&gt;CTIME&lt;/code&gt; of the file is updated.

----

==== REQ_UTIME ====
Set file times.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_ACTIME || m9_l2 || time_t || new access time, in seconds since Epoch
|-
| REQ_MODTIME || m9_l3 || time_t || new modification time, in seconds since Epoch
|-
| REQ_ACNSEC || m9_l4 || long || new access nanoseconds, or special value UTIME_OMIT or UTIME_NOW
|-
| REQ_MODNSEC || m9_l5 || long || new modification nanoseconds, or special value UTIME_OMIT or UTIME_NOW
|}


'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || custom file times set
|}


'''Description'''

* The purpose of this request is to set a custom access time stamp (&lt;code&gt;ATIME&lt;/code&gt;), and modification time stamp (&lt;code&gt;MTIME&lt;/code&gt;) on a file. Time stamps are expressed in seconds and nanoseconds, like the two members of &lt;code&gt;struct timespec&lt;/code&gt;. For each of the two time stamps, the special value &lt;code&gt;UTIME_OMIT&lt;/code&gt; (defined in &lt;code&gt;&lt;sys/stat.h&gt;&lt;/code&gt;) asks to avoid modification of the data stored in the file system; and the special value &lt;code&gt;UTIME_NOW&lt;/code&gt; (also defined in &lt;code&gt;&lt;sys/stat.h&gt;&lt;/code&gt;) asks to set the time stamp to the current time.

'''Notes'''

* This is a write request, and will not be sent to read-only file systems.
* If &lt;code&gt;UTIME_NOW&lt;/code&gt; is passed, the count of seconds passed in the corresponding time_t value is set by VFS to the current time.
* &lt;code&gt;POSIX&lt;/code&gt; requires rounding of time stamps to be done toward zero; so discard nanoseconds if the file system does not support them; this also works for &lt;code&gt;UTIME_NOW&lt;/code&gt;.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/utime.html utime] and [//pubs.opengroup.org/onlinepubs/009695399/basedefs/time.h.html time.h]
* Open Group update (2008): [//pubs.opengroup.org/onlinepubs/9699919799/functions/futimens.html futimens and utimensat] and  [//pubs.opengroup.org/onlinepubs/9699919799/basedefs/sys_stat.h.html sys/stat.h]
* &lt;code&gt;POSIX&lt;/code&gt; notes: the &lt;code&gt;CTIME&lt;/code&gt; of the file is also updated.

----

=== Directory entry manipulation ===
==== REQ_MKDIR ====
Create a directory.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number of the containing directory for the new file
|-
| REQ_MODE || m9_s3 || mode_t || mode for the directory
|-
| REQ_UID || m9_s4 || uid_t || user ID for the directory
|-
| REQ_GID || m9_s1 || gid_t || group ID for the directory
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for the last path component
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the last path component
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || the last path component is longer than the file system supports
|-
| EEXIST || a directory entry with that name already exists
|-
| ENFILE || no inodes are available
|-
| ENOSPC || no space is left on the device
|-
| EFBIG || the containing directory can not handle any more entries
|-
| EMLINK || the containing directory has the maximum number of links already
|-
| ENOENT || the containing directory has been removed
|-
| OK || directory created
|}

'''Description'''

* This request creates a new directory with the given properties.

'''Notes'''

* The given mode includes the &lt;code&gt;S_IFDIR&lt;/code&gt; type.
* This is a write request, and will not be sent to read-only file systems.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/mkdir.html mkdir]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the new directory's &lt;code&gt;ATIME&lt;/code&gt;, &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt;, and the containing directory's &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; are updated.

----

==== REQ_MKNOD ====
Create a special file.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number of the containing directory for the new file
|-
| REQ_MODE || m9_s3 || mode_t || mode for the file
|-
| REQ_DEV || m9_l5 || dev_t || device number
|-
| REQ_UID || m9_s4 || uid_t || user ID for the file
|-
| REQ_GID || m9_s1 || gid_t || group ID for the file
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for the last path component
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the last path component
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || the last path component is longer than the file system supports
|-
| EEXIST || a directory entry with that name already exists
|-
| EINVAL || the given file type is invalid or not supported
|-
| ENFILE || no inodes are available
|-
| ENOSPC || no space is left on the device
|-
| EFBIG || the containing directory can not handle any more entries
|-
| ENOENT || the containing directory has been removed
|-
| OK || special file created
|}

'''Description'''

* This request creates a new file with the given properties. The type contained in the given mode is arbitrary, and may even be invalid. Interpretation is up to the file system.

'''Notes'''

* This is a write request, and will not be sent to read-only file systems.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/mknod.html mknod]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the new file's &lt;code&gt;ATIME&lt;/code&gt;, &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt;, and the containing directory's &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; are updated.

----

==== REQ_LINK ====
Create a hard link to a file.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t  || link file inode number
|-
| REQ_DIR_INO || m9_l3 || ino_t || inode number of the containing directory for the new link
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for the last path component
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the last path component
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || the last path component is longer than the file system supports
|-
| EEXIST || a directory entry with that name already exists
|-
| EPERM || the linked file is a directory
|-
| EMLINK || the linked inode has the maximum number of links already
|-
| ENOSPC || no space is left on the device
|-
| EFBIG || the containing directory can not handle any more entries
|-
| ENOENT || the containing directory has been removed
|-
| OK || new link created
|}

'''Description'''

* This request creates a new directory entry that hardlinks to an existing inode (the file being linked).

'''Notes'''

* Linking to directories may, but need not be supported.
* This is a write request, and will not be sent to read-only file systems.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/link.html link]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the &lt;code&gt;CTIME&lt;/code&gt; of the linked file and the &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; of the containing directory of the new link are updated.

----

==== REQ_UNLINK ====
Unlink a file.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number of the containing directory for the file
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for last path component
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the last path component
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || the last path component is longer than the file system supports
|-
| ENOENT || no directory entry with that name exists
|-
| EPERM || the given name refers to a directory
|-
| OK || unlinked file
|}

'''Description'''

* This request unlinks a file. The inode must not represent a directory.

'''Notes'''

* Unlinking of directories, if supported, is only allowed to be done by the super user; since this request does not provide caller information, unlinking of directories can not be supported.
* This is a write request, and will not be sent to read-only file systems.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/unlink.html unlink]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the &lt;code&gt;CTIME&lt;/code&gt; of the unlinked file is updated (if still linked elsewhere or open), and the &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; of the containing directory are updated.

----

==== REQ_RMDIR ====
Remove an empty directory.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number of the containing directory for the file
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for last path component
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the last path component
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || the last path component is longer than the file system supports
|-
| ENOENT || no directory entry with that name exists
|-
| ENOTDIR || the given name does not refer to a directory.
|-
| ENOTEMPTY || the given directory is not empty
|-
| EINVAL || the given directory is "." or ".."
|-
| EBUSY || the given directory is the root directory of the file system
|-
| OK || removed directory
|}

'''Description'''

* This request removes a directory. The inode must represent a directory, and that directory must be empty.

'''Notes'''

* This is a write request, and will not be sent to read-only file systems.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/rmdir.html rmdir]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the &lt;code&gt;CTIME&lt;/code&gt; of the removed directory is updated (if still open), and the &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; of the containing directory are updated.

----

==== REQ_RENAME ====
Rename a file or directory.

'''Request fields'''
{| class="wikitable"
| REQ_REN_OLD_DIR || m9_l3 || ino_t || inode number of containing directory for the old file
|-
| REQ_REN_NEW_DIR || m9_l4 || ino_t || inode number of containing directory for the new file
|-
| REQ_REN_GRANT_OLD || m9_l2 || cp_grant_id_t || memory grant (READ) for the old last path component
|-
| REQ_REN_LEN_OLD || m9_s1 || unsigned short || length of the old last path component
|-
| REQ_REN_GRANT_NEW || m9_l1 || cp_grant_id_t || memory grant (READ) for the new last path component
|-
| REQ_REN_LEN_NEW || m9_s2 || unsigned short || length of the new last path component
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || the last path component of the old or new file is longer than the file system supports
|-
| ENOENT || the old file does not exist
|-
| OK || the old and new last path component and containing directory are the same
|-
| EBUSY || the old file is a mountpoint directory
|-
| EINVAL || an attempt is made to move a directory to within its own subtree
|-
| EINVAL || the old or new last path component is "." or ".."
|-
| EMLINK || the old file is a directory and the new file doesn't exist but the new containing directory has the maximum number of links
|-
| ENOTDIR || the old file is a directory and the new file exists but is not a directory
|-
| EISDIR || the old file is not a directory and the new file exists but is a directory
|-
| ENOTEMPTY || the new file is a directory but is not empty
|-
| EBUSY || the new file is the root directory of the file system
|-
| ENOSPC || no space is left on the device
|-
| EFBIG || the new containing directory can not handle any more entries
|-
| ENOENT || the new containing directory has been removed
|-
| OK || file renamed
|}

'''Description'''

* This request renames a file or directory to a new name (last path component) and/or a new containing directory. An attempt to rename a file to itself is a no-op and must return OK. Otherwise, if the new name already exists in the new containing directory, and is of the same directory type as the old file (i.e., directory or not directory), then the call implies an unlink or rmdir on the new last path component first, applying the same restrictions as those calls. Other restrictions apply, generally to maintain file system consistency.

'''Notes'''

* This is a write request, and will not be sent to read-only file systems.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/rename.html rename]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; of the old and new containing directories are updated.

----

==== REQ_SLINK ====
Create a symbolic link.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number of the containing directory for the new file
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for the link name's last path component
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the link name's last path component
|-
| REQ_GRANT3 || m9_l3 || cp_grant_id_t || memory grant (READ) for the link target (not including a trailing '\0')
|-
| REQ_MEM_SIZE || m9_l5 || size_t || length of the link target (not including a trailing '\0')
|-
| REQ_UID || m9_s4 || uid_t || user ID for the new symlink
|-
| REQ_GID || m9_s1 || gid_t || group ID for the new symlink
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| ENAMETOOLONG || the last path component is longer than the file system supports
|-
| EEXIST || a directory entry with that name already exists
|-
| ENFILE || no inodes are available
|-
| ENOSPC || no space is left on the device
|-
| EFBIG || the containing directory can not handle any more entries
|-
| ENOENT || the containing directory has been removed
|-
| ENAMETOOLONG || the link target contains '\0' bytes
|-
| OK || symbolic link created
|}

'''Description'''

* This request instructs the file server to create a symbolic link entry. The resulting symlink's mode is expected to be &lt;code&gt;S_IFLNK&lt;/code&gt;|0777 (octal). The symlink should point to the given link target, which is, as far as this request is concerned, a block of arbitrary data.

'''Notes'''

* The link target is guaranteed to be at least 1 byte and less than &lt;code&gt;SYMLINK_MAX&lt;/code&gt; bytes.
* This is a write request, and will not be sent to read-only file systems.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/symlink.html symlink]
* &lt;code&gt;POSIX&lt;/code&gt; notes: upon success, the new symlink's &lt;code&gt;ATIME&lt;/code&gt;, &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt;, and the containing directory's &lt;code&gt;CTIME&lt;/code&gt; and &lt;code&gt;MTIME&lt;/code&gt; are updated.

----

==== REQ_RDLINK ====
Retrieve symbolic link target.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (WRITE) for buffer to write result to
|-
| REQ_MEM_SIZE || m9_l5 || size_t || size of buffer to write to
|}

'''Reply fields'''
{| class="wikitable"
| RES_NBYTES || m9_l5 || size_t || ''upon success:'' number of bytes written
|}

'''Reply codes'''
{| class="wikitable"
| OK || result stored in buffer
|}

'''Description'''

* This call asks the file server to copy the link target of a symbolic link into the given grant. No terminating '\0' character need to be written. If the given buffer is smaller than the link target, a partial result is to be written.

'''Notes'''

* VFS does not check the permissions of the symbolic link. A symbolic link is always expected to be readable.
* Open Group link: [//www.opengroup.org/onlinepubs/009695399/functions/readlink.html readlink]

----

=== Miscellaneous file system operations ===
==== REQ_MOUNTPOINT ====
Mark an inode as mountpoint.

'''Request fields'''
{| class="wikitable"
| REQ_INODE_NR || m9_l1 || ino_t || inode number of file to use as mountpoint
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| EBUSY || inode already in use as mountpoint
|-
| ENOTDIR || given inode is not a directory
|-
| OK || inode marked as mountpoint
|}

'''Description'''

* This request marks the given inode as being in use as a mountpoint for another file system. VFS will keep the inode open for as long as it is a mountpoint, and send a &lt;code&gt;[[#REQ_PUTNODE|REQ_PUTNODE]]&lt;/code&gt; request for it when the other file system is unmounted.

'''Notes'''

* The mountpoint will not be accessed by inode number for any other requests, besides &lt;code&gt;[[#REQ_LOOKUP|REQ_LOOKUP]]&lt;/code&gt; requests continuing up from that mountpoint. In essence, an inode that acts as a mountpoint is entirely hidden from the user's point of view.
* VFS guarantees that the reference count of the given inode is 1 at the time of this request.
* It may be that inodes that are part of the directory hierarchy below the given inode, are still open. The file system must keep this in mind. As far as parent modifications go (such as file times), the ultimate ancestor of such inodes is the mountpoint inode, not the mounted inode that is on another file system, so the file system need not make any exceptions there. However, the mountpoint inode must be hidden during lookups going up from such inodes (see the &lt;code&gt;[[#REQ_LOOKUP|REQ_LOOKUP]]&lt;/code&gt; description).
* In principle, not only directories can be mounted; there is support for mounting regular files in both VFS and MFS as well. A file server may choose to support this by only returning &lt;code&gt;ENOTDIR&lt;/code&gt; for inodes that it does not support being a mountpoint.

----

==== REQ_STATVFS ====

Retrieve file system statistics.

'''Request fields'''
{| class="wikitable"
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (WRITE) to store resulting "struct statvfs" in
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || result stored in buffer
|}

'''Description'''

* The file server is requested to fill a "struct statvfs" structure with details about the file system, and copy it out using the provided grant.

'''Notes'''

* By convention, fields that are unknown or not applicable to the file system, should be set to zero.
* Open Group links: [//www.opengroup.org/onlinepubs/009695399/functions/fstatvfs.html fstatvfs], [//www.opengroup.org/onlinepubs/009695399/functions/statvfs.html statvfs]
----

==== REQ_SYNC ====
Write any unwritten data to disk.

'''Request fields'''

* ''none''

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || request processed successfully
|}

'''Description'''

* This request tells the file server to flush its cache to the backing device.

'''Notes'''

* VFS currently translates fsync() to a sync on the entire file system.
* A root file server must also flush any cached data associated with devices other than the one it is mounted on.
* Open Group links: [//www.opengroup.org/onlinepubs/009695399/functions/fsync.html fsync], [//www.opengroup.org/onlinepubs/009695399/functions/sync.html sync]

----

=== Block I/O functions ===
==== REQ_FLUSH ====
Flush and invalidate cached data for an unmounted device.

'''Request fields'''
{| class="wikitable"
| REQ_DEV || m9_l5 || dev_t || device number
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{|
|OK |cache flushed and invalidated for this device
|}

'''Description'''

* This request tells the root file server to give up the part of its cache used for the given device.

'''Notes'''

* Only the file server providing the root file system will get this request.
* VFS will not send requests for mounted devices.
* File servers that use secondary (VM) caching must also invalidate blocks for this device in VM, using &lt;code&gt;vm_clear_cache()&lt;/code&gt; (or, for libminixfs users, &lt;code&gt;lmfs_invalidate()&lt;/code&gt;).

----

==== REQ_NEW_DRIVER ====
Set a new driver label for a major device.

'''Request fields'''
{| class="wikitable"
| REQ_DEV || m9_l5 || dev_t || device number
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) for the label of the block device driver to use
|-
| REQ_PATH_LEN || m9_s2 || unsigned short || length of the label
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || request processed successfully
|}

'''Description'''

* This request tells a file server that that the endpoint of a driver may have changed. The request will be sent in two cases: to inform any file server that its underlying block device driver has restarted, and to inform the root file server that the particular driver has to be used for raw block I/O on the given major number from that point on. The request provides the driver's major number, and the label of the driver. This label will always be the same across driver restarts, but may not be the same for block I/O drivers given to the root file server.
* The file server must use DS to look up the corresponding endpoint, and use that endpoint to communicate with the driver from then on. In the case of driver restarts, the file server may have to invoke recovery code (for example, to reopen the underlying block device), if it has not found out about the restart through IPC errors already. In general, the file server must only perform recovery upon getting this request if the resulting endpoint is different from the one it knew about.

'''Notes'''

* The file server must ignore the minor part of the given device number.
* Only the root file server will receive these requests for devices that it is not mounted on.
* The label is null-terminated, and the given length includes the terminating '\0' character. The maximum label size is always at most &lt;code&gt;DS_MAX_KEYLEN&lt;/code&gt;, but VFS currently uses a hardcoded size of 16 (including '\0').

----
==== REQ_BREAD ====
Read from a block device directly.

'''Request fields'''
{| class="wikitable"
| REQ_DEV2 || m9_l1 || dev_t || device number
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (WRITE) to store the resulting data in
|-
| REQ_SEEK_POS_HI || m9_l3 || u32_t || read position (upper 32 bits)
|-
| REQ_SEEK_POS_LO || m9_l4 || u32_t || read position (lower 32 bits)
|-
| REQ_NBYTES || m9_l5 || size_t || number of bytes to read
|}

'''Reply fields'''
{| class="wikitable"
| RES_SEEK_POS_HI || m9_l3 || u32_t || ''upon success:'' resulting position (upper 32 bits)
|-
| RES_SEEK_POS_LO || m9_l4 || u32_t || ''upon success:'' resulting position (lower 32 bits)
|-
| RES_NBYTES || m9_l5 || size_t || ''upon success:'' total number of bytes read
|}

'''Reply codes'''
{| class="wikitable"
| EIO || I/O error reported by the device driver
|-
| OK || results successfully (partially) read, or EOF reached
|}


'''Description'''

* This request reads from a block device directly, as a result of an application reading from a block-special file. File servers will receive such requests for the block device that they are mounted on. This allows them to keep these transfers in sync with their internal cache.

'''Notes'''

* Requests partially beyond the end of the device may be truncated. Requests fully beyond the end of the device should be treated like EOF (i.e. zero bytes are read).
* The file server providing the root file system will also receive these requests for all block devices that have not been mounted.

----

==== REQ_BWRITE ====
Write to a block device directly.

'''Request fields'''
{| class="wikitable"
| REQ_DEV2 || m9_l1 || dev_t || device number
|-
| REQ_GRANT || m9_l2 || cp_grant_id_t || memory grant (READ) containing the data to write
|-
| REQ_SEEK_POS_HI || m9_l3 || u32_t || write position (upper 32 bits)
|-
| REQ_SEEK_POS_LO || m9_l4 || u32_t || write position (lower 32 bits)
|-
| REQ_NBYTES || m9_l5 || size_t || number of bytes to write
|}

'''Reply fields'''
{| class="wikitable"
| RES_SEEK_POS_HI || m9_l3 || u32_t || ''upon success:'' resulting position (upper 32 bits)
|-
| RES_SEEK_POS_LO || m9_l4 || u32_t || ''upon success:'' resulting position (lower 32 bits)
|-
| RES_NBYTES || m9_l5 || size_t || ''upon success:'' total number of bytes written
|}

'''Reply codes'''
{| class="wikitable"
| EIO || I/O error reported by the device driver
|-
| OK || results successfully (partially) written, or EOF reached
|}

'''Description'''

* This request writes from a block device directly, as a result of an application writing to a block-special file. File servers will receive such requests for the block device that they are mounted on. This allows them to keep these transfers in sync with their internal cache. The semantics of writing to a mounted block device are undefined; it is up to the file server to determine how to deal with such requests.

'''Notes'''

* Requests partially beyond the end of the device may be truncated. Requests fully beyond the end of the device should be treated like EOF (i.e. zero bytes are written).
* The file server providing the root file system will also receive these requests for all block devices that have not been mounted.
* While this is a write request, it will also be sent to read-only file systems. This is by design.

----

==== REQ_BPEEK ====
Request filesystem to retrieve the requested block data.

'''Request fields'''
{| class="wikitable"
| REQ_DEV2 || m9_l1 || dev_t || device number
|-
| REQ_SEEK_POS_HI || m9_l3 || u32_t || seek position into the block device (upper 32 bits)
|-
| REQ_SEEK_POS_LO || m9_l4 || u32_t || seek position into the block device (lower 32 bits)
|-
| REQ_NBYTES || m9_l5 || size_t || number of bytes to read
|}

'''Reply fields'''

* ''none''

'''Reply codes'''
{| class="wikitable"
| OK || peek done. all requested blocks have been in the cache.
|-
| ENOSYS || filesystem does not implement REQ_BPEEK and mmap() call of files opened on this FS should fail
|}

'''Description'''

* This call operates just like &lt;code&gt;[[#REQ_PEEK|REQ_PEEK]]&lt;/code&gt;, but the request (offset and size) are about the block device instead of any particular inode.

'''Notes'''

* For filesystems using libminixfs, lmfs_do_bpeek() can implement this request for filesystems if desired.

----

== Additional information ==
=== Implementing the lookup request ===
The following pseudocode presents one possible approach to implementing the heart of the &lt;code&gt;[[#REQ_LOOKUP|REQ_LOOKUP]]&lt;/code&gt; request:

* retrieve the path to resolve [&lt;code&gt;ENAMETOOLONG&lt;/code&gt;]
* take the given start inode as current inode
* while the remaining part of the path is not empty,
** skip over zero or more '/' characters in the path
** if remaining path is empty, use "." as component
** else, get the next '/'-delimited component [&lt;code&gt;ENAMETOOLONG&lt;/code&gt;]
** if the current inode is a mountpoint,
*** if the component is not "..": [&lt;code&gt;EINVAL&lt;/code&gt;]
** else,
*** if the current inode is not a directory: [&lt;code&gt;ENOTDIR&lt;/code&gt;]
*** if the caller has no search access permissions on the current inode: [&lt;code&gt;EACCES&lt;/code&gt;]
** if the component is ".", or the component is ".." and the current directory is the given root inode,
*** continue
** else, if the component is "..",
*** if the current inode is the file system root directory: [&lt;code&gt;ELEAVEMOUNT&lt;/code&gt;]
*** set the current inode to the parent inode of the current inode
*** if the now current inode is a mountpoint: [&lt;code&gt;EENTERMOUNT&lt;/code&gt;]
** else, if the component identifies a symlink, and either the component is not the last in the path or &lt;code&gt;PATH_RET_SYMLINK&lt;/code&gt; is not set,
*** if the number of symlink resolutions increased by one exceeds &lt;code&gt;SYMLOOP_MAX&lt;/code&gt;: [&lt;code&gt;ELOOP&lt;/code&gt;]
*** set the new path to the contents of the symlink plus the remaining part of the current path [&lt;code&gt;ENAMETOOLONG&lt;/code&gt;]
*** if the now current path starts with a '/': [&lt;code&gt;ESYMLINK&lt;/code&gt;]
** else,
*** set the current inode to the inode identified by the component [&lt;code&gt;ENOENT&lt;/code&gt;]
*** if the now current inode is a mountpoint: [&lt;code&gt;EENTERMOUNT&lt;/code&gt;]
** open the resulting inode [OK]

For file servers that do not support symbolic links and/or mountpoints, the lookup can be simplified accordingly.

If at least one symlink was resolved, and the returned error is &lt;code&gt;EENTERMOUNT&lt;/code&gt;, &lt;code&gt;ELEAVEMOUNT&lt;/code&gt; or &lt;code&gt;ESYMLINK&lt;/code&gt;, then the unresolved part of the new path must be copied back to VFS.

Regardless,

* In the case of &lt;code&gt;ELEAVEMOUNT&lt;/code&gt;, the returned offset must point to the start of the ".." component used in that loop iteration.
* In the case of &lt;code&gt;EENTERMOUNT&lt;/code&gt;, the returned offset must point to the first character after the component that resolved to a mountpoint.
* In the case of &lt;code&gt;ESYMLINK&lt;/code&gt;, the returned offset is typically zero.

== References ==

This document is ''not'' based on the original VFS-FS protocol documentation by Balazs Gerofi. However, that document may still provide additional insights.

&lt;code&gt;[//www.minix3.org/doc/gerofi_thesis.pdf Design and implementation of the MINIX Virtual File system] by Balazs Gerofi, August, 2006&lt;/code&gt;</text>
      <sha1>388209cfpguubnm0mp25x5ovinxkh9z</sha1>
    </revision>
  </page>
  <page>
    <title>Porting NetBSD Userland</title>
    <ns>0</ns>
    <id>127</id>
    <revision>
      <id>394</id>
      <parentid>393</parentid>
      <timestamp>2022-02-07T14:30:24Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix contributors links</comment>
      <origin>394</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="107334" sha1="8cxo34jq21q0jmy3tzaq5gpagu4kk5d" xml:space="preserve">== Introduction ==
Porting of NetBSD userland to MINIX 3 started with libc, and since then many libraries and utilities have been added to the system. The goal is to remove the utilities in /usr/src/commands and replace them with NetBSD's, and port additional utilities at the same time. Similarly, libraries from NetBSD will replace the MINIX libraries in /usr/src/lib and additional libraries from NetBSD will be added. This page is intended to organize and coordinate the porting effort involved in bringing NetBSD userland utilities and libraries in MINIX 3.

For starters, read [[Porting Guide]], [[Programming in MINIX 3]] and [[Using NetBSD Code]].  Those who are new to MINIX may also want to read the [[Porting NetBSD Step by Step|Step by Step porting Guide for NetBSD userland]] page which contains a step-by-step guide for importing and cross-compiling NetBSD userland utilities.

== Important Points ==
* Always remain updated to the master branch in minix repository. Refer to [[Tracking Current]].
* If you want to start porting, first build the system with the latest source.
* After porting an utility, always run the test suites in test/ to check nothing is broken.
* You can debug using gdb. It is available as a package aptly named gdb.

== Porting Procedure and Pointers ==
There are a few things to keep a keep eye out for. General outline of procedure:

* Use a git clone of current master to base your work on. See [[Tracking Current]] for details on how to do this.
* Clone the current NetBSD reference version source repo, outside the minix source tree, like so:
&lt;pre&gt;
% git clone git://git.minix3.org/netbsd
&lt;/pre&gt;
* Copy the original over from the netbsd location to its new location in bin/ or usr.bin/, and add the subdir to the Makefile.
* Add the subtree to &lt;code&gt;releasetools/nbsd_ports&lt;/code&gt; with the date that you can tell from the netbsd git repo commit log.
* Remove any CVS directories; we don't import those into our git repository.
* Get it working in an as clean a way as possible, i.e. with minimal edits and hacks. If the import can be cleaner by adding a dependency elsewhere (e.g. importing a library), that is preferable to hacking the imported code.
* However: if you decide to do this, import the dependencies *first*, in an earlier commit, using this procedure (it's recursive!), then return to this util.
* If you are replacing an existing command, check the command's Makefile to ensure it doesn't implement any other commands. Minix's &lt;code&gt;commands/env&lt;/code&gt; for example provided &lt;code&gt;env&lt;/code&gt; and &lt;code&gt;printenv&lt;/code&gt; which are two different NetBSD commands (&lt;code&gt;usr.bin/env&lt;/code&gt; and &lt;code&gt;usr.bin/printenv&lt;/code&gt;).
* Remove commands/oldutil AND corresponding manual page entries in man/ if any.
* Satisfy yourself that the new utility works. Make sure there are no old copies of the utility lying around that are getting invoked while testing. Find invocations of the utility in the base system (hottest zone is /etc/rc and /usr/etc/rc, second-hottest is &lt;code&gt;releasetools/release.sh&lt;/code&gt;, third-hottest is &lt;code&gt;command/setup/setup.sh&lt;/code&gt;, but they can be anywhere) and make sure the invocation won't break. At minimum do a &lt;code&gt;make clean build&lt;/code&gt; and preferably also a &lt;code&gt;cd releasetools &amp;&amp; sh release.sh -c&lt;/code&gt;, then install from the created ISO, to see if world building and new release bootstrapping still works.
* Add all the new binaries and manual pages of your util to the &lt;code&gt;distrib/sets/lists/minix/m*&lt;/code&gt; file(s), and mark the removed ones as ''&lt;code&gt;obsolete&lt;/code&gt;''.
* You may find that the location of the utility changes (from /bin to /usr/bin or vice versa). Sometimes this is a problem, sometimes not. If it is, the best thing to do is keep the new location and fix the problems caused by it. Second-best solution is add a symlink. Do not forget to add a comment to &lt;code&gt;docs/UPDATING&lt;/code&gt; if there are caveats.
* Such invocations can also be in pkgsrc. Your import should not break pkgsrc. Clone the pkgsrc repository and look in mk/ to see if your utility is mentioned there (possibly by an absolute path). The most likely places are [//git.minix3.org/?p=pkgsrc.git;a=blob;f=mk/tools/tools.Minix.mk;hb=HEAD tools.Minix.mk] and [//git.minix3.org/?p=pkgsrc.git;a=blob;f=mk/platform/Minix.mk;hb=HEAD Minix.mk]. Patch those files as needed. pkgsrc is highly configurable and well suited to the locations of NetBSD userland utilities; no symlinking should be required.

Congratulations, you have improved the world! Submit your commit for merging with master.

== Porting Status ==
=== NetBSD userland in master ===
This section lists the libraries and utilities which have been already integrated into the master branch of MINIX repository.

'''Important''': some entries have a comment indicating why that entry can not (yet) be ported. While those comments were definitely true at the time they were written, some of them may now be outdated due to improvements made to MINIX 3 since then. Therefore, sometimes it makes sense to take another look at such entries anyway.
=== NetBSD libraries ===
More often than not, there are ripple effects in case of porting foreign libraries. So, their complete port is spread across many commits. In the following table, only the initial commit is listed. Also, there are always such functions present in these libraries, porting of whose have been disabled due to missing system calls. So, you can start by porting those functions too by implementing the corresponding system call. In case of libc, refer to [//git.minix3.org/?p=minix.git;a=blob;f=minix/lib/libc/sys/MISSING_SYSCALLS;hb=HEAD minix/lib/libc/sys/MISSING_SYSCALLS] for the complete list.

==== lib ====

{| class="wikitable sortable"
! Library         !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| csu             || [[Contributors:Ben Gras|Ben Gras]] || committed || || e83f7ba2c93894ce4409c1a9136af3d6d8ad48cf || [[gitcommit:e83f7ba2c93894ce4409c1a9136af3d6d8ad48cf|click]]
|-
| i18n_module     || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 36dcc4a4a93f782ada76dce3d52fbeab0e063cf1 || [[gitcommit:36dcc4a4a93f782ada76dce3d52fbeab0e063cf1|click]]
|-
| libarch         ||                ||        ||              ||         ||
|-
| libbluetooth    ||                ||        ||              ||         ||
|-
| libbpfjit       ||                ||        ||              ||         ||
|-
| libbsdmalloc    ||                ||        ||              ||         ||
|-
| libbz2          || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 4a711bea63dc53acce03198b5fbfaa103fe328d6 || [[gitcommit:4a711bea63dc53acce03198b5fbfaa103fe328d6|click]]
|-
| libc            || Gianluca Guida || committed || || ad4dda469f3fa4909f4993cd07dcb05618139c91 || [[gitcommit:ad4dda469f3fa4909f4993cd07dcb05618139c91|click]]
|-
| libc_vfp        || [[Contributors:Lionel Sambuc|Lionel Sambuc]]  || committed ||  || 84d9c625bfea59e274550651111ae9edfdc40fbd || [[gitcommit:84d9c625bfea59e274550651111ae9edfdc40fbd|click]]
|-
| libcompat       ||                ||        ||              ||         ||
|-
| libcrypt        || [[Contributors:Ben Gras|Ben Gras]] || committed || || ebffaa42502931792cfc7964b581853350489880 || [[gitcommit:ebffaa42502931792cfc7964b581853350489880|click]]
|-
| libcurses       || [[Contributors:Ben Gras|Ben Gras]] || committed || || 51ffecc181005cb45a40108612ee28d1daaeeb86 || [[gitcommit:51ffecc181005cb45a40108612ee28d1daaeeb86|click]]
|-
| libdm           ||                ||        ||              ||         ||
|-
| libedit         || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 3e1db26a5a6252fcff0898d4cb0c3fa16ccf561d || [[gitcommit:3e1db26a5a6252fcff0898d4cb0c3fa16ccf561d|click]]
|-
| libexecinfo     || [[Contributors:Lionel Sambuc|Lionel Sambuc]]  || committed ||  || 84d9c625bfea59e274550651111ae9edfdc40fbd || [[gitcommit:84d9c625bfea59e274550651111ae9edfdc40fbd|click]]
|-
| libform         || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || a0e6850f820f09a03a1da1b4d78f9fafb3b9782f || [[gitcommit:a0e6850f820f09a03a1da1b4d78f9fafb3b9782f|click]]
|-
| libhdb          ||                ||        ||              ||         ||
|-
| libintl         || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 36dcc4a4a93f782ada76dce3d52fbeab0e063cf1 || [[gitcommit:36dcc4a4a93f782ada76dce3d52fbeab0e063cf1|click]]
|-
| libipsec        ||                ||        ||              ||         ||
|-
| libisns         ||                ||        ||              ||         ||
|-
| libkern         ||                ||        ||              ||         ||
|-
| libkvm          || David van Moolenbroek || committed || || 9da227510d14c35cccbd92c6a9e316b4079c4911 || [[gitcommit:9da227510d14c35cccbd92c6a9e316b4079c4911|click]]
|-
| liblwres        ||                ||        ||              ||         ||
|-
| libm            || Gianluca Guida || committed || || 0dc9e0996aa0210b04fff9fa908b2d7ec579417c || [[gitcommit:0dc9e0996aa0210b04fff9fa908b2d7ec579417c|click]]
|-
| libmenu         || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || b618a1ee0b63a120cb1d99249a82c6843ff3e4f4 || [[gitcommit:b618a1ee0b63a120cb1d99249a82c6843ff3e4f4|click]]
|-
| libnpf          ||                ||        ||              ||         ||
|-
| libossaudio     ||                ||        ||              ||         ||
|-
| libp2k          ||                ||        ||              ||         ||
|-
| libpam          ||                ||        ||              ||         ||
|-
| libpci          || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 7eb99bda90fc3b15ed07bfd8809650d0818ad5f7 || [[gitcommit:7eb99bda90fc3b15ed07bfd8809650d0818ad5f7|click]]
|-
| libperfuse      ||                ||        ||              ||         ||
|-
| libpmc          ||                ||        ||              ||         ||
|-
| libposix        ||                ||        ||              ||         ||
|-
| libppath        ||                ||        ||              ||         ||
|-
| libprop         || [[Contributors:Ben Gras|Ben Gras]] || committed || || 6b6d114a21a24bee45291fa4af8899e108396c4a || [[gitcommit:6b6d114a21a24bee45291fa4af8899e108396c4a|click]]
|-
| libpthread      ||                ||        ||              ||         ||
|-
| libpthread_dbg  ||                ||        ||              ||         ||
|-
| libpuffs        || Evgeniy Ivanov || committed || || 490e0de5481bce02ba3d268b472a024f76d2416b || [[gitcommit:490e0de5481bce02ba3d268b472a024f76d2416b|click]]
|-
| libquota        ||                ||        ||              ||         ||
|-
| libradius       ||                ||        ||              ||         ||
|-
| librefuse       || Evgeniy Ivanov || committed || || 490e0de5481bce02ba3d268b472a024f76d2416b || [[gitcommit:490e0de5481bce02ba3d268b472a024f76d2416b|click]]
|-
| libresolv       ||                ||        ||              ||         ||
|-
| librmt          || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 85fee539f46ba8fb5b2f4cc95f1771ea1c379f15 || [[gitcommit:85fee539f46ba8fb5b2f4cc95f1771ea1c379f15|click]]
|-
| librpcsvc       ||                ||        ||              ||         ||
|-
| librt           ||                ||        ||              ||         ||
|-
| librump         ||                ||        ||              ||         ||
|-
| librumpclient   ||                ||        ||              ||         ||
|-
| librumpdev      ||                ||        ||              ||         ||
|-
| librumphijack   ||                ||        ||              ||         ||
|-
| librumpnet      ||                ||        ||              ||         ||
|-
| librumpuser     ||                ||        ||              ||         ||
|-
| librumpvfs      ||                ||        ||              ||         ||
|-
| libskey         ||                ||        ||              ||         ||
|-
| libss           ||                ||        ||              ||         ||
|-
| libtelnet       || David van Moolenbroek || committed || || 7348b5c52b47a1c199a1754a40bbfa360b536de2 || [[gitcommit:7348b5c52b47a1c199a1754a40bbfa360b536de2|click]]
|-
| libterminfo     || [[Contributors:Vivek Prakash|Vivek Prakash]] || committed || || 51e66a47d88f32e577d34ec883630a1acb2fb223 || [[gitcommit:51e66a47d88f32e577d34ec883630a1acb2fb223|click]]
|-
| libukfs         ||                ||        ||              ||         ||
|-
| libusbhid       ||                ||        ||              ||         ||
|-
| libutil         || [[Contributors:Ben Gras|Ben Gras]] || committed || || 0c3983b25a88161cf074524e5c94585a2582ae82 || [[gitcommit:0c3983b25a88161cf074524e5c94585a2582ae82|click]]
|-
| libwrap         || David van Moolenbroek || committed || || f1fab66e7dda396e0a899dafaddb9c3ac4edfcfe || [[gitcommit:f1fab66e7dda396e0a899dafaddb9c3ac4edfcfe|click]]
|-
| liby            ||                ||        ||              ||         ||
|-
| libz            || [[Contributors:Ben Gras|Ben Gras]] || committed || || ae947059e6831754dea92c555fbe5f2ccb2a3e72 || [[gitcommit:ae947059e6831754dea92c555fbe5f2ccb2a3e72|click]]
|-
| lua             || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| npf             ||                ||        ||              ||         ||
|}

==== sys/lib ====
{| class="wikitable sortable"
! Library         !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| i386/stand/lib  || Evgeniy Ivanov || committed ||           || 58a2b0008e28f606a7f7f5faaeaba4faac57a1ea || [[gitcommit:58a2b0008e28f606a7f7f5faaeaba4faac57a1ea|click]]
|-
| libgnuefi       ||                ||           ||           ||         ||
|-
| libkern         ||                ||           ||           || some files are already there ||
|-
| libsa           || Evgeniy Ivanov || committed ||           || 58a2b0008e28f606a7f7f5faaeaba4faac57a1ea || [[gitcommit:58a2b0008e28f606a7f7f5faaeaba4faac57a1ea|click]]
|-
| libunwind       || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 472758f313bea9d25f2bf25a77fd07feeaa76cfc || [[gitcommit:472758f313bea9d25f2bf25a77fd07feeaa76cfc|click]]
|-
| libx86emu       ||                ||           ||           ||         ||
|-
| libz            || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 435f2b00953e839de867b4071e42e2a38e0b3f9a || [[gitcommit:435f2b00953e839de867b4071e42e2a38e0b3f9a|click]]
|}
=== NetBSD utilities ===

==== bin/ ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/bin/ bin/]

{| class="wikitable sortable"
! Utility        !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| bin/cat        || Andy Kosela || committed || || 24f1e188462ac3fa6bd5e8b8c0b79e0db7334fe6 || [[gitcommit:24f1e188462ac3fa6bd5e8b8c0b79e0db7334fe6|click]]
|-
| bin/chio       ||                ||        ||              ||         ||
|-
| bin/chmod      || Morgawr || committed || || b6bd719869ac1c878f1ff6bbb6b6a999c6e6cc71 || [[gitcommit:b6bd719869ac1c878f1ff6bbb6b6a999c6e6cc71|click]]
|-
| bin/cp         || Zachary Storer || committed || || 5da400ecaab1bd36c0df323a29551873e839afbd || [[gitcommit:5da400ecaab1bd36c0df323a29551873e839afbd|click]]
|-
| bin/csh        || David van Moolenbroek || committed || || d1e4d7ce7de96b58a7e34cb41f3fd9aa036d9692 || [[gitcommit:d1e4d7ce7de96b58a7e34cb41f3fd9aa036d9692|click]]
|-
| bin/date       || [[Contributors:Ben Gras|Ben Gras]] || committed || || 2fe8fb192fe7e8720e3e7a77f928da545e872a6a || [[gitcommit:2fe8fb192fe7e8720e3e7a77f928da545e872a6a|click]]
|-
| bin/dd         || Jacob Adams || committed ||  || c19d619d42588dfcfbd5c23c7290d975d0294e65 || [[gitcommit:c19d619d42588dfcfbd5c23c7290d975d0294e65|click]]
|-
| bin/df         || David van Moolenbroek || committed || || ac65742ae487f041518782da6b5610839642924d || [[gitcommit:ac65742ae487f041518782da6b5610839642924d|click]]
|-
| bin/domainname || Kaustubh Kelkar || committed || || 989398b4476c53703138eedf6b7ac07cbab28f55 || [[gitcommit:989398b4476c53703138eedf6b7ac07cbab28f55|click]]
|-
| bin/echo       || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 059578953d9c9d4a47e39f3432277155e8659bd0 || [[gitcommit:059578953d9c9d4a47e39f3432277155e8659bd0|click]]
|-
| bin/ed         || Andy Kosela || committed || || 7e81b07cc531920c9b93fa140b0379cb0d20a709 || [[gitcommit:7e81b07cc531920c9b93fa140b0379cb0d20a709|click]]
|-
| bin/expr       || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 5debab0eb06c60ef2c2080330d4adea24b17565d || [[gitcommit:5debab0eb06c60ef2c2080330d4adea24b17565d|click]]
|-
| bin/hostname   || Morgawr || committed ||  || 91c835edc2378e18e5fb7f289cf36bb6e3870c93 || [[gitcommit:91c835edc2378e18e5fb7f289cf36bb6e3870c93|click]]
|-
| bin/kill       || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 7104bb23a94481b4b80bbd3e3a96e04282159826 || [[gitcommit:7104bb23a94481b4b80bbd3e3a96e04282159826|click]]
|-
| bin/ksh        || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 2718b5688b1550d32bf379153192626eee37752d || [[gitcommit:2718b5688b1550d32bf379153192626eee37752d|click]]
|-
| bin/ln         || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || c31c70743a3c6ee862ff5dd2a42c11312295e202 || [[gitcommit:c31c70743a3c6ee862ff5dd2a42c11312295e202|click]]
|-
| bin/ls         || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || b7ef8cfb526b29a8298718baea6f7a71e155ac1d || [[gitcommit:b7ef8cfb526b29a8298718baea6f7a71e155ac1d|click]]
|-
| bin/mt         ||                ||        ||              ||         ||
|-
| bin/mkdir      || [[Contributors:Vivek Prakash|Vivek Prakash]] || committed || || 12d9a08f0dc451b6376fae05cacc292c8ced8743 || [[gitcommit:12d9a08f0dc451b6376fae05cacc292c8ced8743|click]]
|-
| bin/mv         || Zachary Storer || committed || || a8492e939715459191907e99be36ed3986764f50 || [[gitcommit:a8492e939715459191907e99be36ed3986764f50|click]]
|-
| bin/pax        || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 85fee539f46ba8fb5b2f4cc95f1771ea1c379f15 || [[gitcommit:85fee539f46ba8fb5b2f4cc95f1771ea1c379f15|click]]
|-
| bin/ps         || David van Moolenbroek || committed || || 97189037b1c31a92749a06453951cb811bee1eb0 || [[gitcommit:97189037b1c31a92749a06453951cb811bee1eb0|click]]
|-
| bin/pwd        || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 06f3970b9e9822135ff0cedc3a4fd606bff479cc || [[gitcommit:06f3970b9e9822135ff0cedc3a4fd606bff479cc|click]]
|-
| bin/rcmd       || David van Moolenbroek || committed || || 93d36fc9d8fb766b78367bb140abfb114ba8c0b5 || [[gitcommit:93d36fc9d8fb766b78367bb140abfb114ba8c0b5|click]]
|-
| bin/rcp        || David van Moolenbroek || committed || || 93d36fc9d8fb766b78367bb140abfb114ba8c0b5 || [[gitcommit:93d36fc9d8fb766b78367bb140abfb114ba8c0b5|click]]
|-
| bin/rm         || Thomas Veerman || committed || || e257c999b878432af1498c80a663867528922bc4 || [[gitcommit:e257c999b878432af1498c80a663867528922bc4|click]]
|-
| bin/rmdir      || Thomas Veerman || committed || || e257c999b878432af1498c80a663867528922bc4 || [[gitcommit:e257c999b878432af1498c80a663867528922bc4|click]]
|-
| bin/sh         || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || d90bee97498b3043241050f61aed100786c59df4 || [[gitcommit:d90bee97498b3043241050f61aed100786c59df4|click]]
|-
| bin/sleep      || Zachary Storer || committed || || d1cfa0acd0bb31b88b8e75a98c2bea12ef84a542 || [[gitcommit:d1cfa0acd0bb31b88b8e75a98c2bea12ef84a542|click]]
|-
| bin/stty       || [[Contributors:Ben Gras|Ben Gras]] || committed || || 7120f34ec10bfe43f82e8d1e570939e8c586a3f3 || [[gitcommit:7120f34ec10bfe43f82e8d1e570939e8c586a3f3|click]]
|-
| bin/sync       || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 5f59a986e2d0a637dbec0a473e28b3a3574e63bf || [[gitcommit:5f59a986e2d0a637dbec0a473e28b3a3574e63bf|click]]
|-
| bin/test       || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 3a19ae756f2b6ed7b377fafc1cf7641d497c6899 || [[gitcommit:3a19ae756f2b6ed7b377fafc1cf7641d497c6899|click]]
|}

==== usr.bin/ ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/usr.bin/| usr.bin/]

{| class="wikitable sortable"
! Utility                   !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| usr.bin/apply             ||                ||        ||              || needs src/lib/libc/compat/sigcompat.c ||
|-
| usr.bin/apropos           || [[Contributors:Ben Gras|Ben Gras]] || committed || || 0c3983b25a88161cf074524e5c94585a2582ae82 || [[gitcommit:0c3983b25a88161cf074524e5c94585a2582ae82|click]]
|-
| usr.bin/asa               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 539d1e306a48aa887c085e6c59d8ce0cf9640399 || [[gitcommit:539d1e306a48aa887c085e6c59d8ce0cf9640399|click]]
|-
| usr.bin/at                || stux || in progress ||              ||         ||
|-
| usr.bin/audio             ||                ||        ||              || missing sys/audioio.h ||
|-
| usr.bin/audiocfg          ||                ||        ||              || missing sys/drvctlio.h ||
|-
| usr.bin/awk               ||                ||        ||              ||         ||
|-
| usr.bin/banner            || David Höppner  || committed || || 4de64f892adc21012f6260671d4f163394837867 || [[gitcommit:4de64f892adc21012f6260671d4f163394837867|click]]
|-
| usr.bin/basename          || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 0b8a9e801d87951bf6562d7043594da801f85a64 || [[gitcommit:0b8a9e801d87951bf6562d7043594da801f85a64|click]]
|-
| usr.bin/bdes              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 92f7a4ab20e250d4f41d042b48e0e8a783d13fe9 || [[gitcommit:92f7a4ab20e250d4f41d042b48e0e8a783d13fe9|click]]
|-
| usr.bin/biff              ||                ||        ||              ||         ||
|-
| usr.bin/bthset            ||                ||        ||              || missing sys/audioio.h ||
|-
| usr.bin/btkey             ||                ||        ||              || missing bluetooth.h ||
|-
| usr.bin/btpin             ||                ||        ||              || missing bluetooth.h ||
|-
| usr.bin/bzip2             || [[Contributors:Vivek Prakash| Vivek Prakash]] || committed || || 79bfef9aab180266c1e72df9e310c3a395757fd4 || [[gitcommit:79bfef9aab180266c1e72df9e310c3a395757fd4|click]]
|-
| usr.bin/bzip2recover      || [[Contributors:Vivek Prakash| Vivek Prakash]] || committed || || 79bfef9aab180266c1e72df9e310c3a395757fd4 || [[gitcommit:79bfef9aab180266c1e72df9e310c3a395757fd4|click]]
|-
| usr.bin/cal               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || a99e83a2dc64913b9c73fdffb51d90f2b6a7b3e2 || [[gitcommit:a99e83a2dc64913b9c73fdffb51d90f2b6a7b3e2|click]]
|-
| usr.bin/calendar          || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 37fc2fa18fbfb5fda26f1400931b040e37a78f9a || [[gitcommit:37fc2fa18fbfb5fda26f1400931b040e37a78f9a|click]]
|-
| usr.bin/cap_mkdb          ||                ||        ||              ||         ||
|-
| usr.bin/cdplay            ||                ||        ||              || missing sys/cdio.h ||
|-
| usr.bin/checknr           || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 0c745990d9e6f87621e2c2d849c15464859a9430 || [[gitcommit:0c745990d9e6f87621e2c2d849c15464859a9430|click]]
|-
| usr.bin/chflags           ||                ||        ||              || chflags/lchflags undefined ||
|-
| usr.bin/chpass            || [[Contributors:Ben Gras|Ben Gras]] || committed || || 5c00743626989a611dd2966296c00a8cc4abca6f || [[gitcommit:5c00743626989a611dd2966296c00a8cc4abca6f|click]]
|-
| usr.bin/cksum             || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 280d8c668e345d10165c0bc44fab3c7d7657dd05 || [[gitcommit:280d8c668e345d10165c0bc44fab3c7d7657dd05|click]]
|-
| usr.bin/cmp               || David van Moolenbroek || committed || || e7ca52fbf9467cf529d9418733479b3ad4e41b58 || [[gitcommit:e7ca52fbf9467cf529d9418733479b3ad4e41b58|click]]
|-
| usr.bin/col               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 7b9673cd55ccac740282c6eae9144710f078baf3 || [[gitcommit:7b9673cd55ccac740282c6eae9144710f078baf3|click]]
|-
| usr.bin/colcrt            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 2f7c930a6bab84b5fa28431882dce69500d87690 || [[gitcommit:2f7c930a6bab84b5fa28431882dce69500d87690|click]]
|-
| usr.bin/colrm             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 4483d188f911a3939a77bb3dde5460c2440920d8 || [[gitcommit:4483d188f911a3939a77bb3dde5460c2440920d8|click]]
|-
| usr.bin/column            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 2cb302057cbf87e6c69e378aa99cacd675cc2a1b || [[gitcommit:2cb302057cbf87e6c69e378aa99cacd675cc2a1b|click]]
|-
| usr.bin/comm              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || f55b7dc853ecf694135d9f6302d7eb1653198c80 || [[gitcommit:f55b7dc853ecf694135d9f6302d7eb1653198c80|click]]
|-
| usr.bin/compile_et        ||                ||        ||              ||         ||
|-
| usr.bin/compress          ||                ||        ||              || Compils but stdout option fails ||
|-
| usr.bin/config            ||                ||        ||              || VECTOR redefined ||
|-
| usr.bin/crunch            ||                ||        ||              || missing sys/exec_aout.h ||
|-
| usr.bin/csplit            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || a15f368b9d0737894be31b0a1337d443a112b81b || [[gitcommit:a15f368b9d0737894be31b0a1337d443a112b81b|click]]
|-
| usr.bin/ctags             || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 3e1db26a5a6252fcff0898d4cb0c3fa16ccf561d || [[gitcommit:3e1db26a5a6252fcff0898d4cb0c3fa16ccf561d|click]]
|-
| usr.bin/cut               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 40b23ce476b0e85e5ffcf4697b70823258d11d2c || [[gitcommit:40b23ce476b0e85e5ffcf4697b70823258d11d2c|click]]
|-
| usr.bin/db                || || || || O_SHLOCK not defined ||
|-
| usr.bin/deroff            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 288e6864c89d0f87eef777145933852eafdaf997 || [[gitcommit:288e6864c89d0f87eef777145933852eafdaf997|click]]
|-
| usr.bin/dirname           || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 211b53e4422a4a8632447bd3c3027260dddedbc9 || [[gitcommit:211b53e4422a4a8632447bd3c3027260dddedbc9|click]]
|-
| usr.bin/du                || David van Moolenbroek || committed || || 4aaa5377b32f40e614c177a3d061ada5b35cee82 || [[gitcommit:4aaa5377b32f40e614c177a3d061ada5b35cee82|click]]
|-
| usr.bin/eject             ||                ||        ||              || missing sys/cdio.h ||
|-
| usr.bin/elf2aout          ||                ||        ||              || not for i386/arm ||
|-
| usr.bin/elf2ecoff         ||                ||        ||              || not for i386/arm ||
|-
| usr.bin/env               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || ba6640c5fd858565b70f7aa32d7ba38f6acdbeeb || [[gitcommit:ba6640c5fd858565b70f7aa32d7ba38f6acdbeeb|click]]
|-
| usr.bin/error             ||                ||        ||              || compiles without changes, but it doesn't handle launching nvi properly (pressing ESC causes a segfault). ||
|-
| usr.bin/expand            || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 563dd2c8f457d86bc480c9174410214b1318927c || [[gitcommit:563dd2c8f457d86bc480c9174410214b1318927c|click]]
|-
| usr.bin/extattr           ||                ||        ||              || missing extattr_* functions ||
|-
| usr.bin/false             || Zachary Storer || committed || || 1d48ef9844c3f999487ba4041c124045676ed4c2 || [[gitcommit:1d48ef9844c3f999487ba4041c124045676ed4c2|click]]
|-
| usr.bin/fdformat          || || || || missing sys/fdio.h ||
|-
| usr.bin/fgen              ||                ||        ||              ||         ||
|-
| usr.bin/find              || David van Moolenbroek || committed || || 319e7a6d071ca2b4d307b084f9cb29f0d56e2e04 || [[gitcommit:319e7a6d071ca2b4d307b084f9cb29f0d56e2e04|click]]
|-
| usr.bin/finger            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 406cdd95a6bb64607d1091a36d0958ce7043a81d || [[gitcommit:406cdd95a6bb64607d1091a36d0958ce7043a81d|click]]
|-
| usr.bin/flock             || David van Moolenbroek || committed || || 9488aa4c0452da1852a4f48bfad3c378d2b3e6cf || [[gitcommit:9488aa4c0452da1852a4f48bfad3c378d2b3e6cf|click]]
|-
| usr.bin/fmt               || David van Moolenbroek || committed || || 5ae330e220636de2b9caa5a69c059adc48b46444 || [[gitcommit:5ae330e220636de2b9caa5a69c059adc48b46444|click]]
|-
| usr.bin/fold              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || b5a2a7adea6811a7f107503783c97f0fa53bc5d6 || [[gitcommit:b5a2a7adea6811a7f107503783c97f0fa53bc5d6|click]]
|-
| usr.bin/fpr               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 9742ba2568acfe43f8504607d0d92faf0ed0d7db || [[gitcommit:9742ba2568acfe43f8504607d0d92faf0ed0d7db|click]]
|-
| usr.bin/from              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 1d4c0ebe0f4cf675c560a467218f4d8d7b17be20 || [[gitcommit:1d4c0ebe0f4cf675c560a467218f4d8d7b17be20|click]]
|-
| usr.bin/fsplit            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 97b7aef1ba7b36e79696a64baa75a5478719a7fc || [[gitcommit:97b7aef1ba7b36e79696a64baa75a5478719a7fc|click]]
|-
| usr.bin/fstat             ||                ||        ||              || missing sys/proc.h ||
|-
| usr.bin/ftp               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 04203a83a6848544e5157be39991291ba0c82525 || [[gitcommit:04203a83a6848544e5157be39991291ba0c82525|click]]
|-
| usr.bin/gcore             ||                ||        ||              || missing sys/proc.h ||
|-
| usr.bin/genassym          || [[Contributors:Ben Gras|Ben Gras]] || committed || || 8c4cdbd3c5fbbe85c18a3f9ceb349570fc246d53 || [[gitcommit:8c4cdbd3c5fbbe85c18a3f9ceb349570fc246d53|click]]
|-
| usr.bin/gencat            || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 36dcc4a4a93f782ada76dce3d52fbeab0e063cf1 || [[gitcommit:36dcc4a4a93f782ada76dce3d52fbeab0e063cf1|click]]
|-
| usr.bin/getconf           ||                ||        ||              || Needs _CS_PATH ||
|-
| usr.bin/getent            || David van Moolenbroek || committed || || 14d921278d893ff9c46e8515bb716ff102bade2d || [[gitcommit:14d921278d893ff9c46e8515bb716ff102bade2d|click]]
|-
| usr.bin/getopt            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || fe7b9c06f9cfab098c662a84c29ef3ea82085c56 || [[gitcommit:fe7b9c06f9cfab098c662a84c29ef3ea82085c56|click]]
|-
| usr.bin/gprof             ||                ||        ||              ||         ||
|-
| usr.bin/grep              || [[Contributors:Sky Liu|Sky Liu]] || committed || || ca78167b44150239190dec40afc2339965c705ec, currently too broken, so replaced, until fixed upstream || [[gitcommit:ca78167b44150239190dec40afc2339965c705ec|click]]
|-
| usr.bin/gss               ||                ||        ||              ||         ||
|-
| usr.bin/gzip              || [[Contributors:Ben Gras|Ben Gras]] || committed || || 5a645f22a86f086849945a5dd6acbf59f38c913a || [[gitcommit:5a645f22a86f086849945a5dd6acbf59f38c913a|click]]
|-
| usr.bin/head              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || ab046ee6ea7b9179bf5fd3632f2be4376e45c108 || [[gitcommit:ab046ee6ea7b9179bf5fd3632f2be4376e45c108|click]]
|-
| usr.bin/hesinfo           ||                ||        ||              || missing hesiod_* functions ||
|-
| usr.bin/hexdump           || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 1e33498f8ca6b050f0a32002ca925d1f0c357a7f || [[gitcommit:1e33498f8ca6b050f0a32002ca925d1f0c357a7f|click]]
|-
| usr.bin/hxtool            ||                ||        ||              ||         ||
|-
| usr.bin/iconv             ||                ||        ||              ||         ||
|-
| usr.bin/id                || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 4b9cc932b7efaa73ee38ffe96aaefe8d5cd30735 || [[gitcommit:4b9cc932b7efaa73ee38ffe96aaefe8d5cd30735|click]]
|-
| usr.bin/indent            || [[Contributors:Vivek Prakash| Vivek Prakash]] || committed || || 97c7d358ea5970ca59196ed90e975115245f9e76 || [[gitcommit:97c7d358ea5970ca59196ed90e975115245f9e76|click]]
|-
| usr.bin/infocmp           || [[Contributors:AntoineLeca|Antoine Leca]] || committed || || 5139afee6b39d8999e4535c26a85891dbd6c5a8a || [[gitcommit:5139afee6b39d8999e4535c26a85891dbd6c5a8a|click]]
|-
| usr.bin/innetgr           ||                ||        ||              ||         ||
|-
| usr.bin/ipcrm             || David van Moolenbroek || committed || || 0502421f1bef012dd57007f7e430f331c6bed7a6 || [[gitcommit:0502421f1bef012dd57007f7e430f331c6bed7a6|click]]
|-
| usr.bin/ipcs              || David van Moolenbroek || committed || || 7b09d0426a4cc7fc50177a445527ffe3ebc4cb89 || [[gitcommit:7b09d0426a4cc7fc50177a445527ffe3ebc4cb89|click]]
|-
| usr.bin/join              || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 6e0ed9c90c7c533a606f6e49dabdbbb267d687c9 || [[gitcommit:6e0ed9c90c7c533a606f6e49dabdbbb267d687c9|click]]
|-
| usr.bin/jot               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 075dbe55f35c411d440c66d581a9e79eed791d2f || [[gitcommit:075dbe55f35c411d440c66d581a9e79eed791d2f|click]]
|-
| usr.bin/kdestroy          ||                ||        ||              ||         ||
|-
| usr.bin/kdump             ||                ||        ||              || missing sys/proc.h ||
|-
| usr.bin/kgetcred          ||                ||        ||              ||         ||
|-
| usr.bin/kinit             ||                ||        ||              ||         ||
|-
| usr.bin/klist             ||                ||        ||              ||         ||
|-
| usr.bin/krb5-config       ||                ||        ||              ||         ||
|-
| usr.bin/ktrace            ||                ||        ||              || missing sys/ktrace.h ||
|-
| usr.bin/ktruss            ||                ||        ||              || missing sys/ktrace.h ||
|-
| usr.bin/lam               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 1ac41e3f19b48f94bb524e909227f1b531ccfdf6 || [[gitcommit:1ac41e3f19b48f94bb524e909227f1b531ccfdf6|click]]
|-
| usr.bin/last              || [[Contributors:Ben Gras|Ben Gras]] || committed || || a06e2ab3959428ebf7e32b1cde13e386df9115ab || [[gitcommit:a06e2ab3959428ebf7e32b1cde13e386df9115ab|click]]
|-
| usr.bin/lastcomm          ||                ||        ||              || missing sys/acct.h ||
|-
| usr.bin/ldd               || [[Contributors:Ben Gras|Ben Gras]] || committed || || 4b999f1962a12177a033eaa0986990e1422be3ad || [[gitcommit:4b999f1962a12177a033eaa0986990e1422be3ad|click]]
|-
| usr.bin/leave             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || dbbd766d59288eb8c101a4284f8db33dd20f81b9 || [[gitcommit:dbbd766d59288eb8c101a4284f8db33dd20f81b9|click]]
|-
| usr.bin/locale            || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 36dcc4a4a93f782ada76dce3d52fbeab0e063cf1 || [[gitcommit:36dcc4a4a93f782ada76dce3d52fbeab0e063cf1|click]]
|-
| usr.bin/locate            || || || |Compile but the db updater needs usr.bin/find (Minix find lacks -fstype option). ||
|-
| usr.bin/lock              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || f3c74513ebca15ad1808e701ad999b4a3c4f0dab || [[gitcommit:f3c74513ebca15ad1808e701ad999b4a3c4f0dab|click]]
|-
| usr.bin/logger            || Chris Simons || committed ||  || 03704f431ec452936b854919a0b174b2729820a0 || [[gitcommit:03704f431ec452936b854919a0b174b2729820a0|click]]
|-
| usr.bin/login             || [[Contributors:Ben Gras|Ben Gras]] || committed || || a2d137268034a818ca7dc98e995c78f543b150bd || [[gitcommit:a2d137268034a818ca7dc98e995c78f543b150bd|click]]
|-
| usr.bin/logname           || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || d8b7bfdfe8c8699e68e775b199457d682c695eee || [[gitcommit:d8b7bfdfe8c8699e68e775b199457d682c695eee|click]]
|-
| usr.bin/look              ||                ||        ||              || missing mmap() ||
|-
| usr.bin/lorder            || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || d71cc7b9f698d5e0edd9d57b3d9bd9975670f144 || [[gitcommit:d71cc7b9f698d5e0edd9d57b3d9bd9975670f144|click]]
|-
| usr.bin/m4                || Arun Thomas || committed || || 2e8d1eda1b10b1eefcc41d19325e6baa0615ae5c || [[gitcommit:2e8d1eda1b10b1eefcc41d19325e6baa0615ae5c|click]]
|-
| usr.bin/machine           || [[Contributors:Thomas Cort|Thomas Cort]] || committed  || || b50dbb4d240ad47ad2c5c32a320b1be3f4ced1fc || [[gitcommit:b50dbb4d240ad47ad2c5c32a320b1be3f4ced1fc|click]]
|-
| usr.bin/mail              ||                ||        ||              || Needs WCOREDUMP defined. ||
|-
| usr.bin/make              || Thomas Veerman || committed || || 2e2caf591948f38f31c4e679c6277d2cb999cee7 || [[gitcommit:2e2caf591948f38f31c4e679c6277d2cb999cee7|click]]
|-
| usr.bin/man               || [[Contributors:Ben Gras|Ben Gras]] || committed || || 0c3983b25a88161cf074524e5c94585a2582ae82 || [[gitcommit:0c3983b25a88161cf074524e5c94585a2582ae82|click]]
|-
| usr.bin/mdocml            || [[Contributors:Ben Gras|Ben Gras]] || committed || || 0c3983b25a88161cf074524e5c94585a2582ae82 || [[gitcommit:0c3983b25a88161cf074524e5c94585a2582ae82|click]]
|-
| usr.bin/menuc             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 525a267e81017258ec78fc0d6187a56590d0989d || [[gitcommit:525a267e81017258ec78fc0d6187a56590d0989d|click]]
|-
| usr.bin/mesg              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || b36343fc42f8e1ea4036ffebd97257177e11005c || [[gitcommit:b36343fc42f8e1ea4036ffebd97257177e11005c|click]]
|-
| usr.bin/midiplay          ||                ||        ||              || missing sys/midiio.h ||
|-
| usr.bin/mixerctl          ||                ||        ||              || missing sys/audioio.h ||
|-
| usr.bin/mk_cmds           ||                ||        ||              ||         ||
|-
| usr.bin/mkcsmapper        || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 36dcc4a4a93f782ada76dce3d52fbeab0e063cf1 || [[gitcommit:36dcc4a4a93f782ada76dce3d52fbeab0e063cf1|click]]
|-
| usr.bin/mkdep             || Arun Thomas || committed || || 06617e7fdfd1d9f8948d46de4279aa399750295d || [[gitcommit:06617e7fdfd1d9f8948d46de4279aa399750295d|click]]
|-
| usr.bin/mkesdb            || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 36dcc4a4a93f782ada76dce3d52fbeab0e063cf1 || [[gitcommit:36dcc4a4a93f782ada76dce3d52fbeab0e063cf1|click]]
|-
| usr.bin/mkfifo            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || ef03affb849429015772640e8e579db16b6f3ca5 || [[gitcommit:ef03affb849429015772640e8e579db16b6f3ca5|click]]
|-
| usr.bin/mklocale          || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 36dcc4a4a93f782ada76dce3d52fbeab0e063cf1 || [[gitcommit:36dcc4a4a93f782ada76dce3d52fbeab0e063cf1|click]]
|-
| usr.bin/mkstr             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 69ccf97d12de61cf6b90caf20dd31678bed88faa || [[gitcommit:69ccf97d12de61cf6b90caf20dd31678bed88faa|click]]
|-
| usr.bin/mktemp            || Thomas Veerman || committed || || 0b2db08aecfae9e1a0fda5a40ab1e48b39e0429f || [[gitcommit:0b2db08aecfae9e1a0fda5a40ab1e48b39e0429f|click]]
|-
| usr.bin/mkubootimage      ||                ||        ||              || missing mmap() ||
|-
| usr.bin/moduli            ||                ||        ||              || missing openssl ||
|-
| usr.bin/msgc              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || d44a5ed1c177718aebe860f2bd736ea12fb19804 || [[gitcommit:d44a5ed1c177718aebe860f2bd736ea12fb19804|click]]
|-
| usr.bin/msgs              ||                ||        ||              || dirent/d_name issue. May be fixed in 3.3.0 branch. ||
|-
| usr.bin/nbperf            || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || c75851fccb32314d0f8a8e6a641cc7928622bf76 || [[gitcommit:c75851fccb32314d0f8a8e6a641cc7928622bf76|click]]
|-
| usr.bin/nbsvtool          ||                ||        ||              || openssl needed ||
|-
| usr.bin/netgroup          ||                ||        ||              ||         ||
|-
| usr.bin/netstat           || David van Moolenbroek || committed || || 66dfcc8533c70ea68511edc95c03189c8eb0a7a2 || [[gitcommit:66dfcc8533c70ea68511edc95c03189c8eb0a7a2|click]]
|-
| usr.bin/newgrp            || [[Contributors:Ben Gras|Ben Gras]] || committed || || 5c00743626989a611dd2966296c00a8cc4abca6f || [[gitcommit:5c00743626989a611dd2966296c00a8cc4abca6f|click]]
|-
| usr.bin/newsyslog         ||                ||        ||              ||         ||
|-
| usr.bin/nfsstat           ||                ||        ||              || missing nfs/rpcv2.h ||
|-
| usr.bin/nice              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || d37082b292d65d555c806b77d431b9f26a64fb32 || [[gitcommit:d37082b292d65d555c806b77d431b9f26a64fb32|click]]
|-
| usr.bin/nl                || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 1e69cb63f46730e77da9d78903bc04fd914ae8a8 || [[gitcommit:1e69cb63f46730e77da9d78903bc04fd914ae8a8|click]]
|-
| usr.bin/nohup             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 982405fef1e6f3228ff3835967a3552b79ed941b || [[gitcommit:982405fef1e6f3228ff3835967a3552b79ed941b|click]]
|-
| usr.bin/nvi               || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 3e1db26a5a6252fcff0898d4cb0c3fa16ccf561d || [[gitcommit:3e1db26a5a6252fcff0898d4cb0c3fa16ccf561d|click]]
|-
| usr.bin/pagesize          || David van Moolenbroek || committed || || 9d796422b1a40106c10bd9f66349f826c4883122 || [[gitcommit:9d796422b1a40106c10bd9f66349f826c4883122|click]]
|-
| usr.bin/passwd            || [[Contributors:Ben Gras|Ben Gras]] || committed || || 5c00743626989a611dd2966296c00a8cc4abca6f || [[gitcommit:5c00743626989a611dd2966296c00a8cc4abca6f|click]]
|-
| usr.bin/paste             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || f1f496697e67c8000a9ca4cde7f1a62285b418b2 || [[gitcommit:f1f496697e67c8000a9ca4cde7f1a62285b418b2|click]]
|-
| usr.bin/patch             || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed ||              || 757e83288ac54fa2d663d17e4a302156fdb3650a || [[gitcommit:757e83288ac54fa2d663d17e4a302156fdb3650a|click]]
|-
| usr.bin/pathchk           || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || ed31a90dd5e19f8672a02662a6939925f5f6a5cf || [[gitcommit:ed31a90dd5e19f8672a02662a6939925f5f6a5cf|click]]
|-
| usr.bin/pkill             ||                ||        ||              || needs sys/proc.h ||
|-
| usr.bin/pmap              ||                ||        ||              || needs kvm.h ||
|-
| usr.bin/pmc               ||                ||        ||              || needs machine/sysarch.h ||
|-
| usr.bin/pr                || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 6ea7f916dbb2c8c6d3efdfc36049c8dccbbb70f0 || [[gitcommit:6ea7f916dbb2c8c6d3efdfc36049c8dccbbb70f0|click]]
|-
| usr.bin/printenv          || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 92b8e9ac1af883d48b2716cde4b50338bb113711 || [[gitcommit:92b8e9ac1af883d48b2716cde4b50338bb113711|click]]
|-
| usr.bin/printf            || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 2c96f0541bedd077c13a319ee9900a99311d41c9 || [[gitcommit:2c96f0541bedd077c13a319ee9900a99311d41c9|click]]
|-
| usr.bin/progress          ||                ||        ||              || TIOCGSIZE undefined. ||
|-
| usr.bin/pwhash            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 93ce9b1174ebb2b997856215379447d8f40020d4 || [[gitcommit:93ce9b1174ebb2b997856215379447d8f40020d4|click]]
|-
| usr.bin/qsubst            ||                ||        ||              || missing TCSASOFT ||
|-
| usr.bin/quota             ||                ||        ||              || missing quota.h ||
|-
| usr.bin/radioctl          ||                ||        ||              || missing sys/radioio.h ||
|-
| usr.bin/rdist             ||                ||        ||              ||         ||
|-
| usr.bin/renice            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || a86753f3fde41576bb9fbedb85c274496cb8a38f || [[gitcommit:a86753f3fde41576bb9fbedb85c274496cb8a38f|click]]
|-
| usr.bin/rev               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 79cc8b683fa5cb1e8b1e3f8a3c3b09ff71ce0230 || [[gitcommit:79cc8b683fa5cb1e8b1e3f8a3c3b09ff71ce0230|click]]
|-
| usr.bin/revoke            ||                ||        ||              || missing revoke() ||
|-
| usr.bin/rfcomm_sppd       ||                ||        ||              || missing bluetooth.h ||
|-
| usr.bin/rlogin            ||                ||        ||              || missing urgent data support ||
|-
| usr.bin/rpcgen            ||                ||        ||              || missing rpc/types.h ||
|-
| usr.bin/rpcinfo           ||                ||        ||              || missing rpc/rpc.h ||
|-
| usr.bin/rs                ||                ||        ||              ||         ||
|-
| usr.bin/rsh               || David van Moolenbroek || committed || || 93d36fc9d8fb766b78367bb140abfb114ba8c0b5 || [[gitcommit:93d36fc9d8fb766b78367bb140abfb114ba8c0b5|click]]
|-
| usr.bin/rump_allserver    ||                ||        ||              ||         ||
|-
| usr.bin/rump_dhcpclient   ||                ||        ||              ||         ||
|-
| usr.bin/rump_halt         ||                ||        ||              ||         ||
|-
| usr.bin/rump_server       ||                ||        ||              ||         ||
|-
| usr.bin/rup               ||                ||        ||              || missing rpc/rpc.h ||
|-
| usr.bin/ruptime           ||                ||        ||              ||         ||
|-
| usr.bin/rusers            ||                ||        ||              || missing rpc/rpc.h ||
|-
| usr.bin/rwall             ||                ||        ||              || missing rpc/rpc.h ||
|-
| usr.bin/rwho              ||                ||        ||              ||         ||
|-
| usr.bin/script            ||                ||        ||              ||  ||
|-
| usr.bin/sdiff             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || ce982eb75720d2a0e553066b5b6315c7adf622a6 || [[gitcommit:ce982eb75720d2a0e553066b5b6315c7adf622a6|click]]
|-
| usr.bin/sdpquery          ||                ||        ||              || missing bluetooth.h ||
|-
| usr.bin/sed               || [[Contributors:Ben Gras|Ben Gras]] || committed || || f789fee254bfd8e2872f294ed742b61d548759f1 || [[gitcommit:f789fee254bfd8e2872f294ed742b61d548759f1|click]]
|-
| usr.bin/seq               || [[Contributors:Ben Gras|Ben Gras]] || committed || || bc0a39238ecee5c8a3fb76071ef9f61668673a0d || [[gitcommit:bc0a39238ecee5c8a3fb76071ef9f61668673a0d|click]]
|-
| usr.bin/shar              || [[Contributors:Sky Liu|Sky Liu]] || committed ||| || e91d931d7dcfb0796d32e06157c841f1ac5b3b71 || [[gitcommit:e91d931d7dcfb0796d32e06157c841f1ac5b3b71|click]]
|-
| usr.bin/shlock            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 152a15652d1c22f790d63ffc99951e02f2ea62cb || [[gitcommit:152a15652d1c22f790d63ffc99951e02f2ea62cb|click]]
|-
| usr.bin/shmif_dumpbus     ||                ||        ||              || missing pcap.h ||
|-
| usr.bin/showmount         ||                ||        ||              || missing rpc/rpc.h ||
|-
| usr.bin/shuffle           || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 3d257f8073b880072e0ec184a347196ecfd0afd5 || [[gitcommit:3d257f8073b880072e0ec184a347196ecfd0afd5|click]]
|-
| usr.bin/skey              ||                ||        ||              || missing skey.h ||
|-
| usr.bin/skeyinfo          ||                ||        ||              || missing skey.h ||
|-
| usr.bin/skeyinit          ||                ||        ||              || missing skey.h ||
|-
| usr.bin/sockstat          ||                ||        ||              || sys/socketvar.h ||
|-
| usr.bin/soelim            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 2b4e2a565b9bac500fb105f3dacf00535177d970 || [[gitcommit:2b4e2a565b9bac500fb105f3dacf00535177d970|click]]
|-
| usr.bin/sort              || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 0fbbaa43e914d38ef3af549125d31574117d1ebf || [[gitcommit:0fbbaa43e914d38ef3af549125d31574117d1ebf|click]]
|-
| usr.bin/spell             ||                ||        ||              || missing mmap() ||
|-
| usr.bin/split             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 30eeed2c01ebf515c83ba89332f6b0e64670c011 || [[gitcommit:30eeed2c01ebf515c83ba89332f6b0e64670c011|click]]
|-
| usr.bin/stat              || [[Contributors:Vivek Prakash| Vivek Prakash]] || committed || || 49cab1c73cb9020b90a02d49166d6760e0fa30da || [[gitcommit:49cab1c73cb9020b90a02d49166d6760e0fa30da|click]]
|-
| usr.bin/string2key        ||                ||        ||              ||         ||
|-
| usr.bin/su                || [[Contributors:Ben Gras|Ben Gras]] || committed || || 4de51eedad5c2244aac7f2cacbeeef2a2a8c0591 || [[gitcommit:4de51eedad5c2244aac7f2cacbeeef2a2a8c0591|click]]
|-
| usr.bin/tabs              ||                ||        ||              || missing struct winsize. ||
|-
| usr.bin/tail              || Claudio Martella || committed || || a967d739abf6b9e18d75e99925030c41b4f075ca || [[gitcommit:a967d739abf6b9e18d75e99925030c41b4f075ca|click]]
|-
| usr.bin/talk              ||                ||        ||              || error about sockaddr_in ||
|-
| usr.bin/tcopy             ||                ||        ||              ||         ||
|-
| usr.bin/tee               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 916b8720337ab8bb96db43eb3e7131da276278e9 || [[gitcommit:916b8720337ab8bb96db43eb3e7131da276278e9|click]]
|-
| usr.bin/telnet            || David van Moolenbroek || committed || || 7348b5c52b47a1c199a1754a40bbfa360b536de2 || [[gitcommit:7348b5c52b47a1c199a1754a40bbfa360b536de2|click]]
|-
| usr.bin/tftp              ||                ||        ||              ||         ||
|-
| usr.bin/tic               || [[Contributors:Vivek Prakash| Vivek Prakash]] || committed || || 51e66a47d88f32e577d34ec883630a1acb2fb223 || [[gitcommit:51e66a47d88f32e577d34ec883630a1acb2fb223|click]]
|-
| usr.bin/time              || David van Moolenbroek || committed || || b7f0178aeb1a4f3da1e3a29135e19b19902f0af9 || [[gitcommit:b7f0178aeb1a4f3da1e3a29135e19b19902f0af9|click]]
|-
| usr.bin/tip               ||                ||        ||              || TIOCSBRK undefined ||
|-
| usr.bin/touch             || Zachary Storer || committed || || 71d1d39e6139c025729ba03bca772ab4777e85df || [[gitcommit:71d1d39e6139c025729ba03bca772ab4777e85df|click]]
|-
| usr.bin/tpfmt             ||                ||        ||              || missing dev/tprof/tprof_types.h ||
|-
| usr.bin/tput              || AntoineLeca || committed || || 1999c518b6f6927119ddb048166e4eb49298c8c0 || [[gitcommit:1999c518b6f6927119ddb048166e4eb49298c8c0|click]]
|-
| usr.bin/tr                || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || d5c6c6a51bc6be074cafe4527f7a4e63ee737e01 || [[gitcommit:d5c6c6a51bc6be074cafe4527f7a4e63ee737e01|click]]
|-
| usr.bin/true              || Zachary Storer || committed || || 1d48ef9844c3f999487ba4041c124045676ed4c2 || [[gitcommit:1d48ef9844c3f999487ba4041c124045676ed4c2|click]]
|-
| usr.bin/tset              ||                ||        ||              || missing OXTABS ||
|-
| usr.bin/tsort             || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 8e5df35e84e62bb6fe3ec211e177c205ccdbfe00 || [[gitcommit:8e5df35e84e62bb6fe3ec211e177c205ccdbfe00|click]]
|-
| usr.bin/tty               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || b828b0feb732ef318fcb70b8f54b02747c03962a || [[gitcommit:b828b0feb732ef318fcb70b8f54b02747c03962a|click]]
|-
| usr.bin/ul                || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || a501098bf5c6aa07e28212d21c5d9ff8546caef5 || [[gitcommit:a501098bf5c6aa07e28212d21c5d9ff8546caef5|click]]
|-
| usr.bin/uname             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || c0c51139899f26f3f0a0e41af8a3179ca3cee1e1 || [[gitcommit:c0c51139899f26f3f0a0e41af8a3179ca3cee1e1|click]]
|-
| usr.bin/unexpand          || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 3dab66925c6b0cd3628a3acbddb9007aaf157f95 || [[gitcommit:3dab66925c6b0cd3628a3acbddb9007aaf157f95|click]]
|-
| usr.bin/unifdef           || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || b6f0c436268cdf3df867d9382f2423f5a36f7a4d || [[gitcommit:b6f0c436268cdf3df867d9382f2423f5a36f7a4d|click]]
|-
| usr.bin/uniq              || [[Contributors:Vivek Prakash| Vivek Prakash]] || committed || || 1ea07af9da7f7a389b7bb35ca70b21a08e40a09d || [[gitcommit:1ea07af9da7f7a389b7bb35ca70b21a08e40a09d|click]]
|-
| usr.bin/units             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 2106ea475434867841bd59a7e1f73caf690c3dfa || [[gitcommit:2106ea475434867841bd59a7e1f73caf690c3dfa|click]]
|-
| usr.bin/unvis             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 4e1bec4a1a6523e9f445eab6492d334814f59f13 || [[gitcommit:4e1bec4a1a6523e9f445eab6492d334814f59f13|click]]
|-
| usr.bin/unzip             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 40b23ce476b0e85e5ffcf4697b70823258d11d2c || [[gitcommit:40b23ce476b0e85e5ffcf4697b70823258d11d2c|click]]
|-
| usr.bin/usbhidaction      ||                ||        ||              || dev/usb/usb.h ||
|-
| usr.bin/usbhidctl         ||                ||        ||              || dev/usb/usb.h ||
|-
| usr.bin/users             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 401bad1a4d9d421799f9da0acc2f33adb2168c4c || [[gitcommit:401bad1a4d9d421799f9da0acc2f33adb2168c4c|click]]
|-
| usr.bin/utoppya           ||                ||        ||              || missing dev/usb/utoppy.h ||
|-
| usr.bin/uudecode          || [[Contributors:Sky Liu|Sky Liu]] || committed || || 2fde3a4846bf5ff2e91c001c8718329d949fe938  || [[gitcommit:2fde3a4846bf5ff2e91c001c8718329d949fe938|click]]
|-
| usr.bin/uuencode          || [[Contributors:Sky Liu|Sky Liu]] || committed || || 2fde3a4846bf5ff2e91c001c8718329d949fe938  || [[gitcommit:2fde3a4846bf5ff2e91c001c8718329d949fe938|click]]
|-
| usr.bin/uuidgen           || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || f0f2dcddaad97ce8ad0963ec327ad0fb2285e2bd || [[gitcommit:f0f2dcddaad97ce8ad0963ec327ad0fb2285e2bd|click]]
|-
| usr.bin/vacation          ||                ||        ||              || Compiles but commands/mail doesn't seem to honour ~/.forward files, so it depends on usr.bin/mail ||
|-
| usr.bin/verify_krb5_conf  ||                ||        ||              ||         ||
|-
| usr.bin/vgrind            ||                ||        ||              || needs mkstemp, cap_mkdb ||
|-
| usr.bin/videoctl          ||                ||        ||              || needs sys/videoio.h ||
|-
| usr.bin/vis               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 06f01a55d2b92b3b7d83b77547fb614e1fed0d9d || [[gitcommit:06f01a55d2b92b3b7d83b77547fb614e1fed0d9d|click]]
|-
| usr.bin/vmstat            ||                ||        ||              || needs sys/sched.h ||
|-
| usr.bin/vndcompress       ||                ||        ||              ||         ||
|-
| usr.bin/w                 || David van Moolenbroek || committed || || 11eaad3501b899a8ceddf856c90089fa8ebc1f3d || [[gitcommit:11eaad3501b899a8ceddf856c90089fa8ebc1f3d|click]]
|-
| usr.bin/wall              || [[Contributors:Ben Gras|Ben Gras]] || committed || || a06e2ab3959428ebf7e32b1cde13e386df9115ab || [[gitcommit:a06e2ab3959428ebf7e32b1cde13e386df9115ab|click]]
|-
| usr.bin/wc                || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 891fbc18d7304e58ad6307401f297fba2f1b1f8f || [[gitcommit:891fbc18d7304e58ad6307401f297fba2f1b1f8f|click]]
|-
| usr.bin/what              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 5959d954ea63def8f9879fd9b919dfca483874f9 || [[gitcommit:5959d954ea63def8f9879fd9b919dfca483874f9|click]]
|-
| usr.bin/whatis            || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 66601c7f92fa43a4476172ff7ee981cfa16d9b0a || [[gitcommit:66601c7f92fa43a4476172ff7ee981cfa16d9b0a|click]]
|-
| usr.bin/whereis           || stux           || committed || || d24fd34cdf396cf9f2e212b219d2484c791864b2 || [//git.minix3.org/?p=minix.git;a=commitdiff;h=d24fd34cdf396cf9f2e212b219d2484c791864b2|click]
|-
| usr.bin/who               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || b6d4a4c155b8d689603434c3da8b55571af40e3b || [[gitcommit:b6d4a4c155b8d689603434c3da8b55571af40e3b|click]]
|-
| usr.bin/whois             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 2f852797721cf0f789a7502a172e0ae93d6f1e75 || [[gitcommit:2f852797721cf0f789a7502a172e0ae93d6f1e75|click]]
|-
| usr.bin/window            ||                ||        ||              ||         ||
|-
| usr.bin/write             || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 00709a7737e9715e29a192fe59a95679b88d2887 || [[gitcommit:00709a7737e9715e29a192fe59a95679b88d2887|click]]
|-
| usr.bin/xargs             || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 00785f561ffa2989d4501207adef5561801ef1ad || [[gitcommit:00785f561ffa2989d4501207adef5561801ef1ad|click]]
|-
| usr.bin/xinstall          || Thomas Veerman || committed || || 9d04c193d2abd0c557271531f31fb19f2a3703a3 || [[gitcommit:9d04c193d2abd0c557271531f31fb19f2a3703a3|click]]
|-
| usr.bin/xlint             ||                ||        ||              ||         ||
|-
| usr.bin/xstr              || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 3179b9b918b79627288341afcb230649990f9e9c || [[gitcommit:3179b9b918b79627288341afcb230649990f9e9c|click]]
|-
| usr.bin/yacc              ||                ||        ||              ||         ||
|-
| usr.bin/yes               || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 85468eb5c8d2a99fadbfba94b6e6d4a00b9f80da || [[gitcommit:85468eb5c8d2a99fadbfba94b6e6d4a00b9f80da|click]]
|-
| usr.bin/ypcat             ||                ||        ||              || missing rpc/rpc.h ||
|-
| usr.bin/ypmatch           ||                ||        ||              || missing rpc/rpc.h ||
|-
| usr.bin/ypwhich           ||                ||        ||              || missing rpc/rpc.h ||
|}


==== usr.sbin/ ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/usr.sbin/ usr.sbin/]

{| class="wikitable sortable"
! Utility                 !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| usr.sbin/ac             ||                ||        ||              ||         ||
|-
| usr.sbin/accton         ||                ||        ||              ||         ||
|-
| usr.sbin/acpitools      ||                ||        ||              ||         ||
|-
| usr.sbin/altq           ||                ||        ||              ||         ||
|-
| usr.sbin/apm            ||                ||        ||              ||         ||
|-
| usr.sbin/apmd           ||                ||        ||              ||         ||
|-
| usr.sbin/arp            || David van Moolenbroek || committed || || 04e82b7dc953b4811330afd420ce7f2547aea63f || [[gitcommit:04e82b7dc953b4811330afd420ce7f2547aea63f|click]]
|-
| usr.sbin/bad144         ||                ||        ||              ||         ||
|-
| usr.sbin/bootp          ||                ||        ||              ||         ||
|-
| usr.sbin/btattach       ||                ||        ||              ||         ||
|-
| usr.sbin/btconfig       ||                ||        ||              ||         ||
|-
| usr.sbin/btdevctl       ||                ||        ||              ||         ||
|-
| usr.sbin/bthcid         ||                ||        ||              ||         ||
|-
| usr.sbin/btpand         ||                ||        ||              ||         ||
|-
| usr.sbin/catman         ||                ||        ||              ||         ||
|-
| usr.sbin/chroot         || [[Contributors:Ben Gras|Ben Gras]] || committed || || b332803b6f0451b595306760d020eb0223fd6264 || [[gitcommit:b332803b6f0451b595306760d020eb0223fd6264|click]]
|-
| usr.sbin/chrtbl         ||                ||        ||              ||         ||
|-
| usr.sbin/cnwctl         ||                ||        ||              ||         ||
|-
| usr.sbin/cpuctl         ||                ||        ||              ||         ||
|-
| usr.sbin/crash          ||                ||        ||              ||         ||
|-
| usr.sbin/dev_mkdb       || David van Moolenbroek || committed || || 180e74704d3b012a5a9186f196cd218b8ab783f4 || [[gitcommit:180e74704d3b012a5a9186f196cd218b8ab783f4|click]]
|-
| usr.sbin/diskpart       ||                ||        ||              ||         ||
|-
| usr.sbin/dumpfs         ||                ||        ||              ||         ||
|-
| usr.sbin/dumplfs        ||                ||        ||              ||         ||
|-
| usr.sbin/edquota        ||                ||        ||              ||         ||
|-
| usr.sbin/eeprom         ||                ||        ||              ||         ||
|-
| usr.sbin/envstat        ||                ||        ||              ||         ||
|-
| usr.sbin/eshconfig      ||                ||        ||              ||         ||
|-
| usr.sbin/etcupdate      ||                ||        ||              ||         ||
|-
| usr.sbin/extattrctl     ||                ||        ||              ||         ||
|-
| usr.sbin/faithd         ||                ||        ||              ||         ||
|-
| usr.sbin/fssconfig      ||                ||        ||              ||         ||
|-
| usr.sbin/fusermount     ||                ||        ||              ||         ||
|-
| usr.sbin/fwctl          ||                ||        ||              ||         ||
|-
| usr.sbin/gpioctl        ||                ||        ||              ||         ||
|-
| usr.sbin/grfconfig      ||                ||        ||              ||         ||
|-
| usr.sbin/grfinfo        ||                ||        ||              ||         ||
|-
| usr.sbin/gspa           ||                ||        ||              ||         ||
|-
| usr.sbin/hdaudioctl     ||                ||        ||              ||         ||
|-
| usr.sbin/hilinfo        ||                ||        ||              ||         ||
|-
| usr.sbin/hprop          ||                ||        ||              ||         ||
|-
| usr.sbin/i2cscan        || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 3c59273c97a8cdd3abaee6533c83da2d371abfff || [[gitcommit:3c59273c97a8cdd3abaee6533c83da2d371abfff|click]]
|-
| usr.sbin/ifmcstat       ||                ||        ||              ||         ||
|-
| usr.sbin/ifwatchd       ||                ||        ||              ||         ||
|-
| usr.sbin/inetd          || David van Moolenbroek || committed || || c3b6f8f269dded933641674db559d1ecea71d5f1 || [[gitcommit:c3b6f8f269dded933641674db559d1ecea71d5f1|click]]
|-
| usr.sbin/installboot    || [[Contributors:AntoineLeca|Antoine Leca]] || need work || || ||
|-
| usr.sbin/iopctl         ||                ||        ||              ||         ||
|-
| usr.sbin/iostat         ||                ||        ||              ||         ||
|-
| usr.sbin/ipf            ||                ||        ||              ||         ||
|-
| usr.sbin/iprop-log      ||                ||        ||              ||         ||
|-
| usr.sbin/ipwctl         ||                ||        ||              ||         ||
|-
| usr.sbin/irdaattach     ||                ||        ||              ||         ||
|-
| usr.sbin/isdn           ||                ||        ||              ||         ||
|-
| usr.sbin/iteconfig      ||                ||        ||              ||         ||
|-
| usr.sbin/iwictl         ||                ||        ||              ||         ||
|-
| usr.sbin/kadmin         ||                ||        ||              ||         ||
|-
| usr.sbin/kcm            ||                ||        ||              ||         ||
|-
| usr.sbin/kdc            ||                ||        ||              ||         ||
|-
| usr.sbin/kdigest        ||                ||        ||              ||         ||
|-
| usr.sbin/kgmon          ||                ||        ||              ||         ||
|-
| usr.sbin/kimpersonate   ||                ||        ||              ||         ||
|-
| usr.sbin/kstash         ||                ||        ||              ||         ||
|-
| usr.sbin/ktutil         ||                ||        ||              ||         ||
|-
| usr.sbin/kvm_mkdb       ||                ||        ||              ||         ||
|-
| usr.sbin/lastlogin      ||                ||        ||              ||         ||
|-
| usr.sbin/ldpd           ||                ||        ||              ||         ||
|-
| usr.sbin/link           || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || a852ef4bac92b4a2e0d7f046bf12da6788d1b379 || [[gitcommit:a852ef4bac92b4a2e0d7f046bf12da6788d1b379|click]]
|-
| usr.sbin/lmcconfig      ||                ||        ||              ||         ||
|-
| usr.sbin/lockstat       ||                ||        ||              ||         ||
|-
| usr.sbin/lpr            ||                ||        ||              ||         ||
|-
| usr.sbin/lptctl         ||                ||        ||              ||         ||
|-
| usr.sbin/mailwrapper    ||                ||        ||              ||         ||
|-
| usr.sbin/makefs         || [[Contributors:Jean-Baptiste Boric|Jean-Baptiste Boric]] || committed || #63 || 9f988b79349f9b89ecc822458c30ec8897558560 || [[gitcommit:9f988b79349f9b89ecc822458c30ec8897558560|click]]
|-
| usr.sbin/map-mbone      ||                ||        ||              ||         ||
|-
| usr.sbin/mdconfig       ||                ||        ||              ||         ||
|-
| usr.sbin/mdsetimage     ||                ||        ||              ||         ||
|-
| usr.sbin/memswitch      ||                ||        ||              ||         ||
|-
| usr.sbin/mld6query      ||                ||        ||              ||         ||
|-
| usr.sbin/mlxctl         ||                ||        ||              ||         ||
|-
| usr.sbin/mmcformat      ||                ||        ||              ||         ||
|-
| usr.sbin/mopd           ||                ||        ||              ||         ||
|-
| usr.sbin/mountd         ||                ||        ||              ||         ||
|-
| usr.sbin/moused         ||                ||        ||              ||         ||
|-
| usr.sbin/mrinfo         ||                ||        ||              ||         ||
|-
| usr.sbin/mrouted        ||                ||        ||              ||         ||
|-
| usr.sbin/mscdlabel      ||                ||        ||              ||         ||
|-
| usr.sbin/mtrace         ||                ||        ||              ||         ||
|-
| usr.sbin/mtree          || Thomas Veerman || committed || || d433a562885bbd52398dfce3b6869fc74c37628c || [[gitcommit:d433a562885bbd52398dfce3b6869fc74c37628c|click]]
|-
| usr.sbin/ndbootd        ||                ||        ||              ||         ||
|-
| usr.sbin/ndiscvt        ||                ||        ||              ||         ||
|-
| usr.sbin/ndp            || David van Moolenbroek || committed || || 5de448e31552e472484003223117b8301428cd77 || [[gitcommit:5de448e31552e472484003223117b8301428cd77|click]]
|-
| usr.sbin/netgroup_mkdb  ||                ||        ||              ||         ||
|-
| usr.sbin/nfsd           ||                ||        ||              ||         ||
|-
| usr.sbin/npf            ||                ||        ||              ||         ||
|-
| usr.sbin/ofctl          ||                ||        ||              ||         ||
|-
| usr.sbin/paxctl         ||                ||        ||              ||         ||
|-
| usr.sbin/pcictl         ||                ||        ||              ||         ||
|-
| usr.sbin/perfused       ||                ||        ||              ||         ||
|-
| usr.sbin/pf             ||                ||        ||              ||         ||
|-
| usr.sbin/postinstall    || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 23a61ee0eb62d1eb371e440ab9a68f16800d8442 || [[gitcommit:23a61ee0eb62d1eb371e440ab9a68f16800d8442|click]]
|-
| usr.sbin/powerd         ||                ||        ||              ||         ||
|-
| usr.sbin/pppd           ||                ||        ||              ||         ||
|-
| usr.sbin/psrset         ||                ||        ||              ||         ||
|-
| usr.sbin/pstat          ||                ||        ||              ||         ||
|-
| usr.sbin/puffs          ||                ||        ||              ||         ||
|-
| usr.sbin/pvcsif         ||                ||        ||              ||         ||
|-
| usr.sbin/pvctxctl       ||                ||        ||              ||         ||
|-
| usr.sbin/pwd_mkdb       || [[Contributors:Ben Gras|Ben Gras]] || committed || || 5c00743626989a611dd2966296c00a8cc4abca6f || [[gitcommit:5c00743626989a611dd2966296c00a8cc4abca6f|click]]
|-
| usr.sbin/quot           ||                ||        ||              ||         ||
|-
| usr.sbin/quotacheck     ||                ||        ||              ||         ||
|-
| usr.sbin/quotaon        ||                ||        ||              ||         ||
|-
| usr.sbin/racoon         ||                ||        ||              ||         ||
|-
| usr.sbin/racoonctl      ||                ||        ||              ||         ||
|-
| usr.sbin/rarpd          ||                ||        ||              ||         ||
|-
| usr.sbin/rbootd         ||                ||        ||              ||         ||
|-
| usr.sbin/rdate          || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 8357e3a442072484075cb29b36b5c73715e7ee73 || [[gitcommit:8357e3a442072484075cb29b36b5c73715e7ee73|click]]
|-
| usr.sbin/repquota       ||                ||        ||              ||         ||
|-
| usr.sbin/rip6query      ||                ||        ||              ||         ||
|-
| usr.sbin/rmt            ||                ||        ||              ||         ||
|-
| usr.sbin/route6d        ||                ||        ||              ||         ||
|-
| usr.sbin/rpcbind        ||                ||        ||              ||         ||
|-
| usr.sbin/rpc.bootparamd ||                ||        ||              ||         ||
|-
| usr.sbin/rpc.lockd      ||                ||        ||              ||         ||
|-
| usr.sbin/rpc.pcnfsd     ||                ||        ||              ||         ||
|-
| usr.sbin/rpc.statd      ||                ||        ||              ||         ||
|-
| usr.sbin/rpc.yppasswdd  ||                ||        ||              ||         ||
|-
| usr.sbin/rtadvd         || David van Moolenbroek || committed || || 8f957290eb976b379733d0b3811fcb43f8fbaf1a || [[gitcommit:8f957290eb976b379733d0b3811fcb43f8fbaf1a|click]]
|-
| usr.sbin/rtsold         ||                ||        ||              ||         ||
|-
| usr.sbin/rwhod          ||                ||        ||              ||         ||
|-
| usr.sbin/sa             ||                ||        ||              ||         ||
|-
| usr.sbin/schedctl       ||                ||        ||              ||         ||
|-
| usr.sbin/screenblank    ||                ||        ||              ||         ||
|-
| usr.sbin/sdpd           ||                ||        ||              ||         ||
|-
| usr.sbin/service        || David van Moolenbroek || committed || || 92bce8625855044cc134f0d80d1ca171a0a030e6 || [[http://git.minix3.org?p=minix.git;a=commit;h=92bce8625855044cc134f0d80d1ca171a0a030e6|click]]
|-
| usr.sbin/services_mkdb  || David van Moolenbroek || committed || || 81fc6023c221f18ce82ac48abc0f13e4e023787a || [[http://git.minix3.org?p=minix.git;a=commit;h=81fc6023c221f18ce82ac48abc0f13e4e023787a|click]]
|-
| usr.sbin/sesd           ||                ||        ||              ||         ||
|-
| usr.sbin/sliplogin      ||                ||        ||              ||         ||
|-
| usr.sbin/sntp           ||                ||        ||              ||         ||
|-
| usr.sbin/spray          ||                ||        ||              ||         ||
|-
| usr.sbin/srtconfig      ||                ||        ||              ||         ||
|-
| usr.sbin/sti            ||                ||        ||              ||         ||
|-
| usr.sbin/sunlabel       ||                ||        ||              ||         ||
|-
| usr.sbin/sup            ||                ||        ||              ||         ||
|-
| usr.sbin/syslogd        || David van Moolenbroek || committed || || 3e07920fe2355e64a2f9017c962f62d77d988a44 || [[http://git.minix3.org?p=minix.git;a=commit;h=3e07920fe2355e64a2f9017c962f62d77d988a44|click]]
|-
| usr.sbin/tadpolectl     ||                ||        ||              ||         ||
|-
| usr.sbin/tcpdchk        ||                ||        ||              ||         ||
|-
| usr.sbin/tcpdmatch      ||                ||        ||              ||         ||
|-
| usr.sbin/tcpdrop        ||                ||        ||              ||         ||
|-
| usr.sbin/timed          ||                ||        ||              ||         ||
|-
| usr.sbin/tpctl          ||                ||        ||              ||         ||
|-
| usr.sbin/tprof          ||                ||        ||              ||         ||
|-
| usr.sbin/traceroute     || [[Contributors:Ben Gras|Ben Gras]] || committed || || 7f5f010bbdf8790a2e9ca9b907117ed4eb0d2ad3 || [[gitcommit:7f5f010bbdf8790a2e9ca9b907117ed4eb0d2ad3|click]]
|-
| usr.sbin/traceroute6    || David van Moolenbroek || committed || || 72e899eafcf146065053d585ff7745399d1f80b7 || [[gitcommit:72e899eafcf146065053d585ff7745399d1f80b7|click]]
|-
| usr.sbin/trpt           ||                ||        ||              ||         ||
|-
| usr.sbin/unlink         || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 9a006432629dfa66cdcb4a7af6db411d2c2804dd || [[gitcommit:9a006432629dfa66cdcb4a7af6db411d2c2804dd|click]]
|-
| usr.sbin/usbdevs        ||                ||        ||              ||         ||
|-
| usr.sbin/user           ||                ||        ||              ||         ||
|-
| usr.sbin/veriexecgen    ||                ||        ||              ||         ||
|-
| usr.sbin/videomode      ||                ||        ||              ||         ||
|-
| usr.sbin/vipw           || [[Contributors:Ben Gras|Ben Gras]] || committed || || 5c00743626989a611dd2966296c00a8cc4abca6f || [[gitcommit:5c00743626989a611dd2966296c00a8cc4abca6f|click]]
|-
| usr.sbin/vnconfig       || David van Moolenbroek || committed || || 0cea0924a6565e3ba30eaf242185d8190b3ca241 || [[gitcommit:0cea0924a6565e3ba30eaf242185d8190b3ca241|click]]
|-
| usr.sbin/wake           ||                ||        ||              ||         ||
|-
| usr.sbin/wiconfig       ||                ||        ||              ||         ||
|-
| usr.sbin/wlanctl        ||                ||        ||              ||         ||
|-
| usr.sbin/wsconscfg      ||                ||        ||              ||         ||
|-
| usr.sbin/wsfontload     ||                ||        ||              ||         ||
|-
| usr.sbin/wsmoused       ||                ||        ||              ||         ||
|-
| usr.sbin/wsmuxctl       ||                ||        ||              ||         ||
|-
| usr.sbin/ypbind         ||                ||        ||              ||         ||
|-
| usr.sbin/yppoll         ||                ||        ||              ||         ||
|-
| usr.sbin/ypserv         ||                ||        ||              ||         ||
|-
| usr.sbin/ypset          ||                ||        ||              ||         ||
|-
| usr.sbin/zdump          ||                ||        ||              ||         ||
|-
| usr.sbin/zic            || Thomas Veerman || committed || || e35528ae79ed1ccd15e488260db6829514caecec || [[gitcommit:e35528ae79ed1ccd15e488260db6829514caecec|cilck]]
|}


==== sbin/ ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/sbin/ sbin/]

{| class="wikitable sortable"
! Utility              !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| sbin/amrctl          ||                ||        ||              ||         ||
|-
| sbin/apmlabel        ||                ||        ||              ||         ||
|-
| sbin/atactl          ||                ||        ||              ||         ||
|-
| sbin/badsect         ||                ||        ||              ||         ||
|-
| sbin/bioctl          ||                ||        ||              ||         ||
|-
| sbin/brconfig        ||                ||        ||              ||         ||
|-
| sbin/ccdconfig       ||                ||        ||              ||         ||
|-
| sbin/cgdconfig       ||                ||        ||              ||         ||
|-
| sbin/chkconfig       ||                ||        ||              ||         ||
|-
| sbin/chown           || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || e39e890e081e80fafba29a21d53b6984038a7aaa || [[gitcommit:e39e890e081e80fafba29a21d53b6984038a7aaa|click]]
|-
| sbin/clri            ||                ||        ||              ||         ||
|-
| sbin/disklabel       ||                ||        ||              ||         ||
|-
| sbin/dkctl           ||                ||        ||              ||         ||
|-
| sbin/dkscan_bsdlabel ||                ||        ||              ||         ||
|-
| sbin/dmesg           ||                ||        ||              ||         ||
|-
| sbin/drvctl          ||                ||        ||              ||         ||
|-
| sbin/dump            ||                ||        ||              ||         ||
|-
| sbin/dump_lfs        ||                ||        ||              ||         ||
|-
| sbin/fastboot        ||                ||        ||              ||         ||
|-
| sbin/fdisk           || [[Contributors:AntoineLeca|Antoine Leca]] || alpha || || || [//github.com/antoineL/minix/commit/a5c91a3 github]
|-
| sbin/fsck            || [[Contributors:Ben Gras|Ben Gras]] || committed || || 4d4057d8a2cac606f1af23617ce97ebf520ebc73 || [[gitcommit:4d4057d8a2cac606f1af23617ce97ebf520ebc73|click]]
|-
| sbin/fsck_ext2fs     || [[Contributors:Ben Gras|Ben Gras]] || committed || || 94715d8e544a29153969034072cc27e737b55671 || [[gitcommit:94715d8e544a29153969034072cc27e737b55671|click]]
|-
| sbin/fsck_ffs        ||                ||        ||              ||         ||
|-
| sbin/fsck_lfs        ||                ||        ||              ||         ||
|-
| sbin/fsck_msdos      ||                ||        ||              ||         ||
|-
| sbin/fsdb            ||                ||        ||              ||         ||
|-
| sbin/fsirand         ||                ||        ||              ||         ||
|-
| sbin/gpt             || [[Contributors:AntoineLeca|Antoine Leca]] || designing || || ||
|-
| sbin/ifconfig        || David van Moolenbroek || committed || || 90b801219a391518dca4b04b17c88ad3b82b6ad9 || [[gitcommit:90b801219a391518dca4b04b17c88ad3b82b6ad9|click]]
|-
| sbin/init            || [[Contributors:Ben Gras|Ben Gras]] || committed || || a06e2ab3959428ebf7e32b1cde13e386df9115ab || [[gitcommit:a06e2ab3959428ebf7e32b1cde13e386df9115ab|click]]
|-
| sbin/ldconfig        ||                ||        ||              ||         ||
|-
| sbin/mbrlabel        ||                ||        ||              ||         ||
|-
| sbin/mknod           || [[Contributors:Ben Gras|Ben Gras]] || committed || || a8ef09103d69c11c99fe50ad80c7cac8bce3133d || [[gitcommit:a8ef09103d69c11c99fe50ad80c7cac8bce3133d|click]]
|-
| sbin/modload         ||                ||        ||              ||         ||
|-
| sbin/modstat         ||                ||        ||              ||         ||
|-
| sbin/modunload       ||                ||        ||              ||         ||
|-
| sbin/mount           ||                ||        ||              ||         ||
|-
| sbin/mount_ados      ||                ||        ||              ||         ||
|-
| sbin/mount_cd9660    ||                ||        ||              ||         ||
|-
| sbin/mount_efs       ||                ||        ||              ||         ||
|-
| sbin/mount_ext2fs    ||                ||        ||              ||         ||
|-
| sbin/mount_fdesc     ||                ||        ||              ||         ||
|-
| sbin/mount_ffs       ||                ||        ||              ||         ||
|-
| sbin/mount_filecore  ||                ||        ||              ||         ||
|-
| sbin/mount_hfs       ||                ||        ||              ||         ||
|-
| sbin/mount_kernfs    ||                ||        ||              ||         ||
|-
| sbin/mount_lfs       ||                ||        ||              ||         ||
|-
| sbin/mount_msdos     ||                ||        ||              ||         ||
|-
| sbin/mount_nfs       ||                ||        ||              ||         ||
|-
| sbin/mount_nilfs     ||                ||        ||              ||         ||
|-
| sbin/mount_ntfs      ||                ||        ||              ||         ||
|-
| sbin/mount_null      ||                ||        ||              ||         ||
|-
| sbin/mount_overlay   ||                ||        ||              ||         ||
|-
| sbin/mount_portal    ||                ||        ||              ||         ||
|-
| sbin/mount_procfs    ||                ||        ||              ||         ||
|-
| sbin/mount_ptyfs     ||                ||        ||              ||         ||
|-
| sbin/mount_puffs     ||                ||        ||              ||         ||
|-
| sbin/mount_smbfs     ||                ||        ||              ||         ||
|-
| sbin/mount_sysvbfs   ||                ||        ||              ||         ||
|-
| sbin/mount_tmpfs     ||                ||        ||              ||         ||
|-
| sbin/mount_udf       ||                ||        ||              ||         ||
|-
| sbin/mount_umap      ||                ||        ||              ||         ||
|-
| sbin/mount_union     ||                ||        ||              ||         ||
|-
| sbin/newbtconf       ||                ||        ||              ||         ||
|-
| sbin/newfs           ||                ||        ||              ||         ||
|-
| sbin/newfs_ext2fs    || [[Contributors:Ben Gras|Ben Gras]] || committed || || 94715d8e544a29153969034072cc27e737b55671 || [[gitcommit:94715d8e544a29153969034072cc27e737b55671|click]]
|-
| sbin/newfs_lfs       ||                ||        ||              ||         ||
|-
| sbin/newfs_msdos     || [[Contributors:Jean-Baptiste Boric|Jean-Baptiste Boric]] || committed || #63 || 9f988b79349f9b89ecc822458c30ec8897558560 || [[gitcommit:9f988b79349f9b89ecc822458c30ec8897558560|click]]
|-
| sbin/newfs_sysvbfs   ||                ||        ||              ||         ||
|-
| sbin/newfs_udf       || [[Contributors:Jean-Baptiste Boric|Jean-Baptiste Boric]] || committed || #63 || 9f988b79349f9b89ecc822458c30ec8897558560 || [[gitcommit:9f988b79349f9b89ecc822458c30ec8897558560|click]]
|-
| sbin/newfs_v7fs      || [[Contributors:Jean-Baptiste Boric|Jean-Baptiste Boric]] || committed || #63 || 9f988b79349f9b89ecc822458c30ec8897558560 || [[gitcommit:9f988b79349f9b89ecc822458c30ec8897558560|click]]
|-
| sbin/nologin         || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || e816d08843c33dc977c966da88b62ae5a2397be8 || [[gitcommit:e816d08843c33dc977c966da88b62ae5a2397be8|click]]
|-
| sbin/pdisk           ||                ||        ||              ||         ||
|-
| sbin/ping            || [[Contributors:Ben Gras|Ben Gras]] || committed || || 7f5f010bbdf8790a2e9ca9b907117ed4eb0d2ad3 || [[gitcommit:7f5f010bbdf8790a2e9ca9b907117ed4eb0d2ad3|click]]
|-
| sbin/ping6           || David van Moolenbroek || committed || || 903ca1e525d31068eb447066c1f496b51cdcba31 || [[gitcommit:903ca1e525d31068eb447066c1f496b51cdcba31|click]]
|-
| sbin/pppoectl        ||                ||        ||              ||         ||
|-
| sbin/raidctl         ||                ||        ||              ||         ||
|-
| sbin/rcorder         || David van Moolenbroek || committed || || 045e0ed35ce62cdaaec13869c12d6745bf07a525 || [[gitcommit:045e0ed35ce62cdaaec13869c12d6745bf07a525|click]]
|-
| sbin/reboot          || [[Contributors:Ben Gras|Ben Gras]] || committed || || a06e2ab3959428ebf7e32b1cde13e386df9115ab || [[gitcommit:a06e2ab3959428ebf7e32b1cde13e386df9115ab|click]]
|-
| sbin/resize_ffs      ||                ||        ||              ||         ||
|-
| sbin/resize_lfs      ||                ||        ||              ||         ||
|-
| sbin/restore         ||                ||        ||              ||         ||
|-
| sbin/rndctl          ||                ||        ||              ||         ||
|-
| sbin/route           || David van Moolenbroek || committed || || 483e5955576fddc25239f5c789016a05fd002f93 || [[gitcommit:483e5955576fddc25239f5c789016a05fd002f93|click]]
|-
| sbin/routed          ||                ||        ||              ||         ||
|-
| sbin/rtsol           ||                ||        ||              ||         ||
|-
| sbin/savecore        ||                ||        ||              ||         ||
|-
| sbin/scan_ffs        ||                ||        ||              ||         ||
|-
| sbin/scsictl         ||                ||        ||              ||         ||
|-
| sbin/setkey          ||                ||        ||              ||         ||
|-
| sbin/shutdown        || [[Contributors:Ben Gras|Ben Gras]] || committed || || a06e2ab3959428ebf7e32b1cde13e386df9115ab || [[gitcommit:a06e2ab3959428ebf7e32b1cde13e386df9115ab|click]]
|-
| sbin/slattach        ||                ||        ||              ||         ||
|-
| sbin/svhlabel        ||                ||        ||              ||         ||
|-
| sbin/swapctl         ||                ||        ||              ||         ||
|-
| sbin/sysctl          || David van Moolenbroek || committed || || b4f34f94bee271f15440c5c33aecbd4cd2e40676 || [[gitcommit:b4f34f94bee271f15440c5c33aecbd4cd2e40676|click]]
|-
| sbin/ttyflags        ||                ||        ||              ||         ||
|-
| sbin/tunefs          ||                ||        ||              ||         ||
|-
| sbin/umount          ||                ||        ||              ||         ||
|-
| sbin/veriexecctl     ||                ||        ||              ||         ||
|-
| sbin/wdogctl         ||                ||        ||              ||         ||
|-
| sbin/wsconsctl       ||                ||        ||              ||         ||
|}


==== libexec/ ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/libexec/ libexec/]

{| class="wikitable sortable"
! Utility              !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| libexec/atrun        || stux || in progress ||              ||         ||
|-
| libexec/comsat       ||                ||        ||              ||         ||
|-
| libexec/fingerd      || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 1d842c6a572919b97a89b154c4c3a6d5f11575ef || [[gitcommit:1d842c6a572919b97a89b154c4c3a6d5f11575ef|click]]
|-
| libexec/ftpd         || [[Contributors:Ben Gras|Ben Gras]] || committed || || 62da011387586b019f85cdc44165baf17b9633da || [[gitcommit:62da011387586b019f85cdc44165baf17b9633da|click]]
|-
| libexec/getNAME      ||                ||        ||              ||         ||
|-
| libexec/getty        || [[Contributors:Ben Gras|Ben Gras]] || committed || || a06e2ab3959428ebf7e32b1cde13e386df9115ab || [[gitcommit:a06e2ab3959428ebf7e32b1cde13e386df9115ab|click]]
|-
| libexec/httpd        || David van Moolenbroek || committed || || 340f5e56603e4275faeb89a9aacace41ba22d661 || [[gitcommit:340f5e56603e4275faeb89a9aacace41ba22d661|click]]
|-
| libexec/identd       ||                ||        ||              ||         ||
|-
| libexec/ld.aout_so   ||                ||        ||              || obsolete stuff, binary only ||
|-
| libexec/ld.elf_so    || [[Contributors:Ben Gras|Ben Gras]] || committed || || ||
|-
| libexec/lfs_cleanerd ||                ||        ||              ||         ||
|-
| libexec/mail.local   ||                ||        ||              ||         ||
|-
| libexec/makekey      ||                ||        ||              ||         ||
|-
| libexec/makewhatis   || [[Contributors:Ben Gras|Ben Gras]] || committed || || 0c3983b25a88161cf074524e5c94585a2582ae82 || [[gitcommit:0c3983b25a88161cf074524e5c94585a2582ae82|click]]
|-
| libexec/rexecd       ||                ||        ||              ||         ||
|-
| libexec/rlogind      ||                ||        ||              || missing TIOCPKT and urgent data support ||
|-
| libexec/rpc.rquotad  ||                ||        ||              ||         ||
|-
| libexec/rpc.rstatd   ||                ||        ||              ||         ||
|-
| libexec/rpc.rusersd  ||                ||        ||              ||         ||
|-
| libexec/rpc.rwalld   ||                ||        ||              ||         ||
|-
| libexec/rpc.sprayd   ||                ||        ||              ||         ||
|-
| libexec/rshd         || David van Moolenbroek || committed || || 93d36fc9d8fb766b78367bb140abfb114ba8c0b5 || [[gitcommit:93d36fc9d8fb766b78367bb140abfb114ba8c0b5|click]]
|-
| libexec/talkd        ||                ||        ||              ||         ||
|-
| libexec/telnetd      || David van Moolenbroek || committed || || e044bafaad6e3ab88e3bdd8d180dfa568a1625ec || [[gitcommit:e044bafaad6e3ab88e3bdd8d180dfa568a1625ec|click]]
|-
| libexec/tftpd        ||                ||        ||              ||         ||
|-
| libexec/utmp_update  ||                ||        ||              ||         ||
|}


==== dist/ ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/dist/ dist/]

{| class="wikitable sortable"
! Utility           !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| dist/pf           ||                ||        ||              ||         ||
|-
| dist/smbfs        ||                ||        ||              ||         ||
|}


==== external/ ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/external/ external/]

{| class="wikitable sortable"
! Utility           !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| external/apache2/mDNSResponder || || || || ||
|-
| external/atheros/athn || || || || ||
|-
| external/atheros/otus || || || || ||
|-
| external/broadcom/rpi-firmware || || || || ||
|-
| external/bsd/acpcia || || || || ||
|-
| external/bsd/am-utils || || || || ||
|-
| external/bsd/atf || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| external/bsd/bind || David van Moolenbroek || committed || || 00b67f09dd46474d133c95011a48590a8e8f94c7 || [[gitcommit:00b67f09dd46474d133c95011a48590a8e8f94c7|click]]
|-
| external/bsd/byacc || Thomas Veerman || committed || || 4a17663c141e490dfefb696f466dfdcf8bf0527d || [[gitcommit:4a17663c141e490dfefb696f466dfdcf8bf0527d|click]]
|-
| external/bsd/bzip2 || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 4a711bea63dc53acce03198b5fbfaa103fe328d6 || [[gitcommit:4a711bea63dc53acce03198b5fbfaa103fe328d6|click]]
|-
| external/bsd/cron || stux || in progress || || ||
|-
| external/bsd/dhcp || David van Moolenbroek  || committed || || 83ee113ee0d94f3844d44065af2311604e9a30ad || [[gitcommit:83ee113ee0d94f3844d44065af2311604e9a30ad|click]]
|-
| external/bsd/dhcpcd || David van Moolenbroek || committed || || 9f20bfa6c4c442e2e798d91b11c2a5f8d6833a41 || [[gitcommit:9f20bfa6c4c442e2e798d91b11c2a5f8d6833a41|click]]
|-
| external/bsd/elftosb || || || || ||
|-
| external/bsd/fetch || David van Moolenbroek || committed || || 040ec64444222c3cf664253481b0af9434ab4a20 || [[gitcommit:040ec64444222c3cf664253481b0af9434ab4a20|click]]
|-
| external/bsd/file || [[Contributors:Ben Gras|Ben Gras]] || committed || || ef01931f760fe8114e6dd99a6864c92b3a85ae12 || [[gitcommit:ef01931f760fe8114e6dd99a6864c92b3a85ae12|click]]
|-
| external/bsd/flex || Thomas Veerman || committed || || 357f1050293be536ca8309aae20889945ce99fc1 || [[gitcommit:357f1050293be536ca8309aae20889945ce99fc1|click]]
|-
| external/bsd/ipf || || || || ||
|-
| external/bsd/iscsi || || || || ||
|-
| external/bsd/kyua-atf-compat || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| external/bsd/kyua-cli || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| external/bsd/kyua-testers || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| external/bsd/less || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || f7cf2976020bea4fd5cba55555e1b09b71a26953 || [[gitcommit:f7cf2976020bea4fd5cba55555e1b09b71a26953|click]]
|-
| external/bsd/libarchive || [[Contributors:Ben Gras|Ben Gras]] || committed || || 543adbed3a3a783ed36434adafbc258b6bde442d || [[gitcommit:543adbed3a3a783ed36434adafbc258b6bde442d|click]]
|-
| external/bsd/libbind || || || || ||
|-
| external/bsd/libc++ || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 4684ddb6aab0b36791c8099bc705d6140b3d05d0 || [[gitcommit:4684ddb6aab0b36791c8099bc705d6140b3d05d0|click]]
|-
| external/bsd/libdwarf || || || || ||
|-
| external/bsd/libelf || Arun Thomas || committed || || 2a839c735e7ba7578d9ff7b59aac151e02366c01 || [[gitcommit:2a839c735e7ba7578d9ff7b59aac151e02366c01|click]]
|-
| external/bsd/libevent || David van Moolenbroek || committed || || e985b929927b5932e3b68f4b50587d458900107a || [[gitcommit:e985b929927b5932e3b68f4b50587d458900107a|click]]
|-
| external/bsd/liblzf || || || || ||
|-
| external/bsd/libpcap || David van Moolenbroek || committed || || d56f51ea7d8b9045e5c8e2028422523d3f9a5840 || [[gitcommit:d56f51ea7d8b9045e5c8e2028422523d3f9a5840|click]]
|-
| external/bsd/llvm || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || f4a2713ac843a11c696ec80c0a5e3e5d80b4d338 || [[gitcommit:f4a2713ac843a11c696ec80c0a5e3e5d80b4d338|click]]
|-
| external/bsd/lutok || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| external/bsd/mdocml || [[Contributors:Ben Gras|Ben Gras]] || committed || || 3f22092d45d5e7d968db317ffc8ca33e689ae122 || [[gitcommit:3f22092d45d5e7d968db317ffc8ca33e689ae122|click]]
|-
| external/bsd/ntp || || || || ||
|-
| external/bsd/nvi || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 3e1db26a5a6252fcff0898d4cb0c3fa16ccf561d || [[gitcommit:3e1db26a5a6252fcff0898d4cb0c3fa16ccf561d|click]]
|-
| external/bsd/openldap || || || || ||
|-
| external/bsd/openpam || || || || ||
|-
| external/bsd/openresolv || David van Moolenbroek || committed || || d642636d2d23d13bdfd55f00cfe917fe4a830a8a || [[gitcommit:d642636d2d23d13bdfd55f00cfe917fe4a830a8a|click]]
|-
| external/bsd/pcc || || || || ||
|-
| external/bsd/pdisk || || || || Apple PowerPC specific ||
|-
| external/bsd/pkg_install || || || || ||
|-
| external/bsd/ppp || || || || Kernel-mode *BSD specific ||
|-
| external/bsd/sljit || || || || ||
|-
| external/bsd/tcpdump || David van Moolenbroek || committed || || b636d99d91c3d54204248f643c14627405d4afd1 || [[gitcommit:b636d99d91c3d54204248f643c14627405d4afd1|click]]
|-
| external/bsd/tmux || David van Moolenbroek || committed || || eda6f5931d42c77e1480347b1fc3eef2f8d33806 || [[gitcommit:eda6f5931d42c77e1480347b1fc3eef2f8d33806|click]]
|-
| external/bsd/top || David van Moolenbroek || committed || || b89261ba018da33f0bd8cd05f5a1fe9e7a9c837b || [[gitcommit:b89261ba018da33f0bd8cd05f5a1fe9e7a9c837b|click]]
|-
| external/bsd/tre || || || || ||
|-
| external/bsd/wpa || || || || ||
|-
| external/cddl/osnet || || || || ||
|-
| external/gpl2/gawk || || || || ||
|-
| external/gpl2/lvm2 || || || || ||
|-
| external/gpl2/xcvs || || || || ||
|-
| external/gpl3/binutils || Thomas Veerman || committed || || 18a5822eff3a5bdeb6301a60d7d6269594c7ce35 || [[gitcommit:18a5822eff3a5bdeb6301a60d7d6269594c7ce35|click]]
|-
| external/gpl3/gcc || Thomas Veerman || committed || || 18a5822eff3a5bdeb6301a60d7d6269594c7ce35 || [[gitcommit:18a5822eff3a5bdeb6301a60d7d6269594c7ce35|click]]
|-
| external/gpl3/gdb || || || || ||
|-
| external/historical/nawk || Thomas Veerman || committed || || 5ea9e707be09a1df0407e195a11908f6fac19e14 || [[gitcommit:5ea9e707be09a1df0407e195a11908f6fac19e14|click]]
|-
| external/ibm-public/postfix || || || || ||
|-
| external/intel-fw-eula/ipw2100 || || || || ||
|-
| external/intel-fw-eula/ipw2200 || || || || ||
|-
| external/intel-fw-public/* || || || || ||
|-
| external/lgpl3/gmp || Thomas Veerman || committed || || e3209ae7661484355fce7e5f8f0090acb283ef74 || [[gitcommit:e3209ae7661484355fce7e5f8f0090acb283ef74|click]]
|-
| external/lgpl3/mpc || Thomas Veerman || committed || || e3209ae7661484355fce7e5f8f0090acb283ef74 || [[gitcommit:e3209ae7661484355fce7e5f8f0090acb283ef74|click]]
|-
| external/lgpl3/mpfr || Thomas Veerman || committed || || e3209ae7661484355fce7e5f8f0090acb283ef74 || [[gitcommit:e3209ae7661484355fce7e5f8f0090acb283ef74|click]]
|-
| external/mit/expat || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 1230fdc108a70388f87f1b3abdb6731e789a6d94 || [[gitcommit:1230fdc108a70388f87f1b3abdb6731e789a6d94|click]]
|-
| external/mit/lua || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| external/mit/xorg || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 971bb1a5878d19f91739f74fd389e6c5108cb7fa || [[gitcommit:971bb1a5878d19f91739f74fd389e6c5108cb7fa|click]]
|-
| external/public-domain/sqlite || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| external/public-domain/xz || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || 11be35a165022172ed3cea20f2b5df0307540b0e || [[gitcommit:11be35a165022172ed3cea20f2b5df0307540b0e|click]]
|-
| external/realtek/urtwn || || || || ||
|-
| external/zlib/pigz || || || || ||
|}

==== games/ ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/games/ games/]

{| class="wikitable sortable"
! Utility          !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| games/adventure  || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 0819c9f89b6d110be1d10f1cda48f41db00ca70f || [[gitcommit:0819c9f89b6d110be1d10f1cda48f41db00ca70f|click]]
|-
| games/arithmetic || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 8df22d598f118eee2175ff6fdf69ef5fefd24466 || [[gitcommit:8df22d598f118eee2175ff6fdf69ef5fefd24466|click]]
|-
| games/atc        ||                ||        ||              ||         ||
|-
| games/backgammon ||                ||        ||              ||         ||
|-
| games/banner     || Jacob Adams || committed || || f1489796fdbc75840ec4a9265fd71e9bb3d22b9a || [[gitcommit:f1489796fdbc75840ec4a9265fd71e9bb3d22b9a|click]]
|-
| games/battlestar ||                ||        ||              ||         ||
|-
| games/bcd        || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 086845631886200314e2c83ff2c3ec8f76066574 || [[gitcommit:086845631886200314e2c83ff2c3ec8f76066574|click]]
|-
| games/boggle     ||                ||        ||              ||         ||
|-
| games/caesar     || Jacob Adams || committed || || 9cf6cc509881ec142ff89bbefa84de080dec5b22 || [[gitcommit:9cf6cc509881ec142ff89bbefa84de080dec5b22|click]]
|-
| games/canfield   ||                ||        ||              ||         ||
|-
| games/ching      ||                ||        ||              ||         ||
|-
| games/colorbars  || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 7b1dfc682aa50ae3a14ffaf20159e903ba679b1e || [[gitcommit:7b1dfc682aa50ae3a14ffaf20159e903ba679b1e|click]]
|-
| games/countmail  ||                ||        ||              ||         ||
|-
| games/cribbage   ||                ||        ||              ||         ||
|-
| games/dab        ||                ||        ||              ||         ||
|-
| games/dm         ||                ||        ||              ||         ||
|-
| games/factor     || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || c1f592a24c56302c3d77330920ae55c1c8936925 || [[gitcommit:c1f592a24c56302c3d77330920ae55c1c8936925|click]]
|-
| games/fish       || [[Contributors:AlexandreBeletti|Alexandre Beletti]] || committed || || 6a76678e59667bb2f015855384331fc706fc2d18 || [[gitcommit:6a76678e59667bb2f015855384331fc706fc2d18|click]]
|-
| games/fortune    || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || bd0f8badfacf85fcbd11b5aed1d27ca7778e0fb7 || [[gitcommit:bd0f8badfacf85fcbd11b5aed1d27ca7778e0fb7|click]]
|-
| games/gomoku     ||                ||        ||              ||         ||
|-
| games/hack       ||                ||        ||              ||         ||
|-
| games/hangman    ||                ||        ||              ||         ||
|-
| games/hunt       ||                ||        ||              ||         ||
|-
| games/larn       ||                ||        ||              ||         ||
|-
| games/mille      ||                ||        ||              ||         ||
|-
| games/monop      || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 0c3cfeffb3f1a8bda1a32300e2239ea3a172086d || [[gitcommit:0c3cfeffb3f1a8bda1a32300e2239ea3a172086d|click]]
|-
| games/morse      || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 90dc219012fde6d7de23ec8d7b2fbb21ad7d080b || [[gitcommit:90dc219012fde6d7de23ec8d7b2fbb21ad7d080b|click]]
|-
| games/number     || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 5f9253d4384c3ed9f78f48ca108b10b84c72cb41 || [[gitcommit:5f9253d4384c3ed9f78f48ca108b10b84c72cb41|click]]
|-
| games/phantasia  ||                ||        ||              ||         ||
|-
| games/pig        || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 402f338ee6ea12894a21a7225c4965cad5e27b8f || [[gitcommit:402f338ee6ea12894a21a7225c4965cad5e27b8f|click]]
|-
| games/pom        ||                ||        ||              ||         ||
|-
| games/ppt        || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 193687130ead98cd52b23b1976ed1f4b0f1de6fe || [[gitcommit:193687130ead98cd52b23b1976ed1f4b0f1de6fe|click]]
|-
| games/primes     || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || d1878c29f61a985a40a6d59480fe461749df02de || [[gitcommit:d1878c29f61a985a40a6d59480fe461749df02de|click]]
|-
| games/quiz       ||                ||        ||              ||         ||
|-
| games/rain       || Jacob Adams || committed || || eb95f895b2e97bfb27cd0c16e587e8a2ddfa2369 || [[gitcommit:eb95f895b2e97bfb27cd0c16e587e8a2ddfa2369|click]]
|-
| games/random     || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || b098ee9ca60bbbf3287108da398fd4ac0666e047 || [[gitcommit:b098ee9ca60bbbf3287108da398fd4ac0666e047|click]]
|-
| games/robots     ||                ||        ||              ||         ||
|-
| games/rogue      || Robin Karlsson || committed ||  || e3b78ef14fd58bd4477a5899732f50e4798b9dff || [[gitcommit:e3b78ef14fd58bd4477a5899732f50e4798b9dff|click]]
|-
| games/sail       ||                ||        ||              ||         ||
|-
| games/snake      || [[Contributors:AlexandreBeletti|Alexandre Beletti]] || committed || || 831337191b3b8acfc0d7737180d63a3b08432c66 || [[gitcommit:831337191b3b8acfc0d7737180d63a3b08432c66|click]]
|-
| games/tetris     || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 2f98b65abfe7e7c886fb47ae308b611e272623f8 || [[gitcommit:2f98b65abfe7e7c886fb47ae308b611e272623f8|click]]
|-
| games/trek       ||                ||        ||              ||         ||
|-
| games/wargames   || [[Contributors:Thomas Cort|Thomas Cort]] || committed || || 6e7922ee31da2f571c97e79f1942244681d273d0 || [[gitcommit:6e7922ee31da2f571c97e79f1942244681d273d0|click]]
|-
| games/worm       || Chris Simons || committed ||  || 081c95a7f45981fada4c659de8c28d399efda43b || [[gitcommit:081c95a7f45981fada4c659de8c28d399efda43b|click]]
|-
| games/worms      || Chris Simons || committed || || 68b3d8c1a0a44bf943b7de043971362cd017e5b6 || [[gitcommit:68b3d8c1a0a44bf943b7de043971362cd017e5b6|click]]
|-
| games/wtf        || Chris Simons || committed || || fb9c64b2fa893f8445fce2c2a57621eff11bd125 || [[gitcommit:fb9c64b2fa893f8445fce2c2a57621eff11bd125|click]]
|-
| games/wump       ||                ||        ||              ||         ||
|}

==== gnu/usr.bin ====
* [//cvsweb.netbsd.org/bsdweb.cgi/src/gnu/usr.bin/ gnu/usr.bin/]

{| class="wikitable sortable"
! Utility               !! Who is working !! Status !! Pull Request !! Comment !! External link
|-
| gnu/usr.bin/bc        ||                ||        ||              || GPL     ||
|-
| gnu/usr.bin/c89       ||                ||        ||              ||         ||
|-
| gnu/usr.bin/c99       ||                ||        ||              ||         ||
|-
| gnu/usr.bin/dc        ||                ||        ||              || GPL     ||
|-
| gnu/usr.bin/diffutils ||                ||        ||              || GPL     ||
|-
| gnu/usr.bin/gcc4      ||                ||        ||              || obsolete ||
|-
| gnu/usr.bin/gettext   ||                ||        ||              || GPL     ||
|-
| gnu/usr.bin/gkermit   ||                ||        ||              || GPL     ||
|-
| gnu/usr.bin/grep      ||                ||        ||              || GPL     ||
|-
| gnu/usr.bin/groff     ||                ||        ||              || GPL,C++ ||
|-
| gnu/usr.bin/rcs       ||                ||        ||              || GPL     ||
|-
| gnu/usr.bin/send-pr   ||                ||        ||              || GPL     ||
|-
| gnu/usr.bin/texinfo   || [[Contributors:Lionel Sambuc|Lionel Sambuc]] || committed || || c566d4623bac8bacb1dd80e215c52380a9daa2f1 || [[gitcommit:c566d4623bac8bacb1dd80e215c52380a9daa2f1|click]]
|}</text>
      <sha1>8cxo34jq21q0jmy3tzaq5gpagu4kk5d</sha1>
    </revision>
  </page>
  <page>
    <title>Releases</title>
    <ns>0</ns>
    <id>128</id>
    <revision>
      <id>179</id>
      <timestamp>2021-09-09T18:51:23Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import releases:start</comment>
      <origin>179</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="126" sha1="a1akgs91q0zxxr73vmeacf6t25yrlft" xml:space="preserve">These are Minix 3 releases:
* '''[[Next Release]]'''
* '''[[Current Release|Current]]'''
* '''[[Previous Release|Previous]]'''</text>
      <sha1>a1akgs91q0zxxr73vmeacf6t25yrlft</sha1>
    </revision>
  </page>
  <page>
    <title>Previous Release</title>
    <ns>0</ns>
    <id>129</id>
    <revision>
      <id>180</id>
      <timestamp>2021-09-09T18:56:14Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import releases:previous</comment>
      <origin>180</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4444" sha1="kl1fe11ujw330shltrngko2gk146p39" xml:space="preserve">This page provides some information about the previous MINIX 3 releases.

You can download release media from the [//www.minix3.org/download download page].

* '''[[Version 3.2.1]]'''
* '''[[Version 3.2.0]]'''

== Older ==
=== Release 3.1.8 ===
Release date: October 4, 2010

Major Features:

* New package management infrastructure: pkgsrc and pkgin (contributed by Gautam Tirumala)
* Unix Domain Socket support (contributed by Thomas Cort)
* Multiboot support (contributed by Feiran Zheng)
* Ext2 support (contributed by Evgeniy Ivanov)
** [[ACPI]] driver
* full APICs
* Experimental AHCI support

Known Issues:

* VirtualBox: Minix 3.1.8 cannot be installed w/o hardware acceleration support (VT-x, AMD-V)
** Workaround: See [[Running on VirtualBox]]
* VirtualBox 3.1 cannot boot Minix. Please use VirtualBox 3.2.
* Some packman packages have not been ported to pkgsrc yet

=== Release 3.1.7 ===
Release date: June 16, 2010

Major Features:

* Userspace scheduling and a scheduling server (contributed by Bjorn Swift)
* Proper support for multiple ethernet cards of the same type
* Bugfixes (such as workaround to run on recent KVM)
* Debug features ("verbose" boot monitor variable, access to debug registers DR0-DR7 in kernel)
* Boot monitor allows loading images &gt; 16 MB
* Root partition size increased to 64MB (and setup script can now more or less safely deal with root partitions with non-default sizes)
* Buildsystem support for building MINIX with GCC
* Source tree reorganization/cleanup
* New ports: Git, GCC updated to version 4.4.3
* Secondary FS cache layer in VM that uses all available memory, reducing I/O wait time a lot
* Support for the cp1251 and koi8-u charsets (contributed by Roman Ignatov)

Known Issues:

* VirtualBox: Minix 3.1.7 cannot be installed w/o hardware acceleration support (VT-x, AMD-V)
*** Workaround: See [[Running on VirtualBox]]
* VirtualBox 3.1 cannot boot Minix. Please use VirtualBox 3.2.
* VirtualPC: the DEC Tulip network driver is broken
*** Fix: upgrade to SVN-trunk

=== Release 3.1.6 ===
Release date: February 8, 2010

Major Features:

* New drivers: Atheros L2, Intel E1000, Realtek 8169, DEC Tulip
* VirtualPC Network Support (DEC Tulip)
* PipeFS - removed pipe handling from filesystem drivers
* HGFS - support for mounting VMware shared folders as file system
* VFS: supplemental group support
* VFS: sticky bit support
* FPU support
* System Event Framework (SEF)
* Experimental APIC support (disabled by default)
* More ports: more recent QEMU, BSD utilities, Benchmarks

Known Issues:

* VirtualBox 3.1 cannot boot Minix. Please use VirtualBox 3.0 for now.
* Qemu/KVM 0.12 cannot boot Minix. Please use Qemu/KVM 0.11 for now.
* VirtualBox: Minix 3.1.6 cannot be installed w/o hardware acceleration support (VT-x, AMD-V)
** Workaround: See [[Running on VirtualBox]]

=== Release 3.1.5 ===
Release date: November 5, 2009

Major Features:

* Better performance
* Shared memory
* setitimer function
* ISO9660 FS
* Open Source Sound System
* Trap NULL accesses now, for user convenience
* Improved signal handling
* Better support for debuggers (ptrace improvements, etc.)
* Network card autodetection (for supported PCI cards), improved network configuration
* More ports: OpenSSH, Tcpdump, Nedit, Gnu Go

Known Issues:

* VirtualBox: Minix 3.1.5 cannot be installed w/o hardware acceleration support (VT-x, AMD-V)
** Workaround: See [[Running on VirtualBox]]
* VMware: after working correctly for a period of time, the lance driver may stop working silently, causing all network traffic to be dropped for some period of time.
** Workaround: when this happens, run "service refresh lance" as root to restart the lance driver.
** This issue has been fixed in the Minix trunk available from Subversion.

=== Release 3.1.4 ===
Release date: June 9, 2009

Major Features:

* Virtual Memory support
* Improved Virtual Machine support (when MINIX runs as guest)

=== Release 3.1.3a ===
Release date: June 8, 2007

* Fixes to 3.1.3

=== Release 3.1.3 ===
Release date: April 13, 2007

Major Features:

* Virtual File System (VFS)

See http:''www.minix3.org/download/releasenotes-3.1.3.html.

=== Release 3.1.2a ===
Release date:  May 29, 2006

Major Features:

* Packman package manager

Known Issues:

* Installation issue when auto-partitioning disks.

=== Release 3.1.0 (Book Release) ===
Release date: October 24, 2005

First release of MINIX 3

Corresponds with source discussed in OSDIv3.</text>
      <sha1>kl1fe11ujw330shltrngko2gk146p39</sha1>
    </revision>
  </page>
  <page>
    <title>Version 3.3.0</title>
    <ns>0</ns>
    <id>130</id>
    <revision>
      <id>181</id>
      <timestamp>2021-09-09T19:02:36Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import releases:3.3.0</comment>
      <origin>181</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2268" sha1="lxwy7y6ls9dw6dggcwpoxt4kztvhbu9" xml:space="preserve">Release date: '''September 16, 2014'''

== Documentation ==

* [[Minix User's Guide]]

* [[Minix Developer's Guide]]

== Release Notes ==

=== New features ===
* The first release with [[Minix on ARM|ARM support]], three Beagle targets ($45 boards with lots of features and power! More info on specs &amp; where to buy [//beagleboard.org/ on the beagle site]) are supported - build a complete SD card image from scratch using just our source tree and a single shell script invocation!
* Experimental USB support for the Beaglebones (hubs &amp; mass storage)
* Crosscompiling for both ARM and x86 - the buildsystem is [//build.opensuse.org/package/show/home:beng-nl/Minix3 very portable].
* VND: vnode disk (loopback) block driver
* [[LLVM Bitcode]] build of the system
* Import of LLVM / clang in the sources
* unified block cache shared by FSes and VM
* mmap() allowing more sharing and less copying and lower memory footprint - used significantly by exec() and ld.so for all executables and shared libraries

=== Improvements ===
* More complete source compatability with NetBSD in terms of utilities, calls, types (lots of 64-bit), toolchain, codebase and packages. All Minix-specific code is in a top-level minix/ subdir.
* [//www.minix3.org/pkgsrc/logs/3.3.0/20140810-053139/meta/report.html Updated packages overall - a big set is built now]
* New input infrastructure: input server and keyboard driver separated from TTY
* Packages are dynamically linked now, so they're smaller
* Improved driver modularity: UDS separated from PFS; PTY separated from TTY; one controller (not two) per at_wini driver; LOG no longer in the boot image
* The messages have been given a C type per request so all the types are cleaner; and the message size is a bit bigger now so there's more room for growth with the bigger types

=== Known issues ===
* The isofs driver has been disabled as it is too buggy. isodir, isoread, isoinfo, writeisofs can be used instead.
* X11 is not available currently. Our old version, which was still based off of a monolithic XFree86 Server, broke. We are in the process of importing a current release of Xorg. New X11 packages will be provided as soon as the port will be completed.
* ARM USB
** Dynamic plugin/unplugin of devices on a USB hub is flaky.</text>
      <sha1>lxwy7y6ls9dw6dggcwpoxt4kztvhbu9</sha1>
    </revision>
  </page>
  <page>
    <title>Current Release</title>
    <ns>0</ns>
    <id>131</id>
    <redirect title="Version 3.3.0" />
    <revision>
      <id>182</id>
      <timestamp>2021-09-09T19:03:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import releases:current</comment>
      <origin>182</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="27" sha1="4dhhx6kqo88zz26d6qqndih72petfhp" xml:space="preserve">#REDIRECT [[Version 3.3.0]]</text>
      <sha1>4dhhx6kqo88zz26d6qqndih72petfhp</sha1>
    </revision>
  </page>
  <page>
    <title>Student Projects</title>
    <ns>0</ns>
    <id>132</id>
    <revision>
      <id>298</id>
      <parentid>287</parentid>
      <timestamp>2021-09-11T11:28:29Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Projects relating to increasing modularity of Minix */ fix links</comment>
      <origin>298</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3299" sha1="nihiegy8a4mwf3tlk6fuww2xb8rs0pj" xml:space="preserve">Within our ongoing research work on MINIX 3, we frequently have open subproblems that can be assigned to computer science students as term project ('''MSc''' or '''BSc'''), individual programming assignment ('''IPA'''), or operating system lab course replacement. A list of open projects can be found on this page. If you're interested in any of the listed projects, please send an e-mail to the owner of the project to make an appointment.  The list below is just intended to give you an idea about the kind of projects we would be interested in. It is possible to propose your own projects. Just let any of us know that you are interested in doing a MINIX 3 project and we will work out the details.

== Projects relating to Live Update and Dependability ==
Owner: Cristiano Giuffrida &lt; giuffrida@cs.vu.nl &gt;

* [[IPC Proxy|A framework to log and manipulate inter-process communications]]
* [[Operating System Versioning|Operating system versioning]]
* [[Whole-OS Crash Recovery|Whole-OS crash recovery]]
* [//wiki.cs.vu.nl/mp/index.php/Preventing_dangling_pointer_exploits_in_C_programs Preventing dangling pointer exploits in C programs]
* [//wiki.cs.vu.nl/mp/index.php/Debugging_memory_errors_without_resorting_to_magic Debugging memory errors without resorting to magic]
* [//wiki.cs.vu.nl/mp/index.php/Practical_Garbage_Collection_for_C_with_LLVM Practical garbage collection for C with LLVM]

== Projects relating to the Next-Generation Storage Stack (Loris) ==
Owner: David van Moolenbroek &lt; dcvmoole@cs.vu.nl &gt; / Raja Appuswamy &lt; raja@cs.vu.nl &gt;

* [[Loris Deduplication|Deduplication]]
* [[Cloud Storage with Loris|Cloud storage]]
* [[Advanced File Typing in Loris|File typing]]
* [[Loris Meets Multicore|Exploiting multicore]]
* [[Benchmarking Loris Infrastructure|Benchmarking infrastructure]]
* [[Loris on SSDs|SSD-optimized layout algorithm]]

== Projects relating to increasing modularity of Minix ==
Owner: Tomáš Hrubý &lt; thruby@few.vu.nl &gt; / Dirk Vogt &lt; dvogt@few.vu.nl &gt;

* [[Scalable Network Stack]]
* [[Load Awareness|Making Minix scheduling load-awere and effective on multiple cores]] (MSc/IPA)
* [[Asynchronous Network Stack|Asynchronous network stack]] (IPA)
* [[Reducing Latency in Internet|Reducing latency in Internet by improving buffering and feedback in the network stack]] (MSc)
* [[Fault Injection Framework|Fault injection framework]] (MSc)
* [[Profiling Minix]] (IPA / MSc)
* [[Efficient Memory Allocation and Protection in a Multicore Network Stack|Efficient memory allocation and protection in a multicore network stack]] (IPA)
* Migrating interrupts to the CPUs which host the relevant drivers (IPA)
* NMI based statistical profiling for SMP (IPA)
* Implementing CUBIC congestion avoidance protocol for LwIP (https://savannah.nongnu.org/projects/lwip/)

== Projects relating to Minix performance ==
Owner: Andy Tanenbaum &lt; ast@cs.vu.nl &gt;

* Making a benchmarking suite and benchmarking MINIX 3 performance
 
== Completed Projects ==
Several bachelor and master's theses projects have been successfully completed already. See the [[Publications]] page for more details and PDFs of the theses.

MINIX 3 also particpated in Google's Summer of Code (GSoC) as of 2008. There is a separate wiki page describing [[GSOC]], including information on how to get involved.</text>
      <sha1>nihiegy8a4mwf3tlk6fuww2xb8rs0pj</sha1>
    </revision>
  </page>
  <page>
    <title>Version 3.2.1</title>
    <ns>0</ns>
    <id>133</id>
    <revision>
      <id>184</id>
      <timestamp>2021-09-09T20:41:59Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>import page, links need fixing</comment>
      <origin>184</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2632" sha1="m5xpinxh35po5aqkv0xqw57h7ui479g" xml:space="preserve">
== MINIX Release 3.2.1 ==

=== Documentation ===

* [[Minix User's Guide]]

* [[Minix Developer's Guide]]

=== Release Notes ===
Release date: '''February 21, 2013'''

==== Major Features ====
* Development:
** Support for dynamically linked executables, also build shared versions of base system libraries. See [[.:UsersGuide:UsingSharedLibraries]].
** Remove the use of Intel segments altogether, giving a performance boost while context switching. Rely exclusively on page tables.
** Added support for SYSENTER/SYSCALL based system kernel calls, a significant performance improvement
** Full new clean updated NetBSD build system import. build.sh is supported, allowing crossbuilding MINIX 3. See [[.:developersguide:crosscompiling|Crosscompile MINIX]].
** Imported or upgraded many userland utilities and libraries from NetBSD: libc, lorder, join, mtree, tsort, cksum, kill, xinstall, du, libutil, tic, postinstall, flex, zlib, bsdtar, ls, sort, cat, echo, pax, file, mktemp, libc,csu, curses, byacc, tput, test, ln, nvi,ctags, infocomp, nbperf, make, m4, bzip2, libcrypt, printf, passwd, make, ed, nawk, expr, pwd. 
** DDEKIT support (support for USB keyboards, mice and mass storage). See [[:DdeKitUsb]].
** Generalization of the TTY driver
** Small and large cleanup represented by retiring MINIXisms such as nonsymbolic rootdev, dev2name, checkhier, badblocks, readall, BIOS_SEG and umap_bios, bios_wini, C macros as _ANSI, _CONST, _VOLATILE, _SIZET, _ARGS, _VOID, PUBLIC, PRIVATE and FORWARD, _PROTOTYPE
** VM: Generalized munmap (boot time ramdisk is now freed, saving memory)
** VFS interaction with drivers is fully asynchronous, making VFS immune to uncooperative drivers
** Exec performance improvement and generalization. Reduce copying, and kernel, RS, VFS and VM all use the same executable parsing code. 
** Some more abstraction in VM to support future improvements
** Implemented dynamic mtab support and the mount -a command
** Generalized the file system cache
* Changes
** 'make world' was replaced with 'make build'
** Dropped support for a.out binaries
* Drivers, FS
** E1000 add support for 82545EM
** EXT2 support improvements.
** Virtio: virtio-blk, virtio-net drivers. See [[.:UsersGuide:RunningOnQemu]].
** Support for AHCI
** Add VBFS: VirtualBox Shared Folder File System
** rtl8169: add support for RTL8101E family
* Keymaps
** Portuguese keymap
** Brazilian keymap 
* Userland
** Rewritten sprofalyze in C for better performance

==== Known Issues ====

* VirtualBox: Minix cannot be installed w/o hardware acceleration support (VT-x, AMD-V)
** Workaround: See [[.:UsersGuide:RunningOnVirtualBox]]</text>
      <sha1>m5xpinxh35po5aqkv0xqw57h7ui479g</sha1>
    </revision>
  </page>
  <page>
    <title>Version 3.2.0</title>
    <ns>0</ns>
    <id>134</id>
    <revision>
      <id>185</id>
      <timestamp>2021-09-09T20:45:02Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>import page, links need fixing</comment>
      <origin>185</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2385" sha1="kndgruusavxw8kwd64d7mae6bo86k33" xml:space="preserve">
== MINIX Release 3.2.0 ==

=== Documentation ===

* [[Minix User's Guide]]

* [[Minix Developer's Guide]]


=== Release Notes ===
Release date: '''February 29, 2012''' (Leap Day)

==== Major Features ====
* Clang is the default compiler (GCC is also supported)
* NetBSD C library 
* ELF is the default executable format
* Asynchronous, multithreaded virtual filesystem (VFS) server
* Experimental SMP support
* FUSE support (GSOC project by Evgeniy Ivanov)
* NetBSD password file format (part of GSOC project by Vivek Prakash)
* FS types infrastructure:
** Use a proper /etc/fstab file
** Clean/unclean FS flag in MFS
** Full base system ext2 integration: newfs, fsck, can install on ext2
** Do proper &lt;code&gt;fsck -p&lt;/code&gt; on each boot for all fstab-listed filesystems
* NetBSD bootloader
* Smaller boot images (using gzip)
* ProcFS: /proc file system
* Multithreading and NCQ support in the AHCI driver
* Debugging Improvements
** GDB and core dump support (GSOC project by Adriana Szekeres)
** Block device tracing
* New NetBSD userland utilities (part of them as a GSOC project by Vivek Prakash)
** ext2 fsck&amp;mkfs, gzip, m4, man&amp;tools, mkdep, mkdir, mkfifo, mktemp, rm, rmdir, tic, uniq
** libcurses, libcrypt, libprop, libterminfo, libutil
** bzip2, date, indent, mdocml (mandoc), sed, zoneinfo ports
* Better reliability
** Transparent recovery from block device driver crashes in file systems
** Transparent retry upon failing block device I/O in file systems
** New Faulty Block Device fault injection driver
** Servers and drivers run as unprivileged users
** Fix all (potential) bugs found by Clang's more elaborate warnings
* Better virtualization support
** Added libvassert, to enable easier support for VMWare VAssert
** New VirtualBox time sync driver

==== Other important differences ====
* The MINIX project now uses ''git'' as its version-control system

==== Known Issues ====

* VirtualBox: Minix cannot be installed w/o hardware acceleration support (VT-x, AMD-V)
** Workaround: See [[.:usersguide:runningonvirtualbox|RunningMinixOnVirtualBox]]
* Build warnings: Clang has much better diagnostics than ACK, so clang reports more warnings on the MINIX codebase. These warnings are being fixed over time.
* Clang performance: On MINIX, clang builds more slowly than GCC. We are working on this. In the meantime, you have the option to build MINIX with GCC (CC=gcc).</text>
      <sha1>kndgruusavxw8kwd64d7mae6bo86k33</sha1>
    </revision>
  </page>
  <page>
    <title>Harmless Diagnostic</title>
    <ns>0</ns>
    <id>135</id>
    <revision>
      <id>186</id>
      <timestamp>2021-09-09T21:01:49Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>import page</comment>
      <origin>186</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="966" sha1="ojchnp0c27o2wfunmi2225fr91ldone" xml:space="preserve">== Harmless Diagnostics ==

This page describes various diagnostics produced by the networking and
the PCI code that can be safely ignored.

==  dp8390: strange, got SYN_ALARM  ==

The dp8390 driver got a message about an expired timer. But the
driver does not use any timers. This is probably a small bug in the
timer library. The message can be safely ignored (but it is better
to fix the library).

== (warning) unsupported ISA bridge ... ==

Another harmless diagnostic. At the moment the information provided
by the ISA bridge is not needed.

== pci: ignoring bad value 0x7000 in sts for QEMU ==

Either QEMU does not emulate the hardware correctly or there is a
bug in the MINIX 3 PCI code. This error will be ignored for QEMU.

== do_copy: got request from... ==

Some driver uses the general copy method rather than safecopy.
The request is performed and everything should work normally,
but the driver will need to be modernized at some point in the future.</text>
      <sha1>ojchnp0c27o2wfunmi2225fr91ldone</sha1>
    </revision>
  </page>
  <page>
    <title>Booting with PXE</title>
    <ns>0</ns>
    <id>136</id>
    <revision>
      <id>247</id>
      <parentid>187</parentid>
      <timestamp>2021-09-10T18:27:35Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>remove redundant header</comment>
      <origin>247</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2265" sha1="9vo0q580fsojh2co4v8odvfl0t42g6v" xml:space="preserve">It is possible to boot MINIX 3 over the network. This makes use of the [[Wikipedia:Preboot_Execution_Environment|PXE protocol]] supported in some network cards. The network card loads its boot files over network and boot the PC from these files.

PXE booting involves two machines :
* The '''server''', which has a DHCP and TFTP server ;
* The '''client''', which is set to boot over PXE.

This document will explain how to populate the TFTP root directory for booting MINIX 3.

&lt;div round info&gt;
''' Setting up a PXE server'''

Setting up a DHCP/TFTP server is outside the scope of this document. Check your operating system's documentation to learn how to set up a PXE server.
&lt;/div&gt;

== MINIX 3 files ==

The boot-to-ramdisk image is suitable for booting over PXE. [[Cross Compiling|To generate the image]], run ''releasetools/x86_ramimage.sh''. The kernel and modules will be placed into ''../obj.i386/work'', move them to the TFTP root directory.

== Bootloader ==

As with a hard drive installation, a boot loader is required to bootstrap the system.

=== PXELINUX ===

''Main documentation : http://www.syslinux.org/wiki/index.php?title=PXELINUX''

Download the latest release of SYSLINUX at https://www.kernel.org/pub/linux/utils/boot/syslinux/. Extract the following files and put them in the TFTP root directory :

* ''bios/com32/elflink/ldlinux/ldlinux.c32''
* ''bios/com32/lib/libcom32.c32''
* ''bios/com32/libutil/libutil.c32''
* ''bios/com32/mboot/mboot.c32''
* ''bios/com32/menu/menu.c32''
* ''bios/core/pxelinux.0''

Create a directory named ''pxelinux.cfg/'' in the TFTP root directory. Inside it, create a file named ''default'' with the following contents :

&lt;pre&gt;
DEFAULT menu.c32
TIMEOUT 100

LABEL x86
  MENU LABEL MINIX 3
  KERNEL mboot.c32
  APPEND kernel bootramdisk=1 --- mod01_ds --- mod02_rs --- mod03_pm --- mod04_sched --- mod05_vfs --- mod06_memory --- mod07_tty --- mod08_mib --- mod09_vm --- mod10_pfs --- mod11_mfs --- mod12_init
&lt;/pre&gt;

== Booting directly with QEMU ==

You can test the TFTP root directory with QEMU without setting up a DHCP/TFTP server first. To boot with QEMU, ''cd'' to the TFTP root directory and use the following command :

&lt;pre&gt;
qemu-system-i386 --enable-kvm -m 1G -tftp . -bootp pxelinux.0 -boot n
&lt;/pre&gt;</text>
      <sha1>9vo0q580fsojh2co4v8odvfl0t42g6v</sha1>
    </revision>
  </page>
  <page>
    <title>Setting Up SSH</title>
    <ns>0</ns>
    <id>137</id>
    <revision>
      <id>248</id>
      <parentid>188</parentid>
      <timestamp>2021-09-10T18:28:16Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>remove redundant header</comment>
      <origin>248</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="501" sha1="ne2h356fc0uc0nd4qazmzhfx10yog71" xml:space="preserve">The following steps must be done as ''root''.

* OpenSSH

&lt;pre&gt;
pkgin install openssh
&lt;/pre&gt;

* Customize settings

  Optionally, edit ''/usr/pkg/etc/ssh/sshd_config''.

* Start ''sshd''

&lt;pre&gt;
reboot
&lt;/pre&gt;

or

&lt;pre&gt;
sh /usr/pkg/etc/rc.d/sshd start
&lt;/pre&gt;

Security keys will be created automatically.

* If SSH connections fail...

Check if the ''sshd'' daemon is running.

&lt;pre&gt;
ps ax | grep sshd
&lt;/pre&gt;

Next, check that it's listening to the appropriate port.

&lt;pre&gt;
tcpstat -a | grep ssh
&lt;/pre&gt;</text>
      <sha1>ne2h356fc0uc0nd4qazmzhfx10yog71</sha1>
    </revision>
  </page>
  <page>
    <title>Securing MINIX</title>
    <ns>0</ns>
    <id>138</id>
    <revision>
      <id>255</id>
      <parentid>251</parentid>
      <timestamp>2021-09-10T20:21:06Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>/* Accounts */ update link to new title</comment>
      <origin>255</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="547" sha1="smuxnmzm462a911joav5n715k6ofb23" xml:space="preserve">
== Accounts ==

By default, the main user account on MINIX is the ''root'' account. Using the root account risks the security of your computer system. It is safer to use unprivileged user accounts, only to become a "superuser" when necessary. Please see [[Managing User Accounts]] for more information.

== Third-party Software ==

There is always some risk when installing third-party software. Please see the warning in the manual page for ''pkg_add(1)'' for an explanation and suggestions to reduce the chance of installing malicious software.</text>
      <sha1>smuxnmzm462a911joav5n715k6ofb23</sha1>
    </revision>
  </page>
  <page>
    <title>Managing User Accounts</title>
    <ns>0</ns>
    <id>139</id>
    <revision>
      <id>256</id>
      <parentid>253</parentid>
      <timestamp>2021-09-10T20:22:25Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>remove now-redundant header; keep TOC above first line</comment>
      <origin>256</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3353" sha1="m8o19lwe0okp1h5a9vvngs94twunh18" xml:space="preserve">__TOC__

You'll need to be the root user to do any of the following.

== Adding a New Group ==

To add a new user group to the system, use the ''group add'' command.

&lt;pre&gt;
# group add wheel
&lt;/pre&gt;

== Adding a New User ==

To add a new user to the system, run the ''user add'' command. The arguments to ''user add'' are ''-m'' to create a home directory, ''-g'' followed by the group name, and then the user name. The group must already exist and the user must not.

Examples:

&lt;pre&gt;
# user add -m -g users foo

# user add -m -d /root2 -g operator anotherroot

# user add -m -g staff mike

# user add -m -g management steve

# user add -m -g boss fred
&lt;/pre&gt;

The typical groups for new users are '''other''' or '''users''' (for ordinary users), or '''operator''' (for system administrator). The user's home directory is normally created in ''/home''/, but can be changed using the ''-d directory'' option.

The new user's full name and password will be unset and the default shell will be ''sh''. To change them, use the ''chfn'', ''passwd'', ''chsh'', and ''user mod'' commands or have the user set them themselves after logging in.

Examples:

&lt;pre&gt;
# chfn foo

# chsh -s /bin/zsh anotherroot
&lt;/pre&gt;

The user is now created, but it is still not usable to login, as you must first set a password: 
&lt;pre&gt;
# passwd foo
&lt;/pre&gt;

=== Operator users ===

/!\ '''''Stale: information below is not completely accurate, and reflects more the intentions of previous versions of MINIX than the current state.'''''

The system has been set up with the idea that working as ''root'' is a bad thing to do. As ''root'' you are in no way protected from doing stupid things. So do not do development as root, but work as ''bin''! Only in exceptional cases do you want to become ''root''. Being ''root'' is fun for wannabe hackers; administrators know better.

&lt;div round important&gt;
/!\ '''''Obsolete stuff, which might or might not come back...'''''

To make life easier for ''bin'' some programs like su([http://www.minix3.org/manpages/man1/su.1.html 1]), install([http://www.minix3.org/manpages/man1/install.1.html 1]) and shutdown([http://www.minix3.org/manpages/man8/shutdown.8.html 8]) treat ''bin'' and other members of the ''operator'' group as special and allow them the privileges of ''root''. (One is an ''operator'' if one's group ID is zero.) ''Operator''s should share the shadow password of root by having ''##root'' in their password field. This way they all have one face (password) to the outside world, forming no greater security risk than root alone.
&lt;/div&gt;

You can edit the ''/etc/passwd'' file using the ''vipw'' command. By default, it will use the ''vi'' text editor. This can be changed by using the ''EDITOR'' environment variable.

Example:

&lt;pre&gt;
# EDITOR=nano vipw
&lt;/pre&gt;

=== Default Home Directory Contents ===

When you create a new user, the contents of the ''/usr/ast'' directory are copied to the user's new home directory. To change the default files provided whenever a new user is created, just change the contents of this directory.

== Removing a User ==

To remove a user:

&lt;pre&gt;
# user del foo
&lt;/pre&gt;

To remove a user and their home directory:

&lt;pre&gt;
# user del -r foo
&lt;/pre&gt;

== Removing a Group ==

Removing a group is very similar to removing a user. All you need to do is the following:

&lt;pre&gt;
# group del wheel
&lt;/pre&gt;</text>
      <sha1>m8o19lwe0okp1h5a9vvngs94twunh18</sha1>
    </revision>
  </page>
  <page>
    <title>SATA</title>
    <ns>0</ns>
    <id>140</id>
    <revision>
      <id>244</id>
      <parentid>243</parentid>
      <timestamp>2021-09-10T17:17:17Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Feedback */ fix link again</comment>
      <origin>244</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="773" sha1="1iy9bb75aq1iaq8px847eomyh72bpjb" xml:space="preserve">MINIX 3 can use SATA hard drives in native mode, which is also called AHCI mode. This option is supported from MINIX 3.2.1 pre-releases onward.

== Setup ==

To enable SATA, set the BIOS to use native/AHCI mode for the hard drive.

Then, choose this boot option during installation:

&lt;pre&gt;
Regular MINIX 3 (with AHCI)
&lt;/pre&gt;

To enable this for an installed system, add ''ahci=yes'' to a menu entry in ''/boot.conf''. 

== Potential Problems ==

When using SATA in VirtualBox, consecutive restarts might not find the installer CD. To fix this, shutdown MINIX 3 and close the VirtualBox VM. This will erase any temporary data that may be causing the problem.

== Feedback ==

Please [http://groups.google.com/group/minix3 let us know] about your [[Getting Help|experience]].</text>
      <sha1>1iy9bb75aq1iaq8px847eomyh72bpjb</sha1>
    </revision>
  </page>
  <page>
    <title>APIC</title>
    <ns>0</ns>
    <id>141</id>
    <revision>
      <id>192</id>
      <timestamp>2021-09-09T21:21:51Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>import page</comment>
      <origin>192</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2467" sha1="0a8o94zgkcrze15eyjivgifwjhmtxk0" xml:space="preserve">== APIC mode ==
[[Wikipedia:Advanced_Programmable_Interrupt_Controller|APIC]] is a successor to the legacy PIC. We have to differ between local APIC, which is a kind of drop-in replacement for PIC and I/O APIC, which is necessary for SMP. The main advantage of local APIC is to enable the system to use much more IRQ lines than the 16 legacy (E)ISA IRQs and thus possible much less IRQ sharing. 

The local APIC code is always compiled in the MINIX kernel, however the default mode is PIC. The main reason is that in contrast to real hardware, when running Minix in a virtual machine the timing of the local APIC timer is difficult to configure right and the timer ticks much faster than it should. It is '''''not''''' a problem when Minix runs on real hardware. To turn the APIC mode on the '''no_apic''' variable must be set to '''0''' in the boot monitor. Although the no_ part may look confusing APIC is meant to become the default mode in Minix as soon as the timing issue in VMs is resolved and setting this variable should turn APIC off on old systems.

To use the APIC mode on most hardware [[ACPI]] driver is required ('''acpi=yes''' in the boot monitor) as only through ACPI can we figure out how the interrupts are routed in the system. This is not an issue in systems like KVM which use only legacy interrupts. 

==== Known issues : ====
* APIC timer ticks too fast in virtual-machines. Set '''apic_timer_x=N''' in boot monitor to slow it down N timer. The recommended value is ~10, try out what is the best match for your configuration.
* PCI does not reset the interrupt-line-registers (ILR) of devices back to the legacy mode when shutting down, thus when rebooted without APIC mode the PCI devices will try to register IRQ &gt; 15 which won't work
* immediate reboot through boot monitor does not work, for some reason the interrupt controllers are not in like-after-boot state and Minix crashes. Otoh this brings the interrupt controllers to a "good" state and next reboot works
* local APIC seems to be broken (https://github.com/Stichting-MINIX-Research-Foundation/minix/issues/181)

==== References ====

[http://www.intel.com/design/chipsets/datashts/29056601.pdf IO APIC Specification]

[http://www.intel.com/design/chipsets/specupdt/29071001.pdf updated IO APIC Specification]

[http://software.intel.com/sites/default/files/managed/7c/f1/253668-sdm-vol-3a.pdf Intel® 64 and IA-32 Architectures Software Developer's Manual Volume 3A (local APIC)]</text>
      <sha1>0a8o94zgkcrze15eyjivgifwjhmtxk0</sha1>
    </revision>
  </page>
  <page>
    <title>Installation Optimizations</title>
    <ns>0</ns>
    <id>142</id>
    <revision>
      <id>258</id>
      <parentid>193</parentid>
      <timestamp>2021-09-10T20:25:11Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>demote headers</comment>
      <origin>258</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="691" sha1="hvwmi6ow05ry17w3wiq395yfsgclxyz" xml:space="preserve">&lt;div round info&gt;
'''Stale page'''

The contents of this page must be revised to reflect the current state of MINIX3.
&lt;/div&gt;

== Optimizations ==

This page gives some hints and optimizations you can make to tune your MINIX 3 system
to match your requirements.

=== Increase the File System buffer cache ===

&lt;!&gt; This particular hint is outdated. &lt;!&gt;

If you have a large memory, you may also wish to increase the size of the file system buffer cache.
To do this, change the value of the constant ''NR_BUFS'' in ''servers/mfs/Makefile''. This value tells how big the cache is in disk blocks (normally 4 KB), so a value of, say, 4096, creates a 16-MB cache.
Then rebuild and reboot the system.</text>
      <sha1>hvwmi6ow05ry17w3wiq395yfsgclxyz</sha1>
    </revision>
  </page>
  <page>
    <title>Shutting Down the System</title>
    <ns>0</ns>
    <id>143</id>
    <revision>
      <id>385</id>
      <parentid>261</parentid>
      <timestamp>2022-02-07T14:07:28Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix links</comment>
      <origin>385</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="576" sha1="lg9qi8onfbmdl7pq0e8aw71hvihfisp" xml:space="preserve">You can shutdown the system by typing:
&lt;pre&gt;
# halt
&lt;/pre&gt;

To power off the machine, you can also enter:

&lt;pre&gt;
# poweroff
&lt;/pre&gt;

If you wish to reboot the machine, you can enter:
&lt;pre&gt;
# reboot
&lt;/pre&gt;

Alternatively, you can use the '''shutdown''' command:
&lt;pre&gt;
# shutdown &lt;flag&gt; now
&lt;/pre&gt;
where '''&lt;flag&gt;''' is one of:
* -h: to halt
* -p: to poweroff
* -r: to reboot

For more information, please see the following manpages:

* [[Manual Pages|boot(8)]]
* [[Manual Pages|halt(8)]]
* [[Manual Pages|poweroff(8)]]
* [[Manual Pages|reboot(8)]]
* [[Manual Pages|shutdown(8)]]</text>
      <sha1>lg9qi8onfbmdl7pq0e8aw71hvihfisp</sha1>
    </revision>
  </page>
  <page>
    <title>Boot Monitor</title>
    <ns>0</ns>
    <id>144</id>
    <revision>
      <id>263</id>
      <parentid>196</parentid>
      <timestamp>2021-09-10T20:30:42Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>remove redundant header</comment>
      <origin>263</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3763" sha1="bavsiuwlbuh087y4ft2tvriwghi45i2" xml:space="preserve">This page describes the NetBSD bootloader, as used by MINIX3.

To get a summary of what the it can do, while in it, you can select "Drop to boot prompt" from the menu and type:

&lt;pre&gt;
help
&lt;/pre&gt;

== Commonly Used MINIX3 Boot Options ==

A rundown of oft-used MINIX3 boot options:
{| class="wikitable"
| ''cttyline=0'' || Used for serial debugging; parameter selects serial port. 
|-
| ''cttybaud='' || Sets serial baud rate. 115200 is recommended. 
|-
| ''bootopts=-s'' || Enables single-user mode. 
|-
| ''no_apic='' || &lt;zero&gt; to turn APIC on, &lt;non-zero&gt; to turn it off. There is also ''apic_timer_x=&lt;n&gt;''. ''acpi=yes'' is required with ''no_apic=0'' 
|-
| ''no_smp='' || &lt;zero&gt; to turn SMP on, &lt;non-zero&gt; to turn it off. 
|-
| ''pci_debug=1'' || Enable PCI driver debug prints. 
|-
| ''rootdevname='' || E.g. ''c0d0p0s0''; Sets the partition from which to load boot components. 
|-
| ''watchdog='' || &lt;non-zero&gt; to turn on the NMI watchdog (kernel lock up detection; also requires ''no_apic=0'' and ''acpi=yes''). 
|}

Some less used options:
{| class="wikitable"
| ''acpi=yes'' || Use the ACPI driver. 
|-
| ''ahci=yes'' || Use the AHCI driver instead of the "at_wini" IDE driver (experimental!). Many other ''ahci='' options are available to help debugging; see the code. 
|-
| ''ata_no_dma=1'' || Disable DMA. 
|-
| ''ata_pci_debug=1'' || Enable PCI-related debugging info in at_wini driver. Some other ''ata='' options are available to help debugging; see the code. 
|-
| ''atapi_dma=1'' || Enable ATAPI DMA. 
|-
| ''bios_wini=yes'' || Use the BIOS driver instead of the "at_wini" IDE driver. 
|-
| ''bios_remap_first=1'' || Force the boot drive to be remapped as d7; this allows a machine booted from an inserted media (like a faked disk image from CD booting or a USB thumb drive) to retain its normal drive assignation. 
|-
| ''console=8003'' || Enable 50 lines for the text-mode console. 
|-
| ''debug_fkeys=1'' || Enable pressing F1..F10 keys to show information about the system on the console. 
|-
| ''disable=&lt;daemon&gt;'' || Prevent one ''daemon'' (optional service) to start; useful when debugging, or if some piece of hardware has problems; ''disable=inet'' will prevent the INET network stack to start; ''disable=lwip,lance'' will prevent both the LWIP network stack and the LANCE driver to start. 
|-
| ''hz=60'' || Set the system heart beat. 
|-
| ''label=&lt;label&gt;'' || Allows the binding of several configurations in a single image. 
|-
| ''memory=&lt;range&gt;'' || Describe the installed memory in the computer; useful to override incorrect or faulty detection or to fake a memory-starved machine. 
|-
| ''oxpcie='' &lt;hexport&gt; || document me! 
|-
| ''rootdev=&lt;device&gt;'' || document me! Also ''bootdev'', ''ramimagedev'', and ''ramsize'', described in the monitor(8) manpage. 
|-
| ''rs_verbose=1'' || Enable debugging of Resurrection Server. 
|-
| ''skip_boot_config=1'' || Prevents the ''service edit'' operation on the booting processes (??? document me better!) 
|-
| ''sticky_alt=1'' || Changes the behaviour of the Alt key to match Unix practice (Meta key). 
|-
| ''verbose=1'' || Enable debugging while loading and starting kernel; verbose=2 is much more verbose. 
|-
| ''vm_sanitychecklevel=&lt;n&gt;'' || Enable debugging of VM Server. 
|}

== Booatloader commands ==

Some bootloader commands (to be extended):
{| class="wikitable"
| ''menu'' || Shows the Menu. 
|-
| ''edit'' || Edit a boot menu option before executing it. 
|-
| ''ls'' || Lists the files present on the root device. 
|-
| ''boot'' || Boots the kernel. 
|-
| ''load_mods'' || Loads specified modules by path; wildcard ("*") searches in the path are accepted. 
|-
| ''multiboot'' || Boots the kernel with loaded modules; ''boot -s'' will stop before running optional services. 
|}</text>
      <sha1>bavsiuwlbuh087y4ft2tvriwghi45i2</sha1>
    </revision>
  </page>
  <page>
    <title>Running Multiple Operating Systems</title>
    <ns>0</ns>
    <id>145</id>
    <revision>
      <id>271</id>
      <parentid>269</parentid>
      <timestamp>2021-09-10T20:35:46Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>rm now-redundant header</comment>
      <origin>271</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5403" sha1="h9qyl8iq7vo0mwokq1onw26jlietl17" xml:space="preserve">== Booting MINIX 3 Directly ==
MINIX 3 uses a close derivative of [http://netbsd.gw.com/cgi-bin/man-cgi?boot NetBSD boot loader] and [http://netbsd.gw.com/cgi-bin/man-cgi?mbr+8 MBR boot code]. Just as with NetBSD, it can coexist on a hard disk with installations of NetBSD, Windows, or Linux; by installing the ''extended'' boot code, it is possible to choose one or another partition and then boot the corresponding operating system without disturbing the others.


== Using GRUB 2 to boot MINIX 3 ==
GRUB 2 stores its configuration in a file called ''grub.cfg'' (usually ''/boot/grub/grub.cfg'') but you shouldn't edit it directly as it is generated with the information given in ''/etc/default/grub'' and the files in ''/etc/grub.d''.

To boot MINIX 3 with GRUB 2 there's two alternatives:
=== add a menu entry for loading the MINIX bootloader ===
Edit ''/etc/grub.d/40_custom'' (you will probably have to be root to do so) and add the following code:

&lt;pre&gt;
menuentry "MINIX 3" {
        set root=(hdX,Y)
        chainloader +1
}
&lt;/pre&gt;

Here are some examples of GRUB's naming convention for the disks and partitions:

* (hd0,1) - first primary partition on first hard disk
* (hd0,2) - second primary partition on first hard disk
* (hd0,3) - third primary partition on first hard disk
* (hd0,4) - fourth primary partition on first hard disk
* (hd1,1) - first primary partition on second hard disk
* (hd1,2) - second primary partition on second hard disk
* and so on

&lt;!&gt; Note: GRUB 1 and GRUB 2 have different naming conventions for partitions.

Alternatively, if you want to use GRUB to boot MINIX directly:

=== add a menu entry for MINIX ===
The entry should have this shape:
&lt;pre&gt;
menuentry "Minix Latest" {
        set root=(hd0,3,1)
        multiboot /boot/minix_latest/kernel rootdevname=c0d0p2s0
        module /boot/minix_latest/mod01_ds.gz
        module /boot/minix_latest/mod02_rs.gz
        module /boot/minix_latest/mod03_pm.gz
        module /boot/minix_latest/mod04_sched.gz
        module /boot/minix_latest/mod05_vfs.gz
        module /boot/minix_latest/mod06_memory.gz
        module /boot/minix_latest/mod07_tty.gz
        module /boot/minix_latest/mod08_mfs.gz
        module /boot/minix_latest/mod09_vm.gz
        module /boot/minix_latest/mod10_pfs.gz
        module /boot/minix_latest/mod11_init.gz
}
&lt;/pre&gt;

If your disk is configured as a native SATA (AHCI) device, you will need to include the line ''set ahci=yes'' in the entry.


=== [optional] un-hide the boot menu on startup ===
Edit ''/etc/default/grub'' and change ''GRUB_HIDDEN_TIMEOUT=0'' to ''# GRUB_HIDDEN_TIMEOUT=0''.
(You can also press ''shift'' during GRUB's startup to show the boot menu.)

=== generate new grub.cfg ===
Run '''''grub-mkconfig''''' as root to rewiew the new configuration.
Run '''''grub-mkconfig -o /boot/grub/grub.cfg''''' as root to overwrite your old ''grub.cfg'' with the new configuration. 
(change the path to your ''grub.cfg'' if it differs from the one given above)


== Using GRUB 0.9x (GRUB1) to boot MINIX 3 ==
To have GRUB1 boot MINIX, you can just add the following lines to your GRUB config file (typically ''/boot/grub/menu.lst''):

&lt;pre&gt;
title Minix
rootnoverify (hdX,Y) # (hdX,Y) is the disk and partition where you install Minix
chainloader +1       # tells GRUB to call Minix's boot loader
&lt;/pre&gt;
Here are some examples of GRUB's naming convention for the disks and partitions:

* (hd0,0) - first primary partition on first hard disk
* (hd0,1) - second primary partition on first hard disk
* (hd0,2) - third primary partition on first hard disk
* (hd0,3) - fourth primary partition on first hard disk
* (hd1,0) - first primary partition on second hard disk
* (hd1,1) - second primary partition on second hard disk
* and so on

&lt;!&gt; Note: GRUB 1 and GRUB 2 have different naming conventions for partitions.

== Using MINIX3 CD-ROM ==
If you don't want to use a multiboot loader, you can use the MINIX 3 CD-ROM to boot MINIX.

Don't forget to change the ''Boot Order'' in your BIOS if necessary. You want to boot from the CD before booting from disk.

* Insert the MINIX 3 CD-ROM and boot
* Stop at the MINIX 3 boot monitor (pressing space)
* Type 4 to drop to boot prompt
* Now type &lt;small&gt;(assuming a US keyboard, so '':'' is on the key right to L)&lt;/small&gt;:
&lt;pre&gt;
dev hd0i:
&lt;/pre&gt;
to boot from the operating system image file on BIOS drive 0, first MINIX sub-partition. If your installation is complex or if you are unsure, use:
&lt;pre&gt;
dev
&lt;/pre&gt;
to list all the recognized partitions.

* Then type &lt;small&gt;(again assuming US keyboard, so ''*'' is shifted 8 key, ''_'' is the shifted key right to 0, and ''/'' is at lower right)&lt;/small&gt;:
&lt;pre&gt;
load_mods /boot/minix_latest/mod*
multiboot /boot/minix_latest/kernel rootdevname=c0d0p0s0
&lt;/pre&gt;
assuming you want to boot the ''latest'' image of MINIX and to use the root file system found by MINIX at controller 0, drive 0, partition 0, subpartition 0; append
&lt;pre&gt;
ahci=yes
&lt;/pre&gt;
if your system uses [[SATA]] disks; any other [[Boot Monitor|boot monitor]] parameter can also be appended.

== Archives ==
MINIX used to have other ways to coexist with other operating systems, and many people wrote about it. You can find some pointers on [[:releases:3.2.0:usersguide:multipleoperatingsystems|the previous version]] of this wiki page. However, much of it is outdated and does not apply directly to current versions of MINIX3.</text>
      <sha1>h9qyl8iq7vo0mwokq1onw26jlietl17</sha1>
    </revision>
  </page>
  <page>
    <title>Manual Pages for Administrators</title>
    <ns>0</ns>
    <id>146</id>
    <revision>
      <id>400</id>
      <parentid>264</parentid>
      <timestamp>2022-02-07T18:01:05Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix links</comment>
      <origin>400</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2884" sha1="c3jllsd98bqiwgjpn1sy36k4xljy9kz" xml:space="preserve">* [[Manual Pages|add_route(8)]] - configure IP routing 
* [[Manual Pages|adduser(8)]] - add a new user to the system 
* [[Manual Pages|backup(8)]] - backup files 
* [[Manual Pages|badblocks(8)]] - put a list of bad blocks in a file 
* [[Manual Pages|boot(8)]] - from power on to the login prompt 
* [[Manual Pages|chown(8)]] - change owner 
* [[Manual Pages|cleantmp(8)]] - clean out a tmp dir 
* [[Manual Pages|config(8)]] - configuring MINIX 3 tasks and servers 
* [[Manual Pages|cron(8)]] - clock daemon 
* [[Manual Pages|dhcpd(8)]] - dynamic host configuration protocol daemon 
* [[Manual Pages|fdisk(8)]] - partition a hard disk [IBM] 
* [[Manual Pages|fingerd, in.fingerd (8)]] - remote user information server 
* [[Manual Pages|ftpd, in.ftpd, setup.anonftp (8)]] - DARPA Internet File Transfer Protocol server 
* [[Manual Pages|getty(8)]] - system login banner 
* [[Manual Pages|halt(8)]] - abruptly stop the system 
* [[Manual Pages|ifconfig(8)]] - configure a TCP/IP device 
* [[Manual Pages|inet, inet.conf (8)]] - TCP/IP server 
* [[Manual Pages|init(8)]] - grandparent of all processes 
* [[Manual Pages|installboot(8)]] - make a device bootable 
* [[Manual Pages|intr(8)]] - run a command with interrupts enabled 
* [[Manual Pages|irdpd(8)]] - internet router discovery protocol daemon 
* [[Manual Pages|mknod(8)]] - create a special file 
* [[Manual Pages|nonamed(8)]] - not a name daemon, but acts like one 
* [[Manual Pages|part(8)]] - partition table editor 
* [[Manual Pages|partition(8)]] - make a partition table 
* [[Manual Pages|pr_routes(8)]] - show IP routing 
* [[Manual Pages|printroot(8)]] - print the name of the root device on standard output 
* [[Manual Pages|pwdauth(8)]] - password authentication program 
* [[Manual Pages|rarpd(8)]] - reverse address resolution protocol daemon 
* [[Manual Pages|rdate(8)]] - set time and date from a remote host 
* [[Manual Pages|readclock(8)]] - read the AT's real time clock 
* [[Manual Pages|reboot(8)]] - reboot the system immediately 
* [[Manual Pages|repartition(8)]] - load a partition table 
* [[Manual Pages|rlogind, in.rlogind (8)]] - remote login server 
* [[Manual Pages|rshd(8)]] - remote shell server 
* [[Manual Pages|screendump(8)]] - write current console screen to standard output 
* [[Manual Pages|serial-ip(8)]] - Serial IP (SLIP or PPP) setup 
* [[Manual Pages|service(8)]] - Start or stop an operating system server or device driver 
* [[Manual Pages|setup(8)]] - Install MINIX 3 on a hard disk 
* [[Manual Pages|shutdown(8)]] - graciously close the system down 
* [[Manual Pages|slip(8)]] - Serial Line IP 
* [[Manual Pages|srccrc(8)]] - compute CRC checksums of the entire source tree 
* [[Manual Pages|sync(8)]] - flush the cache to disk 
* [[Manual Pages|update(8)]] - periodically write the buffer cache to disk 
* [[Manual Pages|usage(8)]] - installing and using MINIX (''Needs updating'')</text>
      <sha1>c3jllsd98bqiwgjpn1sy36k4xljy9kz</sha1>
    </revision>
  </page>
  <page>
    <title>Serial Consoles</title>
    <ns>0</ns>
    <id>147</id>
    <revision>
      <id>265</id>
      <parentid>199</parentid>
      <timestamp>2021-09-10T20:32:35Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>remove redundant header</comment>
      <origin>265</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3698" sha1="ba7mpdqps5a1ypiczjm7vvu2an97pzq" xml:space="preserve">== Introduction ==

With a little configuration, it's possible to use a dumb terminal connected to a minix host. Alternatively, one could connect a PC to a minix host via a null-modem cable and run a terminal emulator program on the PC to act as a dumb terminal.

== Configuring the Minix Host ==

On the minix host edit ''/etc/ttys''. The '''tty00''' and '''tty01''' lines should be edited to look like this:
&lt;pre&gt;
tty00           getty           vt100            on secure
tty01           getty           vt100            on secure
&lt;/pre&gt;

Minix 3.2.1 (as of commit a458e9d) you can append the baud rate to getty (in quotes) if you want to set the speed to something else than the default 9600. For example, to configure tty00 to use a baud rate of 115200, the line should like this:
&lt;pre&gt;
tty00           "getty 115200"  vt100            on secure
&lt;/pre&gt;

Then reboot the system.

== Hardware Setup ==

Connect the terminal or null-modem cable to one of the serial ports on the minix host. Press ''enter'' a couple of times on the terminal and the login prompt should appear. Log in and have fun.

== Using a Terminal Emulator ==

[http://www.gnu.org/software/screen/ GNU Screen] can be used as a terminal emulator on a Linux PC connected to a minix host via a null-modem cable with no setup needed.
&lt;pre&gt;
screen /dev/ttyUSB0
&lt;/pre&gt;
In case you're wondering about ''ttyUSB0'', it's a USB-to-serial adapter. Using ''/dev/ttyS0'' should also work.

You may also use

&lt;pre&gt;
cu -s 9600 -l /dev/ttyUSB0
&lt;/pre&gt;

The '-s' option sets the baud rate, so you can change this to 115200 if you prefer.

== Transfering Files via ZMODEM ==

Files can be transfered over a serial console using the [[Wikipedia:ZMODEM|ZMODEM]] protocol. It's not the fastest method for transfering files, but if you're using a system that isn't connected to the network, then it isn't too bad.

The first step is to install [http://ohse.de/uwe/software/lrzsz.html lrzsz] on your development machine (i.e. non-Minix computer) as well as a terminal program that can use it. This guide assumes you're using [http://code.google.com/p/picocom/ picocom]. Example:
&lt;pre&gt;
emerge lrzsz picocom
&lt;/pre&gt;

Then, create a test file so we have something to try transfering. Example:
&lt;pre&gt;
echo "Hallo, Wereld" &gt; test.txt
&lt;/pre&gt;

Next, start picocom with these options on the development machine, changing /dev/ttyUSB0 to the serial device your target Minix system is attached to.
&lt;pre&gt;
picocom -b 115200 /dev/ttyUSB0 --send-cmd "sz -vv -y"
&lt;/pre&gt;

Once you're logged into the target Minix system over the serial connection, do ''Ctrl+s a'' to initiate a transfer (i.e. hold down the control key, press and release 'a', press and release 's', and finally release the control key). You will be prompted to enter the name of the file you want to transfer. Below I entered the name of the example file (''test.txt'') and pressed the enter key. The transfer should go and end with "*** exit status: 0" Here's what the output looks like:
&lt;pre&gt;
#
'''* file: test.txt
sz -vv -y test.txt
Sending: test.txt
Bytes Sent:     14   BPS:14                             

Transfer complete

'''* exit status: 0
# cat test.txt
Hallo, Wereld
# 
&lt;/pre&gt;

== Gotchas ==

* Logging in via a serial console is handled slightly differently than logging in normally with a keyboard. The user you are logging in as must have a password set. Trying to log into an account without a password will not work.
* Serial connections are slow. If you're doing a ''make build'' or something with a lot of output that you don't care to read, you can redirect '''stdout''' to ''/dev/null'' like this: 
&lt;pre&gt;
make build 1&gt; /dev/null
&lt;/pre&gt;
* Don't set 'ctty 0' for serial debugging.</text>
      <sha1>ba7mpdqps5a1ypiczjm7vvu2an97pzq</sha1>
    </revision>
  </page>
  <page>
    <title>Working with Storage</title>
    <ns>0</ns>
    <id>148</id>
    <revision>
      <id>266</id>
      <parentid>200</parentid>
      <timestamp>2021-09-10T20:33:00Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>remove redundant header</comment>
      <origin>266</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="681" sha1="cqhagh9hpswnuhc9e1c7vvv6a30khwz" xml:space="preserve">To check storage space usage, type:

&lt;pre&gt;
# df -h
&lt;/pre&gt;

This utility will show a table explaining how much space has been used in your storage devices and partitions as well as how much is remaining. '''-h''' prints values in ''human'' format, for more details, see the man page:

&lt;pre&gt;
# man df
&lt;/pre&gt;


If you want to know how large a directory is, you can find out with ''du'':

&lt;pre&gt;
# du -sk /usr/pkg
&lt;/pre&gt;

The ''-s'' option asks for the sum or total space used. The ''-k'' option causes the result to be shown in kilobytes (instead of 512-byte blocks).

For more information, like other options ('''-h''' for example) please refer to the man page: 
&lt;pre&gt;
# man du
&lt;/pre&gt;</text>
      <sha1>cqhagh9hpswnuhc9e1c7vvv6a30khwz</sha1>
    </revision>
  </page>
  <page>
    <title>Setting Root Password</title>
    <ns>0</ns>
    <id>149</id>
    <revision>
      <id>267</id>
      <parentid>201</parentid>
      <timestamp>2021-09-10T20:33:43Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>remove redundant header</comment>
      <origin>267</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="689" sha1="aq5l2jbpd6g9lsz6bxuqez232jamh0a" xml:space="preserve">By default, Minix 3 does not have a root password. That is an obvious security problem, especially if the system is being used for any serious purpose. So, you should set a root password, as soon as possible, unless you're just experimenting on an isolated machine.

To change the root password, log in as '''root''', and run the command ''passwd''. You'll be asked to type a new password. You won't be able to see it, as you type, but don't worry. Type your new password, and hit enter. You'll be asked to retype it, in order to check for typing errors -- once you've done so, hit enter again.

&lt;pre&gt;
# passwd
Changing local password for root.
New password:
Retype new password:
# 
&lt;/pre&gt;</text>
      <sha1>aq5l2jbpd6g9lsz6bxuqez232jamh0a</sha1>
    </revision>
  </page>
  <page>
    <title>Introduction to System Administration</title>
    <ns>0</ns>
    <id>150</id>
    <revision>
      <id>268</id>
      <parentid>202</parentid>
      <timestamp>2021-09-10T20:34:14Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>remove redundant header</comment>
      <origin>268</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="687" sha1="ozrs6pifv07zzh4g4uh66j4xf9kxrqb" xml:space="preserve">Congratulations on installing MINIX 3. Now you have to learn how to administer a MINIX 3 system. Fortunately, we have some help for you in the form of documentation. This page contains some things all newbie superusers should know.

* [http://www.minix3.org/manpages/html8/usage.html Introduction to system administration - usage(8)] 
* [http://www.minix3.org/manpages/html8/adduser.html How to add new users - adduser(8)] 
* [http://www.minix3.org/manpages/html1/passwd.html Setting the root password - passwd(1)] 
* [http://www.minix3.org/manpages/ All the man pages]

For information about Unix systems in General, see http://info.ee.surrey.ac.uk/Teaching/Unix/index.html for example.</text>
      <sha1>ozrs6pifv07zzh4g4uh66j4xf9kxrqb</sha1>
    </revision>
  </page>
  <page>
    <title>File:Part-1.jpg</title>
    <ns>6</ns>
    <id>151</id>
    <revision>
      <id>203</id>
      <timestamp>2021-09-10T07:50:55Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>203</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-10T07:50:55Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Part-1.jpg</filename>
      <src>https://wiki.iberty.cf/images/2/26/Part-1.jpg</src>
      <size>14624</size>
      <sha1base36>78ivdmeqbl0ksfmmyl02xlqqlrwkbg8</sha1base36>
      <rel>2/26/Part-1.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAgEASABIAAD/7QogUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA
AQBIAAAAAQABOEJJTQQNAAAAAAAEAAAAHjhCSU0EGQAAAAAABAAAAB44QklNA/MAAAAAAAkAAAAA
AAAAAAEAOEJJTQQKAAAAAAABAAA4QklNJxAAAAAAAAoAAQAAAAAAAAACOEJJTQP1AAAAAABIAC9m
ZgABAGxmZgAGAAAAAAABAC9mZgABAKGZmgAGAAAAAAABADIAAAABAFoAAAAGAAAAAAABADUAAAAB
AC0AAAAGAAAAAAABOEJJTQP4AAAAAABwAAD/////////////////////////////A+gAAAAA////
/////////////////////////wPoAAAAAP////////////////////////////8D6AAAAAD/////
////////////////////////A+gAADhCSU0ECAAAAAAAEAAAAAEAAAJAAAACQAAAAAA4QklNBB4A
AAAAAAQAAAAAOEJJTQQaAAAAAABtAAAABgAAAAAAAAAAAAAAlwAAAf0AAAAGAHAAYQByAHQALQAx
AAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAH9AAAAlwAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAA4QklNBBQAAAAAAAQAAAABOEJJTQQMAAAAAAeSAAAAAQAAAHAAAAAh
AAABUAAAK1AAAAd2ABgAAf/Y/+AAEEpGSUYAAQIBAEgASAAA/+4ADkFkb2JlAGSAAAAAAf/bAIQA
DAgICAkIDAkJDBELCgsRFQ8MDA8VGBMTFRMTGBEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwMDAwMDAENCwsNDg0QDg4QFA4ODhQUDg4ODhQRDAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwM
DAwMDAwMDAwMDAwMDAwM/8AAEQgAIQBwAwEiAAIRAQMRAf/dAAQAB//EAT8AAAEFAQEBAQEBAAAA
AAAAAAMAAQIEBQYHCAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAABBAEDAgQCBQcG
CAUDDDMBAAIRAwQhEjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0UMHJZJT8OHxY3M1FqKygyZE
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
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACmNwcnQAAAD8AAAAMmRlc2MAAAEwAAAAa3d0cHQA
AAGcAAAAFGJrcHQAAAGwAAAAFHJUUkMAAAHEAAAADmdUUkMAAAHUAAAADmJUUkMAAAHkAAAADnJY
WVoAAAH0AAAAFGdYWVoAAAIIAAAAFGJYWVoAAAIcAAAAFHRleHQAAAAAQ29weXJpZ2h0IDE5OTkg
QWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQAAABkZXNjAAAAAAAAABFBZG9iZSBSR0IgKDE5OTgp
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAABYWVogAAAAAAAA81EAAQAAAAEWzFhZWiAAAAAAAAAAAAAA
AAAAAAAAY3VydgAAAAAAAAABAjMAAGN1cnYAAAAAAAAAAQIzAABjdXJ2AAAAAAAAAAECMwAAWFla
IAAAAAAAAJwYAABPpQAABPxYWVogAAAAAAAANI0AAKAsAAAPlVhZWiAAAAAAAAAmMQAAEC8AAL6c
/+4ADkFkb2JlAGQAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQ
DAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAEHBwcNDA0YEBAYFA4ODhQUDg4ODhQRDAwMDAwR
EQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM/8AAEQgAlwH9AwERAAIRAQMRAf/d
AAQAQP/EAL0AAQABBQEBAQAAAAAAAAAAAAAGAgQFBwgDAQkBAQACAwEBAAAAAAAAAAAAAAABAwIE
BgUHEAABBAEBBAUFDAcHAgcBAAACAAEDBAUSERMGB9Eik1QVITIUlBYxQULSI3Oz1FU2VghRUmJ0
tDcYgbIzQyQ0dWFTcXKCkmNEJhcRAQABAwAGBgYHCAIDAQAAAAABEQIDMVESUgQUIZEiMpITQXFC
stMW8LFiczQFBqFygqLC4iMzgdJh8lOD/9oADAMBAAIRAxEAPwDpxc+zEBAQEBAQEBAQEBAQEBAQ
EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQf//Q6cXPsxAQ
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
EBAQRfiXgqfI5urxBh8rLhM9WrlSO0EUdiKeqZtJuZoZW62iRtcRgcZhqPzhJXY8tI2ZjatKIuXI
yqVl78mds28oWQlyZ2rterZAp56oVpHeA49z1d1rr6R/0/8Ah9YVfHGdFKdHrRRj6HJviChlWxlH
PWq2CbCyY6TItHVKaX0i7NPJE4uz6JACXaE4x6essp4q2YrTp2vpcUTjPcC17+DwuKx12XEjgJ61
jGzQiErj6JEUUQEMrEJBpLrrWszUumZiu0miN2uR+LnKO8+RKXPPJcluZK3UqWxnK8QEe2tNGUIb
p4YvR92w7sQ0FvNZq6OL9FOz6/6kUXU3JrElQyGOgyVqKhkMNVw8kbtG8gyUJDlrXRkEQJp45JZD
cR0xEZeaOkNOPNTMxMx02yUW0XIbhKODMQNNO0OWxlPFsI6W3A0o442mjZ2IXkk9GqlJrHSW4HVq
Uzxc9HRompRSXIvCy05BsXBPIPbrXIZwo0oq4FVjkiEHphE0EgyBYn3uvrERiQ6N1Gp5ua6Oj1/1
FGW4a5WY3A2obUVySacKl+rM+6hhA3yM0ExmMcIxxxNH6KEcUYDp0ftKL+K2qdHdnaKLDjHgHMFw
Fwtwxw/NIU2DvYYGv/ItJFXx5xidnTK7RmcYBvd11tfm6CWOLLEXXXT6akwot8l69u7FlbGamsZ3
0mzbsXrFWpPGZWYYa7aa0kZQxlXhqQDXPYRB8pr3m8WccXTop2fWUe/D/J3H4mpYqllLFoJ8G/Dz
mYxibV99PM0m1m2PK3pTj5unqalF/FVp0e1tFFNbk+EErW/HLBZAbGMtDa3MLdbFQHWBnDZo0yxS
Fq/VJTPFRu9Ha9O+UW1XkhXoY08fjM/coQXqL4zNPFHXIrVZ55pR2PIB7mYBtTwjKPwD83UAqLuK
rNZj937JRlv/AOVYcMcOOr2JIKkebq56GMGZtBU3ieOuL+7u9kAjq89YzxMzNaezsFFPCXKytgOJ
faCbJy5G+NOTHxyyQV4ZZIpJRlc7csAAdudt1GIyS/tlo3h6lObiduKUIhOVqpEBAQEBAQEBAQEB
AQEBB//Q6cXPsxAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ
EBAQEBAQEBAQEBAQEBAQEH//0enFz7MQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ
EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBB//9k=
      </contents>
    </upload>
  </page>
  <page>
    <title>File:Part-2.jpg</title>
    <ns>6</ns>
    <id>152</id>
    <revision>
      <id>204</id>
      <timestamp>2021-09-10T07:56:05Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>204</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-10T07:56:05Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Part-2.jpg</filename>
      <src>https://wiki.iberty.cf/images/8/87/Part-2.jpg</src>
      <size>12655</size>
      <sha1base36>t4zv1kpk0j8dyj224oa90s3i36v2a8c</sha1base36>
      <rel>8/87/Part-2.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAgEASABIAAD/7QkOUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA
AQBIAAAAAQABOEJJTQQNAAAAAAAEAAAAHjhCSU0EGQAAAAAABAAAAB44QklNA/MAAAAAAAkAAAAA
AAAAAAEAOEJJTQQKAAAAAAABAAA4QklNJxAAAAAAAAoAAQAAAAAAAAACOEJJTQP1AAAAAABIAC9m
ZgABAGxmZgAGAAAAAAABAC9mZgABAKGZmgAGAAAAAAABADIAAAABAFoAAAAGAAAAAAABADUAAAAB
AC0AAAAGAAAAAAABOEJJTQP4AAAAAABwAAD/////////////////////////////A+gAAAAA////
/////////////////////////wPoAAAAAP////////////////////////////8D6AAAAAD/////
////////////////////////A+gAADhCSU0EAAAAAAAAAgAAOEJJTQQCAAAAAAACAAA4QklNBAgA
AAAAABAAAAABAAACQAAAAkAAAAAAOEJJTQQeAAAAAAAEAAAAADhCSU0EGgAAAAAAbQAAAAYAAAAA
AAAAAAAAAJcAAAH9AAAABgBwAGEAcgB0AC0AMgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAA
AAAAAAAB/QAAAJcAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAOEJJTQQUAAAAAAAE
AAAAAjhCSU0EDAAAAAAGZAAAAAEAAABwAAAAIQAAAVAAACtQAAAGSAAYAAH/2P/gABBKRklGAAEC
AQBIAEgAAP/uAA5BZG9iZQBkgAAAAAH/2wCEAAwICAgJCAwJCQwRCwoLERUPDAwPFRgTExUTExgR
DAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwBDQsLDQ4NEA4OEBQODg4UFA4ODg4U
EQwMDAwMEREMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDP/AABEIACEAcAMBIgAC
EQEDEQH/3QAEAAf/xAE/AAABBQEBAQEBAQAAAAAAAAADAAECBAUGBwgJCgsBAAEFAQEBAQEBAAAA
AAAAAAEAAgMEBQYHCAkKCxAAAQQBAwIEAgUHBggFAwwzAQACEQMEIRIxBUFRYRMicYEyBhSRobFC
IyQVUsFiMzRygtFDByWSU/Dh8WNzNRaisoMmRJNUZEXCo3Q2F9JV4mXys4TD03Xj80YnlKSFtJXE
1OT0pbXF1eX1VmZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3EQACAgECBAQDBAUGBwcGBTUBAAIRAyEx
EgRBUWFxIhMFMoGRFKGxQiPBUtHwMyRi4XKCkkNTFWNzNPElBhaisoMHJjXC0kSTVKMXZEVVNnRl
4vKzhMPTdePzRpSkhbSVxNTk9KW1xdXl9VZmdoaWprbG1ub2JzdHV2d3h5ent8f/2gAMAwEAAhED
EQA/APTkklzf1z+tOV9XWYbsfHryDlOsa4WOc3bsDXDbsa795Z8YmRoLnpEl5xT/AI0eqWXV1np+
OBY9rCfVs03EN/cW+7625jZJx6gG8nc7+5Sjlsp2A+1iyZ8eMgTNcW2hL1CDkfa4/VhWTH+E3c/2
FzrfrZmuIH2eqDGu53f5IXQ/rf1Tq7M14xcer7FZ6ZJsfBB3bXfQ/kITwTxjinwxiOspREUY+Yx5
L4LlXQRler0hdnlxYDSHAg6h8bY9/f6e7/MR6vV9MettNms7J28+2N3u+isIdS602plrqMNrztse
71nFkPIY/ZY2v9J/wXt/0ayvrF9d+rdEyKKHYWPa6+s2T6j4AB2D6LEyPDM8MJ45HtGcTJk4ta4Z
DzjID7XtEO77T7fs5rGvu9QE6SPo7D/WXnX/AI6nVf8Ayux/+3bP/SaX/jqdV/8AK7H/AO3bP/Sa
k9jJ4fam3vweoncAaC4d4fAJ7cqTv2jtG30C6PcTvie21ec43+M7rFFDa7MOnIsH0732Oa55/fcy
mplbf7KL/wCOp1X/AMrsf/t2z/0mj7E+wVb6PX6u39Lt3SfozEdvpKS82/8AHU6r/wCV2P8A9u2f
+k11P1O+suT9YsTJvyKGY7se4VBtbnOBBY23cd4b+8mSwziLNJt//9D05YP1r+qo+sjMRpyzifZH
PdIrFm7eGt7vr27dq3lF+/Y7049SDs3cT+buWfGRibG654Wr/FW2u2uz9quPpva+PQGu0h0fzy1r
vqraLqmV3ixljj6zi0A1s2uLXivc71d9uyr8z/SLcceqA+1tDxOh3PaYH8mHe53/AEEz/wBpB7zU
ygAkavc4kgSPzW+z+QphnyjaQ/BjyYMeSjOPFW2pckfVGCD9s4/4Mf8ApRA6T9TrujV5jqOouf8A
aXm549Fg4Dv0f6V72fnfSXSU+uWfrAY188VkkR8XBqV4tNcUhpcS2Q+YLZHqDT+QmyzTl6Z8M4/u
zhCcP8WceFEOXxwvgBje/DKcTp/W4nJx+k9UtoqtvzHUXPrabKDXU/0yRvdTvYPTs9J/+EYszrn1
Dt61dTdf1RzX0sNYPoNMgnf+a+v6K6Ld1f8Acxjrr738f5n+v/ntF3ViIa3HBgSS5/Ok+0D/AL+m
giJuMMMD3hiw45f48IRmvEADdzP96eSY/wAWcni//Gob/wCWzv8A2HH/AKWS/wDGob/5bO/9hx/6
WXdUHKIP2gVtOm30yT2927eG/nIqd7+Tv+C6ngP/ABqG/wDls7/2HH/pZL/xqG/+Wzv/AGHH/pZd
+kl7+Tv+CKeA/wDGob/5bO/9hx/6WXR/VX6sj6uY2RjjKOX9otFu4sFe2GNq2wH2bvoLcSTZZZyF
Epf/0fTkl8uJLOXP1GkvlxJJT9RpL5cSSU/UaS+XEklP1GkvlxJJT9RpL5cSSU/UaS+XEklP/9k4
QklNBCEAAAAAAFUAAAABAQAAAA8AQQBkAG8AYgBlACAAUABoAG8AdABvAHMAaABvAHAAAAATAEEA
ZABvAGIAZQAgAFAAaABvAHQAbwBzAGgAbwBwACAANgAuADAAAAABADhCSU0EBgAAAAAABwAEAAEA
AQEA/+ICQElDQ19QUk9GSUxFAAEBAAACMEFEQkUCEAAAbW50clJHQiBYWVogB88ABgADAAAAAAAA
YWNzcE1TRlQAAAAAbm9uZQAAAAAAAAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1BREJFAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKY3BydAAAAPwAAAAyZGVzYwAA
ATAAAABrd3RwdAAAAZwAAAAUYmtwdAAAAbAAAAAUclRSQwAAAcQAAAAOZ1RSQwAAAdQAAAAOYlRS
QwAAAeQAAAAOclhZWgAAAfQAAAAUZ1hZWgAAAggAAAAUYlhZWgAAAhwAAAAUdGV4dAAAAABDb3B5
cmlnaHQgMTk5OSBBZG9iZSBTeXN0ZW1zIEluY29ycG9yYXRlZAAAAGRlc2MAAAAAAAAAEUFkb2Jl
IFJHQiAoMTk5OCkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFla
IAAAAAAAAAAAAAAAAAAAAABjdXJ2AAAAAAAAAAECMwAAY3VydgAAAAAAAAABAjMAAGN1cnYAAAAA
AAAAAQIzAABYWVogAAAAAAAAnBgAAE+lAAAE/FhZWiAAAAAAAAA0jQAAoCwAAA+VWFlaIAAAAAAA
ACYxAAAQLwAAvpz/7gAOQWRvYmUAZAAAAAAB/9sAhAAGBAQEBQQGBQUGCQYFBgkLCAYGCAsMCgoL
CgoMEAwMDAwMDBAMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMAQcHBw0MDRgQEBgUDg4OFBQO
Dg4OFBEMDAwMDBERDAwMDAwMEQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCACXAf0D
AREAAhEBAxEB/90ABABA/8QAxAABAAICAwEAAAAAAAAAAAAAAAQFAwgBBgcCAQEAAwEBAQEAAAAA
AAAAAAAAAQIDBAYFBxAAAQQAAwMGCAYOCQQDAAAAAgABAwQREgUiEwYhMlIUBxgx0tPjlKRWF0Ij
VBVVFkFRYnKSsjNzk7N0NTYIYXGColMkNLR1keJDg4FjwxEBAAIAAwMHCAgEBAcBAAAAAAECERID
YQQUITFRUhMVFpGhIjJikqIFQXGBQnKyMwaxU2NzwcLiF/DR4YLSIzST/9oADAMBAAIRAxEAPwDZ
xfAXFAICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC
AgICAgICAgICkf/Q2cXn1xAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQV8+qlHxBT0rds42qtmy8uPKL
15IQYcPut/8A3VaK+jiPm/xFo2n2Or27G7kFgKV2AyGMZCyAUpizhEJlyC8jipikzzD4k4p0GK71
M7WEz2Bps+Q3jeyeDtC0jDu97y8zNmFOznDERqvGWilTqy2LQPJYiadyrhNJEMZSPEMhFkbJG5tl
zSsG1mUzpSJbcRaSVsqYSu87HJCLvHI0ZTRC5HEMrjuykFhLMLH8EuioyTzjFpfEdezwtR1+6zVY
rVaGzIDZpMrzCzsA4NmN8xZRwHMSWphaawIUXHmidavR2ZHrw1rMVKFyCXeyTywb94tzk3jSMLFg
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
ItyMzNyMzKg5QEBAQEBAQEBAQEBAQEBAQf/U2cXn1xAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQ
YrVmOrWmsyYvHCBSEzcruwtjg39LqYjGRG0WtLX06Pf5utTuVizmfF2lmfOQ/wBjHdt9yKm84ylN
cRJnEmxF2wdn8Ds/2FUV2hkcUMunSuZSaee6Ez8Jwu2aEsfhbD7t36cZq9+npQslQEBAQEBAQEBA
QEBAQEHW+OeO9J4M0+pqOqxynTs2RqkcLMRRuQGbG4u7Zh2MNnaWulpTecIGTg7WNJ12pNrun247
bXibmHmeKIMWiiIcfizwxMxwHbMk1azXkkdgWQICAgICAgICAgICAgICAgIP/9XZxefXEBAQEBBA
1/VPmnQtR1Xdb7qFaWzuccufdA55c2D4ZsPDgrUrjMQPD2/mrfD+GfXPMru4HajM571b+zPrnmU4
HaZjvVv7M+ueZTgdpmO9W/sz655lOB2mY71b+zPrnmU4HaZjvVv7M+ueZTgdpmdupds123TgtDo0
QDPGMjC9kndmNscPyS2j5XjHreZ8nU+cVraa5Z9GWb3uXvoiH0k/JJ3V7XmU77p1Z8p73L30RD6S
fkk7q9rzHfdOrPlPe5e+iIfST8kndXteY77p1Z8p73L30RD6Sfkk7q9rzHfdOrPlPe5e+iIfST8k
ndXteY77p1Z8p73L30RD6Sfkk7q9rzHfdOrPlPe5e+iIfST8kndXteY77p1Z8p73L30RD6Sfkk7q
9rzHfdOrPlG7XL30RD6Sfkk7q9rzHfdOrPldNl/moeOU434ZxcCcXfrnhyvh/grHgNr7EXxjFY8O
/wAx02t6mNCLh4YDIDk3h23JthscMGhW+7fKZ1b5Yth9jn3ve40KZ5jM7T70NR+ioPSD8kvoeGbd
ePdfK8QU6lvKe9DUfouD0g/JKfDNuvHuniCnUt5XV7PbtR1SyGlSU4a5x2f83HNYKNn6uWZgzPFl
djkEPA/NXJp/KK5svaRFuWPSr/1d99+tWmfs7WryerOb1naPejqD8vzXA+PLj1k/JLq8M268e64P
EFOpbynvQ1H6Kg9IPySeGbdePdPEFOpbyur8S9u0Gh6rFYk0yOW68LxTVY7EmJRO+eMnd4smwebD
84S5d5+URpRlm+M/hd+57/OvGMUmtetivtL7Xr9/Tq10dHhjGzG0jRlZN3Zi+w7tEt9L9u2vWLZ4
9L2XLr/O6ad5rlmcs9KV70NR+ioPSD8kr+GbdePdZeIKdS3lRtT7Xr1DTrN09IhkGtGUhANk2d2H
7DO8Spq/t21KzbPHo+y10fnddS8Vyz6U9Lpnerf2Z9c8yvl8DtfZzHerf2Z9c8ynA7TMd6t/Zn1z
zKcDtMx3q39mfXPMpwO0zHerf2Z9c8ynA7TMd6t/Zn1zzKcDtMx3q39mfXPMpwO0zHerf2Z9c8yn
A7TMd6t/Zn1zzKcDtMx3q39mfXPMpwO0zHerf2Z9c8ynA7TM6j2l9tQcc6NU0uXRnoxV7YWpJBs7
wiERIHBsYxyu7Hztr71baO7ZJxxRMrfhjt/0HhjTA03ReDhrVhwcy65jJIWGGeU9ziZ/0uqX3Sbz
jNk4rfvVv7M+ueZVOB2mY71b+zPrnmU4HaZjvVv7M+ueZTgdpmO9W/sz655lOB2mY71b+zPrnmU4
HaZjvVv7M+ueZTgdpmO9W/sz655lOB2mY71b+zPrnmU4HaZjvVv7M+ueZTgdpmO9W/sz655lOB2m
Y71b+zPrnmU4HaZjvVv7M+ueZTgdpmO9W/sz655lOB2mZmo/zRPav1av1bydZmjhz9cxy7w2DHDc
8uGKidxwjnMXvD+FcCwiBB//1tnF59cQEBAQEFDx9/A3EX/G2/1JLTS9ePrGkDeBl9xRygICAgIP
Z9B/cen/ALNF+Iy7K80PHb1+rb8Vk5WYCAgICAgICDlvCyDw61/qp/zh/jOuKXtqerH1Owdnkkoc
SAUWXevCYhnxccTcRxfDlw5Vvu+v2ObUwx7PTvf3XJv+jGrSKTyZ70q97fgTiRndvnCjyf8A0zeO
vh/7gT/K+Nl4Yp17eSD6i8SfSFH9DN46f7gT/K+M8MU69vI6tV7DtVPiG5rFy3SJynI69co5DjfF
mfeOzE2G1jlB3Jcc/u/T7TtOyzTPpZc3o1v/AJn0e7J7KNOLzXD0c33srtP1F4k+kKP6Gbx12f7g
T/K+N87wxTr28iIPCnEb6qenddpZgrhZ3m6mwdjMgy4Z/uFp47nJm7L72X1keGaY4Z7eSEfXuyTU
tbqdXuXaOYeWGcYZt5G/2xfP/ddcm8fveurXC2j8bq3X5H2Fsa6lvw4ejZL0/s54ipUK9MNRpENe
MYmJ4ZsXYGwxfbWmn+/MlYrGl6vtstX9uUvebTe3pTm5kj6i8SfSFH9DN46v/uBP8r42fhinXt5H
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
BNpdh9kszlp0bxyC32MJGyuHRVp1o/iYPk+CNXn02PSrFyDqOnVrNbTDAC3pvYgOuBWPgtuo5H/J
/lS2tnmp2sY49IvamiSwazDfeUXCLTgoPGzPi5DIx5vvVnN8Yw2pW6zQICAgIOCbMJD9tnb/AKoO
p8L8N8TaHp+n6dv9Mmq0Ihh3rVpgnMRHBnzbxxYn+Fsra962mZ5RiHgS9DQ1OvDqAHLqzBauSSxv
gWoxyCe+ZhdssJiARFE3NEBIdrPmntoxjk5vyhFwAwcQ/OLjVOCW02oTGYzFYGfMxuEe3ud3vBzC
ZR5wH8NTOtyYD6t9nwXdK0vTLNvGCjFdhnIBwIxuxHFiOLvlcN5m5cyiNbCZkYb/AAPrGrzT2NYu
VTkenHUgjgikGN3gtBZA5MTzbZRsMgA45R5hKY1YjmGXTOCr2mw9bpPSr6w07TsABK9ZxaIod2ZE
Tzlslmz5tktkRyJbViZ2D61Lh7Uq3AHEen5+vahfi1GcWgjcc0ltjNowB3J+RyyjtKIvE3ifojAf
M/CWuX4prd23XbUXqx0qwRDLHC8AyjNIM+Bb3NNl3Z7o9gE7SI5uYZdH4MtUbUcpTVwhjvjqIw14
yAWLqT1DjbMRcmOUxPnFtZlFtWJ8n+Ix2eBbVmQmlugMTHqrxZY3zZNVDDaxLDNEZH4OeOVTGtEf
R1fhH19TtSGWPUQtQfO1c689dnA+r7yGoVSQTbHPu5AkIhw2w2ecnaxzfQJWm8K2q+rQapZthLZ3
V5rQgDiDy3jhP4vF3cY4hrsDZto+cq21ImMPqFlw3pBaNw/p2klK0xUK8dd5mbKxPGLDmwxfDFUv
bNaZFkqggICAgICAgICAgICAgICAgICAgICAgICD/9DZxefXEBAQEBAQEBAQEBAQEBAQEBAQEBAQ
EBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQf//R2cXwFxQCAgICAgIC
AgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApH/
2Q==
      </contents>
    </upload>
  </page>
  <page>
    <title>Disk Partitions</title>
    <ns>0</ns>
    <id>153</id>
    <revision>
      <id>205</id>
      <timestamp>2021-09-10T07:58:06Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import diskpartitions</comment>
      <origin>205</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11535" sha1="beytlssg302j64m02nfydvotlbv1i3i" xml:space="preserve">== Introduction to Partitions ==

When the IBM PC was first launched, it came with a simple disk operating system called DOS, provided by Microsoft. For the PC-XT and its hard disk, IBM made a decision that a PC might ultimately have up to four operating systems installed at the same time. Each operating system would have its own portion of the disk, called a '''partition'''. For this reason, the first sector of each disk on a PC, called the '''MBR''' (Master Boot Record), contains a table with four entries, each giving the starting and ending locations of the four partitions.

The order of the four entries in the MBR need not correspond to the actual order of the partitions of the disk, and there may be gaps between the partitions and before the first one and after the last one. Some thought reveals that in the worst case, a disk may have as many as nine regions: four partitions and five gaps, like this.

[[File:Part-1.jpg]]

It is also possible for a single operating system to use multiple partitions. For example, a user might decide to partition the disk with two partitions, one for the operating system and one for user data. This arrangement makes it easy to back up user data without having to back up the operating system. It also makes it easy to install a new version of the operating system without losing any user data.

It was not too long before IBM and Microsoft decided that four partitions was not enough. Rather than simply make the partition table in the MBR bigger (which would not have been backward compatible with previous versions of MS-DOS), it was decided that (normally only one) partition could be marked as EXTENDED, meaning that it contains one or more subpartitions, called '''logical drives'''. A partition that is not an extended partition is called a '''primary partition'''. Together, the primary and extended partitions comprise the four '''top-level partitions'''.

Unfortunately, nearly all disk partitioning software displays the primary and extended partitions, and logical drives in such as way as you might think they are all equals. This is definitely not true and is quite confusing as each logical drive is a subpartition of some enclosing extended partition. In addition, some partition management software displays partitions in the order they appear in the MBR, rather than in order of their disk addresses.

MS-DOS and Windows are normally configured with one primary partition and optionally one extended partition. In most cases, the primary partition is called C: and the extended partition, if present, contains D:, E:, etc., depending on how many logical drives have been created there. The advantage of putting D:, E:, etc inside an extended partition, instead of allocating each one its own primary partition, is that it leaves MBR partition table slots available for other operating systems. Below is an example disk showing one primary partition (C:) and one extended partition containing two logical drives (D: and E:).

[[File:Part-2.jpg]]

It is important to realize that the entire concept of drive letters, like C:, is an MS-DOS concept, later taken over by Windows. No variant of UNIX, such as BSD, Linux, or MINIX 3, uses drive letters at all. All UNIX systems simply deal with the four top-level partitions in the MBR.

== Partitions and MINIX 3 ==

When installing MINIX 3, you have to deal with two resources: partitions and free disk space. MINIX 3 needs one primary partition (i.e., one MBR table slot) as well as at least 700 MB of free contiguous disk space. Logically, one of four conditions holds:

{| class="wikitable"
! Condition !! One MBR slot is free !! at least 700 MB contiguous disk free
|-
| 1 || true  || true
|-
| 2 || true  || false
|-
| 3 || false || true
|-
| 4 || false || false
|-
|}

Each case must be dealt with separately. The first one is easy. MINIX 3 can be installed immediately. During setup, it will ask if it can take the disk space and you will agree. The second case is harder. Some existing partition must be deleted or resized to free up 700 MB of disk space. The third and fourth cases require deleting a partition to free up an MBR table slot. Additionally, one of the remaining partitions may have to be resized to free up enough disk space. Note that if a partition is deleted, all data on it will be lost.

A common case that many beginners face is the second one: the entire disk consists of a single primary Windows partition, C:. There are three available MBR table slots for MINIX 3 to choose from, but there is no free disk space. The only solution is to resize the C: partition to free up at least 700 MB of space.

To delete or resize a partition, you need a program called a '''partition editor'''. MINIX 3 has such a program, called '''part'''. You have to be careful using it since one typing error can wipe out your disk.

Complicated as all this may be, there is one more complication we have to explain. Each primary partition or logical drive contains one file system. Extended partitions do not contain file systems--they just hold logical drives. Imagine a car trunk (a disk) that can hold up to four boxes (partitions), each of which can contain a fragile bowl (file system) or one or more smaller boxes that each contain one bowl. An outer box with two bowls (a primary partition with two file systems) is not permitted.

Many different kinds of file systems exist. Windows alone supports four types: FAT-12, FAT-16, FAT-32, and NTFS. MINIX 3, Linux, BSD, and other UNIX systems each have one or more supported file system types. If all you want to do is delete an entire partition and free up all its disk space, then the type of file system it holds is irrelevant. The problem comes in when you want to resize (e.g., reduce) a partition to free up some disk space at the end. In order to resize a partition, the partition editor has to understand the internal layout of the file system on it and different partition editors understand different file system types.

In summary, you have to make sure you have a free partition (MBR table slot) and at least 700 MB of contiguous disk space. If you already have this, you can start installing MINIX 3 now. If you can achieve this situation by just deleting an existing partition, you can also start installing MINIX 3 now since the setup procedure allow you to delete partitions. However, if you first have to resize a partition, you need a partition editor that can resize the partition you have selected for reduction and you have to do this before starting the MINIX 3 installation using a partition editor that can handle the type of partition you want to resize.

== How to Partition Your Disk ==

Before starting to manage your disk partitions, be sure to '''back up your files''' to CD-ROM or DVD to prevent losing them all in the event something goes wrong during the partitioning process. It has been known to happen. In what follows, we will assume you are running Windows, since  most people running BSD or Linux have already encountered this problem and presumably now know how to partition disks.

What you have to do depends on whether you have enough free space and a free partition.  Keep in mind that the goal is end up with at least one free partition and at least 700 MB of contiguous free disk space.

=== Step 1: Inspect the disk. ===

Determine how many partitions you have and their types as well as their sizes. On Windows, they are most likely NTFS. To find the partition information, please follow the procedure below.

# Click on ''Start &gt; Run''
# Type ''diskmgmt.msc'' in the ''Open'' box
# Give the administrator password if necessary, and click ''OK'' 

=== Step 2: Decide on a course of action. ===

If there is 700 MB of contiguous free space and not more than 3 partitions, you can begin installing MINIX 3 now. Similarly, if there are one or more partitions that you are willing to delete and whose removal will give you 700 MB of contiguous free space, you can also begin installation now.  If all four top-level partitions are in use, you must select at least one for deletion. If there is a free partition (i.e., MBR table slot) but insufficient free disk space and you want to keep all partitions, you have to  select a partition for resizing.

=== Step 3: Defragment the selected partition. ===

If a partition has to be resized to free up enough space, first defragment it to put all the data at the beginning and leave all the free space at the end to make resizing possible. Windows comes with a defragmenting program. The click sequence for starting the disk defragmenter is as follows: ''Start &gt; Programs &gt; Accessories &gt; System Tools &gt; Disk defragmenter''. When the program starts, click on the partition to be defragmented and then click on 'Defragment.' Then defragment the same partition again as a second pass usually finds more fragments.

=== Step 4: Resizing the partitions ===

If you need to resize a partition, you need to find a suitable partition editor that can resize partitions of your chosen type. If you are using Windows Seven or Vista, you should use the built-in partition editor. Some commercial programs exist, but we will focus on free partition editors here.

The process for resizing a partition under Windows Seven or Vista is below:

# Click on ''Start &gt; Run''
# Type ''diskmgmt.msc'' in the ''Open'' box
# Give the administrator password if necessary, and click ''OK''
# Right-click the partition you want to resize, and then click 'Shrink Volume'

If you are using Windows XP or earlier, you will need to use a third-party tool. The main free option is to use a Linux LiveCD that includes GParted, an open-source partition editor. All of the LiveCDs work the same way: You first download a CD-ROM image containing a bootable Linux system. These images files are normally about 700 MB. Then you decompress the file if need be and burn it to a CD as a CD image file. Then you boot the computer and wait until setup completes. The result will be a running Linux system, albeit with nothing installed on the hard disk. Then you have to run the partition editor, ''gparted'', to resize a partition. Detailed instructions for [https://www.mepis.org MEPIS 8.0] are given below, but the others are similar. Again, before using any partition resizer, back up your data to CD-ROM or DVD.

'''Using MEPIS'''

* After the CD-ROM boots, hit ENTER
* In the Login box, use Username=root and Password=root; click on 'Login'
* Wait until the CD-ROM stops (takes several minutes)
* Press Alt+F2 to bring up the 'Run command' dialog.
* Type: gparted in the dialog box
* Click on the disk to resize, usually /dev/sda
* Right click on the partition and select 'Resize' from the menu
* Enter the new size, followed by Enter
* Click 'Resize/Move'
* In the 'Edit' menu, click on 'Apply All Operations' and then click on 'Apply'
* When it says 'All operations successfully completed,' press 'Close'
* Close the gparted window
* Press Control+Alt+Delete
* Select 'Restart Computer'


If you are still having problems, subscribe to the [https://groups.google.com/group/minix3 Google newsgroup] and post your question there. There is a good chance another MINIX 3 user can help you.

== Web Resources ==
* [https://gparted.org/livecd.php GParted Live CD]
* [https://www.mepis.org MEPIS] - A Live Linux CD-ROM that contains GParted
* [https://www.sysresccd.org System Rescue CD] - A Live Linux CD-ROM that contains GParted
* [https://www.ubuntu.com Ubuntu] - Ubuntu install media also contain GParted</text>
      <sha1>beytlssg302j64m02nfydvotlbv1i3i</sha1>
    </revision>
  </page>
  <page>
    <title>Post Installation</title>
    <ns>0</ns>
    <id>154</id>
    <revision>
      <id>206</id>
      <timestamp>2021-09-10T13:09:30Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import postinstallation</comment>
      <origin>206</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6696" sha1="npb9yamiaqb9et52d4lbq8lgafhkgv2" xml:space="preserve">== Setting the Root Password ==
You should set a password for the root account. Type:

&lt;pre&gt;
passwd
&lt;/pre&gt;

Then enter the new password in the prompts (No characters or *'s will appear as you type your password but it IS being entered).

== Setting the Timezone ==
Unix systems always run the clock using UTC time (sometimes named as Greenwich time). You should adjust the ''timezone'' setting to have the dates shown by utilities to be like your wall clock. Type:

&lt;pre&gt;
echo export TZ=Europe/Amsterdam &gt; /etc/rc.timezone
&lt;/pre&gt;

or

&lt;pre&gt;
echo export TZ=America/New_York &gt; /etc/rc.timezone
&lt;/pre&gt;

The timezone will be set when you log in again.

Of course, you should adjust ''Europe/Amsterdam'' according to your location. You can look into the ''/usr/share/zoneinfo'' hierarchy to find the correct name. The general principle is ''continent/city'' or ''ocean/city'', where ''city'' is the English name of the biggest city in the same timezone as you. The city would ideally be in your country, since timezone rules have a strong tendency to vary according to national rules.

== Setting the Host Name ==
You can use the hostname(1) command to manually set the system hostname. For example:
&lt;pre&gt;
# hostname minix.example.com
&lt;/pre&gt;

/!\ When DHCP is enabled, your settings will be overriden by the DHCP client when renewing the lease.

By default, MINIX runs a DHCP client at boot time, to request an IP address from your DHCP server.

In this case, typically you will not know what the IP address will be and so providing a host name for the system has no functional purpose. But, if you arrange for your DHCP server to always assign the same address to your MINIX system, based on the machine's MAC address, then naming the MINIX host has a real purpose, e.g., you can SSH to it from another machine on your network.

The same is true if you disable the running of the DHCP client at system initialization time and instead manually assign a static IP address (see boot(8) for more information). So if you know what the IP address will be and wish to assign a name to your MINIX host, enter the address/name pair into /etc/hosts (see hosts(5) for specific information about the format of that file).

For further information on post-installation network configuration see [[Network Configuration|here]].

== Installing Binary Packages ==

See [[Installing Binary Packages]] on how to install prebuilt packages from the network or from the installation CD. This is one of the first things you should do because the system you get after finishing setup is a barebones system. Using pkgin, you can choose from a large number of packages to tailor the system to your requirements.

== Adding Users ==
Always logging in as root is usually a bad idea, so it is highly recommended to set up at least one other user as soon as possible. For directions on how to do that please see: [[Managing User Accounts]]

== Getting OpenSSH and Logging in Remotely with It ==
[//wiki.netbsd.org/guide/rc/#index4h2 rc.d scripts of additional services]:

The PKGSRC OpenSSH package contains both the client (ssh) and the daemon (sshd).  We recommend installing this, as it allows ssh access from another host, which improves greatly the user experience in the absence of X11.

If you installed MINIX in a virtual machine, please refer to the [[Minix User's Guide|Virtualization]] chapter for your virtual machine monitor of this user guide for further instructions on how to enable network access to the MINIX guest.

To install, start, and automatically start sshd, do these commands, referring to [//wiki.netbsd.org/guide/rc/#index4h2|rc.d scripts of additional services] for explanation:
&lt;pre&gt;
# pkgin update
# pkgin install openssh
# cp /usr/pkg/etc/rc.d/sshd /etc/rc.d/
# printf 'sshd=YES\n' &gt;&gt; /etc/rc.conf
# /etc/rc.d/sshd start
&lt;/pre&gt;

If you want to enable ssh login as root (dangerous), edit /usr/pkg/etc/ssh/sshd_config and change the line that reads &lt;br /&gt;#PermitRootLogin prohibit-password&lt;br /&gt;to &lt;br /&gt;PermitRootLogin yes

== Installing Common Packages ==
A script is available to install about 700 commonly used packages, organized in three sets. To install them, type the following commands and answer Y each time you are asked about a set.
&lt;pre&gt;
pkgin update
pkgin_sets
&lt;/pre&gt;
Note that you don't need to run pkgin update every time you run pkgin. Just before the first use.

== Using Virtual Terminals ==
MINIX 3 supports four virtual terminals. You can switch between them using ALT+F1 through ALT+F4. This could be useful, for example, if you type a command to install many packages and want to do something while it is installing. You can just switch to a different virtual terminal, log in there, and do other work.

== Changing Keyboard Layouts ==
Several keyboard layouts are available. These layouts are loaded from files called "keymaps."

For example, here's how to enable the Swapped Caps &amp; Ctrl U.S. keymap:
&lt;pre&gt;
loadkeys /usr/lib/keymaps/us-swap.map
&lt;/pre&gt;

To make the keymap the default:
&lt;pre&gt;
cp /usr/lib/keymaps/us-swap.map /etc/keymap
&lt;/pre&gt;

For details, see [//www.minix3.org/manpages/html5/keymap.html keymap(5)]. This contains the complete documentation on how to create and configure keymaps. The keymap source code is in ''/usr/src/drivers/tty/keymaps''.

== Running the Test Sets ==
After installing MINIX, you can check the status of your system by running different tests.

=== MINIX POSIX (and more) tests ===
To run the MINIX tests do the following:

&lt;pre&gt;
# cd /usr/tests/minix-posix
# ./run
&lt;/pre&gt;

'''Warning:''' This test suite is extremely extensive, and may take up to several hours to complete, depending on your hardware. The usual run time on current computers (about 2GHz Intel CPUs) is about half an hour.

You might see some warnings, those are fine as long as the test prints "ok" at the end.

After all the tests have been run, a summary will be printed.

=== KYUA tests ===

We have imported the KYUA test suites. At this time we have not yet spent much time trying to get all tests to pass. It is expected that some are marked as broken and/or failed.

Also, not everything which is tried is relevant on MINIX, for example we do not have quota support, which is why all the related tests fail.

Anyway, to see how much MINIX is NetBSD-compatible, you can run the kyua tests as follow:

&lt;pre&gt;
# cd /usr/tests
# kyua test
&lt;/pre&gt;

To see the report, you can use one of the following commands:

&lt;pre&gt;
# kyua report         # text-only report
# kyua report-html    # HTML report
# kyua report-tap     # TAP report
&lt;/pre&gt;

'''Note:''' The KYUA tests are not yet supported on MINIX/arm.

== Recompiling the System from Source ==

See [[Tracking Current]].</text>
      <sha1>npb9yamiaqb9et52d4lbq8lgafhkgv2</sha1>
    </revision>
  </page>
  <page>
    <title>Installation Troubleshooting</title>
    <ns>0</ns>
    <id>155</id>
    <revision>
      <id>208</id>
      <timestamp>2021-09-10T13:22:57Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import installationtroubleshooting</comment>
      <origin>208</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="688" sha1="mmdassrldzj3dy3l6bg1lz55xep3qb1" xml:space="preserve">== Using two disks ==

If your computer has two hard disks on the IDE controller
and you are installing MINIX 3 to the second one, sometimes
there can be a problem booting. This problem occurs if the
second disk does not have a correct boot program in the MBR
(Master Boot Record). To solve this problem, boot MINIX 3 from
the CD-ROM, log in as root, and type:

&lt;pre&gt;
installboot_nbsd -master /dev/c0d1 /usr/mdec/mbr
&lt;/pre&gt;

This command will install a proper MBR on drive 1 and you
should not have any more problems.

'''If you are using only one disk but it don't boot for some reasson''' you can issue the above command too, changing

&lt;pre&gt;
/dev/c0d1
&lt;/pre&gt;

to

&lt;pre&gt;
/dev/c0d0
&lt;/pre&gt;</text>
      <sha1>mmdassrldzj3dy3l6bg1lz55xep3qb1</sha1>
    </revision>
  </page>
  <page>
    <title>OS Data Exchanging</title>
    <ns>0</ns>
    <id>156</id>
    <revision>
      <id>209</id>
      <timestamp>2021-09-10T13:27:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import osdataexchange</comment>
      <origin>209</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4289" sha1="k0dd8kh3mq5h2rue4sxi9fut9590vfp" xml:space="preserve">The original documentation on this topic can be found [//www.minix3.org/doc/datxchng.html on this html doc page on the site].

== Exchanging files with USB sticks ==

USB mass storage support will be mainline soon for the Beaglebones. Not for the beagleboard or x86 targets for the foreseeable future.

The next section describe preparing a stick to exchange files between Minix and Linux. In the first example, the stick is prepared on Minix. In the second example, the stick is prepared on Linux.

"In both cases a new partition table is written onto it, thereby destroying all data previously on it."

=== From Minix to Linux ===

To prepare a USB stick on Minix to be read on Linux, we can use the Minix filesystem. We will show you in this example.

Insert the USB stick in the Minix target and clear its partition table. Then start part. You will see something like this:

&lt;pre&gt;
Started driver /service/usb_storage with label usb_disk8 for device 8.
New USB disk at /dev/usb_disk8.

# dd if=/dev/zero of=/dev/usb_disk8 count=1
1+0 records in
1+0 records out
# part /dev/usb_disk8
&lt;/pre&gt;

The part screen then looks like:

&lt;pre&gt;
# part /dev/usb_disk8

  Size in kilobytes   ----first----  --geolast--  ------sectors-----
    Device             Cyl Head Sec   Cyl Head Sec      Base      Size        Kb
    /dev/usb_disk8                          64  32
                         0    0   0   979   63  30         0   2007039   1003519
Num Sort   Type
 0*  p0  81 MINIX        0    1   0   978   63  31        32   2004960 M:1002480
 1   p1  00 None         0    0   0     0    0  -1         0         0         0
 2   p2  00 None         0    0   0     0    0  -1         0         0         0
 3   p3  00 None         0    0   0     0    0  -1         0         0         0

Type '+' or '-' to change, 'r' to read, '?' for more help, 'q' to exit

&lt;/pre&gt;

Move the cursor to where the M: is written (I put it there just to specify the location) and press the 'm' key, for 'magic.' This will 'do the right thing' in most cases in part. In this case it will make a new partition for you in the desired slot with the MINIX type with the right offset and size to fill the whole stick.

Then press 'w' to write the new table. 

You don't really need this partition for Minix, but other operating systems may be surprised to find just a single filesystem on a device without a partition table.

The new device is addressed by /dev/usb_disk8p0.

Then write a filesystem on it and create a file there:

&lt;pre&gt;
# mkfs.mfs /dev/usb_disk8p0
# mount /dev/usb_disk8p0 /mnt
# echo hello world &gt;/mnt/hello.txt
# umount /dev/usb_disk8p0
&lt;/pre&gt;

Done! Now stick the stick into a Linux computer and mount it there:

&lt;pre&gt;
# mount /dev/sdb1 /mnt
# cat /mnt/hello.txt
hello world
# umount /dev/sdb1
&lt;/pre&gt;

Success!

=== From Linux to Minix ===

This example will do the same thing but initialize the USB stick from Linux and use an ext2 filesystem.

Again, first wipe the stick clean. We will use /dev/sdb as an example.

"Please be CAREFUL to replace /dev/sdb in the following with the stick device name, as it will be destroyed"

&lt;pre&gt;
# dd if=/dev/zero of=/dev/sdb count=1
&lt;/pre&gt;

Partition the stick using gparted.

&lt;pre&gt;
# gparted /dev/sdb
&lt;/pre&gt;

In parted, create a partition table by choosing the 'device' menu, 'create partition table,' select the 'msdos' partition type, then 'apply.'

Then press '+' to create a partition.

Select the ext2 filesystem type; ok, add it.

Then click the checkmark in gparted to commit these operations.

gparted will create the partition and format it with an ext2 filesystem.

Mount it:
&lt;pre&gt;
# mount /dev/sdb1 /mnt
# echo hello world &gt;/mnt/hello.txt
# umount /dev/sdb1
&lt;/pre&gt;

Done!

Now, insert the stick in Minix. And mount the partition using ext2. You will see something like:

&lt;pre&gt;
Started driver /service/usb_storage with label usb_disk2 for device 2.
New USB disk at /dev/usb_disk2.

# mount /dev/usb_disk2p0 /mnt
/dev/usb_disk2p0 is mounted on /mnt
# ls -al /mnt
total 56
drwxr-xr-x   3 root  operator   4096 Aug 25  2014 .
drwxr-xr-x  18 root  operator   1408 Jan  1 00:22 ..
-rw-r--r--   1 root  operator     12 Aug 25  2014 hello.txt
drwx------   2 root  operator  16384 Aug 25  2014 lost+found

# cat /mnt/hello.txt
hello world
&lt;/pre&gt;

There we go!</text>
      <sha1>k0dd8kh3mq5h2rue4sxi9fut9590vfp</sha1>
    </revision>
  </page>
  <page>
    <title>Installing Binary Packages</title>
    <ns>0</ns>
    <id>157</id>
    <revision>
      <id>210</id>
      <timestamp>2021-09-10T13:43:53Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import installingbinarypackages</comment>
      <origin>210</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2782" sha1="9yo8fcwzn46mkrwia62iecsj3609tw8" xml:space="preserve">== pkgin ==

[//pkgin.net/ pkgin] is the binary package manager for MINIX 3. This page describes how to use it.


Software packages also can built from their source code. See [[Installing Source Packages]] for details.

== Using pkgin ==

'''First''', you will need to fetch the package list and populate the package database:

&lt;pre&gt;
# pkgin update
&lt;/pre&gt;

This step can be re-run to update the package list.

If you would like to install a package, you can run:

&lt;pre&gt;
# pkgin install git-base
# pkgin install binutils
# pkgin install clang
&lt;/pre&gt;

More than one at a time:

&lt;pre&gt;
# pkgin in perl python27
&lt;/pre&gt;

Also, there is a way to install everything:

&lt;pre&gt;
# pkgin_all
&lt;/pre&gt;

{i} Be sure to have enough [[Working with Storage|free space]] if you install all the packages. You will probably need at least 25 GB. ''Pkgin'' will estimate the space needed when it asks for your confirmation.

If you would like to search for a specific package, you can run:

&lt;pre&gt;
# pkgin search git
&lt;/pre&gt;

As the repository is now very large, we also have a few packages sets for usual MINIX tasks. To view and install them you can use: 
&lt;pre&gt;
# pkgin_sets
&lt;/pre&gt;

To see a list of all available packages, you can run:

&lt;pre&gt;
# pkgin available
&lt;/pre&gt;

You can also use ''more'' to pause between pages:

&lt;pre&gt;
# pkgin available | more
&lt;/pre&gt;

If you would like to see all the available ''pkgin'' actions, you can run:

&lt;pre&gt;
# pkgin
&lt;/pre&gt;

Additionally, you can study the man. page:

&lt;pre&gt;
# man 1 pkgin
&lt;/pre&gt;

== Installing from the CD ==

Many packages are available directly from the CD. This can be helpful in some circumstances, and is generally faster than downloading from the online repository.

To install packages from the CD, you can use ''pkgin_cd''. This command uses the CD-ROM as the package repository. It is a wrapper for ''pkgin'' and therefore supports the same commands.

To begin using ''pkgin_cd'':

# Start your installed system
# Insert the CD
# Type ''pkgin_cd''

Unlike ''pkgin'', to install all packages you need:

&lt;pre&gt;
# pkgin_cd in $( pkgin_cd av | awk '{ print $1 }' )
&lt;/pre&gt;

To remove the CD safely and use the online package repository:

# Type ''umount /mnt'' to stop using the CD
# Remove the CD
# Type ''pkgin update''


Note this will not update previously installed package, to replace them with the newer version you have to do this:
&lt;pre&gt;
  # pkgin full-upgrade
&lt;/pre&gt;

That's all! Now you can try out the new packages. We are awaiting for your feedback, 
even if it 'just works'. We need to update our available list of applications. You can send us a mail directly, post to the MINIX google group or simply update  [[Pkgsrc Status]].

== Notes ==

''Pkgin'' will install the software in ''/usr/pkg/bin'', which is already in your PATH by default.</text>
      <sha1>9yo8fcwzn46mkrwia62iecsj3609tw8</sha1>
    </revision>
  </page>
  <page>
    <title>Installing Source Packages</title>
    <ns>0</ns>
    <id>158</id>
    <revision>
      <id>211</id>
      <timestamp>2021-09-10T14:43:38Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import installingbinarypackages</comment>
      <origin>211</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3032" sha1="hjj05v8e7wpn06z294vklecdihst2id" xml:space="preserve">== pkgsrc ==

[//www.netbsd.org/docs/software/packages.html pkgsrc] is used to build third-party software. This page describes how to use pkgsrc.

Before diving in, you should be aware of a few things:
* precompiled binary packages are available for many applications. This can save a lot of time and headaches. See [[Installing Binary Packages]] for details.
* pkgsrc tracks MINIX. For best results, update the base system to [[Tracking Current|tracking current MINIX]].

We have currently the following manually maintained lists:
* '''[//git.minix3.org/?p=pkgsrc-ng.git;a=blob;f=minix/limited_list.minimal;h=d904e2228405c6c05937b557580ad1d92ab3b96c;hb=3.3.0 minix/limited_list.minimal]''' Packages which are required  for a release of MINIX.
* '''[//git.minix3.org/?p=pkgsrc-ng.git;a=blob;f=minix/limited_list.patched;h=815ba1af1670b270032fd59b126793a675519e25;hb=3.3.0 minix/limited_list.patched]''' Packages which have been explicitly patched for MINIX.

== Requirements ==

* 1 GB of hard disk space for the pkgsrc tree (as of August 29, 2014). Additional space is required to build software.
* 512MB of RAM or more. Some applications such as gcc need more than 512MB of RAM to build.

=== Setting up pkgsrc on MINIX ===

To retrieve the current official repository, type the following as root:
&lt;pre&gt;
# pkgin install git-base digest
# cd /usr
# make pkgsrc
&lt;/pre&gt;

To build software, you will also need to install the development tools (pkgin_sets contains bmake, clang, etc):
&lt;pre&gt;
# pkgin_sets 
&lt;/pre&gt;

&lt;!&gt; This is all that is needed to prepare the system to build software with pkgsrc. The MINIX installation comes pre-bootstrapped. Do NOT run the bootstrap script that comes with pkgsrc.

=== Updating the pkgsrc Tree ===

To update the pkgsrc tree in the future:

&lt;pre&gt;
# cd /usr
# make pkgsrc-update
&lt;/pre&gt;

This will download any changes (new versions of packages, patches, etc.).

&lt;!&gt; It is important to update your copy of the pkgsrc tree using this method, instead of ''git pull''. This update method may perform additional steps, such as updating your ''mk.conf'' file.

=== Compiling a Package ===

All pkgsrc operations should be done with ''bmake''.

To build a package, ''misc/figlet'' in this example, you need to ''cd'' to that directory and do a ''bmake install''.

&lt;pre&gt;
# cd /usr/pkgsrc/misc/figlet
# bmake install
&lt;/pre&gt;

This installs ''figlet'' in ''/usr/pkg/bin''.

If you receive a message "install: exec of strip failed: /usr/bin/strip" test your environmental values:

&lt;pre&gt;
# which strip
/usr/pkg/bin/strip
# export STRIP=/usr/pkg/bin/strip
&lt;/pre&gt;

The default for ''/usr/bin/install -s'' (as provided in the Makefile) is to use ''/usr/bin/strip'', unless an alternative is provided in the environmental value STRIP.
== Additional Documentation ==

=== General pkgsrc documentation ===
See the official [//www.netbsd.org/docs/pkgsrc/ pkgsrc guide] for complete details.

=== Contributing ===

If you wish to contribute fixes and patches to pkgsrc, please see [[How to Contribute|how to contribute]].</text>
      <sha1>hjj05v8e7wpn06z294vklecdihst2id</sha1>
    </revision>
  </page>
  <page>
    <title>Introduction to X</title>
    <ns>0</ns>
    <id>159</id>
    <revision>
      <id>214</id>
      <parentid>212</parentid>
      <timestamp>2021-09-10T14:50:24Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Quick start */ fix link</comment>
      <origin>214</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1672" sha1="icuqqg3kb4ewtn0f1dcpe950ta3dpf8" xml:space="preserve">X (also called X11 or, formally, the X Window System) is the standard windowing system for most UNIX systems.
It is supported by MINIX 3 and is automatically installed with the official installation images.

The [//www.netbsd.org/docs/guide/en/chap-x.html NetBSD guide] chapter on the X server mostly applies to MINIX 3, please refer to it for a more thorough overview.

== Quick start ==

When logged-in as root, type:

&lt;pre&gt;
startx
&lt;/pre&gt;

You will get the default TWM environment from NetBSD. One of the ''xterm'' windows will be called ''login'', you can quit X11 by closing it or using the command ''exit''.

If the auto-detected X server settings are not satisfactory, run the command:

&lt;pre&gt;
X -configure
&lt;/pre&gt;

to generate a X11 configuration file named ''xorg.conf.new'' based on the automatically detected settings. Move it to ''/etc/X11/xorg.conf'' and edit it to suit your configuration.

To personalize the default environment created by ''startx'', copy the shell script ''/etc/X11/xinit/xinitrc'' to ''~/.xinitrc'' and modify it.

Once X11 is sorted out, you may want to use another [[Window Managers|window manager]].

== Guides ==

The following guides from ''The Linux Documentation Project'' give useful explanations of X and its components:

* [///tldp.org/HOWTO/XWindow-User-HOWTO/ The X Window User HOWTO]
* [//tldp.org/HOWTO/XWindow-User-HOWTO/runningx.html Running X]
* [//tldp.org/HOWTO/XDM-Xterm/ XDM and X Terminal mini-HOWTO]

== Documentation ==

For MINIX releases 3.1.4 - 3.2.0, the official X documentation can be found below:

[//www.x.org/archive/X11R6.8.2/doc/ Documentation for the X Window System Version 11 Release 6.8.2 (X11R6.8.2)]</text>
      <sha1>icuqqg3kb4ewtn0f1dcpe950ta3dpf8</sha1>
    </revision>
  </page>
  <page>
    <title>Window Managers</title>
    <ns>0</ns>
    <id>160</id>
    <revision>
      <id>213</id>
      <timestamp>2021-09-10T14:49:55Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import windowmanagers</comment>
      <origin>213</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="569" sha1="0bywyemdn8lmj2t4hguryhcxyjgzpy6" xml:space="preserve">In MINIX there are three window managers available: [//en.wikipedia.org/wiki/Twm Tom's Window Manager], [//en.wikipedia.org/wiki/JWM Joe's Window Manager] and [//edeproject.org/wiki/AboutEde Equinox Desktop Environment].

The first one, twm, is installed by default with the X.org package and the second and the third can be installed through the pkgin (tool to manage pkgsrc binary packages) utility.

To start EDE you need to edit your ~/.xinitrc file and add a ''startede'' line (usually at the end). Afterwards, typing ''startx'' on the command line will start EDE.</text>
      <sha1>0bywyemdn8lmj2t4hguryhcxyjgzpy6</sha1>
    </revision>
  </page>
  <page>
    <title>Running on VMware</title>
    <ns>0</ns>
    <id>161</id>
    <revision>
      <id>215</id>
      <timestamp>2021-09-10T15:06:26Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import runningonvmware</comment>
      <origin>215</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8729" sha1="06y636upmdm24hi5h5eyct6e7kggrec" xml:space="preserve">This page describes the process of installing MINIX 3 on VMWare.

== Preliminaries ==
Please install [//www.vmware.com/ VMWare]. VMWare binaries can be downloaded from their webpage.

== Virtual Machine Setup ==
Before you install MINIX 3, you will need to create a new virtual machine configuration. The VM configuration specifies the parameters of your Virtual machine, e.g., how much memory you want the VM to use, how big you want the virtual hard disk to be, etc.

=== Create a Virtual Machine -- VMware Server ===
In the main menu of VMware, select '''New Virtual Machine'''.

# Press '''Next''' in the Welcoming Screen.
# At the ''Virtual machine configuration'' menu, we select '''Typical'''.
# At the ''Select a Guest Operating System'', select '''Other''' and Version '''Other'''.
# For ''Virtual Machine Name'', write '''Minix3''' (anything would work).
# At the ''Network Type'' screen, select '''Use bridged networking'''.
# For ''Disk Capacity'', enter something around 2GBs, although even smaller values would work. That is the size of the virtual partition where Minix will be installed. Tick the '''Allocate all disk space now'''.
# Pressing '''Finish''' will create the Disk Image and the Virtual Machine that we will run.

=== Create a Virtual Machine -- VMware Workstation and VMware Player (version &gt; 3) ===
In the main menu of VMware, select '''New Virtual Machine'''.

# At the ''Wizard'', select '''Typical'''; and then, press '''Next'''.
# For the ''Guest Operating System Installation'', select '''I will install the operating system later'''; and then, press '''Next'''.
# At the ''Select a Guest Operating System'', select '''Other''' and Version '''Other'''.
# For ''Virtual Machine Name'', enter '''Minix3''' or some other meaningful name.
# At the ''Specify Disk Capacity'', enter 2GBs, which is enough for all packages and sources. You can make it larger if you need to add more source files.
# At the ''Ready to Create Virtual Machine'', ensure that '''Power on this virtual machine after creation''' is not checked; and then, press '''Finish'''.

You will need to edit the memory settings according to your needs. In the ''Devices'' section, select the '''Memory''', and adjust the memory accordingly. Note that, in order to run the ''X Window System'' on Minix, you need at least 384MB.

=== Create a Virtual Machine -- VMware Player (version &lt; 3) ===
If you are using the free VMware Player, you do not have the ability to create new virtual machines. The simplest way around that is to use [//www.easyvmx.com/ EasyVMX] to create your new (empty) virtual machines. (Note: easyvmx seems to be a dead project as of 12/2016)

# Choose the '''Super Simple''' virtual machine creator at https://www.easyvmx.com/.
# Name the machine whatever you want.
# Operating System: '''Other OS''' (Note: choose the one that is ''NOT'' 64-bit).
# Choose appropriate memory and storage sizes (e.g., 512 MB Memory and 2GB storage).
# Don't worry about the ''LiveCD ISO'', leave that blank (it will be dealt with, later).
# Press '''Create Virtual Machine'''.
# Download the compressed file, and unpack it. It should contain a directory with a bunch of VMware files.
# Start VMware Player, choose '''Open an existing virtual machine''', and select the ''.vmx'' file in the directory you just unpacked.
# Once the virtual machine starts, go to the ''Devices'' Menu; and, in the ''CD/DVD'' item, choose '''Connect to Disk Image File (iso)'''. Select the Minix3 ISO that you downloaded from the Minix 3 web-site.
# If necessary, reset the machine with '''Ctrl+R'''; and, it will boot from the ISO.

=== Installation ===
Assuming you have downloaded and decompressed a MINIX 3 ISO image from the [//www.minix3.org/download download page], you can mount the ISO file:

# Select '''Minix3''' in the ''Inventory List'' on the left.
# In the ''Devices'' section, double-click on '''CD-ROM'''.
# Select '''Use ISO Image'''.
# Browse, and select the '''.iso''' Minix image that you downloaded earlier.

Then you can follow the [[Installing Minix 3|normal installation instructions]].

When the installation is over, type

&lt;pre&gt;
shutdown
&lt;/pre&gt;
When you get the ''d0p0s0&gt;'' prompt, enter '''off''' to shutdown the Virtual Machine.

== Booting MINIX 3 ==
Now, you have installed MINIX 3 on the virtual machine. First thing that needs to be sorted is that, next time you boot, you want to boot from the operating system, and not from the CD image.

# In the ''Devices'' section, double-click on '''CD-ROM'''.
# Select '''Use Physical Drive'''.

Great, now you can boot into the newly installed operating system.

# Select '''Minix3''' on the ''Inventory List'' on the left.
# In the ''Commands'' menu, Press '''Start this Virtual Machine'''.

== Post-install Configuration ==
You should read [[Post Installation]] for some configuration tips.

=== X.org ===
Like in other visualization tools, Minix can't get the screen resolution right under VMware. To get X11 running in the desired resolution, you start by generating an xorg.conf file using the command
&lt;pre&gt;
Xorg -configure
&lt;/pre&gt;
This creates a file ''xorg.conf.new'' in your home directory. This needs to be completed manually, so edit it and fix the ''Monitor'' section so that it reads:
&lt;pre&gt;
Section "Monitor"
	Identifier   "Monitor0"
	VendorName   "vmware"
	ModelName    "VMWare Inc"
	HorizSync    1.0 - 10000.0
	VertRefresh  1.0 - 10000.0
	ModeLine     "800x600"  100.0    800 900 1000 1100     600 700 800 900
	ModeLine     "1024x768" 100.0    1024 1100 1200 1300   768 800 900 1000
	ModeLine     "1366x768" 100.0    1360 1400 1500 1600   768 800 900 1000
EndSection
&lt;/pre&gt;
You may need to add another ModeLine for the resolution of your actual screen (if you want to run in full screen mode). This isn't rocket science under VMware, since most of the parameters really don't matter much. Of the ModeLine for "1024x768", all that really matters are the 1024 and the 768. The 100.0 is the refresh rate in Hz, which is pretty much ignored under VMware (the host controls that). All the other timing values (which are important when using a physical machine with a physical monitor) are just rounded up to the next 100. So a ModeLine to display on your HDTV would read
&lt;pre&gt;
ModeLine "1920x1080" 100.0    1920 2000 2100 2200    1080 1100 1200 1300
&lt;/pre&gt;
Keep in mind that in the current version of the X-server, the Xresolution must be a multiple of 8 pixels. That is why the ModeLine for "1366x768" uses 1360 as display width, wasting 6 physically present columns of the real screen (of my notebook).

Next you have to fix the ''Screen'' section of the file. Edit it so that is looks like this:
&lt;pre&gt;
Section "Screen"
	Identifier	"Screen0"
	Device		"Card0"
	Monitor		"Monitor0"
	SubSection "Display"
		Viewport   0 0
		Depth     24
		Modes	"1366x768"
	EndSubSection
EndSection
&lt;/pre&gt;
Where ''Modes'' actually contains the label of the ''ModeLine'' with the resolution you want.

Save the file and copy it to ''/usr/pkg/X11R6/lib/X11/xorg.conf''.

=== Shared Folders ===

VMWare shared folders are supported in much the same way as VirtualBox ones. After defining a shared folder, simply mount it with:

&lt;pre&gt;
mount -t hgfs -o share=NAME none /mnt
&lt;/pre&gt;

Then you can access it under: &lt;code&gt;cd /mnt/NAME&lt;/code&gt;

== Workarounds ==
=== Lance workaround ===
In Minix 3.1.5, after working correctly for a period of time, the lance driver may stop working silently, causing all network traffic to be dropped for some period of time. Workaround: when this happens, run "service refresh lance" as root to restart the lance driver. This issue has been fixed in the Minix trunk available from Subversion.

In Minix 3.1.3, the Lance driver set-up is broken, resulting in '''no network support''' for Minix3 in VMware.

You can use [[Lance Driver Fix|this set of instructions]] to get the Lance driver to work.

=== VMWare Hardware version 6.x workaround ===
For Minix versions below 3.1.4, you may see the following error when running newer versions of VMWare: ''*** vcpu-0:ASSERT vmcore/private/iospace_shared.h:558 bugNr=64440''.

You will need to edit the ''.vmx'' file corresponding to your virtual machine. It can likely be found in ''~/Documents/Virtual Machines/&lt;VM name&gt;'' or ''~/vmware/&lt;VM name&gt;''.

You will need to remove the line:

&lt;pre&gt;
pciBridge0.present = "TRUE"
&lt;/pre&gt;
and any similar lines for pciBridge, pciBridge2, etc. from the ''.vmx'' file.

=== Unable to partition hard disk ===
VMWare Server, by default, installs SCSI hard disks.

In Minix3.1.3a, with this default configuration, the disk partitioning step would not run automatically.  In 'expert mode', I couldn't partition my disk.

I removed the SCSI hard disk and installed an IDE disk instead.</text>
      <sha1>06y636upmdm24hi5h5eyct6e7kggrec</sha1>
    </revision>
  </page>
  <page>
    <title>Running on Qemu (and KVM)</title>
    <ns>0</ns>
    <id>162</id>
    <revision>
      <id>216</id>
      <timestamp>2021-09-10T15:13:36Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import runningonqemu</comment>
      <origin>216</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="7737" sha1="eux3zr8g5mrq6h8p2dj5hjfdcvh8mr6" xml:space="preserve">This page describes the process of installing Minix 3 on QEMU and KVM. If you run into problems, see the workarounds section at the bottom of the page for possible solutions.

== Preliminaries ==

Please install [//www.qemu.org QEMU] or [//www.linux-kvm.org KVM]. QEMU and KVM sources can be downloaded from their websites. If you're running a Linux distribution, you can install QEMU and KVM via the package manager.

== Virtual Machine Setup ==

Before you install Minix, you will need to create a new virtual machine configuration. The VM configuration specifies the parameters of your Virtual machine, e.g., how much memory you want the VM to use, how big you want the virtual hard disk to be, etc.

Open a terminal, change directory to where you want to create the Hard Disk Image, and write:

&lt;pre&gt;
# qemu-img create minix.img 8G
&lt;/pre&gt;

This will create an 8 GB hard disk image named ''minix.img'', which we will use to install the operating system.

== Installation ==

Assuming you have downloaded and decompressed a Minix ISO image from the [//www.minix3.org/download download page], you can mount the ISO file:

&lt;pre&gt;
# qemu -localtime -net user -net nic -m 256 -cdrom minix.iso -hda minix.img -boot d
&lt;/pre&gt;
or
&lt;pre&gt;
# kvm -localtime -net user -net nic -m 256 -cdrom minix.iso -hda minix.img -boot d
&lt;/pre&gt;
where ''minix.iso'' is the .iso we downloaded earlier (which is mounted as CD-ROM), ''minix.img'' is the disk image we created, and 256 is the amount of memory dedicated to the Virtual Machine. The option ''-boot d'' makes sure that we boot from the CD-ROM.

With QEMU 2.0.0 the command line shall look like this:

&lt;pre&gt;
# qemu-system-x86_64 -localtime -net user -net nic -m 256 -cdrom minix.iso -hda minix.img -boot d
&lt;/pre&gt;

Then you can follow the [[Installing Minix 3|normal installation instructions]]. If you only get a blank screen or QEMU seems stuck with the "SeaBIOS" message, try adding the '''-sdl''' parameter.

When the installation is over, type

&lt;pre&gt;
shutdown -h now
&lt;/pre&gt;

to exit Minix.

When you get the '''cd&gt;''', type '''off''' in order to shutdown the Virtual Machine.

== Booting MINIX 3 ==

Now you have installed Minix 3 in the virtual machine. To boot Minix from the virtual disk image, type:

If your computer stores the system time (real time clock) in local time, e.g. Windows XP default, then:
&lt;pre&gt;
# qemu -localtime -net user -net nic -m 256 -hda minix.img
&lt;/pre&gt;

OR

If your computer stores the system time (real time clock) in UTC, e.g. Debian GNU/Linux default, then:
&lt;pre&gt;
# qemu -rtc base=utc -net user -net nic -m 256 -hda minix.img
&lt;/pre&gt;

== Using the virtualized disk and network driver ==

Minix mainline contains virtualized disk and network drivers. So you have to have the latest minix built.

To use the virtualized disk driver, add a boot option to ''/etc/boot.cfg.local'' with ''virtio_blk=yes'' added to the boot parameters. Example:
&lt;pre&gt;
menu=Start MINIX 3 latest serial virtio:load_mods /boot/minix_latest/mod*;multiboot /boot/minix_latest/kernel rootdevname=$rootdevname $args cttyline=0 virtio_blk=yes
&lt;/pre&gt;
then update ''/boot.cfg'' (by rebuilding everything, just ''make hdboot'' or just ''/bin/update_bootcfg''), shutdown, and restart kvm with ''-drive file=imgfile,if=virtio'' for its disk image. Example:
&lt;pre&gt;
# kvm -net nic -net user -drive file=/dev/sda,if=virtio -serial stdio -m 1300
&lt;/pre&gt;

Then boot with your new virtio boot option.

To use the virtualized network driver, minix first has to try to use it. Run netconf:
&lt;pre&gt;
# netconf
[..]
11.   Virtio network device
[..]
Ethernet card? [..] 11

Configure network using DHCP or manually?

1. Automatically using DHCP
2. Manually

Configure method? [1] 
Backed up /etc/inet.conf to /etc/inet.conf~
Backed up /usr/etc/rc.local to /usr/etc/rc.local~

You might have to reboot for the changes to take effect.
&lt;/pre&gt;

Then shutdown, and restart kvm with the ''-net nic,model=virtio'' parameter. Example:
&lt;pre&gt;
# kvm -net nic,model=virtio -net user -drive file=imgfile,if=virtio -serial stdio -m 1300
&lt;/pre&gt;

== Post-install Configuration ==

You should read [[Post Installation]] for some configuration tips.

=== Login with SSH ===

Make sure you have ''openssh'' installed and running on MINIX. You can install ''openssh'' with ''pkgin'' (as detailed in the [[Post Installation]] document).

Unfortunately the ''-net user'' option doesn't allow the host system to connect to MINIX. One could use ''-net tap'', but this is messy (especially when the host has a wireless connection) and it is generally not worth the effort for something this simple.

A simple solution is to forward the listening ssh port on MINIX to a port on the host system. This can be done by replacing the ''-net user'' option with ''-net user,hostfwd=tcp::10022-:22'', which forwards port 22 (SSH) on MINIX to port 10022 on the host. The command to boot MINIX will then become something like this (also works with virtio):

&lt;pre&gt;
# qemu -localtime -net user,hostfwd=tcp::10022-:22 -net nic -m 256 -hda minix.img
&lt;/pre&gt;

You can now connect to MINIX with:
&lt;pre&gt;
$ ssh root@localhost -p10022
&lt;/pre&gt;

== Workarounds ==

=== core system service died (tty) / kernel panic ===

A couple of users have reported a panic during the boot on Gentoo/amd64 hosts (qemu 1.5.3). This is an example of the error message:
&lt;pre&gt;
tty           5 0x8048359 0x804868b 0x8048732 0x80490ea 0x804920b 0x804d4c8 0x804d6ce 0x804df26 0x8048196 0x80480a7 
TTY: not initializing rs232 line 0 (in use by kernel)
do_irqctl: IRQ check failed for proc 5, IRQ 3
RS232: Couldn't obtain hook for irq 3
do_irqctl: IRQ check failed for proc 5, IRQ 4
RS232: Couldn't obtain hook for irq 4
do_irqctl: IRQ check failed for proc 5, IRQ 3
RS232: Couldn't obtain hook for irq 3
do_irqctl: IRQ check failed for proc 5, IRQ 1
tty(5): panic: Couldn't set keyboard IRQ policy: -1
syslib:panic.c: stacktrace: 0x8050721 0x804b39a 0x804c9e3 0x804ff6b 0x8050039 0x805024e 0x804d9b3 0x8048196 0x80480a7 
core system service died: service 'tty'*+(slot 6, ep 5, pid 10)
rs            2 0xf1001364 0x8050f77 0x8050d34 0x8050aeb 0x8050b2f 0x804d304 0x80488c9 0x804ffef 0x8050a58 0x80493c3 0x8048196 0x80480a7 
kernel panic: cause_sig: sig manager 2 gets lethal signal 6 for itself
kernel on CPU 0: 0xf0429c6f 0xf0429723 0xf042a4c4 0xf0428ee2 0xf0429889 0xf0419d05 
&lt;/pre&gt;

The workaround is to add ''-cpu kvm32'' to the command used to invoke qemu:
&lt;pre&gt;
qemu-kvm -localtime -cpu kvm32 -net user,hostfwd=tcp::10022-:22 -net nic -m 256 -hda minix.img
&lt;/pre&gt;

=== QEMU 0.14.1 ===

QEMU 0.14.1 is known to have issues with rebooting; it appears as if the boot menu is frozen. This problem is fixed in at least version 1.0.50, but maybe also in earlier versions.

You can compile the newest version from ''git'' on Ubuntu as follows:

&lt;pre&gt;
$ sudo apt-get update
$ sudo apt-get install git build-essential libsdl-dev libglib2.0-0 libglib2.0-dev zlib1g-dev
$ git clone git:''git.qemu.org/qemu.git qemu
$ cd qemu
$ ./configure --target-list=x86_64-softmmu --enable-sdl --enable-kvm
$ make
$ sudo make install
&lt;/pre&gt;

QEMU will be installed in ''/usr/local/bin/qemu-system-x86_64''.

=== Copy and Paste between host and guest ===
I do not know how to directly copy and paste between the host operating system and the guest operating system, but there is a workaround:  ssh.  Run the following on Minix to install ssh:
&lt;pre&gt;
# pkgin install openssh
# reboot
&lt;/pre&gt;
then start qemu with the option ''-net hostfwd=tcp::2022-:22'' as in
&lt;pre&gt;
qemu -rtc base=utc -net user,hostfwd=tcp::2022-:22 -net nic -m 512 -hda minix.img -no-reboot &amp;
&lt;/pre&gt;
Now you can run, from your host, 
&lt;pre&gt;
ssh -p 2022 root@localhost
&lt;/pre&gt;
from an xterm or console and use the scrollback buffer and copy and paste.</text>
      <sha1>eux3zr8g5mrq6h8p2dj5hjfdcvh8mr6</sha1>
    </revision>
  </page>
  <page>
    <title>Running on Bochs</title>
    <ns>0</ns>
    <id>163</id>
    <revision>
      <id>217</id>
      <timestamp>2021-09-10T15:30:14Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import runningonbochs</comment>
      <origin>217</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6041" sha1="i8dh25pxl0354fwe193h7p1jt68ug6w" xml:space="preserve">This page describes the process of installing MINIX 3 on Bochs.

== Preliminaries ==
Please install [//bochs.sourceforge.net/ bochs]. Bochs binaries can be downloaded from their webpage. If you're running a Linux distribution, you can install Bochs via the package manager.

==== Windows specifics ====

If you're running Windows, in order to use networking, you are invited to also install [//www.winpcap.org/install/default.htm WinPCap]; unlike Bochs itself, this package requires Administrator's privilege to install it; it also requires Administrator's privilege once after each boot (see [//www.winpcap.org/misc/faq.htm#Q-7 WinPcap FAQ] or [//wiki.wireshark.org/CaptureSetup/CapturePrivileges Wireshark wiki] for detailed explanations); after the first use, you can use it as a normal user.

Then, you will need to learn the system identifier for the network adapter. From the Bochs package, type
&lt;pre&gt;
C&gt; niclist
&lt;/pre&gt;

Now, we will get a notification that looks something like (''flowed here to look nicer; remember ''^'' is the Windows escaping character''):
&lt;pre&gt;
1: Broadcom NetXtreme Gigabit Ethernet Driver
     Device: \Device\NPF_{21E03ED5-DF15-4BA5-BEC0-22BBC44A8C23}

Example config for bochsrc:
ne2k: ioaddr=0x300, irq=3, mac=b0:c4:20:00:00:00, ethmod=win32, ^
  ethdev=\Device\NPF_{21E03ED5-DF15-4BA5-BEC0-22BBC44A8C23}
&lt;/pre&gt;
Make sure you write down the identifier between braces (also known as a ''GUID''), because we will need it later.

== Virtual Machine Setup ==
Before you install MINIX 3, you will need to create a new virtual machine configuration. The VM configuration specifies the parameters of your Virtual machine, e.g., how much memory you want the VM to use, which file you want the virtual hard disk to be, etc.

Type
&lt;pre&gt;
# bximage
&lt;/pre&gt;
# Type ''1'' (in recent versions of Bochs) to select the creation of an image.
# Type ''hd''.
# Type ''flat''.
# Type ''8000'', which equals to 8 GB of disk space.
# Type ''minix.img''.

Now, we will get a notification that looks something like:
&lt;pre&gt;
The following line should appear in your bochsrc:
  ata0-master: type=disk, path="minix.img", mode=flat
&lt;/pre&gt;
Make sure you write down these values, because we will need them later.

You might also copy the VGA and BIOS rom images that were included in the Bochs installation, to the current directory. Depending on the Linux Distribution you use, the image are either under ''/usr/share/bochs'' or ''/usr/local/share/bochs''
&lt;pre&gt;
cp /usr/share/bochs/BIOS-bochs-latest BIOS-bochs-latest
cp /usr/share/bochs/VGABIOS-elpin-2.40 VGABIOS-elpin-2.40
&lt;/pre&gt;
With recent versions of Bochs, after installation, these files can be reached automatically through the $BXSHARE alias, and then copying is not required.

Next, we have to create a file called ''bochsrc.txt''. You can use any editor you like for doing this.
&lt;pre&gt;
vim bochsrc.txt
&lt;/pre&gt;

Copy in the file the following
&lt;pre&gt;
megs: 1024
romimage: file=$BXSHARE/BIOS-bochs-latest
# if you copied the file in the local directory, use instead
#romimage: file=BIOS-bochs-latest
vgaromimage: file=$BXSHARE/VGABIOS-lgpl-latest
# if you copied the 2.40 file in the local directory, use instead
#vgaromimage: file=VGABIOS-elpin-2.40
boot: disk, cdrom
floppya: 1_44=floppy.img, status=ejected
ata0-master: type=disk, path="minix.img", mode=flat
ata1-master: type=cdrom, path="minix_R3.3.0-588a35b.iso", status=inserted
log: out.bochs
mouse: enabled=0
com1: enabled=1, mode=file, dev="serial.out"
# On FreeBSD, add something like
e1000: enabled=1, mac=b0:c4:20:00:00:00, ethmod=fbsd, ethdev=xn0
# On Windows, add
e1000: enabled=1, mac=52:54:00:0E:10:00, ethmod=win32, ethdev=\Device\NPF_{guidguid-guid-guid-guid-guidguidguid}
&lt;/pre&gt;

Make sure that line 10 is exactly the same as the notification you got earlier after creating the disk image, and that the path in line 11 exactly matches the filename of the MINIX image you downloaded or will download.

== Installation ==
Assuming you have downloaded and decompressed a MINIX 3 ISO image from the [//www.minix3.org/download download page], you can now run bochs and install MINIX.

In order to do that, type
&lt;pre&gt;
bochs -q
&lt;/pre&gt;
(The ''-q'' option skips the graphical interactive setup menu.) MINIX 3 will now boot from the CD-ROM (since the default hard disk is not bootable.)

Then you can follow the [[Installing Minix 3|normal installation instructions]]. Except perhaps for the keyboard type, you can keep the default answer to all questions; unless of course you know better!

== Booting MINIX 3 ==
Now you have installed MINIX 3 on the virtual machine. Since ''disk'' has preference in the boot order, just type
&lt;pre&gt;
bochs -q
&lt;/pre&gt;
to boot MINIX 3.

== Post-install Configuration ==
You should read [[Post Installation]] for some configuration tips.

== Examples ==

=== FreeBSD ===

Here you find can some additional details on how to setup bochs under freebsd.

You might want to install bochs with the --with-term option (	Use text-only gui with curses library ). As most probably you won't have X installed.

In my case I disabled the X and enabled term:
&lt;pre&gt;
/usr/ports/emulators/bochs]# make config
&lt;/pre&gt;

In the menu I have this ( you can check other options as you like of course):
&lt;pre&gt;
...
[X] TERM           Use text only, console based interface
...
[ ] X11            Use X11 display interface
...
&lt;/pre&gt;

bochsrc.txt Config details (of an earlier version of MINIX and of Bochs; please adapt to the above settings to stay up-to-date):

&lt;pre&gt;
[pomelo@brain /mnt/storage2/minix]$ cat bochsrc.txt 
romimage: file=BIOS-bochs-latest
megs: 64
vgaromimage: file=VGABIOS-elpin-2.40
floppya: 1_44=floppy.img, status=inserted
ata0-slave: type=cdrom, path=./minix.iso, status=inserted
ata0-master: type=disk, path="minix.img", mode=flat, cylinders=4112, heads=16, spt=63
log: out.bochs
mouse: enabled=0
cpu: ips=15000000
boot: disk 
ne2k: ioaddr=0x300, irq=7, mac=b0:c4:20:00:00:00, ethmod=fbsd, ethdev=xn0
###END###
&lt;/pre&gt;

Since I only have TERM compiled as display option it will use it by default.</text>
      <sha1>i8dh25pxl0354fwe193h7p1jt68ug6w</sha1>
    </revision>
  </page>
  <page>
    <title>Running on Parallels</title>
    <ns>0</ns>
    <id>164</id>
    <revision>
      <id>218</id>
      <timestamp>2021-09-10T15:32:30Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import runningonparallels</comment>
      <origin>218</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2319" sha1="k8s1oq7tn9aog5xt64zouem4dpnnrrc" xml:space="preserve">&lt;div round info&gt;
'''Warning:'''

This page has gone stale, and references an older version of Parallels.

Please help us update it!
&lt;/div&gt;

This page describes the process of installing MINIX 3 on Parallels.

== Preliminaries ==

Please install [//www.parallels.com Parallels]. Parallels binaries can be downloaded from their webpage.

== Virtual Machine Setup ==

Before you install Minix 3, you will need to create a new virtual machine configuration. The VM configuration specifies the parameters of your Virtual machine, e.g., how much memory you want the VM to use, how big you want the virtual hard disk to be, etc.

In the main screen of Parallels, press the ''New VM'' button.
# Press ''Next'' in the Welcoming Screen.
# At the first screen of ''New Virtual Machine Wizard'', select ''Create a typical VM''.
# Next, for both ''Guest OS Type'' and ''Guest OS Version'', select ''Other''.
# For ''Virtual Machine Name'', write '''MINIX3''' (anything would work). Then, press ''Finish''.

== Installation ==

Assuming you have downloaded and decompressed a MINIX 3 ISO image from the [//www.minix3.org/download download page], you can mount the ISO file:

# Select '''CD/DVD ROM 1''' on the list on the list ''Resources''.
# Select the option '''Use Image File''' and at the '''Image File''' menu, browse to the .iso image you extracted earlier.
# Press OK.

Ok now you are ready to fire-up Minix! Press the green Power On Button on the menu on the right.

Then you can follow the [[Installing Minix 3|normal installation instructions]].

When the installation is over, type 

&lt;pre&gt;
poweroff 
&lt;/pre&gt;

to exit Minix. When you get the '''fd0&gt;''' prompt, press the red '''Power Off''' from the right menu, in order to shutdown the Virtual Machine.

== Booting MINIX 3 ==

Now you have installed MINIX 3 on the virtual machine. First thing that needs to be sorted, is that next time you boot, you want to boot from the operating system, and not from the CD image.
# Select '''CD/DVD ROM 1''' on the list on the list ''Resources''.
# Select the option '''Use real CD/DVD-ROM'''.
# Press OK.

Great, now you can boot into the newly installed operating system by press the green '''Power On''' button on the right menu.

== Post-install Configuration ==

You should read [[Post Installation]] for some configuration tips.</text>
      <sha1>k8s1oq7tn9aog5xt64zouem4dpnnrrc</sha1>
    </revision>
  </page>
  <page>
    <title>Running on VirtualBox</title>
    <ns>0</ns>
    <id>165</id>
    <revision>
      <id>219</id>
      <timestamp>2021-09-10T15:56:25Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import runningonvirtualbox</comment>
      <origin>219</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12306" sha1="5sc1vseyn59p4t8e1hly9qvs3kojddf" xml:space="preserve">This page describes the process of installing MINIX 3 on VirtualBox.

Confirmed to work with 

{| class="wikitable sortable"
! VirtualBox     !! Minix              !! Host-OS             !! Notes 
|-
|  4.3.36        ||  3.3.0-3234ff      ||  Debian 3.16.36     ||  X not installed
|-
|  4.3.36        ||  3.4.0rc2-373b793  ||  Debian 3.16.36     ||  X works ok
|-
|  5.2.4         ||  3.4.0rc6          ||  Debian 10 (buster)
|}

== Preliminaries ==
First of all you'll need to install [//www.virtualbox.org VirtualBox]. VirtualBox binaries can be downloaded from their webpage. If you're running a Linux distribution, you can probably install VirtualBox via the package manager (e.g. with ''apt-get install virtualbox'' on Debian-like systems).

== Virtual Machine Setup ==
Before you install MINIX 3, you will need to create a new virtual machine configuration. The VM configuration specifies the parameters of your Virtual machine, e.g., how much memory you want the VM to use, how big you want the virtual hard disk to be, etc. Please see [[Requirements|Hardware Requirements]] for guidelines.

In the main screen of VirtualBox, click the big '''New''' button.

# At the ''Name and operating system'' screen, for ''Name'' write '''MINIX3''' (anything will work). 
# For ''Type'' select '''Other'''.
# For ''Version'' select '''Other/unknown'''.
# At the ''Memory size'' screen, select the amount of memory for this Virtual Machine (e.g. '''1024MB''').
# At the ''Hard Drive'' screen set the size and properties of the Virtual Hard Disk. It is okay to either leave those options at their defaults or change them.
# Pressing '''Create''' will create the Disk Image and the Virtual Machine that we  will run.
# Now select '''MINIX3''' in the list on the left.
# Click OK, and you are now ready to install MINIX 3!

Troubleshooting:

# If the installer fails to detect the virtual hard disk attached to a SATA controller, reconfigure the machine and attach the disk to the IDE controller. Also, make sure that the CDROM is attached to the IDE controller as well. (VirtualBox 5.1.22)

== Installation ==
Assuming you have downloaded and decompressed a MINIX 3 ISO image from the [[//www.minix3.org/download download page]], you can mount the ISO file:

# Select '''MINIX3''' in the list on the left.
# Click '''Start'''.
# You will be asked to select a start-up disk. Browse to and select the '''.iso''' MINIX 3 image you downloaded earlier and press '''Open'''.

Then you can follow the [[Installing Minix 3|normal installation instructions]].

When the installation is over, type

&lt;pre&gt;
poweroff
&lt;/pre&gt;
to exit Minix. The virtual machine will automatically close.

== Booting MINIX 3 ==
Now you have installed MINIX 3 on the virtual machine. The first thing that needs to be sorted out, is that next time you boot, you want to boot from the operating system, and not from the CD image.

# Make sure your VM is selected, then click the '''Settings''' button on the main screen.
# In the menu on the right, click on '''Storage'''.
# In the storage tree, select the installation .iso file and click the small remove button below.

Great, now you can boot into the newly installed operating system.

# Press the big '''Start''' button on the main screen.

== Post-install Configuration ==
You should read [[Post Installation]] for some configuration tips.

=== X.org ===

FIXME: This chapter needs to be re-written, as MINIX 3.3.0 does not install Xorg by default, where as MINIX 3.4.0 Beta ''can'' start X with no additional fiddling.

VirtualBox's guest additions are not available for MINIX3. Therefore, MINIX cannot correctly guess the screen resolution. The desired screen resolution has to be set manually in the xorg.conf file.

==== Changing screen resolution ====

Make sure you are not running X!

Login as root, and run the following command:

&lt;pre&gt;
# Xorg -configure
&lt;/pre&gt;

This command should create a &lt;code&gt;xorg.conf.new&lt;/code&gt; file in &lt;code&gt;/root&lt;/code&gt;.

In &lt;code&gt;Section "Screen"&lt;/code&gt; from &lt;code&gt;xorg.conf.new&lt;/code&gt; file, make sure to remove all &lt;code&gt;SubSection "Display"&lt;/code&gt;, except the one containing: &lt;code&gt;Depth: 16&lt;/code&gt;.

Add the desired screen resolution. Possible screen resolutions can be found in &lt;code&gt;/var/log/Xorg.0.log&lt;/code&gt;. Search for &lt;code&gt;Modes:&lt;/code&gt; containing &lt;code&gt;BitsPerPixel: 16&lt;/code&gt;, this is important!.

Example:

&lt;pre&gt;
*Mode: 117 (1024x768)
[...]
	XResolution: 1024
	YResolution: 768
[...]
	BitsPerPixel: 16
[...]
&lt;/pre&gt;

These resolutions can be added to the newly generated &lt;code&gt;xorg.conf.new&lt;/code&gt; (in the example above: &lt;code&gt;1024x768&lt;/code&gt;). I was able to use the following resolutions: &lt;code&gt;320x200&lt;/code&gt;, &lt;code&gt;640x480&lt;/code&gt;, &lt;code&gt;800x600&lt;/code&gt;, &lt;code&gt;1024x768&lt;/code&gt;, &lt;code&gt;1280x1024&lt;/code&gt;, &lt;code&gt;1152x864&lt;/code&gt;.

Add the desired resolution to the &lt;code&gt;Modes:&lt;/code&gt; key in &lt;code&gt;SubSection "Display"&lt;/code&gt;.

Example:

&lt;pre&gt;
[...]
	Section "Screen"
[...]
		SubSection "Display"
			Viewport   0 0
			Depth     16
			Modes "1024x768"
		EndSubSection
	EndSection
[...]
&lt;/pre&gt;

The ''xorg.conf.new'' file can now be moved to &lt;code&gt;/usr/pkg/X11R6/lib/X11/xorg.conf&lt;/code&gt;:

&lt;pre&gt;
# mv xorg.conf.new /usr/pkg/X11R6/lib/X11/xorg.conf
&lt;/pre&gt;

Test the new configuration file with by starting &lt;code&gt;X.org&lt;/code&gt;:

&lt;pre&gt;
# startx
&lt;/pre&gt;

==== Sample xorg.conf ====

Sample xorg.conf, location: /usr/pkg/X11R6/lib/X11/xorg.conf
&lt;pre&gt;
Section "ServerLayout"
	Identifier     "X.org Configured"
	Screen      0  "Screen0" 0 0
	InputDevice    "Mouse0" "CorePointer"
	InputDevice    "Keyboard0" "CoreKeyboard"
EndSection

Section "Files"
	RgbPath      "/usr/pkg/X11R6/lib/X11/rgb"
	FontPath     "/usr/pkg/X11R6/lib/X11/fonts/misc/"
	FontPath     "/usr/pkg/X11R6/lib/X11/fonts/TTF/"
	FontPath     "/usr/pkg/X11R6/lib/X11/fonts/Type1/"
	FontPath     "/usr/pkg/X11R6/lib/X11/fonts/CID/"
	FontPath     "/usr/pkg/X11R6/lib/X11/fonts/75dpi/"
	FontPath     "/usr/pkg/X11R6/lib/X11/fonts/100dpi/"
EndSection

Section "Module"
EndSection

Section "InputDevice"
	Identifier  "Keyboard0"
	Driver      "kbd"
EndSection

Section "InputDevice"
	Identifier  "Mouse0"
	Driver      "mouse"
	Option	    "Protocol" "auto"
	Option	    "Device" "/dev/mouse"
EndSection

Section "Monitor"
	Identifier   "Monitor0"
	VendorName   "Monitor Vendor"
	ModelName    "Monitor Model"
EndSection

Section "Device"
	Identifier  "Card0"
	Driver      "vesa"
	VendorName  "Unknown Vendor"
	BoardName   "Unknown Board"
	BusID       "PCI:0:2:0"
EndSection

Section "Screen"
	Identifier "Screen0"
	Device     "Card0"
	Monitor    "Monitor0"

	SubSection "Display"
		Viewport   0 0
		Depth     16
		Modes "1152x864"
	EndSubSection
EndSection
&lt;/pre&gt;
== Port Forwarding ==

VirtualBox has eight networking adapters which can be separately configured to operate in one of the following six modes:
* Not attached.
* Network Address Translation (NAT).
* Bridged networking.
* Internal networking.
* Host-only networking.
* Virtual Distributed Ethernet networking.
It is possible to browse the Web, download files and view e-mail inside the guest (MINIX 3) with the [//en.wikipedia.org/wiki/Network Address Translation Network Address Translation] mode. In this default mode (NAT) the guest operating system can not access the host machine or other computers on the same network and vise versa. However, like a physical router, VirtualBox can make selected services available through [//en.wikipedia.org/wiki/Port_forwarding port forwarding]. This means that VirtualBox listens to certain ports on the host and resends all packets which arrive there to the guest, on the same or a different port.

For example, to forward SSH traffic from host machine to guest machine on port 2222:
&lt;pre&gt;
VBoxManage modifyvm "VM name" --natpf1 "guestssh,tcp,,2222,,22"
&lt;/pre&gt;

The "VM name" is the name of VM on the VirtualBox management screen, and "guestssh" is purely descriptive name and will be auto-generated if omitted.

Connecting to guest machine with following command on host machine

&lt;pre&gt;
ssh -p 2222 localhost
&lt;/pre&gt;

The guest operating system is available for host machine and other machines on the network as well though the same port 2222 at the host's IP address (if host machine firewall allows it). This is useful for remote development and navigation with [[Eclipse Tutorial|Eclipse Remote System Explorer]].

== Workarounds ==

=== VirtualBox 3.1 ===

VirtualBox 3.1 is not able to boot MINIX 3. Please use the latest version of VirtualBox.

=== Install issue (no hardware acceleration) ===
Symptom: kernel panic right after boot menu (CD loads and displays boot menu but panics right after)

Workaround:
# If you can enable hardware acceleration:
#* Verify that your processor has the virtualization extensions (VT-x, AMD-V)
#* Enable hardware acceleration in your BIOS.
#* Go to the Settings dialog for your VM image by selecting it and clicking the '''Settings''' button on the main screen.
#* Click on '''System'''
#* Click on the '''Acceleration''' tab.
#* Check '''Enable VT-x/AMD-V'''.
# If you aren't able to use hardware acceleration (e.g. VirtualBox 3.1.2 + Core 2 Duo + Minix 3.2.0):
#* Follow all the installation steps as above.
#* Uncheck '''Enable VT-x/AMD-V'''.
#* Start your VM with this command: &lt;code&gt;%%VBoxSDL --startvm minix --norawr0 --norawr3%%&lt;/code&gt;.
#* Replace your VM image's name for ''minix'' in the preceding command.
#* VirtualBox 4.0 has no '''Enable VT-x/AMD-V''' button, but you can issue this command to avoid kernel panics during installation: &lt;code&gt;%%VBoxSDL --startvm minix --norawr0 --norawr3%%&lt;/code&gt;

=== DNS resolution not working ===

When the MINIX3 virtual machine is using (at least) NAT networking configuration, it will obtain the DNS server address from the host system through DHCP. The VirtualBox-provided DNS server address is the exact same address as used on the host system. On some systems, this can lead to nonworking DNS resolution. For example, the host system uses a local resolver (on 127.0.1.1), which leads to the MINIX3 guest fruitlessly sending DNS requests to itself rather than the host's resolver. The result is that for example &lt;code&gt;pkgin up&lt;/code&gt; gives "Host name lookup failure" errors.

On MINIX3, the current DHCP-obtained DNS server settings can be checked with the command &lt;code&gt;dhcpd -q&lt;/code&gt; - the DNS server address is listed as &lt;code&gt;DNSserver&lt;/code&gt;. If this address is indeed not a routable IP address, one may have to enable VirtualBox's DNS proxy, using [//www.virtualbox.org/manual/ch09.html#nat-adv-dns these instructions from the official VirtualBox website]. This should resolve the issue.

== Time zone issues ==

If you have configured a time zone in MINIX3 (by for example putting the line "export TZ=CET" in /etc/rc.timezone), and you find that your '''clock''' (printed by for example the "date" command) ends up being '''ahead''' of real time by one or more hours, then take the following steps (tested on VirtualBox 4.1.6):

# Shut down and power off the virtual machine (at the moment this requires a hard power-off through the VirtualBox GUI);
# Go to the ''Settings'' of the virtual machine;
# Go to the ''System'' tab;
# Under ''Extended features'', check the "Hardware clock in UTC time" option;
# Click on ''OK'' to save the change;
# Restart the virtual machine, and the problem should now be fixed, even though the "wrong" (GMT) date will be printed at bootup.

Note that if your clock is '''behind''' for any reason, the MINIX3 '''vbox''' VirtualBox time sync driver will automatically correct the time for you.

== Shared Folders ==

To use the shared folders feature please do the following:

# Ensure the virtual machine is currently off;
# Go to the ''Settings'' of the virtual machine;
# Go to the ''Shared Folders'' tab;
# Click the add button and select the folder to share from the host and assign it a name;
# Click on ''OK'' to save the change;
# Start the VM and login;
# To mount your shared folder do the following:

&lt;pre&gt;
mount -t vbfs -o share=NAME none /mnt
&lt;/pre&gt;

Be sure to replace NAME here with the name you assigned the share in step 4. Please also note that this cannot be entered into fstab for automatic mounting due to the fact that mounting takes place earlier in the boot process than the loading of the appropriate virtualbox driver for shared folders.</text>
      <sha1>5sc1vseyn59p4t8e1hly9qvs3kojddf</sha1>
    </revision>
  </page>
  <page>
    <title>Running on VirtualPC 2007</title>
    <ns>0</ns>
    <id>166</id>
    <revision>
      <id>220</id>
      <timestamp>2021-09-10T15:59:48Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import runningonvirtualpc</comment>
      <origin>220</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2589" sha1="esqlnxr6m7dsf5ma7ut9k5b7p9pwu9n" xml:space="preserve">&lt;div round info&gt;
'''Warning:'''

This page has gone stale, please help us update it!
&lt;/div&gt;

&lt;div round alert&gt; 
Support for Microsoft Virtual PC 2007 is broken since Minix 3.2.0. [https://github.com/Stichting-MINIX-Research-Foundation/minix/issues/10 reference GitHub Issue]
&lt;/div&gt;

This page describes the process of installing MINIX 3 on Microsoft Virtual PC 2007.
== Preliminaries ==
Installation of Microsoft VirtualPC 2007 on a windows machine.

== Virtual Machine Setup ==
Before you install Minix 3, you will need to create a new virtual machine configuration. The VM configuration specifies the parameters of your Virtual machine, e.g., how much memory you want the VM to use, how big you want the virtual hard disk to be, etc.

=== Create a Virtual Machine -- Virtual PC console ===

Once the console window has appeared click the "New..."  button (right side above "settings").

Click "next" in the wizard that pops-up

Ensure "create a virtual machine" is selected (radio button is marked), click next then name your VM, if you do not specify a location then the default will be used (my doc &gt; my VMs)

Select "Other" from the "Operating System:" dropdown list and click next.

You can leave the RAM at its recommended level, or set VirtualPC to adjust the ram as and when. (I selected 60mb of ram and dont seem to have much trouble). click next once satisfied.

First time use or if you dont have an existing Virtual hard disk you need to select "A New virtual Harddisk".

Clicking "Next" at the hard disk location screen should be fine.

"Finish" will setup the VM and its harddisk file.

=== Installation ===
Assuming you have downloaded and decompressed a MINIX 3 ISO image from the [https://www.minix3.org/download download page], you can mount the ISO file:

Once you have your Virtual Machine Started (be quick here) from the Virtual PC console
Select "Capture ISO image" option from the "CD" menu.

Then you can follow the [[Installing Minix 3|normal installation instructions]].

When the installation is over, type

&lt;pre&gt;
shutdown
&lt;/pre&gt;
When you get the ''d0p0s0&gt;'' prompt, select "Action" -&gt; "close" -&gt; "Turn off".

== Booting Minix 3 ==
Now, you have installed Minix 3 on the virtual machine. First thing that needs to be sorted is that, next time you boot, you want to boot from the operating system, and not from the CD image.

# Select the "Release MINIX3.*.*r*.*.*" option from the "CD" menu.

Great, now you can boot into the newly installed operating system.

== Post-install Configuration ==
You should read [[Post Installation]] for some configuration tips.</text>
      <sha1>esqlnxr6m7dsf5ma7ut9k5b7p9pwu9n</sha1>
    </revision>
  </page>
  <page>
    <title>File:Ashtree.png</title>
    <ns>6</ns>
    <id>167</id>
    <revision>
      <id>222</id>
      <timestamp>2021-09-10T16:02:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>222</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-10T16:02:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Ashtree.png</filename>
      <src>https://wiki.iberty.cf/images/a/a1/Ashtree.png</src>
      <size>75986</size>
      <sha1base36>mgxqwayi64skvmmogldx1arqjihd9lo</sha1base36>
      <rel>a/a1/Ashtree.png</rel>
      <contents encoding="base64">iVBORw0KGgoAAAANSUhEUgAABkAAAAI0CAIAAADKknI0AAAAA3NCSVQICAjb4U/gAAAACXBIWXMA
AAAAAAAAAAHqZRakAAAgAElEQVR4nOzdeXwU9f348c/m4ki4T7mP3YDhElHABJFbNgEJYKOiBZWa
gFWyHqit0qJSrdIjqa2a9KdCW/y28SACYQW5NRGkoAhGm40kEK4ACYFACLnm98enjtscm51kd2eS
vJ5/8Fhm5zPz/mR29zP73vd8RiieVlZW9tvf/lYAAAAAAACgJXnvvfcqKys9nmtSFMWkKIpnYz12
7NiAAQMGDBgwZswY91tt3bp1xowZ7q9fVFTkcDhuvvlm95s4HI6AgICBAwe6uf7Vq1c3b97cr18/
TXvR2pGLFy9+991348aNc7/J999/L4QYPHiwm+tfu3Zt06ZNvXv3Hj9+vPt70dqR4uLiI0eO3HLL
Le43ycnJqaiosFgsbq5fXl6+YcOG6667Ljw83P29aO3IlStXvvrqq4iICPebHDt2rLS0dMiQIW6u
X1FR8dFHH/Xo0WPChAnu70VrR65evfrvf//71ltvdb/J8ePHr1y5cv3117u5flVV1fr167t16zZx
4kT396K1I9euXdu3b5+mXZw4ceLSpUthYWHuN/nggw+6dOkyadIk95ts27ZtypQpfn5+bq5fVlaW
kZGhaRenTp0qLCwcPny4+00+/PDDTp06TZ482f0mO3bsmDhxYkBAgJvrV1RU7NmzZ8qUKe7v4syZ
M2fPnh05cqT7TdavX9++ffupU6e632Tnzp0TJkwIDAx0c/2qqqodO3ZMmzbN/V2cPXv29OnTo0aN
cr9JampqcHDw9OnT3W+ye/fu8ePHt2rVys31FUXZtm2bpl2cO3fuxIkTo0ePdr/JRx991KZNG01v
3k8//fSmm25q06aN+020fj4UFBTk5uZqOt/YsGFDUFDQzJkz3W+Snp4+evTotm3but9Ea0cuXLiQ
nZ2t6Xxj48aNAQEBVqvV/SYZGRkjR44MCQlxv0kDTs+ysrLGjh3rfpNNmzaZTKaoqCj3m+zduzcs
LKx9+/buN9HakUuXLmVmZmo6cUpLS1MUZdasWe43+eKLL0JDQzt27Oh+E60duXz58tdff63pxMlu
t1dUVMyePdv9Jvv37x88eHDnzp3db6K1IyUlJQcPHtR04vTxxx+XlZXdcccd7jc5cODAgAEDunTp
4n4TrR0pLS3dv3+/ptOzrVu3Xr16dc6cOe43+fLLL/v06dOtWzf3m3zyySfTpk0zmUxurn/t2rW9
e/fedttt7u9i27Ztly9fjo6Odr/JoUOHevbs2aNHD/ebbN++fdKkSf7+/m6uX15e/tlnn2k6cdq+
ffulS5fmzp3rfpPDhw9369atZ8+e7jfRenpWWVm5a9curSdOFy5cmDdvnvtNjhw50rlz5169ernf
ZNeuXeHh4UFBQW6u34DTs927d58/f37+/PnuN8nMzGzfvn2fPn3cb7Jnz56xY8e2bt3a/SZaPx8+
/fTTs2fPzp071/3vF999913btm379evn/l4+++yzMWPGePX0bP/+/fJ7paZzJ3d5PCWWm5srhHjw
wQc1tbr++us1rX/w4MF7771XU5M//vGPSUlJ7q9/8uRJIcR9992naS9aO3L48OGf/OQnmpr85S9/
+fOf/+z++ufOnRNC3HnnnZr2orUj//nPf6KjozU1SU5O/sMf/uD++kVFRUKIO+64Q9NetHbk6NGj
kZGRmpqsWbPmlVdecX/9K1euCCFmzpypaS9aO5KXlzd9+nRNTdatW/fiiy+6v355ebkQYsqUKZr2
orUj+fn5kyZN0tQkJSXlV7/6laYmQogJEyZoajJy5Mjy8nL31y8sLAwPD9e0i9TU1F/84heamvj7
+48dO1ZTkzFjxly5csX99S9fvnzzzTdr2kVaWtoTTzyhqUlQUNDo0aM1NRk/fnxRUZH761+7dm3U
qFGadvHJJ58sW7ZMU5PWrVsPHz5cU5OJEyeeO3fO/fWrqqrCwsI07WLXrl1LlizR1CQkJGTIkCGa
mkydOvXkyZOammj9fEhPT1+8eLGmJh06dBg8eLCmJlarNTc3V1MTrR3Zv3//woULNTXp0qVLv379
NDW54447srKyNDXR2pGvvvrq7rvv1tSke/fuvXr10tRk/vz533zzjaYmWjuSmZk5f/58TU169erV
vXt3TU3uueeer776SlMTrR1xOByzZ8/W1KR///6dO3fW1GThwoVffPGFpiZaO5Kbm6v1xGnw4MEd
OnTQ1ORnP/tZenq6piZaO3Lq1KmpU6dqajJ06NDg4GBNTZYuXbpz505NTYYNG1ZVVeX++ufOnbv1
1ls17WLEiBGtW7fW1GTZsmVbt27V1OSGG24oLS11f/2LFy+OHz9e0y5Gjx4dGBioqcmTTz4pc9zu
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
Oz/88MOXX375tddeGzly5NSpU6Oiop577rlnnnlm//7927dv37Fjx6pVq1auXDlx4sTbb799woQJ
K1asWL169e7duz/88MOvv/561apVjz766NSpU3/605+GhoauWLHirbfe2r59+5tvvnn69Onf/OY3
991334wZM5544onOnTs/++yzH3zwwdatW1etWnXt2rWXX3559uzZM2fOfPnll00m0zPPPLNt27Yt
W7bYbLY2bdqsXr164sSJVqs1KSmpuLj4ySef3Ldv35YtWxYtWtStW7eEhIQbb7xx5syZKSkp+fn5
jz766DfffPPJJ5/MmTOnX79+b7zxxpAhQ6ZPn75169acnJy4uLjc3NwdO3ZMmjRp0KBB//jHP3r3
7j158uS9e/fm5OTceeedhYWFe/bsGTNmzKBBg9LS0jp06DBhwoQjR44cO3Zs6tSppaWl+/btGzJk
yIABAzIyMgIDA2+++ebc3Nzjx4/fdNNNQoivvvqqb9++ffv2PXLkiKIoI0aMyM/PP336dGhoaGBg
4LFjx8xms3rUFEXx8/uxyOMvf/nL1KlTTXrQ9GI7fPjwyJEj1f9+8cUXrVu3dv6mrz7W9MDb6xuq
oVKbupb7Zk3dA3C9Znp6emFh4ZYtW37zm99s27bNz89v3rx5zz777A033CC8x83QAQAAAABuWrBg
wYMPPqgoyl//+tfw8PCcnJycnJyxY8e+8cYbiqLcc889s2bNUhTlnXfeGTFixKFDh86cOTN06NBV
q1bJtjfddJOiKOvWrevfv/+ePXuKi4t79+5ts9kURbnvvvt69+6tKMr777/fqVOnDRs2KIrSrl27
e++9V1GU+++/v3Xr1qWlpZs2bQoICFizZo2iKO3bt58+fbqiKHFxcUKIc+fO7d69WwiRmJioKErv
3r3HjRunKMry5cuFEN9///3BgweFEC+++KKiKNdff31YWJiiKC+++KIQ4ssvv5RXDD311FOKoowb
N65Pnz6KoiQkJAghdu/eLafFWbJkiaIo06ZNa9++vaIob7/9thBi06ZNpaWlQogFCxYoijJv3jyT
ySQ7IoR49913FUUJCgqaPXu27IgQ4tKlS1u2bBFCvPnmm4qidO3a9bbbblMU5dFHHxVCnDhx4vPP
PxdCrF69WlGUQYMGjR49WlGUZ599Vgjx7bffynKkFStWKIoyatSowYMHK4ryyiuvCCH27dt3/Pjx
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
Hvzll18KIXbs2PHZZ5+tX7/+4Ycf7tmz569+9avx48f/5Cc/SU5Ozs3Nfemll/bv3//Pf/7zwQcf
HDp06FNPPTV69Oj77rtPbnbKlCk7d+5U9/L444/r072WJzMz8+OPP54zZ87gwYP1jgUwrpMnT/7r
X/+aPHny6NGj5ZIdO3Z89dVX6go33nijege3oUOH9ujRQ4co0dx16dKloKBgxYoVly5dSkxMnDVr
1uTJk1966aVWrVo98cQTH3/88SeffPLUU08JIV599dVp06ZZrdY//OEPpaWlv/zlL3ft2rVx48Zl
y5Z17NjxhRdeuPXWW6Ojo19//fUzZ8688MILDQ6pqqrK399f/e/w4cNnzpwpH6vviAY8aExbtubB
rRUUFDz88MOTJ0/OycnJzc1t06ZNXFzc008/3bNnT+E9CgAAMIZqP175+flZrVZFURYvXuzFUwHv
8/f3VxTlT3/6kxBi586d58+fF0LExsYqinL77beHhIQoirJmzRohxIYNG8rKyoQQd999t/ybtNhL
JgEAcN9tt90mhMjLy9u3b58Q4pVXXlEUZfDgwaNGjVIUZcWKFUKIb775JjMzUwjx7LPPKooyevTo
QYMGKYry6quvCiE+//zzEydOCCGWLVumKMptt93WtWvXxpzVnDt3Ts+/CHzCZrNVVVWp6fs2bdqc
OnWqMS8b16jAAgDAQObMmbNhwwb5+KWXXlq8eHH37t0LCgpSU1N/9rOfqavl5uaeOXPG39+/W7du
OkVai+Li4kuXLnXv3t3Pz+/MmTMhISEdOnQ4d+6coig333xzcXFxYWFhjx49goKC8vLyQkJCunTp
kp+ff+3atX79+l2+fLmgoKB79+6tW7c+fvx4cHBw165d5WaffvppeW4thHjwwQd/9atf6dfFluWd
d955/vnnU1JSxo4dq3csgHHt2bNn4cKFL7/88j333COXvPfee8uXL5ePw8PDV69era7cqVOntm3b
6hAlWoY+ffpUVFScOXOmU6dO7du3P3nypJ+f33XXXVdUVHTx4sVevXoJIU6dOtWhQ4eOHTuePn26
qqqqd+/ely5dunDhQs+ePQMCAk6cONGuXbvOnTufOXOmvLy8b9++jYnnzjvv/OCDD+TjlStXLly4
UDjdatMjD9iaXluTFVhTpkzJycnJyclp06ZNbGzs008/fd111wmvIYEFAICBFBUVvfbaa5s3b374
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
+BInJQCAZuXSpUvLli0rLy+PjY1dsGDBwIEDAwMDjf+9oiUnsLh+0JiowALcRAILzVJOTg7lV3Dt
+eeff/jhh+WdiHyDBBaApic/P//JJ588efKki3W4Q0WLlZyc/Nprr/3jH/8YOnTo3/72twZnhXyp
oqLi8uXLLTCBdfny5cuXL1933XV6B4JayAQWFVhewiDVnMg3S5NLYJWUlJSVlTVyI7ySm6tr166d
Pn2aBBZcKysre+ONNywWi8/SWJyUAGh6evToUVxcbDably1bVjONVVFR8eqrr/r5+UVGRh44cECX
COF7X3/99bBhw7766iubzZaYmPjAAw/oHZEGFy5cUBSlwZNYNd0Elpx+vmvXrnoHglrI6wKowPK4
Tz/99LbbbvPz81uzZo3escAzmugk7m3btp03b95jjz0mb6ah1SeffDJs2DA/P7/33nvP47FBd7m5
uVVVVSSwmgdFUaqqqqqqqiorKysrKysqKsrLy8vLy8vKysrKyq5du3bt2rXS0tKrV69evXq1pKSk
pKTkypUr8lfG4uLi4uLiS5cuXbp06eLFi0VFRUVFRRcuXLhw4UJhYeHVq1eFEAMHDvRZGivAq1sH
AE85e/as/GyV/86YMePtt99+7bXXkpOTY2Njn3766d69e8s1P/jgg6effloIYbfb7Xb7xo0b+QLW
vF29etXf3z8vL8/hcLz//vunT5+2WCx2u13vuDSQedgLFy40LGyHwyGE+Oyzz4KCgjwcmZdlZ2cL
IQoLC5vW8WohDh48KITIzMzk6HjQ1atX58+fLx8/8MADZ8+enT9//uDBgz/99FMhxK233pqdne1w
OCZMmODv77979+5BgwYNGTIkIyOjrKxs0qRJubm533777fjx44ODg7dv396vX79hw4Z98cUXly5d
mjZt2v9n7z7Dori+BoDfhaUXERSkKSpLKKIiKohKbDECooiKXRMLBImCf6LGaKwkdgNGTSgaEbGA
CooIUbGgYO+ACtgRESkqfRd23g/3dZ7JAsv22WXP7wPPlpk7Z3Znh5kz594pKip69OhR//79DQ0N
z549a2Zm1qdPn7t375aWlo4ZM6akpOTevXt9+/Y1NTX9999/O3Xq5Ozs/PDhw7dv344ePbqysvLW
rVu9evWytLTMyMjQ09MbOHBgXl7eq1evRowYUVdXd+3aNVtb2+7du1+6dEldXd3NzS0/P//Zs2fu
7u4EQVy5csXa2prFYl29epXL5bq7uz9//vzp06dubm7q6uqXLl2ysrKys7O7fv16bW3tiBEjXr9+
nZubO3DgQH19/fPnz1taWvbq1ev27dsVFRWjR48uLi5+8OBBv379jI2N09PTTU1N+/bte//+/Xfv
3o0ZM+bDhw937tzp3bu3ubn52bNnDQ0N+/fvn5OT8+bNm1GjRn3+/PnmzZv29vbdunW7cOGCtra2
q6vrkydPXrx4MWzYMDabnZ2dbWNj07Nnz8zMTBUVlSFDhpCfuYqKSmZmZs+ePW1sbJp/5tra2hcu
XOjWrZu9vT35mb958yYnJwdfRcjMzKytre3duzf5mb979+7+/fv4M09PTzc2Nu7Xrx/5mVdUVNy+
fdvR0dHCwuL8+fP6+vrUz7y2tvb69et2dnZWVlbNP3Mul3v16lUWi2VtbU1+5s+ePcvPzyc/8+7d
u9va2pKf+atXr/Ly8ng+80mTJs2dO3fXrl3jxo0bOXLkpEmTOnfu3PwzLy0tvXv3bp8+fczMzPBn
3rVr19GjR+Mt2c/P788//7SyskIIEQSB03k8f/k/hWnkcJp3794hhC5cuDB16lR5iAemEWcaaUtJ
SSkoKJgyZcpff/0VExOzYMGCnTt3Sun8iyGbVQIAAEE0Njbm5OTk5uYWFBS8ffu2pKTk3bt3+C+u
z2+NmppaXl6etbU1Qsjb2/v06dOyChkAAAAQXVhY2MqVK+3s7FRVVXNyctavX79mzZr79+/r6Oiw
WKzly5dv2rRp4MCBJSUlr1+/Dg8PX7JkyZUrV2xsbExMTAIDA/fs2TNq1Kg7d+5UVlbu27dv3rx5
qampw4cP19bWnjlzZlxcnK+v78mTJ5uamhITE/38/A4fPjx16lR1dXUPD4+TJ0/OmTPnwIEDVVVV
WVlZY8aMiYqKWrBgQadOnRwdHS9evLho0aJdu3YVFxe/fPnSzc1t27ZtoaGh3bt3NzIyun379sqV
K3///fcnT55wOBxHR8fVq1evW7euT58+dXV1+fn5mzZtWrFixc2bN01MTLp167ZkyZIdO3YMHTq0
oKCgpKRkz549QUFBGRkZ/fr169ix47x582JiYjw9PS9fvlxTU3Pw4MFZs2YlJSV5e3szmczJkycn
JCRMnTr16NGjHA4nNTXVx8cnNjZ29uzZurq6Q4cOTUtLW7BgQUxMTHl5+YMHD0aMGLFr166goCAz
M7Pu3btnZWWFhobu2LHj5cuXZWVl/fv3//3331esWPHVV1+pq6s/evRo3bp1a9euffjwoYaGxldf
ffXzzz9v3LhxwIABHz58ePny5Y4dO0JDQ69evdqzZ09TU9OgoKBdu3aNHDny3r17FRUV+FRt0qRJ
x44dQwjNmjXrwIEDPj4+p0+fbmxsTEhImDJlytGjR/38/JhM5tixY5OTk2fPnh0XF1dTU3P58mVP
T8/o6Oj58+cbGho6OTllZGT8+OOPu3fvfvfu3bNnz4YMGbJjx44lS5ZYWVl17tz51q1bK1as2LRp
09OnTxsaGnr37r127do1a9Y4Ojqy2ey8vLywsLC1a9empKRoaWmNGjVq6tSp8+fPX7RoUUlJSXh4
eFpa2pEjR+bNm2dgYLB9+3Z7e3sXF5f09PSSkhLyfLBfv35bt24dOXLklClTjhw54ufnl5iY2NjY
mJKSMmHChLi4uJkzZ2praw8bNmzs2LFBQUF0/nKAHGAwGLjnLM9f/k9hmvY0zc2bNx88eLBv377o
6Ohr166pqanNmjVr5cqVPXr0EGPL4gcqsAAAdGpqarp27dqFCxcePXqUk5OTn59PTVSpqqqamZmZ
mZk5OzubmZlpampqaGjgv42NjWFhYWw2m8FgTJgwYfXq1Th7hRDCB45kI3/99ZeampqsVwxIWU1N
zenTp11dXc3NzXft2uXj44Ov/Sqo3NzcP/74Y/bs2e7u7iLMvn379pcvX/75558SD0zabt68GRUV
FRgY6OzsTHcsgNfDhw937tw5d+5cNzc3umNpP6qrq0NCQsinixcv9vLyQght2LABnw94e3ubm5tb
WloymcyYmJjevXsjhFauXIm7aYwaNSomJsba2lpPTy8mJsbOzg4hFBoaWlZWhhAaMmRITEyMo6Oj
urp6TExMz549EUILFy7Ei+jfv39MTMzAgQMRQn///belpSVCaO7cue7u7hoaGg4ODjExMYMHD0YI
hYeHGxoaIoSmT5/et2/fDh069OzZk5x306ZNGhoaCKEJEyb06NGjS5cuXC43JibGyckJIbRmzRrc
+dTDw6Nz585WVlZaWloxMTG9evVCCC1fvvzz588IoeHDh8fExNja2mpra8fExNjY2CCEgoOD/fz8
EEKurq64QRUVlZiYGNyJyd/f/5tvvlFRUenbt29MTMygQYMQQrt37+7SpQtCaM6cObgwzdbWlnx3
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
LpvUFcYgBOhPDgBoB6qrq3v06FFeXs7lcjU0NBoaGg4cOIBHPwkKCtqzZw8e1qG+vn7EiBGSHQnr
zp07KSkpLBbLyMjo+vXrrq6u1C7ifGYRZEoAxHfhwoWRI0d+++23//77b0pKCnVATRk4cODAnDlz
xowZk56efu/ePYmMvyPnPD09L126VFtbS3cgwmGz2RYWFjo6OpWVlZMmTSLz/nzcv3/fyclp5MiR
GRkZsbGxs2fPlkGcbWpsbOzatauqqmpNTc3YsWMPHDjQ5iwFBQU3btzQ1dX19fWNioqiDrrcmn//
/VdVVfXff//dtm3b06dPqUN4SAqXy12/fv3UqVOHDBkyatSoI0eOiNPajh07Jk6cOHr0aH19fTEL
u7777rvY2NgBAwY8e/aMvG4E2jFDQ0MnJycYRRQAAKQNrhUAoCxiYmJ8fX0vXbqEEFq0aFFUVNTB
gwebmprevHmTk5OTlpY2cOBAPT29mzdvamlpXblyhe5423Dnzh3c23Ht2rV37twhX0lPTxetKXLG
5i2Ddi86OprBYOzcuXPGjBm0LF1TU/PAgQMjRoyQ/dJpUVtbq1j9B7Hk5OQPHz4EBgYKkrrC8Hjn
YWFhixYtkmZowjl9+vS7d+8CAgL279/f4viyzf3111+zZs0yNDRs7a6Fza1cudLX1/eXX34Rs6yJ
j3///XfdunWHDh2Ki4sTcEVak5+fHxoaunLlysTEROrgzSL4+PFjYmLioEGDTp48iYdtpkVUVBSD
wfD09BR2lpCQkDanZDAYPONei7MIEULl0xotoAILAABkA+5CCICymDt3rr6+/rNnzxBCKioqCxYs
mD9/fm1trZqa2uXLlxFC+ObTAwYMOH369OfPn2kOFwBZKSsrS0pKcnd3t7GxiY6OLigokOXSHz9+
fPXq1RkzZnTu3DkxMbGqqkqWS6dLQ0ODIvaajI6OVlNTmzNnjomJSYu3YeJRW1t76NAhR0dHV1dX
Z2fn+/fvyyBIQURHRzOZzO+//97c3Jx6eyk+NmzYYGJi4u7u7ubmRt7Enb+0tLRz58517NgxKSlJ
SoNhjR49OiEhwdXV1dLSkrzFkmhYLFZaWpqpqWnv3r23bdsmTlPx8fG1tbXz5883NTXdv3+/OE3J
J5wwwnfVjIqKCggIoL4ry74d/v7+W7dujYiICA8Pb3GCkJCQiIgIhFBkZGSLHVpZLFZhYWGLMXt6
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
de3a9cyZM7W1tT169FiyZAmldMWKFW+//bZYLL5x48b7778fHR1NKf3kk0/8/f3ZJStWrHj58uWj
R4++++67O3fuUEp/++03oVBIKU1KSoqMjKyoqHjx4sWtW7dyc3Mppf/8809+fj6l9NWrV69evWr+
9ywAALS0sLCw7t27E0I8PDxevnzJdTkAABxDgAXtwcOHD9tlLPv06VPZ18UCjobJvkf3+eefyx4q
Kyt7+vQppbS8vPzBgwclJSWUUhYMUUrv378fHR1dXV1dUFDw559/ZmRkUEpPnDgRERFBKb1x40ZA
QAAbYfPmzdevX6eU+vv7s1TlzJkzixcvzsnJefr06ezZs48ePUopFQgEn376KaX02LFjdnZ2f//9
d35+/ttvv83yizlz5rCE4uDBgwYGBtHR0f369ePxePPmzaOUTpkyRVNTk13LXktiYqKampqbmxul
9JNPPiGEVFRUREVFEUL27NlDKTUwMHj//fcppUuXLiWE5Obm3rhxgxCyc+dOSmnfvn3feecdSuma
NWsIIWlpaX///TchxNvbm1I6bNiwt956i1K6bds2XV3dhISEx48f9+rVa/PmzZTSWbNmsXQjNDTU
1tY2Pj6+rKxswoQJgYGBlFIfH5/58+ezT9HChQsTExNra2sFAsHhw4dZ/Zs2bZJIJGlpaZMnT2YB
VkhICEsZrl69unfv3urq6idPnhw4cODBgwfsc86iivj4+OPHj1dUVBQVFZ08eZIdPX/+/JUrVyil
586d4/F4M2bMePHixdmzZ9PT0ymlsbGxIpGIUvr48eOrV6+WlZVVVVXFxMQ8evSIUpqSksJijvz8
fPYqampq7t69yxLAf/75h/1NKC0tffDgwYsXLyilmZmZeXl5lNKCgoLHjx9LJJLKysonT55UVFSw
cdjfovLy8uLiYolEIhaLS0tLWRtaRUUFS0lqamqqq6slEgmltLa2tjHfAU1RW1vLGp1qamrKy8vF
YjGltKSkhL2isrKy3Nxc9kKys7PLy8vZa3/y5AmlNC8v7969e2Kx+OXLl+xvLKU0KSmJ9aM9evTo
ypUrFRUVZWVlZ86cuX//PqVUKBSePn2aUpqQkLB79272OfH397906RKldM+ePWwFk+vXr3t5eaWn
p7948WLhwoUsAfzuu+9Y0BkdHT1p0qSbN2+KxWJ7e/t169ZRSgUCgbm5OaU0IiLCwMDg+PHjlFK5
9LO0tJQlmLt27aKUGhsbjxkzhlLq5eVFCMnOzma9cn5+fpRSCwuLESNGUEo3bNhACElKSkpPTzc1
NWWJmLu7OysmPDz8k08+ycjIKC0t/fbbb8+ePUspDQsLO3nyJKX08ePHly9ffv78eW1tbWZmJvsL
0ApfVgCADuvJkycffPABIWTQoEHs33EAgA6r/fxXHzqyL774Qjbo0dLS6tQuaGj8z3NC1dXV33iJ
mtr/zAtm6QMze/ZsQkh1dfXp06cJIQcOHKCUdu3addKkSfTfJprCwkI23Yw10fTq1evdd9+lMk00
8fHx0iaaQYMGsRDKx8eHZUzsuYpff/01pdTe3n7QoEGU0t27d/fo0ePWrVuFhYV8Pn/Tpk2U0iVL
lnz44YeU0qioqA8++ODWrVv9+/fX19dnqVBAQMCiRYsopXfu3LG1tWWDr1u3jkVjZ86c2b59e3V1
9ePHj4ODg1mOcOLECZbsJCUlCYXCV69elZaW3rhxg2V2KSkpDx8+pJQWFRU9fvxYLBbX1NQUFxez
pINlHC3t+++/ZwGWUkZjSdz58+eVMhqoCha9UUpLSkqysrIkEklZWdlff/3FvtMvX75848YNSmlc
XNzevXsrKiqePHni5+cXGxtLKd26dStLnE+cODF37txnz55lZGTY29uzNrSJEyeOHj2aUurr60sI
iY+PZ28MrFq1ilJqZ2fXs2dPSimbiXnp0qXi4mLZVjIjIyNKaVhY2PDhwy9fviyRSNzc3FjmHhoa
un379tra2qdPn0ZFRbF2MJblcfI5bB/YpFcnJ6cmnwAAKqS2ttbPz09LS0tbW3v79u3sPSEAgA6I
R7EsNKg+Pz8/9v95ZuzYsV27duWwHmX5559/kpOTpR++9957+vr6DV9y586dZ8+eST+sqKjo3Lkz
2963b19CQsLOnTszMzN/++23jz76yMrKavv27f369fv444+vXLly//79+fPnl5WVXbhwwcbGxtLS
8ty5c7q6unZ2dpmZmU+ePBk9erREInnw4EHv3r1NTEz++ecfLS2tnj17vnz58tWrVwYGBmpqamKx
WFNTswmPTTQ3NzcwMGCzzGRt3rx5w4YNiYmJI0aMaOyYbQr7WxoXF2djY9PMoWpqavr27dupU6eM
jAy5yBKg+SoqKrS1tSUSSWZmpp6eXq9evW7fvl1UVOTo6JiUlHTlypUZM2bo6ur6+PjY2NjMnDnT
19c3KSnp+PHjf/7555o1a/bs2TNq1Cg9Pb358+cfOHBg6tSpUVFRYrE4NDR01qxZx44dmzVrlpaW
lpOT0+nTpxcvXhweHv7w4cOkpKQ1a9Z88803Tk5Oa9euHT58+Ny5cxMSEoqKihwcHAghVVVVurq6
XH9uWklISIinpyf532d3ODs7C4VCJyenqKgodgLbbmCEBk6QwwYnhNR7iUAgYGvMBQcHs3c76j1q
YWHB3sYAgJYQHx8/d+7ctLS09957b/fu3UOHDm21WzfwbS4Siezt7es99MZrAQAajesErTUo8j5k
096rxDucbUR5ebn0rzRr/2kfXr16JX1dbJGmN2KrgzMff/xxYWFhSxepLLJrYMmStne1fknKpcQO
rLCwMEKIj49P84cCaDnSGZrXrl2jlD58+HDPnj0PHz6sqalZtWoVW9Tvu+++Y8m4UCg0MjKSzpR0
cXGhlC5cuJAQUlxcfOnSJULIjz/+SCm1s7P74osvKKXHjh1btWpVcXFxYWHhqVOn2FRZFfqh1wD2
2wX5dwE7Silbl62FfuUIDg6WrrHo5OQkvansrdl23d8bY2JipOfXvRYAlKu6unr9+vU8Hk9LS2vt
2rVsRn9LU+TbPCYmxsLComnXAgAoTuXfuufJCAkJ4bocaD2vXr06efIke6qajo6ORCLZs2dPQUEB
W766fdDW1qaU7tu3Ly8vjz3u7Y1GjhwpFot37dr19ddfnzhxgj0LD9qZvXv3qqurf/bZZ1wXAtAQ
HR0dQkjfvn3HjBlDCBkwYMDChQsHDBigrq6+fft21sizdu3aW7du8Xg8R0fHwsLCmTNnEkLu3bvH
3q5ftGjRjh07DAwMunfvPn/+/GHDhhFCJBJJQUEBIeTixYs7duyQSCTJycnTpk1jk6OtrKzeffdd
Qsju3bvd3Nxyc3MLCgp27drFnuPJ5l1y9QlpLAsLC/Z5IIT4+vpaWFhID4WEhPB4PGdnZ7YhSyQS
yZ5ACOHz+Twej8/nS0+W+33Jw8ND2lfl5uaWlpYmezQ0NJStqkYIcXJykrvWzs6OPR4UAFqBpqam
j4/PzZs3hwwZsnXr1mHDhp09e7alb9qcb3P8iAAA5VLtAItNU2JRnJeXl6enp0AgqHuah4cHpbTh
LnpFzoG2oKKi4uTJk7NmzTIyMvr444/19PTYfh6Pt3DhQvaglnbms88+MzExUfx8DQ2NJUuWLFu2
7ObNm/3792+xuoAbT58+FQqFkyZN6tOnD9e1ALSIAQMGDBw4kBBia2u7cuVKHo83fPjwAwcOjBs3
jhBy8+bN48ePE0KCgoIePnxoaGg4ZMiQw4cPOzo6EkJmzJjx/vvvE0IePXp0+vRpTU3Ne/fuLV26
9Ny5c4SQcePGsTm8QUFBH374YU5OTnFx8YEDBzIzMwkhtbW1nL3m+vD5fCcnJ4FAIBKJhELhV199
9bozWeMD69tiq5jJYnN2MjIy2LTEeqcBSvn7+7u5ub3uqKWlZWpqqtxOkUjEcjE3Nzf8TxWgFfzn
P/+5ffv2jh078vPznZycZs2aJbt8REtozrc5fkQAgBKpcIDFsippmz37gcjeq5R7Q1IgEEjfhyT/
vhUpxfYr+Gam7JicvOqOLC8vT5pbhYaGVlRUaGpqTpkyheu62ih9fX0zMzNNTU2uCwElO3DgQE1N
zaJFi7guBIBjnTp1GjBgAI/HMzY2dnd3f+uttwghO3fu3LJlC/n32YtGRkYjRow4d+4c+8di4cKF
M2bMIIQUFxdfvny5S5cuycnJn332WXh4OCHE0tKSnXbixIlvvvmmqKiosrKSPQCUq9e4bt26yMhI
X19faQ9UvVxcXBoeR3YGYgPpFZ/Pd3FxaeCEetnZ2bG3EsPCwqS/awFAi9LQ0Fi5cmVqaurUqVND
Q0MHDx78888/t1yHaXO+zfEjAgCUSIUDrMjISEIIm1DAsO56ljcx7MflkCFDpHsEAkFGRgabgO3k
5PS6weu+mclatBgnJ6fAwEDZG0ErMDU13bRp07fffmtkZMT2TJw4sVu3btxW1Wb5+/v36dMHi2W2
P/v27TM1NZ08eTLXhQCoBn19/YkTJ5qbmxNC1q9f/+233xJCvL29a2trDQ0Nhw8fHhYWxr6hRo8e
PWDAAELIuXPntm3bRgiJj48fNGjQ9u3bCSELFizYvXs3ISQ7O7uwsLB1irezsyOECIXCZrYtSJ8H
0sA/Ciy9avhGaWlpsr9TyVm3bh3+0QFoTWZmZmFhYWFhYfr6+suWLbO1tWUPkG05zfk2x48IAGg+
FQ6w3qjetytZ7MVW2WigSb7um5nS9lcej8ee1AOtb9CgQdra2kVFRewhgx9//DHXFbVdtra2y5cv
NzQ05LoQUKbbt29nZma6u7ujtw5AKbp16zZ16lQ+n08I+f3336XP2ouPjzcyMjI1NV29evWYMWNq
a2uPHj3K1hnw8fExNjbOz89PSUlZsmQJe3RGTU1NC1WYnp7e/BYwNnmQEJKRkVFvCzmPx3tdejVz
5kzpUlxCoVCuP4vNcGTboaGh7DMJAK1p6tSpqampK1euTEhIGDhw4NSpU1NSUpQ4fnO+zfEjAgCU
S4UDLJYxSd9UJIRkZGSQf9+uVLr58+cTQmJiYhpu3YIWdeTIkTVr1gwbNmzVqlVaWlqYP9gAFxeX
wMBAU1NTrgsBZfrzzz8JIWwOFAC0EHV1dSsrK0IIn8/39/e3tbVVV1evqqpifdnOzs7u7u4mJiaJ
iYnBwcGPHj2qra01MDBYuXIlIeTSpUvJycmvW06roqLi8ePHrflayL8Lhjo5ObH6AwMD5TIs9mFg
YKDs0gqEED6fLxKJ7OzsvLy82CHpug3SowEBAfPnz2dHIyMjsZYoACd0dHR27NiRkpLy0UcfRURE
jBgx4vPPP5f9aVNQUMAef9EEr/s2Zz8ECCE8Hs/e3j4jI0N2lRX8iACAFtGizzhsabIvgfVbsbmB
7Bcs6YNa2YfsydOyp7Eciu2XniN7reyFbH4iC7DYfWNiYmRPgJYWHR2tpaXVp0+f7OzsjIwM9pB1
eJ09e/aMHTs2KyuL60IUNWDAgFGjRtXd7+PjQwhJTExs/ZKU6/vvvyeExMXFNWcQS0vLnj171tbW
KqsqAGiO7OzsFy9eFBUVTZkyZcuWLZTSsWPH6urqVldX37x509/fPz8/X+4SPp+fnJzMRbEA0CHc
unVr/PjxhJBOnTqtWrWqsLCQUvro0SM7O7vq6mquqwMAaBYV7sAihFBKCSEs1A8MDAwODn7jIhEB
AQHsudSNnQl48OBBQoi9vT17JxNaWWJi4owZM7p06SIUCvv06TNw4ECWa8DrsOktVVVVXBcCSpOc
nJyWlubm5qampto/ugHajT59+nTt2tXQ0PD06dNsda0dO3b89NNPmpqax48f/+qrr/Lz8589e+bu
7n7r1i12iZ6e3vjx45U7wQcAQGr06NGXLl0SCoWDBg3asWOHhYXF1q1bKysrRSLRf//7X66rAwBo
Fh7l7tk6nBMIBIGBgV5eXnikaxuXnZ1tY2NTUlJy7ty5sWPHcl0OtAhzc3MDA4M7d+7I7d+8efOG
DRsSExNHjBjBSWHK4ufnt2bNmri4OBsbm6aN4OPjs3Hjxujo6A8//FC5tQGA0tXU1Jw8eXL27NlR
UVEuLi4HDhyYP3++jY0NpTQ+Pr579+5XrlwZOnQo12UCQLslkUiOHTu2fv36hw8fGhsbFxQU8Hi8
8PBwPAcGAFRXh3sbX3Yt9sDAQCcnJ6RXbZxYLJ4xY0ZBQcHvv/+O9Epxt2/fDg4OLikp4boQUJo/
//zTyMho3LhxXBcCAG+moaExe/ZsQoizs3NVVdW0adPy8vKSk5OzsrIIIYWFhePGjUMfFgC0HDU1
tblz5967dy8wMLC8vJwQQimdN29e66/EBwCgLB0uwLKzs5OdQomlBNu+9evX3759+6uvvpo2bRrX
taiS8PDwJUuWPHv2jOtCQDkyMzPv3r3r6uqqoaHBdS0A0DhaWlp6enpdunSxsrIqKipiO1mGlZ2d
zW1tANC+lZaWCoXCyspK9uHz58/nzJkjFou5rQoA2oGcnJypU6fWnUDTovAfIWjTLl265O/vb2Nj
s3nzZq5rUTHz588fM2ZM3759uS4ElIM9f3D69OlcFwIAjVBTU8NC5xcvXsybN48QMn/+fAsLCz6f
b2FhYWFhoa+vz3WNANBuicXirVu3mpqassepS8XExKChGwCaiVIaHh4eERHh6uq6ceNG9gTnltYO
O7BCQkJkHwLdlkdmA8o9zVqRu7fca2xTioqK5s2bp6Ojc/ToUU1NTa7LUTFmZmbvvvtu586duS4E
lOPPP//U1dWdMGEC14UAQCNER0cvWrTo3r17Xbt2PXXqVExMzIEDB9atWzdr1ixra2tF0qtHjx4t
XryYx+P9+OOPaJoAgEbR1NTcuXPngTrqpldZWVkeHh48Hi8oKKi6upqLYgFAJfXp0yc8PPydd95p
nW4sle/AYguxE0KCg4M9PDy4LSYkJMTT07PeVeGldTIxMTF2dnatW53qWbRo0ZMnTw4cOGBhYcF1
LarH19fX19c3NTV18ODBXNcCzZWbmxsbGztr1qxOnTpxXQsANIKTk9OWLVuGDh06efLk1atXOzg4
NHYEc3NztrF8+fK8vDxXV1dl1wgArUpdXb22ttbGxqasrOzBgwfm5ubGxsbx8fFdunQZPHhwVlZW
Xl6elZXVq1evUlNT+/Xr16NHj8TERE1NzaFDh2ZnZz99+nTEiBESiSQpKalPnz69e/dOSkqilL79
9ttPnz7Nzs4eNmyYhoZGYmJiz549+/btm5qaWlVVNWrUqLy8vKysrMGDB3fp0iU+Pt7ExGTAgAEP
Hjx48eLFO++8M2DAAFael5dXbm6uq6sre9JXvX82cAgn42SVKAAnK+VkiURCCJkxY4aHh8fy5cul
3Vj+/v6WlpakZah8gBUZGck2wsLCWjrA8vDwaNotQkJCZB93qGDLVQe3e/fusLCw2bNny/U8g4JG
jRq1YMECTE5pH6KjowkhTk5OXBcCAIQQUlVVVVVV9epf9W5LN4YOHRoTExMRERERETF69Gi2pKO6
uroiN0pKSpL9cMuWLVu2bGmZ1wQArcTe3j4mJubly5c3b950dnb+9ddfFy1aNGHChFGjRl28eHH7
9u0///zzs2fPMjMz33vvvZ07d65YscLNzc3Y2Pj27du//PLL999//+DBg6qqKltbW29v740bN86d
O7e6uvrBgwcHDx789ttv//rrLyMjI1tb25UrV+7YsWPx4sWPHj16+vTpyZMnly1bdunSpREjRtja
2i5evDgkJEQgEFy/fv3WrVuyFW7dunXr1q1cfX4AZPF4vIb/fOMJjTqNw5PrHm37Nb969erSpUsV
FRVnz55NTk4mhPTs2fODDz5o0UVsVDvAEolEGRkZFhYWGRkZQqFQJBLJtTWxlqh6r3VycmIruPP5
/IyMDLn9sr1UbNvJycnNzY1tREVFiUQie3t72avYUUJIYGCgbFxFCElNTZW9tVx/FjufbUs7s5yd
nYVCodzOjiM9PV0gEPTv33/37t1c16Kqpk+fjvWS2o3o6Ggej4f5gwCKqK6ubiBXaux23Z1VVVXs
LccmiIuL+/XXX62traXNDg2Ta6GdMGHChx9+2LRbA0AboaurO2XKFE1NzUGDBvn5+Y0ePZoQ4u3t
bWpqSgiZOnVq3759dXV1+/fv7+fnN2bMGELImjVrunTpQghxcnLq1q2bsbFxTU2Nn58f+8/IypUr
a2trCSHjx4/38/Pr3bt3586d/fz8bGxsCCFLly4tLS0lhLz77rt+fn4DBw7s0qWLn5/fiBEjCCGf
f/75xIkT33rrLdkKP/zwQ0dHR9LC/zdu+/85x8lt4WRoy7Kzs/v27RsSEkII6dWrV2BgoIeHR0vP
F1HtAMvX15cQ4uLikpaWJhQKQ0ND6w16LCws0tPTWSTE4ie2LRKJQkNDMzIyWNgkmxm9EWsLYr1z
suqdQjhkyBAiE1TJzXZk5bGYzNfXNyoqSiAQCIVCdhqfz7e3t697o/bNw8Ojurr6yJEjaCBqssOH
Dx8/fvyXX34xMzPjuhZoFkrphQsXhgwZ0qtXL65rAWguli41M5E0ycIAACAASURBVEJq+OQmp0tS
GhoanTp16tSpk7a2NtswNDTs9C/pTkW2tbW1b9++zTqvR44cuW3btkYl0RoaGtHR0eySGTNmBAcH
GxkZNfPVAUAbMWDAgK+//pptL1++nG1MmDCBfcvr6OhIjy5ZsoRtODg4SGciS49+9tlnbMPW1tbW
1lbuqLu7O9uwsrKSLrEsPfrxxx+zjQsXLrB8fPr06cHBwd27d1fmSwWA9qtXr17ffPNNK0RXjGoH
WCxvmjlzZnJyslAojIyMrLv4FCHExcWFEGJpaSkUCmVnYyYnJ7MZiDNnziSEuLm5KR5gkcZM5/Hw
8Bg2bJi0Y8vT0zMsLIz1f0nLk8Wq8vT0lLaPiUQixQtTdcePH79y5crixYs7Wt+ZcmVkZJw/f/7l
y5dcFwLNlZyc/OzZs1mzZnFdCKi2mpqa6upqsVhcXV0t3Wj4QwVPU/DDmpoapfxE0tDQkIuKpOnS
6yKkxmZP7LmByrJ27dr+/ftv3rx57ty5amqNfnjOhx9+SCnNzs7GuxEA0HI++OADSunjx4/xAGsA
UFCnTp0CAwOXLFmipaXVajdV4QCL9aoRQqTBUEZGRqsFPQcPHrS3t2edjayFquHz7ezsWBcV67R6
4/mkzsxBNq203Xv58uXq1au7deuGZT6aydvb29vbm+sqQAnYAliYP6gqamtra/6XInuanxO98bQW
7eTV0tLS1NSU/sk2tLW1u3btKv1QS0uraXGS3IZy06WWlpmZOXXq1C+++EJbW7s54yC9AoBWgPQK
ABRnbGws7R5tNar0W6CcsLAwQojsyuiBgYG+vr5ubm6KD+Li4hIYGMjmHrIBZaWlpUlvJEcukBII
BPU2fzFs7oDsCXw+X8GqFH8t7cOWLVtycnJ++uknY2NjrmtRbX///XdKSoqLi4uenh7XtUCzREdH
a2lpjR07lutCWpZEIlE87mnCntYZtra2tjVnfKurq8sGRtI/dXV168ZJjf1Q8as0NTWxUMXrDBw4
cOXKlVxXAQAAANAeqHCAxab7SVOhmTNnBgYGCoXCRgVYAQEBkZGRssuoMx4eHv7+/kKh8HW/lMsu
mGVhYcHK8PDw8PT0ZKPJLXQlewsLCwvp/MHXVZWWliZ7SQdZAys9PX3nzp0jRoyQTvWHJjtx4oSv
r29qaioCLJVWVVV17do1Ozs7HR2dBk6rt6Onpg7ZnWKxWPYqbgMgsVjcRn7K8Xg8TU1NDQ0NdXV1
jf/F9mhqanbu3LmBE5q2p2lhk4JPsgMAAAAAaAd4beT/DG2B9GmDDadL0HJcXFyEQuHVq1fZI1eg
OVJSUu7fvz9x4kRdXV2ua1GIubm5gYHBnTt35PZv3rx5w4YNiYmJ7HE5XKmpqamurq6qqnrjn5WV
ldKMRjYwunr16sWLFz/99NPu3bs3kCvJ7Xz+/HlaWpqpqamBgUEDZ3L+k5zH48lFM01Ic5QbCTXt
kiYsUQQAAAAAAK1AhTuwoJ2JiIiIioqaO3cu0iulGDp06NChQ7muogVVV1eXl5eXlZWxJX7kgiRF
kqYG/qy7kz2guvkOHTr0ukNqamqs90dWeXk5IaRz587Sxh8NDY26pzVnp7IiIaV8fgAAAAAAAOqF
DixoEyQSiaWlZV5e3oMHD3r16sV1Oe3B+vXr2RTCwYMHc12LPEppRUVFeXn5y5cvX758yTY++eST
zp07r127Vm7/7du3U1JS2IOfZfeLxWKlFMPj8bS1tbW0tLS1taUbTftTuiGXELEPDx48+MMPP/z5
559WVlZ1U6TXPbzjnXfeycrKys/PR2cQAAAAAAB0ZOjAgjbh2LFjmZmZ//3vf5FeKcuQIUOmT5/e
cvMHS0tLnz9/XlhYWFFRIZsrSTfkPpTdX1FR8bro3NPTs979Dx8+NDAw0NHR6d27t46Ojo6OTteu
XXV0dHR1deuNkBT/U1NTs4U+RXJMTU0JIX369OnXr5+Cl5SXlyckJEyfPh3pFQAAAAAAdHAIsIB7
Eolky5Yturq6K1as4LqW9mPOnDlz5sxp1CXl5eXPnz9//vx5cXHxcxl1PywpKVFwSp26uro0b9LT
0+vZsycLntifshsbN27s2rXr7t275fb/8MMP3t7eV65c4XYNLE6IRCKJRNIBn0YKAAAAAAAgBwEW
cO/kyZOpqalr1qwxMjLiupb248SJE2FhYf7+/qyp7dWrV3l5efn5+dI/ZT8sLi5+9uxZwxOKdXR0
unXr1q1bt6FDh3br1s3Q0LBbt25GRkZyeZNcPtW5c2cFC/b39zcwMJg4caLc/o7cfHTr1i1CiK2t
LdeFAAAAAAAAcAwBFnBMIpH4+vrq6OisXLmS61pUGKX02bNn2dnZT548yc3Nzc/Pj4iIuHPnzv37
91+8eJGXl1dWVlbvhfr6+iYmJubm5tbW1t1ksHxKysjIqNWm2oFUbGyslpbWqFGjuC4EAAAAAACA
YwiwgGNhYWFJSUmrV682NjbmuhYV8Pz58+zs7Ozs7MePH8tuPHnypLq6Wu5kNTW1nJwcExMTGxsb
ExMTU1NT9qd0w8TEpFOnTpy8EHgjSmlcXNzIkSPxNQIAAAAAAECABVyilG7evLlLly6rV6/mupa2
paqqKiEhISUl5enTp9KsKjMzs6qqSu5MQ0NDMzOzoUOHmpmZ9e3bt0+fPj169DAxMWELWo0dO7Zr
166cvARopszMzMLCwsYuZAYAAAAAANAuqWqAde/evfPnz1tYWDg7O/N4PK7LgSYKDw9PTEwUCATs
AW0dU0VFRXp6enp6epqMoqIi2XM6d+5sZmb23nvv9e3b18zMjGVVbON1+dT69et9fX1TU1MHDx7c
Kq8DlCw2NpZgASwAAAAAAABCiIoGWH///bf0eWSff/75nj17kGGpKH9//06dOq1bt47rQlrPgwcP
MjIy0tLSpIlVTk6O7OrpxsbGgwYNsrS05PP5Q4cO7dOnT9++fbt3797YG02bNs3c3Lxnz55KLR9a
D1vB/T//+Q/XhQAAAAAAAHBPJQOsvXv3Srf37du3YsWKYcOGcVgPNM3du3djYmLmzZvXjh8+WFVV
lZKSkpiYmJCQkJiYePfu3RcvXkiPdu3alc/n29nZsbjK0tLS0tKyW7duSrm1lZWVlZWVUoYCTsTG
xhobGw8cOJDrQgAAAAAAALinkgFWQUGB7Ic9evTgqhJojl27dhFCli5dynUhylRaWnr37l0WVyUk
JKSmporFYnaoU6dOtra2o0ePHjhwIEusevfu3XKV+Pr6+vv7x8XFvfXWWy13F2ghlZWVd+/enTRp
EteFAAAAAAAAtAkqGWD5+Pj8/vvvbHv8+PHtuH+nHSstLT1y5IiVlZWqz5CqqamJiYkRiUTx8fGJ
iYkPHz6Uzgfs06ePo6PjyJEjR40aNXLkyP79+7fmXNc+ffr85z//6dy5c6vdEZTozp07YrEYC2AB
AAAAAAAwKhlgWVhYZGdnX7hwYdGiRRoaGlgASxUdOnSovLxcRduvysvLRSLRtWvXrl27FhcXx54M
qK6ubmlpOXv2bBZXjRw50tjYmMMiFyxYsGDBAg4LgObAAlgAAAAAAACyVDLAIoT06dNnwYIF4eHh
p0+fzsrK6t+/P9cVQSNQSnft2tWtW7c5c+ZwXYuinj9/fuPGDRZa3blzp6amhhCio6Mzbtw4BweH
cePG2draqqmpcV3m/y88PFwoFG7cuBFzbFVRbGysmpqajY0N14UAAAAAAAC0CaoaYDELFy48derU
/v37N23axHUt0AhXrlxJTU0VCARdunThupaG1NTUhIaG3rx58/r163///TebG2hoaOjs7Ozg4ODg
4DBq1CgNjTb6TXT79u3du3cvX74cAZYqunXr1uDBg/X19bkuBAAAAAAAoE1oo//3VpCjo2OfPv+v
vfuOa+r6/wd+IggoDnDVKloFgqKIWsUBbqs0wVZaEcVRnMRNrPOjlDpwopZYB0RUsK0yqqICEVtn
IY5a0YLKcuOoIuIAlZH7++N8e38pyyQEbhJezz8+D3Luzc3rJuGD991z3tcqLCzM39/fyMiI6zig
qp07d/J4vJkzZ3IdpHxPnjw5duzYkSNHTp48+e7dO0JIy5YtR48ePWDAgP79+zs4OOjUTKuKLF26
dN68eU2aNOE6CKjt0aNH9+/fnzp1KtdBAAAAAAAAdIV+F7CMjIwmTZoUEBDw22+/ff7551zHAZU8
ffr04MGDQ4cOtbOz4zrLf9y8efPIkSNHjx69ePGiQqEwMjIaOHDgyJEje/bs6ezszHU6tT179uz+
/fs9e/bU8WluUBYaYAEAAAAAAJSi3wUsQsjUqVPXrl27fft2FLD0RXR0tEKh0JH+4iUlJefPn6fN
1DIyMgghDRs2HDVq1MiRI4VCoaWlJdcBNbd79+6AgIAbN27Y29tznQXUc+HCBUIIbkEIAAAAAADA
0vsCVrt27b766qtDhw5dvny5Z8+eXMeBDztw4ED9+vVHjhzJbYysrKytW7dGRkY+ffqUENKqVasZ
M2aMHDly8ODBpqam3GbTCqFQ2Lx5848++ojrIKC2ixcvNmzYsFOnTlwHAQAAAAAA0BV6X8AihHz/
/feHDx9esWJFbGws11ngA+7evSuXy8eMGdOgQQNOArx+/ToiIiI0NPTSpUuEkA4dOkybNm3kyJFO
Tk48Ho+TSNWkb9++ffv25ToFqK24uPjy5cu9evVCXz8AAAAAAACWHvSi/qAuXbqMGjUqLi7uzz//
5DoLfEBERATDMF5eXjX/0hcvXpw+fXqrVq18fHyuX78+efLkpKSktLS0NWvW9OrVy8CqV4SQwMDA
Nm3aZGVlcR0E1JOampqfn4/1gwAAAAAAAMoMoYBFCPH3969Tp86KFSu4DgIfcODAAUtLy5psWJab
m7t161ZHR8c+ffqEhoZ26NAhODj40aNHe/bs0cfW7Kpr1KhR69atjY0NYZZlrUIbYKGDOwAAAAAA
gDIDKWA5ODh4eHjEx8fTu3eBbrp+/frff/89atQoExOTGni5R48eeXt7t2jRwtfX98GDB7Nmzbpy
5crly5dFIlGjRo1qIAC3RCLRhQsX2rVrx3UQUA/9PzHMwAIAAAAAAFBmIAUsgklY+uDAgQOEkHHj
xlX3C6Wnp0+YMKFt27b79u3r27dveHj448ePt2/f3r179+p+ad2RkJCwePFi2qIe9AgtO6L7PgAA
AAAAgDLDKWB17tzZ09Pz+PHjdAEO6KADBw60atVq4MCB1fcSaWlpEyZM6Ny58y+//DJ48ODExMQ/
/vjjm2++MTMzq74X1U2JiYmBgYHPnz/nOgio4cWLF+np6Zh+BQAAAAAAUIrhFLAIJmHptmvXrt2+
fdvDw6NOnWr51qWlpY0fP97BweGXX34ZMmRIYmLib7/95uLiUh2vpRfmz5+flZVlY2PDdRBQw6VL
lxiGQQMsAAAAAACAUgyqgGVvbz927NiEhASZTMZ1FigtLi6OEPLFF19o/cg3b94cN26cg4PD/v37
hw4dmpSUdOLECT0qXcnlch6Px+Px+Hx+RfuIxWK6j1QqVfGw79+/f/36tUKh0FLMClWeX5Wz0x1C
oZCmFQqFZbdq8CmoS48aYLHvRrmfbA28VwaDz+dXdBdUvI0A6mL/6FByubzUDvrya1X5iejX31YA
AABtMagCFiFk/fr1DRo0mD17dkFBAddZ4D9iY2MbNmw4YMAALR4zPz9/wYIFXbp0OXDgAC1dJSQk
6N29BZ2dnRmGSUpKqmgHuVwukUgYhmEYRiQSqXjYHTt2dO/e/c6dO1qKWaHK83/w7HSHVCp1d3en
7zMhRCwWK2/V7FNQ16VLl0xMTD799NNqOr620Esp+m7w+XxO3ivDIBaLK7r+xNsIoDHmX6X+SaB3
v1YVnYge/W0FAADQIkMrYLVp02bVqlV37txZtWoV11ng/3v27NmlS5eGDx+uxfsPHj9+3MHBYcuW
La1bt5bL5fpYulJRVFSUr68v/VkgEKj4H42HDh26evXq5s2bV2c0g+Lj4+Pj40N/dnd3z8jIUN6q
2aegrr///tve3r5mbtNZFc7OzkFBQRVtrZn3ygDI5fK4uDg/P79yt+JtBNA6/FoBAADoNUMrYBFC
5s2b9+mnn27ZsiUlJYXrLPB/ZDJZSUmJm5ubVo729OnT8ePHCwSC58+fSySS27dv9+3bVytH1n12
dnY3btxQZc9Bgwb5+fk1a9asuiMZpMDAQHd394q2qv4pqCUvLy87O9vBwUHrR64O7AIWd3f3SopZ
1fReGQZvb+/w8HBV9sTbCKCWShaDs/Ti10qVEwEAAKg9DLCAZWRkFBwcrFAoZsyYUQMNgEAVcXFx
derUqfq/wBiGCQsL69Sp0/79+0eMGJGamjpv3jwjIyOthDQwW7du7dSp0+3bt7kOon/4fL6bmxs7
G6vGpKamMgzTpUuXGn5dzdAFLAzDxMTE4OJKM25uboY6bxSAK+z/NZW7GFyPGMyJAAAAaJEBFrAI
IU5OTrNmzZLL5aGhoVxnAVJUVJSQkNCzZ8+PPvqoKsfJysoaNmzY5MmT69atGxkZeezYsbZt22or
pL7IyMjo1KkT1ykMGa1eVTKliFTbp5CamkoI0ZcZWCw/P7/MzMyKtuIbWwmJRMLj8egdJyrq407h
bQTQQNnF4Mr06Neq8hMBAACoPQyzgEUICQgIaN269dKlS//55x+us9R2iYmJL1++rOL6wdDQ0A4d
Opw6dWratGk3btzw9PTUVjzd5+npKZFI6M8ymUzFmUHz5s27ceOGtbV1dUYzNDwer6LqlWafglpo
AUsvZmCJxWL2llhRUVGl2pDXwHtlGOjcCtqGmU6yUIa3EaCKYmJi7OzslEf09Neq7IkAAADUTgZb
wGrUqFFQUNCLFy++/fZbrrPUdvHx8YSQESNGaPb0oqKiOXPmTJ8+vW3btjdu3Ni1a5elpaVWA3KP
zsLIysri8XjsMgE+n09rBM7Ozr6+vrQRRkhIiIrHPHPmTEBAQE5OTnWFVlJ5/nK36iCajU6KUe45
Qk9Es09BLSkpKY0bN27Tpk11HFy7goKCvL296bsRFxdHf8dJDb5Xhg1vI4DGxGIx71+EEPY/SOjd
r1XlJ0L0528rAACAFvHK/ldfQzJixAh6cSUQCLjOUnv16NHj/v37T58+rXyNTLlycnJGjx595syZ
QYMGRUdHoyW56r777ruAgIAbN27Y29tznUUl1tbWFhYWV65cKTW+evVqf3//q1evdu3alZNg2rJh
w4alS5deunTJycmp3B2aNm1qb2+fmJhYw8EAAAAAAAB0n8HOwKJCQkIaNmw4ceLE+/fvc52llsrL
y7t27drAgQM1qF5du3bNycnpzJkzs2fPPnHiBKpXapk1a1ZycnL79u25DgIqefjwYW5urt41wAIA
AAAAAKgZBl7Aat269c8//5ybm+vl5VVUVMR1nNrojz/+KCkpGTRokLpP/PXXX11cXB49eiSVSrdt
21a3bt1qSGfITE1NGzVqVKeOgf+OGww9aoAFAAAAAABQ8wz/4vbLL7+cP3++XC5fvnw511lqozNn
zhBC1CpgKRQKf39/T0/PBg0anDp1avr06dWUzbD98MMPNjY2t27d4joIqCQlJYXo4S0IAQAAAAAA
aobhF7AIIevXr+/du/emTZvi4uK4zlLrnDlzpnnz5p07d1Zxf4VCMXr06NWrV3/66ad//vknvcE8
aKBfv36LFi1q2rSpivsb9hRF3T87OgOrhgtY9C54NfmKAAAAAAAAmqkVBay6detGRkZaWFh4e3s/
ePCA6zi1CG2ANWDAABUbYDEMM3PmzEOHDrm5uV24cKHc27H9/vvvkydPpjeerw1yc3Pnzp37448/
vnv3Tq0nurq6bty4sUWLFiruv2DBgpkzZ2rQLe7cuXOTJ08+ffq0uk+sSf3799+0aVN+fr4Gz33x
4oWvr69EInn79i0h5OXLl/Pnz9+8eXNBQYEWE6akpLRq1Ur1gqNWvH37tkOHDuHh4cXFxeo+ccuW
LWKxOC8vr5qy1UJv3rxZv379woULX79+zXUWAAPx/Pnz2bNn79ix4/3791xnqRL6j4Ft27ap+48B
AAAAg8LUGjExMTwez9nZubCwkOsstcXRo0cJIT/++KOK+3/77beEkGHDhr17967cHVatWsV+dbdv
3669pDrqn3/+Uf5tLSkpUf25wcHBvXv3vnPnjor7i0QiQkjdunVnzJhx7949FZ+1ZcsWNt6GDRtU
j1dW+/btu3fvXnacfuhXr16tysHbtWtHCGnevHlgYOCbN29Uf2JOTo7yR1DqYVFRkeqHWr9+PSHk
0qVLZTcVFxfXq1dv+PDhqh9NK9iKnq2tbVhYmIqnU2o6W25ubnXnrA1oeZSVn5/PdSIAvZedna38
a6VQKLhOpKEnT54YxokAAABUEY+pTetHvv322x9++GHx4sUbNmzgOkutsGDBgi1btqSkpKiyMOr7
779ftWpVv379jh8/bm5uXnaH9+/fm5mZKY80atRIa1l10vv375X/o3H9+vWNjY1VfG5hYWFhYWH9
+vVV7OP+7t27wsJC+nPdunWnTp26cuXKyidwFRcXl2quX5VP5M2bNzwer+xHT98Ec3NzIyMjjQ+e
n59fUlLC4/EYhmnatOnSpUu//fZbVd6ZFStWrFy5kn1Yt25d5fJNvXr1VL+9QCUnolAo3rx5Y2Ji
UuobXt0YhqGTfeg70759+xUrVnzzzTeVPysyMnLs2LHsQ1NTU1NT0+oNWgsUFhYqT6wwMzMzMTHh
MA+AAVD+u0bU/BuqU0r9Y+DYsWMjRozgMA8AAABX9PIPucbWr18vl8s3btzYs2fP0aNHcx3H8CUm
JlpaWqrSAGvTpk2rVq3q0aNHbGxsudUrQkjZSkHv3r21kFKHPXjwIC0tjX3o4ODQuHHjanqtmzdv
Zmdn00JG27Zt+/Tp06RJk8qfUvZKoCqfSGJiorGxcdkj3L59+9atW126dGnYsGFVDv727Vtar+/a
tWvv3r1VrOu1bNlS+aGVldWdO3fYh506dfrgu8S6e/duZmamg4ND2TLf06dPr127xufzW7VqpeLR
tKKkpOTUqVOEEIZh6tSp07t37549e37wWR999JHyQxsbm9atW1dXxFrj2bNnV69eZR/a2dmVep8B
QF30/3XZh46OjlX5O8Kh+/fvp6ensw9L/WECAACoRTic/cWJBw8eNG3a1MzM7OzZs1xnMXBFRUUq
rorauXMnj8dzcHDIycmpfM/o6Gj2q5uQkKClpLqr1KoitZ4rl8slEsnz589V3J8uIbSxsVF9KRnD
MLGxsWy8mJgYtRKWUgNLCIcOHXru3Dm1nliqbUqp1XNqHaqSJYQrVqwghFy+fFmtA1ZFQUHBnj17
/vrrL0JInTp1xo4de/36ddWfrvwmYFG2VigUCuV3Va31wgBQLuW+h3PnzuU6juaq8o8BAAAAQ1Ir
mrgrs7Ky+u233+rWrevu7n7jxg2u4xiymzdvvn379tNPP618t5iYmFmzZtnY2Jw4caLcDtY5OTlb
t269cuUKIcTDw+PNmze0nfbw4cOrJbcuMTMzUygUISEhDx8+ZNRc7RsfH+/r61uqi1Yl2rVrFxYW
lpaW5u3trfoiCzc3t4KCAolEkp+fP3LkSLUS1qSBAweeP3/+999/79+/v1pPNDExUSgUUqk0Ozub
YRhjY2OFQhEaGpqYmKjuJ1KJlJQUIyMje3t7bR3wg+rVq/f69esePXrUrVvX2dm5Y8eODx48UL0j
O8MwSUlJu3btUigUqi+ihErQyY+nTp3as2cPwzAqzhAEgErUr19foVAEBwc/evRo69atXMfRXFX+
MQAAAGBIalcPLNaJEydGjBjRqlUruVxew2t2ao99+/Z5e3tHRkZ6enpWtE9KSkqvXr2aNm166dKl
Uh/Ew4cPDx48GB0dLZfLzczMnj59WtHSQijX3bt379+/37Nnz/r163OdRSXW1tYWFha0Uqls9erV
/v7+V69e7dq1q1ZeiGGYiIiIkpKSUuO2trZ9+vTRykuUa8OGDUuXLr106ZKTk1OpTR07dmQYRnmF
SA1gGMbLyysyMpIdsbGx+euvv6pvmSoAAAAAAIDGalcPLNbw4cOlUumUKVPc3NzOnj1r8L3AOUEr
Ed27d69oh4KCgrFjx5aUlBw8eJCtXjEMs2PHjoiIiKSkJLa6KhQKUb1SV/Pmzc3NzdFduywej2dv
b+/p6ancG6Vhw4aXL1/mJM/bt2+zsrJqbP7amzdvfvvtt/j4+Li4uMePH7PjgwcPPnjwIKpXAAAA
AACgm2rvIoVJkyatWrXq6tWrHh4epfragFYkJyc3atTI1ta2oh3mz59/48aNVatWKfft5vF4U6dO
Xbhw4fDhw3k8Hh1Ex30NrF+/vkWLFhkZGVwH0UXdunU7ffo0n89nR0JCQuzs7DgJc/PmzZKSElXu
1FkVCoXi1KlTEydO/Oijj77++uvQ0NBGjRrNmzePLhedPHlyQkKCpaVltWYAAAAAAADQWO0tYBFC
/Pz8pk+f/ttvv02bNq12LqWsPgzDXL16tVu3bmwRqpRff/1VKpUOHTp08eLFpTaZmZm9f//+3Llz
dPZQvXr13Nzcqj2xwXFycpoxYwZKEuWKjo7u1asXOwNLJBJ5eXlxFSYlJYUQ0qVLl2o6/oMHD1au
XNm2bduhQ4f+/PPP3bp1W7NmTU5OTlpa2ujRo0tKStasWbNnzx60sgIAAAAAAF1WS5cQsnbs2PHo
0aN9+/ZZWFhIJBKu4xiOW7duvXr1qqL1g/fu3fPx8WnevPlPP/1UtlfxunXrli9f3rJly6NHj44b
N65r165YP6iBL7/88ssvv6z6cUpKSs6ePRsdHf3JJ58sXbq06gfk1u3bt+fMmSOTySwtLXfs2DFr
1ixHR8egoCAOI6WmphJCqmMG1s2bN9evX3/gwIGioqJWl/cQdgAAIABJREFUrVotWbJk0qRJHTt2
ZHe4evVqREREJV3qAAAAAAAAdERtL2AZGxtHR0c7Oztv3brV3Nx87dq1XCcyELQBVrm3ICwuLh4/
fnxeXt6xY8c+/vhj5U2FhYUzZszYu3evo6PjsWPH2rZtO3r0aG217q5twsLC9u/fHxoa2rZtWw2e
ztatDh48+OzZM0JIUlKStjPWtGPHjo0bNy4/P3/ixImbNm2ytLRcsmRJdHS0mZkZh6lSU1PNzMyU
1zNW3ZUrV9auXXv48GGFQjFo0KDp06d7eXmVnQ45efJkVIcBAAAAAEAv1OolhFS9evVOnz7du3fv
devWLViwAGsJtSI5OZlU0MF91apVSUlJ8+bNK7Uw8P3798OGDdu7d69AIPjjjz9o2WXcuHFffPGF
8m5SqZT3X1KplG4Si8XK43K5vNz9Sx1KLBZr99y1mJASCoVsyHIPW+6Rs7OzL168+PbtWw1O4eHD
hx9//PHQoUODg4Np9crKyqpv374aHEp3bN682d3dncfjnTp1at++fS1atCCE7Nq1i6vWV6yUlBR7
e3sjIyOtHO3Bgwdjxozp0aPHoUOHBAJBUlLS6dOnx40bV+5iXlSvAAAAAABAX6CARQghFhYWJ06c
6Nev35YtW+bOnYsaVtUlJyebmZnZ29uXGk9LS1u7dm23bt02bNigPP7q1auhQ4eeO3du/PjxsbGx
7H0hO3fuXK9evbLHFwgEDMPQT0okEhFCpFKpRCLx9fWl476+vhXtz1aOqpUWE8pkMrrIi9Yg2KeL
RCJa2Cr3yH5+fi9fvuzQoYMG4Vu3bv3o0aNff/3VwsKCjnh4eFTUzkz3FRYWTps2beHChR07drx6
9eqgQYPoeN26dceMGcNpNJKbm/vw4UOtNMB69+7d6tWrO3bsGBUVNX369IcPH8bGxjo7O1f9yAAA
AAAAAJxDAev/NGrU6Pjx44MHD96+fbuPj49CoeA6kX67cuWKo6MjvcGZsoULFyoUCqlUShu0Uy9e
vBg+fHhSUtKCBQvK7YpVOXqjwxs3bigPBgUFlXvpHhISQggJCAhQ6yWqqCoJpVKpra2ts7MzrVXR
rfTphBDauK3cI1+5cmXv3r15eXmaZS4sLNyyZUteXp6VlRXR5xtBPn/+3NXVdffu3a6urnK53Nra
mutE/6GtBlgJCQmtW7f29/dv27bt8ePHpVJpqfW5AAAAAAAAeg0FrP/P3Nw8Li7O1dU1NDR00qRJ
JSUlXCfSV9nZ2c+ePSu7fvDMmTNxcXGenp5OTk7sYG5u7sCBAy9evLhs2bJNmzapOM1HJpOxq+3C
w8MJIZ06dSKESCSSssvrlPn4+BBC2NvPVR9tJYyJiaFrLePi4sh/Kx20LiaXy8s98uHDh6dMmfL4
8WMNwhcWFo4aNUouly9cuHDevHlt2rTR0/WDeXl5ffr0OXPmzJw5c2JjYxs3bsx1otJoAasqM7De
vn07Z84cgUBQXFy8adOmv//+29XVVXsBAQAAAAAAdAIKWP9Rr169I0eOjBgx4qeffho/fnxxcTHX
ifRSuQ2wGIZZvHixiYnJmjVr2MGioqKvvvoqJSVl5cqVyuMfxC64s7W1dXFxkcvlPj4+yl3GRSKR
UCis8qloTlsJZTIZrU9VotwjT5gw4dixY23atFE3uUKh8Pb2Pn78+JQpUzZu3Ojh4aGn6wefPXvW
t2/frKysnTt3/vjjj2XnA+qClJQUUoUZWMnJyT169Ni+ffuAAQNSUlIWLFhQt25drQYEAAAAAADQ
CShglWZqanrw4MGvv/46MjLSw8MD87A0UO4tCKOiov78888ZM2bY2Niwg/PmzTt37ty8efP8/f01
ey167zY6jcXZ2ZnWjOg6u3KnWdHZSdq941v1JaSdsOicLDoPix6HysrKoscs98g2NjbDhg3ToEv3
7NmzIyIivv76a9pdvn379osXL1b/vDn26tUroVCYlpYWFBQ0Y8YMruNUKDU11dLSkq7TVNfKlSt7
9ux569atdevWnTp1SrPbTQIAAAAAAOgFFLDKYWJiEhkZ6e7ufuTIERcXlydPnnCdSM8kJycbGxsr
r4oqLCxcvnx548aNv/vuO3YwODg4ODh46NChmzdv1vi1aA3IwcFBLBaXup9guVUq2k/dz89P41dU
V1USRkVFCQQCOk6bXtGthBB6KNqvvdwjr1y50szMLC0tTa20W7duDQ4OHjRo0P79+9n74rVs2VKt
g3Du3bt3I0eOvHz5sr+/f6lm+TqFYZjU1FQNpl8VFxfPnj17xYoV1tbWaWlpS5cuVbdzHAAAAAAA
gH7BNU/5jI2NDx48uGTJkosXL/bu3fvatWtcJ9InycnJ9vb2ZmZm7MjOnTtv3bq1ZMmSZs2a0RE6
8cra2joyMlKDtV1sh6msrKyQkBA6C4ltAiUSiWxtbePj48vuTwhhGKYGbs2mlYRxcXHu7u7sPuw9
Cnk8nkQiCQkJoVWtco/s6Og4btw4tbo+nTt3buHChXZ2djExMcpd9vVLcXHxmDFjaN+rlStXch2n
MtnZ2Xl5eeoWsPLy8oRC4Y4dOwYPHnzx4sX27dtXUzwAAAAAAADdwaOXxFCR8PBwHx8fExOT/fv3
f/HFF1zH0QN5eXmWlpYTJ07ct28fHXn58qWtra2pqWlGRkb9+vUJIQ8fPnRwcCguLj5//nzV779m
qORyuYuLS439hj58+LBHjx75+fkXLlzo3LlzzbyoMmtrawsLC7r+VNnq1av9/f2vXr3atWvXDx6E
YZhJkybt27dv/Pjx+/bt06l5SRs2bFi6dOmlS5fYmxjIZDJaipo5c6aKB3n58mXv3r3T09OnT5++
fft2dLwCAAAAAIBaQoeu7nSTt7f377//bmZm5u7uXpWVbrXHrVu3yH8Xx+3cuTMnJ2fVqlW0ekUI
mTFjRl5e3s8//4zqVSVoWyuNn37gwIFRo0ZlZ2ersvP79+89PDyePn26Z88eTqpX2rJhw4Z9+/aN
GDFi7969OlW9Ktf169eJOh3cc3Nz+/fvn56evmLFCqlUiuoVAAAAAADUHrp+gacL+vfvf/HixY4d
Oy5cuHDatGmFhYVcJ9Jpd+7cIYSwy5oYhgkNDW3RosWECRPoyKFDh2JjY728vEaOHMlZylrgxo0b
hw4dev36tSo7z5s378KFC4sWLRo9enR1B6s+Fy5c8Pf379ChQ2RkpF4Ud9LT0wkhHTp0UGXn169f
CwSClJSUDRs2fP/999UcDQAAAAAAQLeggKUSa2truVzu6uq6e/duV1fX58+fc51Id92+fZsQYm1t
TR+ePHny1q1bkyZNMjExIYS8fv3a19fXwsJiy5YtXKasBVavXs0wjL29/Qf3PHjwoFQq/eyzz9au
XVsDwapJXl6el5eXsbFxdHQ0O9dPx2VkZFhYWLRo0eKDe759+/bLL7+8dOnSsmXL9PGmkAAAAAAA
AFWEApaqGjduHBsbO2fOnDNnzvTs2RNt3StSagbWrl27eDzetGnT6MPvvvsuOzt73bp1endjO71z
/fr1gwcPfnAG1r179yZPnmxlZRUTE8PedlAf+fj43L17d/Pmzcq3v9Rx6enpqky/Kioq8vT0pG3p
16xZUwPBAAAAAAAAdA0KWGowNjb+8ccfw8LCsrOznZycAgMDFQoF16F0zp07d+rXr0/rU0+fPo2J
iRk8eDBtiXXlypVt27b16dPHx8eH65iGLyIiwsPDo/IeWAzDTJ069c2bN6Ghoebm5jWWTeukUml0
dPSoUaNU74bOuZcvX/7zzz92dnaV71ZSUvLNN9/ExsZ+8803EomkZrIBAAAAAADoGhSw1Obt7X35
8mUbG5vFixcLhcJ//vmH60S65fbt2+3atePxeISQsLCwwsJCWq4qKSkRiUQ8Hi84OFj3u2sbgNGj
R+/fv79169aV7BMSEnLy5MmpU6e6urrWWDCtu379+vz58z/55JNdu3ZxnUUNGRkZhJDKC1gMw8yc
OTMiIuLrr7/evXs3fnEAAAAAAKDWwuWQJrp27Xr58uUpU6YkJCR069btt99+4zqRrigpKbl37x5d
P0jbtzdv3tzd3Z0QEhYWdvnyZbFY3LVrV65j1gqOjo5eXl6NGjWqaIe7d+8uXry4bdu2en17TYVC
MWbMmMLCwv3791taWnIdRw2qdHDfuHHjrl27hg8fvn//fmNj45qKBgAAAAAAoHNQwNKQubn57t27
9+/fX1BQ8Pnnny9durSoqIjrUNx7+PBhYWEh7eB++vTpzMxMb29vU1NThUKxcePGxo0b+/v7c52x
tlixYoWZmVlaWlq5W5UXD1ZS5NJ9QUFB169fX758ubOzM9dZ1PPBGVh//fWXv79/u3btDh06ZGpq
WoPRAAAAAAAAdA4KWFXi5eV15cqVHj16bNiwYcCAAbR/eW2m3MFduX17TExMRkbGrFmzGjZsyHHE
WsPW1nbYsGEVdbaSSqWnTp2aPn36sGHDajiYFj1//jwgIOCTTz5ZsmQJ11nUlpGRwePxaHu4sgoK
CsaPH08IOXTokF63JwMAAAAAANAKFLCqysbGJjExceHChRcvXuzWrZtUKmUYhutQnLl9+zYhxNra
+t27d0ePHnVxcaErpDZu3GhmZjZv3jyuA9YiEyZMOHbsWJs2bcpuevny5XfffdeqVasff/yx5oNp
0cqVK1+8eLFu3bp69epxnUVt6enpbdq0qV+/frlbFyxYkJ6eHhAQ0L179xoOBgAAAAAAoINQwNIC
ExOTwMBAmUzGMIxIJBo0aFBF67YMHjsDKzExsaCgwM3NjRBy5syZixcvent701sTQs04dOjQ5MmT
Hz9+XHbT+vXrnz17tnr1ahMTk5oPpi1paWnBwcF9+vQZO3Ys11nUxjBMZmZmResHjx07FhwcPHjw
4AULFtRwMAAAAAAAAN2EApbWuLq6Zmdnz5o1KzExsVu3bqtXry4sLOQ6VE1jC1gJCQmEEHpvu40b
NxoZGeFSvIYlJyeHhYXl5eWVGr9//75EInF0dPT29uYkmLYsWrSouLh4y5Yt9JaX+uXhw4f5+fnl
FrCePHkydepUS0vLffv24baDAAAAAAAAFK6OtKlRo0bbt28/d+6cjY2Nv79/jx49zp8/z3WoGnX7
9u3mzZs3bNgwISHho48+6tat299//338+PGvvvqqol4/UE38/PxevXpV9iZ3fn5+b9++pVVFToJp
xe+//x4bG+vp6dm3b1+us2iiolsQMgwzZcqUZ8+eBQcHW1lZcRENAAAAAABAF6GApX0uLi7Jyckr
VqzIzMzs16/f3LlzX79+zXWoGnLnzp327ds/fPgwNTV12LBhPB4vMDCQYZjFixdzHa3WefDgwYUL
F96+fas8eOXKlV9++WX48OF0cpyeKikpWbBggZmZ2fr167nOoqGKbkG4fft2mUzm7e3t6enJRS4A
AAAAAAAdhQJWtTAxMfn++++Tk5P79u27bds2a2vrqKgorkNVu4KCgidPnlhbW584cYJhGFdX13v3
7kVERAwZMsTJyYnrdLVOeHj48OHD79+/rzxIK4kbN27kKJR2xMTE/P33376+vu3ateM6i4bKLWDl
5OT4+fm1adNm586dHOUCAAAAAADQUShgVSN7e/tz587t2LGjsLBwzJgxQ4YMuXLlCtehqtGDBw8Y
hmnXrl1CQkKdOnWGDx++Z8+e4uJidL/ixJdffhkcHKzcOP/SpUsnT56cMGFC165dOQxWdcHBwXXr
1hWLxVwH0Vx6erqpqeknn3yiPLh69eqXL18GBgbq400VAQAAAAAAqhUKWNWrTp06M2fOTEtLmzJl
ytmzZ52cnL755psHDx5wnataPHv2jBDStGnT33//vVu3bi1atIiKimrRooVer1bTX05OTiKRyNLS
kh0JCgoihOh7PTEzM/PkyZMjR47Ul5tavn//vri4uNTgzZs3bW1tlduQ3bp1Kzg42MnJCYsHAQAA
AAAAykIBqyZ8/PHHu3fvTk5O/uyzz3766acOHTosW7bs1atXXOfSspycHELI69evnz9/7urqeu3a
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
RK5CYII=
      </contents>
    </upload>
  </page>
  <page>
    <title>Command Line Interface</title>
    <ns>0</ns>
    <id>168</id>
    <revision>
      <id>223</id>
      <timestamp>2021-09-10T16:06:23Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import commandlineinterface</comment>
      <origin>223</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2749" sha1="j35w0bmzo690ejn9yt9i5m2zjozmu4q" xml:space="preserve">== Introduction ==
A '''command-line interface (CLI)''' is a mechanism for interacting with a computer operating system or software by typing commands to perform specific tasks.  This text-only interface contrasts with the use of a mouse pointer with a '''graphical user interface''' ('''GUI''') to click on options, or menus on a text user interface (TUI) to select options. The default command-line interface used by minix is '''Almquist shell''' (also known as '''A Shell''', '''ash''' and '''sh''') which was originally Kenneth Almquist's clone of the SVR4-variant of the Bourne shell; it is a fast, small, POSIX-compatible Unix shell designed to replace the Bourne shell in later BSD distributions.

[[File:Ashtree.png|850px]]

== Function key mappings  ==
{| class="wikitable"
!  key         !! Description
|-
|  F1          || Kernel processes table
|-
|  F2          || Processes memory maps
|-
|  F3          || System Image
|-
|  F4          || Processes privileges
|-
|  F5          || Boot monitor parameters
|-
|  F6          || IRQ hooks and policies
|-
|  F7          || Kernel messages
|-
|  F8          || VM status and process maps
|-
|  F10         || Kernel parameters
|-
|  F11         || Timing details (if enabled)
|-
|  Shift + F1  || Process manager process table
|-
|  Shift + F2  || Signals
|-
|  Shift + F3  || Filesystem process table
|-
|  Shift + F4  || Device/Driver mapping
|-
|  Shift + F5  || Print keys mappings
|-
|  Shift + F6  || Reincarnation server process table
|-
|  Shift + F8  || Data store contents
|-
|  Shift + F9  || Processes with stack traces
|}

'''Note:''' Function keys are only valid from the first console (ttyc0).

== Useful Command Lines (Shell) ==
# '''man''' '''man''' -- an interface to the online reference manuals.
# '''passwd''' -- change (own) password.
## '''passwd user''' change the password of user ''user'' (root only)
# '''ls''' -- list directory contents.
## '''ls -al''' -- long list
## '''ls -alt''' -- long list, sorted by modification time
## '''ls -alS''' -- long list (GNU/Linux only), sorted by file size
# '''cd directory''' -- change to directory
## '''cd''' -- change to default/home directory
## '''pwd''' -- show current directory
# Basic File Utilities
## '''cp file1 file2''' -- copy file1 to file2
## '''rm file1''' -- remove (delete) file1
## '''mv file1 file2''' move (change) file1 to file2
## '''mkdir dir''' make directory dir
## '''rmdir dir''' remove directory dir
# More File Utilities
## '''cat file''' -- read a file
## '''more file''' -- read a file per screen
## '''ln -s -- file sfile''' -- make a symbolic link from file to sfile
## '''grep aword file''' -- search string aword inside file using regular expression
## '''sort file''' -- sort a file</text>
      <sha1>j35w0bmzo690ejn9yt9i5m2zjozmu4q</sha1>
    </revision>
  </page>
  <page>
    <title>Manual Pages</title>
    <ns>0</ns>
    <id>169</id>
    <revision>
      <id>224</id>
      <timestamp>2021-09-10T16:08:54Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import manualpages</comment>
      <origin>224</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="619" sha1="ns1lwnji4y83jxj660opvb56dv97acj" xml:space="preserve">Documentation comes installed with MINIX. Much helpful information is in MINIX's manual pages (or "manpages"), which can be read with ''man'' or [https://www.minix3.org/manpages/ online].

For example, to learn about the Ash shell, type:

&lt;pre&gt;
man sh
&lt;/pre&gt;

Sometimes you'll see manual pages mentioned like this: ''shutdown(8)''. This refers to the ''shutdown'' page in section 8 of the manual.

You can read it like this:

&lt;pre&gt;
man 8 shutdown
&lt;/pre&gt;

To find installed manual pages, please look in ''/usr/man'' and ''/usr/pkg/man''.

Finally, you can read the manual page about ''man'' itself:

&lt;pre&gt;
man man
&lt;/pre&gt;</text>
      <sha1>ns1lwnji4y83jxj660opvb56dv97acj</sha1>
    </revision>
  </page>
  <page>
    <title>Text Editors</title>
    <ns>0</ns>
    <id>170</id>
    <revision>
      <id>225</id>
      <timestamp>2021-09-10T16:10:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import texteditors</comment>
      <origin>225</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="300" sha1="j4io0k7tsedhpok9sfvrgkhnf2ez6cl" xml:space="preserve">The following text editors come with MINIX:

* Line-oriented (1D) editors
** &lt;code&gt;ed&lt;/code&gt;(1)
** &lt;code&gt;ex&lt;/code&gt;(1)
* Screen-oriented (2D) editors
** &lt;code&gt;vi&lt;/code&gt;(1)
** &lt;code&gt;mined&lt;/code&gt;

Others, such as GNU Nano, Pico, and Vim, can be installed. See [[Installing Binary Packages]] for details.</text>
      <sha1>j4io0k7tsedhpok9sfvrgkhnf2ez6cl</sha1>
    </revision>
  </page>
  <page>
    <title>GNU Utilities</title>
    <ns>0</ns>
    <id>171</id>
    <revision>
      <id>226</id>
      <timestamp>2021-09-10T16:12:05Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import gnuutilities</comment>
      <origin>226</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="347" sha1="67dlm4aeer2i0xrco90mhhgrkef08d2" xml:space="preserve">You can install many of the Linux (read GNU) userland utilities on MINIX. Via [https://imil.net/pkgin/ pkgin], you can install:

* [https://en.wikipedia.org/wiki/Bash_(Unix_shell) BASH shell]
* GNU coreutils
* GNU awk
* GNU grep
* GNU sed
* GNU diffutils
* GNU less

See the [[Installing Binary Packages]] guide for details on installing software.</text>
      <sha1>67dlm4aeer2i0xrco90mhhgrkef08d2</sha1>
    </revision>
  </page>
  <page>
    <title>GNU Development Tools</title>
    <ns>0</ns>
    <id>172</id>
    <revision>
      <id>227</id>
      <timestamp>2021-09-10T16:17:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import gnudevelopmenttools</comment>
      <origin>227</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1060" sha1="5883qrmnwejpk6vpx1oqybaktzjxx6z" xml:space="preserve">You can install many of the GNU development tools on MINIX by using [[Installing Binary Packages|pkgin]] or [[Installing Source Packages|pkgsrc]].

They have more packages than mentioned below.

== GCC (GNU Compiler Collection) ==

&lt;del&gt;[https://gcc.gnu.org/ GCC] is available in both source code (pkgsrc) and ready-to-install (pkgin) forms.&lt;/del&gt; [https://groups.google.com/g/minix3/c/v9Z_Vx1j7wM GCC no longer works on MINIX].

== Other Development Tools ==

GNU &lt;code&gt;flex&lt;/code&gt; is already available (since it is not under GPL license.)

If you installed the development tools, you might already have the following packages:
* &lt;code&gt;binutils&lt;/code&gt;

You can also install the following tools. They are useful if you plan on building third-party programs originating from the Linux world:

* &lt;code&gt;autoconf&lt;/code&gt;
* &lt;code&gt;automake&lt;/code&gt;
* &lt;code&gt;gawk&lt;/code&gt;, GNU &lt;code&gt;awk&lt;/code&gt;
* &lt;code&gt;bash&lt;/code&gt;
* &lt;code&gt;bison&lt;/code&gt;
* &lt;code&gt;gettext&lt;/code&gt;
* &lt;code&gt;libtool&lt;/code&gt;
* (GNU) &lt;code&gt;m4&lt;/code&gt;
* &lt;code&gt;gmake&lt;/code&gt;, GNU &lt;code&gt;make&lt;/code&gt;
* &lt;code&gt;gtexinfo&lt;/code&gt;</text>
      <sha1>5883qrmnwejpk6vpx1oqybaktzjxx6z</sha1>
    </revision>
  </page>
  <page>
    <title>Web Browsers</title>
    <ns>0</ns>
    <id>173</id>
    <revision>
      <id>228</id>
      <timestamp>2021-09-10T16:18:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import webbrowsers</comment>
      <origin>228</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="331" sha1="lbf13mcvhq9rodvzzl56yu79aniegb2" xml:space="preserve">Currently, only text-mode browsers are supported under MINIX 3.
You can [[Installing Binary Packages|install]] for example:
* links
* lynx

== links GUI mode ==

The links browser offers a pseudo graphical mode where it supports images and some basic text formatting.

Run "links -G" do start links in GUI mode.

This requires X11.</text>
      <sha1>lbf13mcvhq9rodvzzl56yu79aniegb2</sha1>
    </revision>
  </page>
  <page>
    <title>Email Applications</title>
    <ns>0</ns>
    <id>174</id>
    <revision>
      <id>229</id>
      <timestamp>2021-09-10T16:19:19Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import emailapps</comment>
      <origin>229</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="48" sha1="nyf389w3bzn9lpkf0kw3h598f6qxw2y" xml:space="preserve">See the guide to [[Installing Source Packages]].</text>
      <sha1>nyf389w3bzn9lpkf0kw3h598f6qxw2y</sha1>
    </revision>
  </page>
  <page>
    <title>File Transfer</title>
    <ns>0</ns>
    <id>175</id>
    <revision>
      <id>230</id>
      <timestamp>2021-09-10T16:19:57Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import filetransfer</comment>
      <origin>230</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="307" sha1="4yh33c9oapp60eracwvw27t90z6nzj5" xml:space="preserve">There are several programs that can be used to transfer files between machines. Some of them come with MINIX by default:

* ftp
* rcp
* fetch

Additionally, the following programs can be installed via pkgin:

* openssh - scp can transfer files
* ncftp
* rsync
* wget (download only)
* urlget (download only)</text>
      <sha1>4yh33c9oapp60eracwvw27t90z6nzj5</sha1>
    </revision>
  </page>
  <page>
    <title>Apache and PHP</title>
    <ns>0</ns>
    <id>176</id>
    <revision>
      <id>231</id>
      <timestamp>2021-09-10T16:21:53Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import apacheandphp</comment>
      <origin>231</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="808" sha1="ccivq6tq0khgsgffrkdgk23kccw94gw" xml:space="preserve">&lt;div round info&gt;
'''Warning:'''

This page has gone stale. Please help us update it!
&lt;/div&gt;

Tested for Minix3 version 3.1.4-pre

== Using packman ==
Install Apache and PHP via packman.

== Additional steps ==
Currently, installation doesn't have a php.ini file and httpd.conf is incomplete.

Copy file https://svn.php.net/repository/php/php-src/branches/PHP_5_2/php.ini-dist to /usr/local/lib/gcc/php.ini

Edit /usr/local/apache/conf/http.conf and after

&lt;pre&gt;
AddType application/x-tar .tgz
&lt;/pre&gt;

add

&lt;pre&gt;
AddType application/x-httpd-php .php
&lt;/pre&gt;

== Starting Apache ==

&lt;pre&gt;
/usr/local/apache/bin/apachectl start
&lt;/pre&gt;

== Viewing phpinfo() ==

Add a file phpinfo.php in /usr/local/apache/htdocs

&lt;pre&gt;
&lt;?php
  phpinfo();
?&gt;
&lt;/pre&gt;

Open browse and type

&lt;pre&gt;
http://localhost/phpinfo.php
&lt;/pre&gt;</text>
      <sha1>ccivq6tq0khgsgffrkdgk23kccw94gw</sha1>
    </revision>
  </page>
  <page>
    <title>BeagleBone Weather</title>
    <ns>0</ns>
    <id>177</id>
    <revision>
      <id>232</id>
      <timestamp>2021-09-10T16:29:33Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import beagleboneweather</comment>
      <origin>232</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2636" sha1="dchgug4jqbdn5hsmh7ix4595i10w3xq" xml:space="preserve">The [https://circuitco.com/support/index.php?title=BeagleBone_Weather BeagleBone Weather] cape is an expansion board for the [https://beagleboard.org/Products/BeagleBone BeagleBone]. It enhances the BeagleBone's capabilities by providing environment sensors (temperature, humidity, pressure, and ambient light level).

== General Overview ==

=== weatherstation ===

Minix comes with a demo application for the Weather Cape called weatherstation. It's a web application. A tiny web server is automatically started at boot time whenever the weather cape is attached. To use the demo, you just need to plug in the cape and have a working network connection; the system will do the rest.

=== Requirements ===

'''Hardware'''
* BeagleBone
* BeagleBone Weather Cape
* Network (doesn't have to be connected to the Internet)

'''Software'''
* Web Browser with HTML5 support and JavaScript enabled.

=== Setup ===

This demo is meant to work 'out of the box'. It requires the BeagleBone be
connected to the network and have the BeagleBone Weather cape attached at
boot.

&lt;ol&gt;
&lt;li&gt;Attach the BeagleBone Weather Cape.&lt;/li&gt;
&lt;li&gt;Connect a network cable to the BeagleBone.&lt;/li&gt;
&lt;li&gt;Power on the BeagleBone.&lt;/li&gt;
&lt;li&gt;Configure the network by running these commands.
&lt;pre&gt;
# netconf
# reboot
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Enter the BeagleBone's IP address into your web browser.&lt;/li&gt;
&lt;/ol&gt;

=== Usage ===

This demo is a web application. You just need to point your web browser at
the BeagleBone's IP address to view a nice display of the sensor values. You
can get your BeagleBone's IP address by running &lt;code&gt;ifconfig&lt;/code&gt; on the BeagleBone.
If the address is 192.168.12.138, you'd enter http://192.168.12.138/ into your
web browser.

== Accessing Raw Sensor Data ==

You can access the raw data via the device files. Simply read from the device file corresponding to each sensor to get the values.The labels and values are delimited by a ':' that is located a fixed number of spaces from the start of the line. This should be easy to parse in most programming languages and in shell scripts. Here's some example output:
&lt;pre&gt;
# cat /dev/sht21b3s40 
TEMPERATURE     : 29.126
HUMIDITY        : 45.818
# cat /dev/bmp085b3s77 
TEMPERATURE     : 28.5
PRESSURE        : 100432
# cat /dev/tsl2550b3s39
ILLUMINANCE     : 830
# 
&lt;/pre&gt;
Temperature is measured in [https://en.wikipedia.org/wiki/Celsius Celsius], humidity is [https://en.wikipedia.org/wiki/Relative_humidity relative humidity] expressed as a percentage, pressure is measured in [https://en.wikipedia.org/wiki/Pascal_%28unit%29 Pascals], and light is measured in [https://en.wikipedia.org/wiki/Lux lux].</text>
      <sha1>dchgug4jqbdn5hsmh7ix4595i10w3xq</sha1>
    </revision>
  </page>
  <page>
    <title>Network Configuration</title>
    <ns>0</ns>
    <id>178</id>
    <revision>
      <id>233</id>
      <timestamp>2021-09-10T16:37:58Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import usersguide:networkconfiguration</comment>
      <origin>233</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4322" sha1="ecu12aoeuai2wswb1ooujnifwrjdkzl" xml:space="preserve">MINIX supports several Ethernet chips for networking over LAN, ADSL, and cable. These include Intel Pro/100, RealTek 8029 and 8139, AMD LANCE, and several 3Com chips. During setup you will be asked which Ethernet chip you have, if any. 

== What Ethernet chips do I have? ==

You can determine what network adaptors your computer has by looking at your system's documentation.

=== MINIX ===

Alternatively, from MINIX you can run ''[[#Using_Netconf|netconf]]'' to see what network cards are recognized.

=== Windows ===

If you are using Windows, another way is to go to the Device Manager as follows:

&lt;pre&gt;
Windows XP:     Start &gt; Control Panel &gt; System &gt; Hardware &gt; Device Manager
Windows Vista:  Start &gt; type device &gt; The Device Manager shows up
&lt;/pre&gt;

System requires double clicking; the rest are single. Expand the + next to "Network adapters" to see what you have. Write it down. If you do not have a supported chip, you can still run MINIX, but without Ethernet.

=== Linux ===

If you are running Linux, you can run the following command to find out which Ethernet card you have.

&lt;pre&gt;
lspci | grep Ether
&lt;/pre&gt;

== How do I change the network configuration after an install? ==

You can use the...

&lt;pre&gt;
netconf
&lt;/pre&gt;

...tool to select your network chip and configure your IP address automatically using DHCP, or manually by providing the address, netmask, gateway, and other information. That tool is limited to one network card only. More advanced settings have to be done by hand. To do that, edit "/etc/inet.conf". Usually, the format is:

&lt;pre&gt;
eth0 fxp 0 { default; };
&lt;/pre&gt;
where ''fxp'' is the name of the ethernet driver you want to start (it is the name of the process inet looks for, to talk to, for ethernet). Take a look at "/usr/etc/rc" how ethernet drivers are started. Currently, the choices are:

&lt;pre&gt;
lance rtl8139 rtl8169 fxp e1000 dpeth dp8390 orinoco atl2 dec21140A
&lt;/pre&gt;
For details on inet.conf, please see the inet.conf manpage.

== Using Netconf ==

=== Select your Ethernet chip ===
You will now be asked which (if any) of the available Ethernet drivers you want installed. An asterisk (*) will appear next to the closest match for your hardware. Please choose the numerical option (e.g., 1) that corresponds to your driver. The setup script will then save the corresponding driver keyword (e.g., fxp) and some options in the system file ''/etc/inet.conf''.

If you are running MINIX 3 in a Virtual Machine and your Ethernet chip isn't detected, see the following table to determine which selection to make:

{| class="wikitable"
! Virtual Machine !! NIC Selection
|-
| KVM || 9. Realtek 8139 based card (also emulated by KVM)
|-
| QEMU || 2. Realtek 8029 based card (also emulated by Qemu)
|-
| Bochs || 3. NE2000, 3com 503 or WD based card (also emulated by Bochs)
|-
| VMWare || 8. AMD LANCE (also emulated by VMWare and VirtualBox)
|-
| VirtualBox || 8. AMD LANCE (also emulated by VMWare and VirtualBox)
|-
| VirtualPC || 5. DEC Tulip 21140A in VirtualPC
|}

The following table tells you shows all the NIC options, as well as the driver name that corresponds to each option.

{| class="wikitable"
! NIC Selection !! Corresponding Driver Name
|-
| 0. No Ethernet card (no networking) || (n/a)
|-
| 1. 3Com 501 or 3Com 509 based card || dpeth
|-
| 2. Realtek 8029 based card (also emulated by Qemu) || dp8390
|-
| 3. NE2000, 3com 503 or WD based card (also emulated by Bochs) || dp8390
|-
| 4. lan8710a (on BeagleBone, BeagleBone Black) || lan8710a
|-
| 5. Attansic/Atheros L2 FastEthernet || atl2
|-
| 6. DEC Tulip 21140A in VirtualPC || dec21140A
|-
| 7. Intel PRO/1000 Gigabit || e1000
|-
| 8. Intel Pro/100 || fxp
|-
| 9. AMD LANCE (also emulated by VMWare and VirtualBox) || lance
|-
| 10. Realtek 8139 based card (also emulated by KVM) || rtl8139
|-
| 11. Realtek 8169 based card || rtl8169
|-
| 12. Virtio network device (emulated by VirtualBox) || virtio
|-
| 13. Different Ethernet card (no networking) || (n/a)
|}

After changing network settings, you'll need to ''reboot'' for them to take effect.

== Checking Configuration Information ==

If at any time you wish to check the details of your installation you can use:
&lt;pre&gt;
hostaddr(1)
&lt;/pre&gt;
to check what IP address your interface(s) have been assigned

&lt;pre&gt;
pr_routes(8)
&lt;/pre&gt;
to show routing information</text>
      <sha1>ecu12aoeuai2wswb1ooujnifwrjdkzl</sha1>
    </revision>
  </page>
  <page>
    <title>Wishlist (David)</title>
    <ns>0</ns>
    <id>179</id>
    <revision>
      <id>236</id>
      <timestamp>2021-09-10T16:44:25Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import wishlist:david</comment>
      <origin>236</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="15794" sha1="2qmvtdw7hkb2mn1vw335vj9nv7z2p37" xml:space="preserve">This is the to-do/wish list of David van Moolenbroek, who believes that all of these projects are either downright necessary or incredibly helpful for the MINIX3 project. It is not necessarily exhaustive, final, accurate, or in any way to be taken as indicative of what may happen in the future. Interested contributors are free to adopt any of these projects as their own and/or communicate with David about doing so.

==== Make dup2 an actual system call ====

* reason: the current libc implementation is not atomic and thus dangerous, aside from violating POSIX
* note: there are going to be other calls to which this applies, but dup2 is a rather obvious case

==== See if SUSPEND can be redefined to EDONTREPLY ====

* reason: various places use either SUSPEND or EDONTREPLY, with the same meaning
* reason: SUSPEND is not defined in errno.h and thus may end up overlapping with existing error codes

==== Preserve mounted file systems while remounting root FS ====

* reason: needed for devfs, devmgr, and an improvement for procfs
* reason: requested by zentrum
* complication: processes issuing "cd .." from any of those file systems while remounting
* note: we are rapidly moving to a situation where procfs no longer needs to be on the ramdisk anyway

==== Make libblockdriver accept chardriver requests as well ====

* reason: a first step towards NetBSD convergence regarding block device access
* reason: better performance and less skew by avoiding going through a file system
* complication: the need for temporary buffers for I/O
* subsequent project: continuous block tracing through blocking character driver IOCTLs
* related project: take file systems out of the raw block device communication path altogether

==== Get rid of _SIGN for errno numbers ====

* reason: as is, library code cannot be shared between system services and userland
* complication: making a script that does the conversion for all people currently doing system development

==== Implement stack trace support in kernel/trace(1) for ARM ====

* reason: improved debugging
* complication: it seems that the current ARM compilation process does not generate stackframes at all

==== Rewrite the VFS pipe code to operate properly ====

* reason: the current mess for select is actually bothering userland
* complication: there are a lot of POSIX requirements to be met here, and we know they're not all tested
* subsequent project: allow PFS to expand pipe sizes as memory is available

==== Move code shared between tty and pty into a library ====

* reason: current duplication of hairy processing code
* complication: dealing with blocking calls; dealing with differing data structures
* complication: the console using a different level of interpretation than eg pty
* complication: there is effectively no test set for most of this
* note: it is unclear whether the library should cover part of the character driver processing
* note: this project interacts with the job control project
* subsequent project: allow multiple concurrent blocking calls to TTY

==== Deliver debugger signals only upon process receipt ====

* reason: right now, the process isn't stopped on signal receipt, so its address space may still change
* complication: the process must not be able to ignore debugger signals
* note: there was at least one other major implementation issue

==== Add a very basic debugger ====

* reason: there is currently no advanced one and some basic features would often be good enough
* reason: printed stack traces are currently unusable with dynamically linked binaries
* complication: it's easy without support for symbols and disassembly, but also not very useful

==== Add support for lchown, lchmod, fchownat, fchmodat ====

* reason: missing system call, relatively easy to resolve
* complication: the behavior of the fch*at functions depends on the opened directory's O_SEARCH flag
* complication: must make sure that symbolic link resolution is not testing against the mode

==== Increase MFS's maximum file size to from 2GB-1 to 4GB-1 ====

* reason: the current limit is lower than it could be
* complication: this requires MFS to announce 64-bit support to VFS
* note: implementing a MFSv4 (through libfsgraph or otherwise) would obviate this point

==== Replace REQ_INHIBREAD with a flag to read/peek ====

* reason: the current approach requires extra IPC and extra state to be kept in the file system
* reason: seek behavior can be combined with posix_fadvise/madvise to provide hints

==== Implement true vector support for readv/writev/sendmsg/recvmsg ====

* reason: having to allocate a huge buffer in libc is far from ideal and ruins any benefits of using vectors
* complication: IOV_MAX is 1024 as per NetBSD, so allocating one grant per element is definitely not an option
* complication: the solution will have to work even for vector copy operations
* complication: for future kernel threading support, the system (eg VFS) will have to make a copy of the vector
* note: probably best implemented as a new grant type (_VMAGIC ?) and kernel support, maybe with a fast lookup table
* note: most of this could then be limited to the kernel and libsys safecopy code (which does mallocs as it is)
* note: now depends on BSD socket API project

==== Implement SA_RESTART support ====

* reason: applications such as tmux use it and may simply expect it to work
* note: this probably involves putting the request message in the sigframe and have the kernel pretend a resend
* complication: this should not get in the way of system call tracing

==== Implement proper subpage block size support in libminixfs ("reworking minixfs, part 2") ====

* reason: needed to support memory-mapped files, and save half of the cache memory, on isofs
* reason: needed for file systems such as FAT
* note: this will require decoupling file system blocks from I/O blocks
* note: it would be useful to have an interface that makes memory mapping of files as easy as possible for this case

==== Document the lib{block,char,fs,input,net,sock}driver abstraction libraries ====

* reason: these are essential interfaces for other programmers
* complication: we haven't settled whether these should be wiki pages, manual pages, or yet something else

==== Implement call permission ACLs in PM and VFS ====

* reason: services can do way too much
* reason: many more services should not be running as root
* complication: it's going to be hard to figure out which service needs what
* note: as part of this, it should be decided whether having one single service UID is tenable

==== Implement VM page protection and mprotect ====

* reason: expected by various parts of NetBSD userland
* reason: most executable text areas are currently writable, which is absolutely ridiculous for a "secure" OS
* complication: VM does not seem to have anything in the way of implementing this

==== Improve out-of-memory management in VM ====

* reason: the whole system can easily die if a service pagefaults while all memory is in use
* reason: requested by zentrum
* note: the easiest way is to have a pool with memory reserved for handling service pagefaults
* note: this may best be done in combination with a pool with memory reserved for contiguous memory

==== Add GPT support ====

* reason: this is going to be increasingly necessary to have MINIX3 installed alongside other OSes
* complication: this affects not only libblockdriver but quite some of the boot process as well
* complication: it is unclear how /dev node naming, numbering should work, and whether devfs is needed
* note: need more discussion with antoineL about this first

==== Add devfs ====

* reason: (lots of reasons, TBD)
* complication: (lots of complications, TBD)

==== Add SEM_UNDO support to SysV IPC semaphores ====

* reason: missing functionality
* complication: tricky in many ways, may end up doubling sem.c code size
* complication: needs an extensive test set to match (adding to test88 or separate)

==== Add support for SysV IPC message queues ====

* reason: ipcs/ipcrm expect this to be supported
* note: this will require that the process-is-blocked-on table be split from sem.c

==== Make procfs no longer import other services' headers and tables ====

* reason: where needed, this kind of stuff should now be handled by the MIB service
* reason: there are rare cases where recompiling procfs is not desirable
* complication: especially for /proc/services this will require moving a lot into MIB

==== Make procfs optional ====

* reason: essentially the same role is now fulfilled by the MIB service, making procfs somewhat redundant
* reason: we want to allow footprint reduction in general
* complication: not all of the information is available through the MIB service as it is
* complication: /etc/mtab is currently a symlink to /proc/mounts, this needs to be dealt with
* note: ideally, procfs should no longer be needed on the ramdisk

==== Rework the DS publish/subscribe API ====

* reason: the current implementation is heavyweight (libc regex) and uses malloc through regcomp(3)
* reason: at the same time it does not fulfill needs of services, which want to have multiple independent subscriptions
* complication: this requires a proper look at all current DS publish/subscribe usage scenarios
* note: an example use case is RMIB, which wants to detect MIB-service restarts independent of the main code
* note: a solution based on multiple possible subscriptions to sets of service classes would probably suffice
* note: libsys should probably have a DS notification dispatcher, possibly as part of SEF
* note: this probably a good time to introduce a system-wide constant for service label sizes

==== Make the MIB service's RMIB calls asynchronous ====

* reason: a RMIB call to a deadlocked service may currently deadlock MIB, and with that the entire system
* complication: this may or may not require the MIB service to sign up for PM process events
* note: this depends on RMIB being notified about service deaths through DS, rather than via ipc_sendrec()

==== Extend RMIB functionality/robustness to match service requirements ====

* problem: it is not possible to modify (= bump the version number of) already-mounted RMIB subtrees (e.g., net.interface)
* problem: it is not possible to mount RMIB subtrees using a name only (e.g. minix.lwip)
* problem: it is currently possible to mess up the MIB tree with bad name+id combos in RMIB mount requests

==== Disallow killing processes in an uninterruptible system call ====

* reason: processes may currently be terminated while in an uninterruptible system call, possibly triggering poorly-tested scenarios in other services (safecopy failures, etc)
* complication: this will require changes to the PM signal state machine, with subtle side effects
* complication: involving all user-facing system services in exit notification is a performance problem
* note: the most obvious solution would be kernel support for notification (to PM) when a process system call has completed, comparable to SIGNDELAY, and a PREEXIT process state in PM
* note: ideally the same idea would be applied to signal handler invocation, because the current approach makes dangerous and already-incorrect(?) assumptions about "retreg" there

==== Add support for pselect(2) ====

* reason: pselect(2) is required by dhcpcd(8) and various other parts of userland
* complication: pselect(2) is supposed to be atomic and thus cannot be implemented as a select(2) wrapper
* complication: a proper implementation will require a non-trivial extension to the PM/VFS protocol
* subsequent project: also implement paccept(2); this will require storing more call state in VFS

==== Implement job control ====

* status: '''IN PROGRESS'''
* reason: required by POSIX and generally desirable
* reason: allows for the introduction of various concepts currently expected by NetBSD userland
* complication: many fundamental issues remain to be resolved
* note: this is a new implementation that is conceptually based almost entirely on antoineL's work
* note: need more discussion with antoineL about this first

==== Merge TwinFS ====

* status: '''PROTOTYPE READY, NEEDS TESTING'''
* reason: a first crash-consistent file system
* reason: start of the infrastructure for a reusable file system graph management layer (libfsgraph)
* complication: different file system will require different small exceptions
* complication: no neat way to model orphan management in the edge (directory) layer

==== Move the BSD socket API into VFS ====

* status: '''MERGED'''
* reason: libc should not need to test or track socket types, it violates the light-libc minix philosophy
* reason: the individual writes to implement sendto (etc) probably violate posix signal atomicity
* benefit: this allows for proper socket call support in trace(1)
* complication: this will break everything, require INET's retirement and a substantial UDS rewrite
* note: this is probably best done along with many other network stack related changes

==== Look into setuid/seteuid behavior ====

* status: '''MERGED'''
* reason: this is causing problems with openssh server privilege separation, possibly openntpd (#61), possibly others
* complication: uid/gid management is so convoluted that a paper was published about it
* complication: lots of services other than PM and VFS (eg UDS, IPC..) are probably also doing the wrong thing

==== Resolve the issue of soft faults versus partial success in file systems ====

* status: '''MERGED'''
* reason: this is actually causing issues in installboot and who knows where else
* note: it seems that the best option is to have the kernel write a mark into the grant table upon failure
* note: cpf_revoke can be made to return the mark
* complication: for indirect grants, the original (magic) grant would have to be marked, not the last part of the chain

==== Change grant IDs to incorporate generation numbers ====

* status: '''MERGED'''
* reason: too easy to use a grant that has been revoked as it is
* note: a 16/16 split may limit the number of ongoing operations? then again, is that just a function of NR_PROCS?
* complication: must ensure that the own-address-space grant for live update is not negatively affected by this

==== Add support for missing IPC server information calls ====

* status: '''MERGED'''
* reason: ipcs(1) is currently not showing all available information
* note: this should be done as a MIB service extension now
* subsequent project: add support for those to trace(1) as well

==== Create a libkvm wrapper system to support ps(1) ====

* status: '''SUPERSEDED''' by MIB service
* reason: netbsd ps(1) is expected by /etc/rc.subr
* complication: having to deal with all fields that minix does not have
* complication: performance issues retrieving all this information from procfs
* note: ideally the same wrapper system would replace the one currently used by w(1)

==== Allow nonroot users to create PTYs ====

* status: '''MERGED'''
* reason: tmux can currently not used by nonroot users
* complication: without devfs, we need a separate /dev/pts file system

==== Put the current clock value on the kinfo page, at least for system processes ====

* status: '''MERGED'''
* reason: performance optimization, but allows for functional simplification of time retrieval management
* complication: 64-bit support and atomic retrieval and all that
* subsequent project: removing lazy-time-update support from file systems

==== Add support for wait4 ====

* status: '''MERGED'''
* reason: various userland programs need this, like time(1) and csh(1)
* complication: rusage information is scattered across services; getrusage calls into several
* complication: PM would have to copy in this information preemptively for zombies</text>
      <sha1>2qmvtdw7hkb2mn1vw335vj9nv7z2p37</sha1>
    </revision>
  </page>
  <page>
    <title>Wishlist (Xorg)</title>
    <ns>0</ns>
    <id>180</id>
    <revision>
      <id>237</id>
      <timestamp>2021-09-10T16:48:22Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import wishlist:xorg</comment>
      <origin>237</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3678" sha1="2hrx3pj0fpw5rln24l7ft5swjbtoe3x" xml:space="preserve">== Introduction ==

Minix wishes to have a modern xorg port for various reasons. Modern
hardware support, changes submitted upstream, and clean pkgsrc
integration are three big ones. Pkgsrc integration with our current X
port is not so good - it's 'native' instead of 'modular.' See pkgsrc
for details. The current xorg in pkgsrc is older than the latest xorg.
This means this project involves 2 logical ports of Xorg to 2
different upstreams: first the pkgsrc versions ported, with patches
submitted to the pkgsrc database; and second the latest xorg version
ported with patches submitted to the xorg repository.

This page describes the requirements for a successful minix xorg port.

== Technical subgoals ==
* If necessary update the minix pkgsrc repository with the latest netbsd pkgsrc repository to get the latest Xorg package versions in the minix pkgsrc repository.
* Server and client support: Port all software (server, libraries, drivers, clients, i.e. applications) from the xorg distribution, and port or implement any necessary dependencies. Also xterm. The current minix X port may be of assistance. This work must be based on the xorg package versions that are currently in pkgsrc. As noted in the introduction, these are older than the current latest Xorg release. Afterwards also the current Xorg trunk.
* Provide a clean integration with pkgsrc: this means changing the Xorg server type in pkgsrc to 'modular' (i.e. &lt;code&gt;X11_TYPE=modular&lt;/code&gt;; that configuration switch was already done recently) and verifying that packages that depend on X pick up your port as a dependency cleanly.
* The port must be submittable upstream and maintainable, and will therefore have to be clean - minimal changes to original code and neatly guarded by &lt;code&gt;#if __minix&lt;/code&gt; or similar if appropriate.
* Hardware drivers: will require a clean minix interface for the libpciaccess in xorg.
* For the video drivers, only the ones required to be tested and found working are the ones for nvidia cards, vmware, vbox and kvm, and the virtual framebuffer.
* All extensions are expected to work too, unless they rely on hardware features not provided by the required video driver list above
* For the input drivers, they will have to talk to the new /dev/kbdmux and /dev/mousemux. These provide USB codes. In contrast, the current minix !X11R6 port gets PC/AT codes from the (now removed) /dev/kbd and /dev/kbdaux.
* All other Xorg software must build and work.
* If threads are required, using devel/pth as a libpthread implementation is OK, if it works reliably.

== Less-technical Notes and Upstreaming ==

* Implementing and integrating kernel mode switching for minix is not required.
* If a hard-to-satisfy dependency is encountered (e.g. requiring kernel level threads) then this work is not necessarily part of porting Xorg. This is left up to judgement of AST.
* Submit your Minix-specific changes to the pkgsrc repository after review by the Minix team (also cooperate with Thomas Cort as he is a minix &amp; pkgsrc team member)
* Submit your Minix-specific changes to be included in the Xorg repository after review by the Minix team. This means re-porting/rebasing the pkgsrc-version release port to the current trunk of development of xorg.
* This obsoletes the minix/x11 package.

== Test ==
* The test we use to see whether the port is satisfactory is: build the Xorg port on current minix; try the Xorg port on vmware, vbox, kvm, and an nvidia card; configure and start the server; and try xterm, xeyes, xrdb, twm, xsetroot, xv, xpdf and a client that exercises the asynchronous access protocol, i.e. XCB, e.g. the awesome window manager starting with version 3.0.</text>
      <sha1>2hrx3pj0fpw5rln24l7ft5swjbtoe3x</sha1>
    </revision>
  </page>
  <page>
    <title>Security</title>
    <ns>0</ns>
    <id>181</id>
    <redirect title="Securing MINIX" />
    <revision>
      <id>250</id>
      <timestamp>2021-09-10T19:17:40Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>Stux moved page [[Security]] to [[Securing MINIX]]: Update title with description more in line with topic</comment>
      <origin>250</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="28" sha1="ia2marjxkx2ecuwpnax2znynju3mpuk" xml:space="preserve">#REDIRECT [[Securing MINIX]]</text>
      <sha1>ia2marjxkx2ecuwpnax2znynju3mpuk</sha1>
    </revision>
  </page>
  <page>
    <title>User Accounts</title>
    <ns>0</ns>
    <id>182</id>
    <redirect title="Managing User Accounts" />
    <revision>
      <id>254</id>
      <timestamp>2021-09-10T20:20:32Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>Stux moved page [[User Accounts]] to [[Managing User Accounts]]: Update title with more appropriate description</comment>
      <origin>254</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="36" sha1="0mrnia1odqwhyjjx4wlasv2vcanb0u2" xml:space="preserve">#REDIRECT [[Managing User Accounts]]</text>
      <sha1>0mrnia1odqwhyjjx4wlasv2vcanb0u2</sha1>
    </revision>
  </page>
  <page>
    <title>Shutdown</title>
    <ns>0</ns>
    <id>183</id>
    <redirect title="Shutting Down the System" />
    <revision>
      <id>260</id>
      <timestamp>2021-09-10T20:27:55Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>Stux moved page [[Shutdown]] to [[Shutting Down the System]]: Update title with more appropriate description</comment>
      <origin>260</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="38" sha1="epbx2d3ne3wrhve2ez7kdyy3wjpd1ks" xml:space="preserve">#REDIRECT [[Shutting Down the System]]</text>
      <sha1>epbx2d3ne3wrhve2ez7kdyy3wjpd1ks</sha1>
    </revision>
  </page>
  <page>
    <title>Multiple Operating Systems</title>
    <ns>0</ns>
    <id>184</id>
    <redirect title="Running Multiple Operating Systems" />
    <revision>
      <id>270</id>
      <timestamp>2021-09-10T20:35:15Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>Stux moved page [[Multiple Operating Systems]] to [[Running Multiple Operating Systems]]: Update title with more appropriate description</comment>
      <origin>270</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="48" sha1="evpzul7dptzlx03tf4g4b2ttbaul9or" xml:space="preserve">#REDIRECT [[Running Multiple Operating Systems]]</text>
      <sha1>evpzul7dptzlx03tf4g4b2ttbaul9or</sha1>
    </revision>
  </page>
  <page>
    <title>IPC Proxy</title>
    <ns>0</ns>
    <id>185</id>
    <revision>
      <id>276</id>
      <timestamp>2021-09-11T10:25:46Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import ipc-proxy (from site)</comment>
      <origin>276</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="741" sha1="2wxl3fjhnn968mlibduwa85owmawhvf" xml:space="preserve">== A framework to log and manipulate inter-process communications ==

Student: Not assigned yet

Owner: Cristiano Giuffrida &lt;giuffrida@cs.vu.nl&gt;

SVN branch name: N/A

=== Description ===

Minix3 OS design revolves around a micro-kernel and several servers running as
isolated, user-space processes, which implement all the OS critical subsystems
(e.g., the process manager, the system manager, the virtual file system) and
drivers. As in every micro-kernel based OS all the communications among OS'
components are encapsulated and carried out as IPC messages. This design
completely differs from monolithic OS where the kernel and all its components
share a common address space and any component can potentially invoke any
kernel function.</text>
      <sha1>2wxl3fjhnn968mlibduwa85owmawhvf</sha1>
    </revision>
  </page>
  <page>
    <title>Operating System Versioning</title>
    <ns>0</ns>
    <id>186</id>
    <revision>
      <id>277</id>
      <timestamp>2021-09-11T10:28:21Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import versioning (from site)</comment>
      <origin>277</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2544" sha1="dn8wbf88gq0g4eiiw6kupq5gwviv5xq" xml:space="preserve">Student: Not assigned yet

Owner: Cristiano Giuffrida &lt;giuffrida@cs.vu.nl&gt;

SVN branch name: N/A

=== Description ===

MINIX3 is quickly evolving to become a highly-updateable operating system, in which OS updates (as opposed to application updates) can be installed offline or on-the-fly and be quickly rollbacked when something goes wrong. 

For offline OS updates (the good old download-install-reboot-see_what_happens routine :) ), we want to provide the user with the ability to switch among completely different versions of the operating system at boot time when some update didn't really work as expected (or simply for testing purposes). Each version must include the kernel, but also all the dependent operating system services (e.g. the process manager).

For OS updates that are installed on-the-fly (live updates), we want the user to be notified when an important operating system update is available, have MINIX3 install the update online, and automatically verify that the system is still functioning correctly. If the update fails for some reason (e.g. one of the newly installed components crashes), the system will automatically rollback to the previous version without even bugging the user. Note that each live update can contain a small patch (e.g. a security update) or a major operating system update that affects a number of operating system components to add new features. Consider, for example, a live update that replaces the memory manager and changes critical memory management policies on-the-fly!

For comparison, see [https://www.ksplice.com/ Ksplice] on Linux, which can only handle CVE patches on-the-fly, usually consisting of a very limited number of lines of code.

In this project, your job is to add versioning support to MINIX3 to help realize this vision. This will involve making many changes to the core system, working with the new Minix3 package manager (NetBSD's pkgsrc), and interacting with the emerging live update infrastructure. The kernel and each operating system service will need to have a version number assigned to univoquely identify each component. Part of your job is to design a versioning framework that will be able to automatically maintain and increase version numbers without bugging the developers, as well as to export a clean interface to the applications. The integration with the package manager for live updates and with the boot process for offline updates will follow, but ideally the framework should be of general application to cope with future application scenarios.</text>
      <sha1>dn8wbf88gq0g4eiiw6kupq5gwviv5xq</sha1>
    </revision>
  </page>
  <page>
    <title>Whole-OS Crash Recovery</title>
    <ns>0</ns>
    <id>187</id>
    <revision>
      <id>278</id>
      <timestamp>2021-09-11T10:30:37Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import rel-wholeos-rec (from site)</comment>
      <origin>278</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="659" sha1="5ffm7v97t7y4jtiorvpjboi2gr8321q" xml:space="preserve">Student: Not assigned yet

Owner: Cristiano Giuffrida &lt;c.giuffrida@few.vu.nl&gt;

SVN branch name: N/A

=== Abstract ===

This project is to design and implement a whole-OS crash recovery infrastructure able to recover from arbitrary crashes in MINIX 3 stateful components within a predefined recovery window. The project will build on top of the existing reliability infrastructure and leverage compiler-based techniques to track all the component state changes in a fine-grained manner. The design of a solid state tracking infrastructure is the main goal of this project, to guarantee the ability to rollback the component to a safe state when a crash occurs.</text>
      <sha1>5ffm7v97t7y4jtiorvpjboi2gr8321q</sha1>
    </revision>
  </page>
  <page>
    <title>Loris Deduplication</title>
    <ns>0</ns>
    <id>188</id>
    <revision>
      <id>280</id>
      <timestamp>2021-09-11T10:36:12Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import loris:deduplication (from site)</comment>
      <origin>280</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2868" sha1="p5y3yoyn0kdbsgdo2ziicrrnkznm1po" xml:space="preserve">== Support for deduplication in Loris ==

Student: Not assigned yet

Owner: David van Moolenbroek &lt;dcvmoole@cs.vu.nl&gt; / Raja Appuswamy &lt;raja@cs.vu.nl&gt;

Git branch name: N/A

=== The Loris project ===

The storage industry has witnessed a tremendous change in both hardware and software fronts over the past decade. Storage hardware landscape is witnessing the birth and adoption of new classes of storage like flash memory-based solid state drives that posses radically different characteristics compared to the traditional disk drives. Storage software, on the other hand, has evolved from simple single disk file systems to feature-rich, sophisticated storage systems like ZFS and Btrfs that support a suite of features like snapshotting, cloning, checksumming, background defragmentation etc.

Our research involves building a next-generation storage stack called Loris, on top of the MINIX 3 operating system. Before we started designing our stack, we analyzed all existing solutions along three different dimensions - reliability, flexibility and heterogeneity.  We found that all existing solutions [https://www.cs.vu.nl/~raja/pubs/hotstorage10_paper.pdf fail to satisfy] the requirements of an ideal storage stack. Using the modular, layered network stack as a guiding example, we then designed and implemented the [https://www.cs.vu.nl/~raja/pubs/prdc10.pdf Loris] stack which solves all problems faced by existing approaches.

Loris' modularity makes it implement a highly-reliable storage solution that can [https://www.cs.vu.nl/~raja/pubs/HotDep2011.pdf protect itself from both hardware and software failures]. Loris' flexibility makes it possible to deploy a storage stack that can [https://www.cs.vu.nl/~raja/pubs/msst.pdf snapshot and clone data] in a range of granularities ranging from individual files all the way to file volumes.

=== Project description ===

The widespread adoption of virualization in data centers has resulted in a proliferation of duplicate data being created and stored to hold virtual machine disk images. As most virtual machine hold identical copies of several files, like system binaries, storing all this data once per virtual machine results in very poor storage efficiency. Deduplication has emerged as the industry standard for tackling this problem.

By computing a hash over each data block stored, dedup attempts to identify all duplicate blocks. By storing only one copy of each unique data block, dedup provides high storage efficiency. In contrast to dedup which works on a block by block basis, the layers in the Loris stack work on a whole file basis. Thus, this project involves exploring several design alternatives with respect to integrating deduplication with the Loris stack, implementing a dedup solution, and evaluating it using a range of benchmarks.

If you are interested, please come and talk to us!</text>
      <sha1>p5y3yoyn0kdbsgdo2ziicrrnkznm1po</sha1>
    </revision>
  </page>
  <page>
    <title>Cloud Storage with Loris</title>
    <ns>0</ns>
    <id>189</id>
    <revision>
      <id>282</id>
      <parentid>281</parentid>
      <timestamp>2021-09-11T10:38:56Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* = The Loris project */ Header fix</comment>
      <origin>282</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2830" sha1="0bzymh4rq6ig22br9gy3qx2zbce1rc4" xml:space="preserve">Student: Not assigned yet

Owner: David van Moolenbroek &lt;dcvmoole@cs.vu.nl&gt; / Raja Appuswamy &lt;raja@cs.vu.nl&gt;

Git branch name: N/A

== The Loris project ==

The storage industry has witnessed a tremendous change in both hardware and software fronts over the past decade. Storage hardware landscape is witnessing the birth and adoption of new classes of storage like flash memory-based solid state drives that posses radically different characteristics compared to the traditional disk drives. Storage software, on the other hand, has evolved from simple single disk file systems to feature-rich, sophisticated storage systems like ZFS and Btrfs that support a suite of features like snapshotting, cloning, checksumming, background defragmentation etc.

Our research involves building a next-generation storage stack called Loris, on top of the MINIX 3 operating system. Before we started designing our stack, we analyzed all existing solutions along three different dimensions - reliability, flexibility and heterogeneity.  We found that all existing solutions [https://www.cs.vu.nl/~raja/pubs/hotstorage10_paper.pdf fail to satisfy] the requirements of an ideal storage stack. Using the modular, layered network stack as a guiding example, we then designed and implemented the [https://www.cs.vu.nl/~raja/pubs/prdc10.pdf Loris] stack which solves all problems faced by existing approaches.

Loris' modularity makes it implement a highly-reliable storage solution that can [https://www.cs.vu.nl/~raja/pubs/HotDep2011.pdf protect itself from both hardware and software failures]. Loris' flexibility makes it possible to deploy a storage stack that can [https://www.cs.vu.nl/~raja/pubs/msst.pdf snapshot and clone data] in a range of granularities ranging from individual files all the way to file volumes.

== Project description ==

As enterprises continue to produce massive amounts of data and as data management is still prohibitively expensive, several storage vendors have started offering data storage as a service. In this project, we would like to investigate the best way to integrate such a cloud storage solution with the Loris stack. 

There are several possible design alternatives that one could pursue. For instance, one could use the cloud store as a remote mirrored primary backup data store which stores a copy of all local data. In such a case, when any or all local nodes fail, the cloud store can take over as the primary with no down time. Another alternative would be to use the cloud store in a RAID setting where it stores just the parity blocks while storing the data blocks on local storage.

This project involves investigating all such possibilities, implementing a cloud storage physical layer in Loris and evaluating it using a range of benchmarks. If you are interested, please come and talk to us!</text>
      <sha1>0bzymh4rq6ig22br9gy3qx2zbce1rc4</sha1>
    </revision>
  </page>
  <page>
    <title>Advanced File Typing in Loris</title>
    <ns>0</ns>
    <id>190</id>
    <revision>
      <id>283</id>
      <timestamp>2021-09-11T10:42:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import loris:filetyping</comment>
      <origin>283</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="3968" sha1="2770e5hg6y4ai0elq8v2m1dv1tz9onh" xml:space="preserve">Student: Not assigned yet

Owner: David van Moolenbroek &lt;dcvmoole@cs.vu.nl&gt; / Raja Appuswamy &lt;raja@cs.vu.nl&gt;

Git branch name: N/A

== The Loris project ==

The storage industry has witnessed a tremendous change in both hardware and software fronts over the past decade. Storage hardware landscape is witnessing the birth and adoption of new classes of storage like flash memory-based solid state drives that posses radically different characteristics compared to the traditional disk drives. Storage software, on the other hand, has evolved from simple single disk file systems to feature-rich, sophisticated storage systems like ZFS and Btrfs that support a suite of features like snapshotting, cloning, checksumming, background defragmentation etc.

Our research involves building a next-generation storage stack called Loris, on top of the MINIX 3 operating system. Before we started designing our stack, we analyzed all existing solutions along three different dimensions - reliability, flexibility and heterogeneity.  We found that all existing solutions [https://www.cs.vu.nl/~raja/pubs/hotstorage10_paper.pdf fail to satisfy] the requirements of an ideal storage stack. Using the modular, layered network stack as a guiding example, we then designed and implemented the [https://www.cs.vu.nl/~raja/pubs/prdc10.pdf Loris] stack which solves all problems faced by existing approaches.

Loris' modularity makes it implement a highly-reliable storage solution that can [https://www.cs.vu.nl/~raja/pubs/HotDep2011.pdf protect itself from both hardware and software failures]. Loris' flexibility makes it possible to deploy a storage stack that can [https://www.cs.vu.nl/~raja/pubs/msst.pdf snapshot and clone data] in a range of granularities ranging from individual files all the way to file volumes.

== Project description ==

Fle systems have been used as document stores for housing a heterogeneous mix of data ranging from small text ﬁles to large multimedia ﬁles like photos, music and videos. With the amount of data stored by users increasing at an alarming rate, hierarchy-based ﬁle access and organization has lost ground to content-based access mechanisms. Most users have resorted to using attribute-based or tag-based naming schemes offered by multimedia and desktop search applications for managing and searching their data. 

These applications essentially build a user-level data management system that crawls the ﬁle system periodically to extract data and metadata, maintains indices on the extracted information, and offers application-speciﬁc search interfaces to query over the gathered data. Such applications also store data in custom file formats and are essentially mini-file systems managing everything from space allocation to data caching within a file. For instance, a recent study revealed that the DOC file format is modeled based on the FAT file system and has an incredibly complex layout for data.
These applications are also monolithic giants that reference hundreds of libraries and use tons of application frameworks for accessing data. For instance, a recent study showed that the simple process of inserting fifteen images and saving a DOC file results in accesses to over three hundred different files in the file system.

We recently showed how integrating metadata search into the storage stack provides several benefits by [https://www.cs.vu.nl/~raja/pubs/nas2011.pdf extending the Loris stack to support metadata management]. We would now like to investigate the benefits of integrating data management into Loris. There are lots of open questions that we can investigate as a part of this project: 1) Does awareness of complex application-specific file system have any potential performance/reliability benefits? 2) Can we use Loris as an infrastructure for implementing application frameworks?, 3) Can we use type information to automate policy assignment?

If you are interested, please come and talk to us!</text>
      <sha1>2770e5hg6y4ai0elq8v2m1dv1tz9onh</sha1>
    </revision>
  </page>
  <page>
    <title>Loris Meets Multicore</title>
    <ns>0</ns>
    <id>191</id>
    <revision>
      <id>284</id>
      <timestamp>2021-09-11T10:44:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import loris:multicore (from site)</comment>
      <origin>284</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2654" sha1="ht5l91qanaaipwc0cq4lzwprv7mvfjd" xml:space="preserve">Student: Not assigned yet

Owner: David van Moolenbroek &lt;dcvmoole@cs.vu.nl&gt; / Raja Appuswamy &lt;raja@cs.vu.nl&gt; / Tomáš Hrubý &lt;thruby@few.vu.nl&gt;

Git branch name: N/A

== The Loris project ==

The storage industry has witnessed a tremendous change in both hardware and software fronts over the past decade. Storage hardware landscape is witnessing the birth and adoption of new classes of storage like flash memory-based solid state drives that posses radically different characteristics compared to the traditional disk drives. Storage software, on the other hand, has evolved from simple single disk file systems to feature-rich, sophisticated storage systems like ZFS and Btrfs that support a suite of features like snapshotting, cloning, checksumming, background defragmentation etc.

Our research involves building a next-generation storage stack called Loris, on top of the MINIX 3 operating system. Before we started designing our stack, we analyzed all existing solutions along three different dimensions - reliability, flexibility and heterogeneity.  We found that all existing solutions [https://www.cs.vu.nl/~raja/pubs/hotstorage10_paper.pdf fail to satisfy] the requirements of an ideal storage stack. Using the modular, layered network stack as a guiding example, we then designed and implemented the [https://www.cs.vu.nl/~raja/pubs/prdc10.pdf Loris] stack which solves all problems faced by existing approaches.

Loris' modularity makes it implement a highly-reliable storage solution that can [https://www.cs.vu.nl/~raja/pubs/HotDep2011.pdf protect itself from both hardware and software failures]. Loris' flexibility makes it possible to deploy a storage stack that can [https://www.cs.vu.nl/~raja/pubs/msst.pdf snapshot and clone data] in a range of granularities ranging from individual files all the way to file volumes.

== Project description ==

A recent research project used multi-core processors to improve performance and reliability of the [https://wiki.minix3.org/en/NetSrvMigration MINIX network stack]. This was done by 1) breaking up the network stack into several components, 2) running each component an an independent core, and 3) deploying techniques that avoid unnecessary data copies between components and context switches to the kernel. 

Akin to the network stack, our Loris stack also has multiple layers. Loris performs plenty of computationally intensive tasks, like checksumming, that can exploit parallelism inherent in multi-core architectures. This projects involves investigating the benefits of using multi-core processors to improve Loris' performance. If you are interested, please come and talk to us!</text>
      <sha1>ht5l91qanaaipwc0cq4lzwprv7mvfjd</sha1>
    </revision>
  </page>
  <page>
    <title>Benchmarking Loris Infrastructure</title>
    <ns>0</ns>
    <id>192</id>
    <revision>
      <id>285</id>
      <timestamp>2021-09-11T10:47:03Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import loris:bench (from site)</comment>
      <origin>285</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1928" sha1="dbyovbh0mgmyk0585mudnts7uqyndz1" xml:space="preserve">Student: Not assigned yet

Owner: David van Moolenbroek &lt;dcvmoole@cs.vu.nl&gt; / Raja Appuswamy &lt;raja@cs.vu.nl&gt;

Git branch name: N/A

== Description ==

Our research revolves around Loris, a new storage stack that replaces traditional file system and software RAID layers. As with any new piece of software, we have to make sure that its performance is not too horrible. We have used a limited set of benchmarks to evaluate our work so far, but we would like to perform more thorough and diverse testing on Loris and its competitors.

For this project, we would like you to extend our simple benchmarking infrastructure to include many more benchmarks. We estimate that this project will consist of the following parts:

* Porting more commonly used storage benchmarking suites to MINIX3. We are thinking of a subset out of [https://www.solarisinternals.com/wiki/index.php/FileBench FileBench], [https://www.iometer.org/ Iometer], [https://www.tpc.org/tpcc/ TPC-C], [https://www.spec.org/osg/sfs/ SPEC SFS]. The last one is not free, but we can purchase it.
* Writing a set of scripts that allow all these benchmarks to be run with pretty much no manual effort involved.
* Comparing the performance of Loris, MINIX3's own MFS file system, and the Ext2 file system port, using these benchmarking scripts. We are also interested in the performance differences that result from changing certain settings in each of those file systems (such as the used block size), and having the automated benchmarking infrastructure will really help there.
* Taking traces of the operations performed by these benchmarks, and analyzing them in many respects, for example to see which spectrum of file system operations they cover and with which frequency, and to find out how closely they match the real-world workload that they are trying to mimic. Essentially, you will be evaluating the evaluation tools.

If you are interested, come talk to us!</text>
      <sha1>dbyovbh0mgmyk0585mudnts7uqyndz1</sha1>
    </revision>
  </page>
  <page>
    <title>Loris on SSDs</title>
    <ns>0</ns>
    <id>193</id>
    <revision>
      <id>286</id>
      <timestamp>2021-09-11T10:49:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import loris:ssdoptimizedlayout</comment>
      <origin>286</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2580" sha1="4snvnbagf5j3tvqwmc02fbo28a6s01n" xml:space="preserve">Student: Not assigned yet

Owner: David van Moolenbroek &lt;dcvmoole@cs.vu.nl&gt; / Raja Appuswamy &lt;raja@cs.vu.nl&gt;

Git branch name: N/A

== The Loris project ==

The storage industry has witnessed a tremendous change in both hardware and software fronts over the past decade. Storage hardware landscape is witnessing the birth and adoption of new classes of storage like flash memory-based solid state drives that posses radically different characteristics compared to the traditional disk drives. Storage software, on the other hand, has evolved from simple single disk file systems to feature-rich, sophisticated storage systems like ZFS and Btrfs that support a suite of features like snapshotting, cloning, checksumming, background defragmentation etc.

Our research involves building a next-generation storage stack called Loris, on top of the MINIX 3 operating system. Before we started designing our stack, we analyzed all existing solutions along three different dimensions - reliability, flexibility and heterogeneity.  We found that all existing solutions [https://www.cs.vu.nl/~raja/pubs/hotstorage10_paper.pdf fail to satisfy] the requirements of an ideal storage stack. Using the modular, layered network stack as a guiding example, we then designed and implemented the [https://www.cs.vu.nl/~raja/pubs/prdc10.pdf Loris] stack which solves all problems faced by existing approaches.

Loris' modularity makes it implement a highly-reliable storage solution that can [https://www.cs.vu.nl/~raja/pubs/HotDep2011.pdf protect itself from both hardware and software failures]. Loris' flexibility makes it possible to deploy a storage stack that can [https://www.cs.vu.nl/~raja/pubs/msst.pdf snapshot and clone data] in a range of granularities ranging from individual files all the way to file volumes.

== Project description ==

As flash-based SSDs grow larger and cheaper, more enterprises have started adopting them in various capacities ranging from dedicated HDD caches to replicated primary storage devices. However, the reliability issues posed by limited number of erase operations continues to be the Achilles' heel of SSDs. Performing wear leveling and reducing random writes are two important techniques that have been adopted by SSD vendors and flash file system designers to reduce the number of erase operations and hence, improve the lifetime of SSDs. 

In this project, you will be given a state-of-the-art SSD. Your job is to design and develop a flash-optimized layout algorithm, for our Loris storage stack. If you are interested, please come and talk to us!</text>
      <sha1>4snvnbagf5j3tvqwmc02fbo28a6s01n</sha1>
    </revision>
  </page>
  <page>
    <title>Scalable Network Stack</title>
    <ns>0</ns>
    <id>194</id>
    <revision>
      <id>288</id>
      <timestamp>2021-09-11T11:00:18Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import scalablenetworkstack</comment>
      <origin>288</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="924" sha1="anc7h6ozakunffh7ucrh86wr3wbyeij" xml:space="preserve">We have demonstrated that is is possible to exploit multicore architectures to implement a fast and reliable network stack ([https://www.few.vu.nl/~herbertb/papers/dsn2012.pdf paper]). However, the main problem is that we can only use one cpu/core for one component of the stack. Therefore, once a core gets overloaded, the stack does not scale further. The goal of this project is to find out, how can we scale beyond the sing-cpu bottle-neck. Is it possible to run multiple TCP components? Which one would an application use to open a socket? Can we have multiple IP components? How would IPs route packets between each other and how would they connect to TCPs? Can each application implement its own TCP? What are the overheads of making the system more distributed than it is now? How can packet filtering and vitualization of modern network cards help us in our goal? This project should answer some of these questions.</text>
      <sha1>anc7h6ozakunffh7ucrh86wr3wbyeij</sha1>
    </revision>
  </page>
  <page>
    <title>Load Awareness</title>
    <ns>0</ns>
    <id>195</id>
    <revision>
      <id>289</id>
      <timestamp>2021-09-11T11:05:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import loadawareness</comment>
      <origin>289</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1039" sha1="cgl3i3hwgzq2os56y7zldtmv63bkqvl" xml:space="preserve">== Load aware effeective scheduler for multicore Minix ==

A master student implemented frequency scaling driver for our development platforms and evaluated and in-house LwIP based multi-component network stack, however, the benchmarked scenarios were configured statically. Our goal is to take this project farther and add a load aware scheduler which can dynamically scale frequencies of individual cores and migrate system processes between core so that we deliver the best performance required for the current load while using the least resources. We are not only interested in the current load of a CPU. Since Minix is multi-server/driver system, each request is handled by a set of components. A fast component on a fast core may keep overloading a slow component. We need to monitor their communication and find a good performance/resource utilization

The task is:

* design and implement probes that would allow a scheduler to make decisions based on load requirements
* design and implement and evaluate the scheduling algorithms</text>
      <sha1>cgl3i3hwgzq2os56y7zldtmv63bkqvl</sha1>
    </revision>
  </page>
  <page>
    <title>Asynchronous Network Stack</title>
    <ns>0</ns>
    <id>196</id>
    <revision>
      <id>290</id>
      <timestamp>2021-09-11T11:12:20Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import asynnetstack</comment>
      <origin>290</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1150" sha1="qyftf1pp9vh7wvdixcgucaufl0wjqnq" xml:space="preserve">Since the Minix VFS is fully asynchronous and the LwIP server supports the asynchronous protocol, we would like to extend the asynchronous communication to the network drivers. Although they use asynchronous send to communicate with the LwIP/inet servers, the protocol is mostly synchronous. However, we have a replacement for the senda() and recv() pair which, in contrast, has a very little overhead, can be used across multiple cores with even less overhead and allows components to run in parallel.

The task is :

* to implement a "framework" for network drivers that would encapsulate the new fast asynchronous channels and serve as a skeleton for network drivers. Drivers would link with this library and use their hardware specific functions for complete functionality
* extend the protocol so that we could use zero-copy between LwIP and drivers
* implement generic offload mechanism (similar to GSO/GRO in Linux)
* allow drivers to use hardware offloading feature instead of the generic implementation
* convert drivers to this new "framework"

The goal is to dramatically improve the network stack performance and deliver gigabit bitrates.</text>
      <sha1>qyftf1pp9vh7wvdixcgucaufl0wjqnq</sha1>
    </revision>
  </page>
  <page>
    <title>Exception Handling Unification</title>
    <ns>0</ns>
    <id>197</id>
    <revision>
      <id>291</id>
      <timestamp>2021-09-11T11:13:24Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import exceptionhandlingunification</comment>
      <origin>291</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2776" sha1="r5fqtirs8fr16q5r9vcyal40rn8kzjd" xml:space="preserve">(possible project)

Minix uses several ad-hoc mechanisms/protocols to handle exceptions (e.g. pagefaults) and other events (e.g. timer ticks). Typically, this is based on first sending notification to the userspace process that should handle the event (the handler), which consequently request information from the kernel. Except interrupts everything happens because of the currently running process. Therefore it is possible for the kernel to generate message on behalf of the process and use the IPC mechanism (which already exists in the kernel) to block the process and deliver the data to userspace.

The current model requires per-event queues of process that wait for the handler to request the data from the kernel. The queues inherently serialize the processes. Moreover, sometimes the queue is rather a stack. Typically this mechanisms also assumes that the handler have priority high enough to run immediately. Also this makes impossible to have - Show quoted text - multiple handlers for the same type of events. Last but not least it also requires complicated process data structures in the kernel (process table).

As the notification which is sent by the kernel to the handler of the event is a normal message we could already include the data required to handle the event in case the data fit in the message (mostly true). For instance to resolve a pagefault, we can immediately include the faulting address and whether a read or write is the cause of the exception rather than letting VM to use an ad-hoc mechanism to request this information from the kernel after it receives the notification.

Although a single notification is sent in case the handler is not receiving, the assumption that the handler is able to run immediately makes the accumulation of notifies not realistic, in fact each event is a single notify. In such a case delivering the required data takes 2 context switches instead of 1 and extra data copies.

The goal of this project is to unify all these mechanisms in such a way that a message is sent on behalf of the faulting processes to the handler a mechanism to possibily to register different handlers for each process and create/remove/change system calls so that the handler can resume/terminate/change the execution of the faulting process.

The benefit of the proposed changes is simpler and smaller kernel code, most likely faster execution and possibility to move handling signals from kernel to userspace. This mechanism may also help to implement virtual machine monitors in userspace (unlike in e.g. Linux), however, this requires more data to be exported. Reusing the IPC mechanism to deliver the messages to the handlers also preserves the priorities (unlike the queues) which is highly preferable for real-time systems.</text>
      <sha1>r5fqtirs8fr16q5r9vcyal40rn8kzjd</sha1>
    </revision>
  </page>
  <page>
    <title>Fast Sockets</title>
    <ns>0</ns>
    <id>198</id>
    <revision>
      <id>292</id>
      <timestamp>2021-09-11T11:15:10Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import fastsockets</comment>
      <origin>292</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1283" sha1="0xso26zh4cuyxm9hpquwuw7194rqad5" xml:space="preserve">== Fast sockets for a fast network stack ==

We have demonstrated that is is possible to exploit multicore architectures to implement a fast and reliable network stack ([https://www.few.vu.nl/~herbertb/papers/dsn2012.pdf paper]) To demonstrate its performance, we have implemented new sockets that allow applications to pass data quickly to the stack without kernel involvement (copying). However, this implementation is fairly primitive since the full posix-compliance require to tackle many challenges. On the other hand, our stack also provides slow sockets implemented the same way as in mainline Minix.

The goal of this project is to come up with a design that would marry the posix compliance and high performance. We need to redesign the slow posix sockets to use the mechanisms we evaluated for the fast sockets, for instance, using shared memory buffers to copy between userspace and the stack. In the ideal case, we would be able to receive and transmit directly to/from the userspace buffers.

Although we have ideas how to achieve this goal, the student's task is to explore what is possible and how far can we extend the model we use within the network stack. We admit that the final solution may be a mix of socket implementations that the application can choose from.</text>
      <sha1>0xso26zh4cuyxm9hpquwuw7194rqad5</sha1>
    </revision>
  </page>
  <page>
    <title>Shutdown Protocol</title>
    <ns>0</ns>
    <id>199</id>
    <revision>
      <id>293</id>
      <timestamp>2021-09-11T11:16:51Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import shutdownprotocol</comment>
      <origin>293</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="534" sha1="hi060iso2i8sx9op4rccbm3lxoefv59" xml:space="preserve">When Minix is shutting down PM broadcast a KILL signal to all processes. That is not the best way to do it as it is racy and requires many asynchronous messages between PM and VFS

The goal of this project is:

* separate killing POSIX processes from the rest of the system
* shut down system processes in the right order, e.g. filesystems before the disk drivers and not the otherway around
* remove the requirement of buffering of many asynchronous messages

This change should make the shutdown always consistent and deadlock free.</text>
      <sha1>hi060iso2i8sx9op4rccbm3lxoefv59</sha1>
    </revision>
  </page>
  <page>
    <title>Profiling Minix</title>
    <ns>0</ns>
    <id>200</id>
    <revision>
      <id>294</id>
      <timestamp>2021-09-11T11:18:22Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import profiling</comment>
      <origin>294</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="987" sha1="2t701jnihvq665eg4qtkc65c2hzxhg5" xml:space="preserve">To debug and optimize a system, it is necessary to know what is going on inside. Goal of this project is to design and implement a framework for profiling Minix and to export data collected in various parts of the system to the user. Currently, we can statistically profile Minix on a single CPU. It needs to be extended to SMP. However, this just a single data point. It is necessary to know what components are communicating, how often and to log selected communication. For low level optimizations, it is extremely important to know the precise CPU load and to retrieve information from the CPUs by the means of performance counters, for instance, about stall cycles, misses in various types of caches, TLB misses, etc. Due to the distributed nature of a multiserver system, this project presents many technical challenges. Retrieving the information is just the first step. Using the information to identify bottlenecks and to propose solutions to remove them is even more important.</text>
      <sha1>2t701jnihvq665eg4qtkc65c2hzxhg5</sha1>
    </revision>
  </page>
  <page>
    <title>Reducing Latency in Internet</title>
    <ns>0</ns>
    <id>201</id>
    <revision>
      <id>295</id>
      <timestamp>2021-09-11T11:21:46Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import netsrvqueueing</comment>
      <origin>295</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1465" sha1="3f6ivp05zeunet47gf7tqi8mk83rwwd" xml:space="preserve">== Reducing latency in Internet by improving buffering and feedback in the network stack ==

We have implemented a new network stack in Minix 3, which is split into multiple servers and runs on multiple cores to improve performance of the original INET server by several orders of magnitude and to improve dependability of the stack by being able to update and recover from crashes of individual components of the stack. On the other hand, the performance of such a stack is limited by the extra latency introduced by the extra message queues. This adds up to an existing serious problem of the Internet know as [https://www.bufferbloat.net/ bufferbloat]. This project would focus on :

* How to reduce buffering and queueing in the Minix stack
** what is the right size of the queues and buffers?
** when is time to drop and when to block?
** how can we prioritize?
* How to provide feedback through the stack from the devices to the applications
** how and when to tell TCP to slow down when other parts of the system get overloaded?
** how to tell applications about current conditions? For instance to lower video resolution, etc.
* how can we adapt the multiserver stack to provide different applications with the best possible QoS.
** the default stack is a compromise and unlikely the best option for all applications
** can we give some applications access to lower levels of the stack? Private TCP?
** what are the scalability and reliability implications?</text>
      <sha1>3f6ivp05zeunet47gf7tqi8mk83rwwd</sha1>
    </revision>
  </page>
  <page>
    <title>Fault Injection Framework</title>
    <ns>0</ns>
    <id>202</id>
    <revision>
      <id>296</id>
      <timestamp>2021-09-11T11:25:47Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import faultinjection (from site)</comment>
      <origin>296</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1441" sha1="3nbmydy0c1alnhlbvyvp42xsj94wbw6" xml:space="preserve">Minix is designed for fault tolerance, however, it is difficult to debug, test and evaluate. Previously, faults were injected only in drivers to demonstrate that Minix (unlike Linux, Windows, etc.) can survive crashing drivers. We are currently extending fault tolerance to other parts of the system. For instance, we are able to survive crashes in parts of networking stack. How transparent (to the user and applications) is recovery from a crash depends on which part crashes. Crash in a packet filter is almost unnoticeable, on the other hand, crash in TCP breaks all established connections. To evaluate the robustness of the system, we need to inject thousands to millions of faults which cannot be done manually. Also the fault injection process is getting more complex. The fault injection tools need to inspect running, binaries change them and report whether the faults were executed and lead to a crash. Since a fault may not only lead to a crash but to a hang in an infinite loop, we detect such behaviour by the means of periodic heart beats. The monitor cannot tell the difference between a component which is in such a loop from a component which is stopped for fault injection (which takes a while).

The goal of this project is to integrate the fault injection in the core system and evaluate it. Since Minix is a multiserver system with functionality distributed in various servers, there are many implementation challenges.</text>
      <sha1>3nbmydy0c1alnhlbvyvp42xsj94wbw6</sha1>
    </revision>
  </page>
  <page>
    <title>Efficient Memory Allocation and Protection in a Multicore Network Stack</title>
    <ns>0</ns>
    <id>203</id>
    <revision>
      <id>297</id>
      <timestamp>2021-09-11T11:28:03Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import netmemprot</comment>
      <origin>297</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1768" sha1="25t7bvmidfgdwomgb7f2zs9d1uoilzz" xml:space="preserve">We have implemented a new network stack in Minix 3, which is split into multiple servers and runs on multiple cores to improve performance of the original INET server by several orders of magnitude and to improve dependability of the stack by being able to update and recover from crashes of individual components of the stack. Crucial part of the design is passing data through the stack without copying. We have a basic implementation as a proof of concept, however, we believe that the implementation is sub-optimal. The goal of this project is to identify inefficiencies in the memory allocation and implement better infrastructure for better performance and reliability. For instance, our current implementation must allocate large memory pools which are contiguous in physical address space since the network devices use physical addresses and this makes mapping from virtual addresses to physical trivial. However, it is difficult/impossible to allocate such pools after the system runs for a while, for example after a process crashes, due to fragmentation of the physical memory. On the other hand, it is not possible to translate from virtual addresses to physical ones in the drivers since querying memory manager is too costly. Clearly, we must be able to allocated from fragmented memory and quickly translate the addresses. It is not clear how. In addition, network drivers (mostly due to bugs in hardware) put various constraints on alignment, sizes etc. Also our current stack has to trust drivers that the devices will not use DMA to access random memory. We envision to use IOMMU to tackle both problems at once. Essential part of the project is evaluation of the final implementation and discussion of trade-offs between performance and reliability.</text>
      <sha1>25t7bvmidfgdwomgb7f2zs9d1uoilzz</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Lionel Sambuc</title>
    <ns>3000</ns>
    <id>204</id>
    <revision>
      <id>299</id>
      <timestamp>2021-09-11T11:48:24Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:lionelsambuc</comment>
      <origin>299</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2871" sha1="20xmho0cthtqhlfkn9v6dh0bwdy4azt" xml:space="preserve">This page contains my wishlist / tasks I am working on as well as some random notes.

== Tasks ==

== Current status ==

Here is an overview of the current status of the task I am currently working on.

-----

=== IPC Messages ===
* Some cleanup in the struct messages we are using, especially the ones which are exchanged between userland and the servers. It is done with a few exception which are not userland facing, and the exception of USB-related services.

-----

== TODO List ==

The following is as much a todo list as random notes.

=== In Progress ===

* Wiki
*** Document
*** Cross-building &amp; Building
*** NetBooting
*** Using SharedLibs

=== Next up ===

* Kyua Import does not run on ARM yet. 

* PKGSRC
** Currently fails to build
*** icu on clang based builds
*** gdk-pixbuf2
*** gtk2
*** gmp on clang based builds, up to gcc45
*** p5-Module-Build

=== Maybe later? ===


* Toolchains
** Check LDFLAGS
** Check _PROGLDOPTS
** ARM
*** GOLD patch for ARM?

* LWIP
** dhcp
** bind
** Remove INET
** dhclient

* Build System Upgrade
** Check Targets  install, sourcesets
** Target syspkgs does not work
** Check Target  iso-image-source
** Check Targets release | iso-image | live-image (HD image) | install-image
** Create proper sets (base, etc, man, and so on) with packages
** Generate ISO from build System

* Dynamic base system?
* Soft RT?
* Kernel threads?
* Efficient SMP?

* Fix DT_TEXTREL warning

=== I am thinking about ===

* ARM
** Console over Framebuffer
** Hard FP support and ensure:
*** -march=armv7-a
*** -mfloat=hard
*** -mfpu=vfpv3-d16
** Domain IDs for main servers + Mappings in User processes
** ASID tagging (Beng's patch may be ok now?)

* INTEL/x86_32
** VGA/VESA Framebuffer (Higher text resolutions)
** Console over Framebuffer

== Towards an optional POSIX layer for MINIX? ==

In some embedded scenario, there is no need for all the POSIX APIs. I think that given MINIX structure, it should be possible to have a system without even filesystem support for example. In such systems all the functionnality required is simply implemented through a set of specific (and adhoc) services.

Because of interdependencies in our current services (VM, VFS, PM, RS) it is not possible at the moment to reduced the system to a bare minimum of just the microkernel, a few drivers, VM, and RS.

&lt;pre&gt;
# Server re-organisation, if we aim one day to have a smaller subset without 
# posix support.
# Not possible without right now, the servers have some inter-dependencies.
.
├── devman	# Not sure where to place this, posix or system?
├── input	# ditto
├── posix
│   ├── init
│   ├── ipc
│   ├── pm
│   ├── sched
│   └── vfs
└── system
    ├── ds
    ├── is
    ├── rs
    └── vm
&lt;/pre&gt;
----

Email: lionel AT SPAM FOR FREE minix3 TEST DOT org</text>
      <sha1>20xmho0cthtqhlfkn9v6dh0bwdy4azt</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Ben Gras</title>
    <ns>3000</ns>
    <id>205</id>
    <revision>
      <id>300</id>
      <timestamp>2021-09-11T11:52:28Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:bengras</comment>
      <origin>300</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="194" sha1="hcq3bacqcm2spopo9mgs0xbe21fase5" xml:space="preserve">== Ben's Page ==

Hello everyone, this is my personal wiki page. There's not much here at the moment.

[https://www.shrike-systems.com Ben's personal blog]

Email: ben AT SPAMFREE minix3 DOT org</text>
      <sha1>hcq3bacqcm2spopo9mgs0xbe21fase5</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Thomas Cort</title>
    <ns>3000</ns>
    <id>206</id>
    <revision>
      <id>412</id>
      <parentid>301</parentid>
      <timestamp>2022-02-08T17:13:24Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Fix links</comment>
      <origin>412</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1308" sha1="63qqu3wxfw4w4lfny1bbbol4828rmpe" xml:space="preserve">== Thomas Cort ==

Email: tcort AT SPAMFREE minix3 DOT org

=== About Me ===

Hi! I'm Thomas from Canada. I work on Minix for fun. I've done 3 Minix-related Google Summer of Code projects and a number of other changes. These days I mainly work on pkgsrc on Minix and importing code from NetBSD.

=== Past Projects ===

* Google Summer of Code 2013 -- [https://minix-i2c.blogspot.ca/ Minix I2C Drivers for the BeagleBone Black]
* Timekeeping Improvements (2013): Implemented [https://git.minix3.org/?p=minix.git;a=commit;h=e67fc5771d85064474a414da3724d1c274dee292 clock_getres()], [https://git.minix3.org/?p=minix.git;a=commit;h=e67fc5771d85064474a414da3724d1c274dee292 clock_gettime()], [https://git.minix3.org/?p=minix.git;a=commit;h=516fec97d9ae7fad5a095a927cb2187e15b2daf3 clock_settime()], [https://git.minix3.org/?p=minix.git;a=commit;h=15b3d7726845fb24a1f67fc4b6de5e03bf3b9d3f adjtime()] -- Imported [https://git.minix3.org/?p=minix.git;a=commit;h=8357e3a442072484075cb29b36b5c73715e7ee73 usr.bin/rdate] -- Ported [https://git.minix3.org/?p=pkgsrc.git;a=commit;h=6bf40a0368c90b2514faf9f9a881ca0e8bfb84d6 openntpd]
* Google Summer of Code 2011 -- [[Pkgsrc Upstreaming (GSOC Project)|pkgsrc upstreaming and application porting]]
* Google Summer of Code 2010 -- [[Unix Domain Sockets|Unix Domain Sockets]]</text>
      <sha1>63qqu3wxfw4w4lfny1bbbol4828rmpe</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Rob</title>
    <ns>3000</ns>
    <id>207</id>
    <revision>
      <id>302</id>
      <timestamp>2021-09-11T11:57:52Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:rob</comment>
      <origin>302</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="437" sha1="ba8g9w6hw6dd8p6nfwzo72y2em56de7" xml:space="preserve">Email: No thanks, I get plenty :O

* I have owned a Computer (NOT the same one!) for over a 1/4 Century.
* I work with the following Teams, some for several years:
** GCC https://gcc.gnu.org
** OpenSolaris https://www.opensolaris.org/
** OpenIndiana https://www.illumos.org/
** Nexenta https://nexenta.org/
** Firefox https://developer.mozilla.org/
** Others too numerous to mention
* Drink Coffee, not booze.

I may add more later.

...</text>
      <sha1>ba8g9w6hw6dd8p6nfwzo72y2em56de7</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Sky Liu</title>
    <ns>3000</ns>
    <id>208</id>
    <revision>
      <id>303</id>
      <timestamp>2021-09-11T12:03:25Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:skyliu</comment>
      <origin>303</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="145" sha1="elxexcvyz9i66idxgggavnz3z8cf0ct" xml:space="preserve">== A brief introduction ==
I'm a student of Minix3 and just want to learn about and contribute to it. 
== I will think up more things later... ==</text>
      <sha1>elxexcvyz9i66idxgggavnz3z8cf0ct</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Raja Appuswamy</title>
    <ns>3000</ns>
    <id>209</id>
    <revision>
      <id>304</id>
      <timestamp>2021-09-11T12:04:06Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:rajaappuswamy</comment>
      <origin>304</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="36" sha1="q6kxtpdnqjed8didh53d1o25cjo1ops" xml:space="preserve">Email: raja AT cs DOT vu DOT nl

...</text>
      <sha1>q6kxtpdnqjed8didh53d1o25cjo1ops</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:AlexandreBeletti</title>
    <ns>3000</ns>
    <id>210</id>
    <revision>
      <id>305</id>
      <timestamp>2021-09-11T12:11:30Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:alexandreBeletti</comment>
      <origin>305</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="194" sha1="srhz1nzaprepdc7d913v4mlb8q1qbil" xml:space="preserve">Email: rhiguita AT SPAMFREE gmail DOT com

I use Minix to teach OS classes in Brazil at IFSP-SP and FATEC-RL.

Where you can find me: https://groups.google.com/group/minix3 or #minix (Freenode).</text>
      <sha1>srhz1nzaprepdc7d913v4mlb8q1qbil</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Alex Ray</title>
    <ns>3000</ns>
    <id>211</id>
    <revision>
      <id>340</id>
      <parentid>306</parentid>
      <timestamp>2021-09-13T09:42:24Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>fix link</comment>
      <origin>340</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="690" sha1="a0fii5f4uctenxrlge6woidykdhjml3" xml:space="preserve">Email: ajray AT ARROBASE ncsu DOT ODT edu

I'm Alex Ray and I'm a Google Summer of Code student for 2009.  I'll be implementing [[Performance Measuring using Hardware Performance Monitoring Counters|performance monitoring tools]].

I enjoy LaTeX, Verilog, Python, C and asm.  I'm a Computer Engineering/Textile Engineering double major at NC State university in the US.

I have a blog: https://ajray.wordpress.com/ I'll be documenting my progress there.

You can usually catch me on the IRC channel #minix (ajray on irc.freenode.net), and I'll try to be on the mailing list a lot too.

I try to be very personable and approachable, so feel free to ping me if you have questions or comments!</text>
      <sha1>a0fii5f4uctenxrlge6woidykdhjml3</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:AntoineLeca</title>
    <ns>3000</ns>
    <id>212</id>
    <revision>
      <id>307</id>
      <timestamp>2021-09-11T12:13:55Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:antoineleca</comment>
      <origin>307</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="180" sha1="80jzoec4r82ud3os00f4sntxu12rccs" xml:space="preserve">=== Contact ===

Look for me on the Google Group or just post a message: https://groups.google.com/group/minix3

I'm also sometimes on MINIX's Freenode IRC channel (#minix).

. . .</text>
      <sha1>80jzoec4r82ud3os00f4sntxu12rccs</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Arthur Tumanyan</title>
    <ns>3000</ns>
    <id>213</id>
    <revision>
      <id>308</id>
      <timestamp>2021-09-11T12:15:01Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:arthurtumanyan</comment>
      <origin>308</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="52" sha1="hi52o2wsxvdzmaucht3cug7tp1kkyo0" xml:space="preserve">Email: arthurtumanyan AT SPAMFREE yahoo DOT com

...</text>
      <sha1>hi52o2wsxvdzmaucht3cug7tp1kkyo0</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Colby Russell</title>
    <ns>3000</ns>
    <id>214</id>
    <revision>
      <id>321</id>
      <parentid>309</parentid>
      <timestamp>2021-09-12T10:52:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Peter moved page [[Contrubutiors:Colby Russell]] to [[Contributors:Colby Russell]] without leaving a redirect: Fix typo</comment>
      <origin>309</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8550" sha1="7w01nvunk4a3prkm10vi45slnwemg4m" xml:space="preserve">This is a dump of a the minix.txt file I created, containing my notes/TODOs about MINIX.  As you can see from the dates mentioned, I put all this down some time ago.  That also helps explain why all this is in the form of a dump and not... something else.  MINIX-the-project's structure and processes are just really lacking; there's not exactly a good home for any of these things that I can see.

(Originally formatted as a text file, so the wiki will render some things improperly.  I haven't converted it to wikitext, because the doku syntax, like most wikitext dialects, is atrocious and totally unsuitable for reading as plain text.)

----

The MINIX MOTD says "We'd like your feedback".  I hope that offer is still
good.

Bugzilla, or...?

Source tree is confusing.

Need some sort of comment-embedded meta language a la javadoc for a
machine-readable way to verify the kinds of claims that you can already find
in the comments.  E.g., in kernel/main.c, |shutdown| is really minix_shutdown,
and in kernel/proc.c, |sys_call| doesn't even exist anymore...

commands/svrctl/svrctl.c says "PM handles calls for itself and the kernel"
('M', and 'S') and "VFS handles calls for itself and inet" ('F', and 'I').
However, minix/servers/pm/misc.c returns EINVAL if not 'M'.  Why are these
servers handling these other areas, anyway?

Images to play with.  I should be able to write a simple "Let's implement
malloc" tutorial and the reader can experience near-immediate setup.

What license is the wiki content under?

In the build video linked from the minixonarm page, he says it should take
about 10 minutes.  Enviable.

TODO:
- Enable virtio in netconf.  Kernel panic.  Pop the disk an eSATA enclosure
  and run qemu so that hda is pointing to the associated block device on the
  host OS, using hostfwd as appropriate to make networking available.  Run
  netconf and select the suggested device.  Forget to disable it before
  poweroff in the emulator.  Pop the disk out of the enclosure and into
  machine so it can run on bare metal.  Boot it.  Kernel panic.  Pop the disk
  back into the enclosure so you can rerun netconf in the emulator to disable
  the selected device.
- Document how to deploy a newly built Minix 3 with your changes.
- There's a hello world driver (or server?).  Document what's going on there,
  by which I mean to say, do a better job than just saying "here's the
  source".  Explain the "framework" that's in use there.
- Need an outline of what's involved with the Minix live CD: what's on it, how
  it differs from a disk install, and what installation does.
- In depth description of booting.  Give MBR and partition table examples.
  Reader should be able to follow along and verify.  This means giving exact
  descriptions of commands.  Include exercises.  E.g., "Suppose the disk were
  instead X-size instead of the Y-size disk from the previous example.  If the
  difference in space were allocated entirely to the /usr/ partition, how
  would the partition table differ from the one in the example?"
- Originally tried installing over a FAT32 filesystem that had contained Live
  at the Beacon before deleting it.  A functional MBR wasn't created.  Try to
  get STR and file a bug.
- Virtual console scrollback: there isn't any.
- Virtual console alternate screen: there isn't any?
- To a bare metal install with no networking, and try to use pkgin.
- Why am I having to reboot in order to enable networking?

SYSTEMATIC

Docs

https://wiki.minix3.org/doku.php?id=developersguide:rebuildingsystem

  $ su
  # cd /usr/src/
  # make build

- /usr/src doesn't exist by default
- building as root?

https://wiki.minix3.org/doku.php?id=developersguide:trackingcurrent#recompiling_the_system

  # cd /usr/src
  # make build

- Why is this repeated here on this page?  It should link to another page.
- building as root?

Bare Metal Install

Installation process

    I boot from CD with menu item 1.
    I use login "root" and run "setup".

1   I press enter at the colon.
2   I choose keyboard layout "dvorak".
3   I press enter for automatic mode.
3.1 I press enter to choose disk [0].
3.2 I type "delete" to delete the existing Minix install.
    I type "0" to delete region 0.
    I type "yes"
    I press enter to select the free space on disk [0].
3.3 I type "yes"
4   (Automatically skipped.)*
5   I type 50000 to make a 50GB /home partition.
    I hit enter to confirm 50000 GB.
6   I hit enter for 4 KiB blocks.*
7?  I wait for files to be copied to disk.*
8   I press enter to go with no networking.
9   I press enter to go with DHCP*
    
    I type "poweroff" now that setup has finished.  (I went through setup once
    and did this, and the screen blanked, but the computer never shut down.  I
    had to hold down the power button.  I decided to redo install to see if I
    could reproduce it.  I recorded the exact steps of that attempt, which are
    above; that's actually my second run this morning.  NB: It's 2014 December
    23, and I've already been through the install process approaching around a
    dozen times now both on bare metal and in emulators over the last month or
    so.  I hope this is an indicator of my commitment.  See my comments about
    "On Volunteerism" below.)

"First" boot

I press down arrow and the countdown stops.  The boot options are a little
confusing.  They are:

1. Start MINIX 3
2. Start latest MINIX 3
3. Start latest MINIX 3 in single user mode
4. Edit menu option
5. Drop to boot prompt
6. Start MINIX 3 (3.3.0)

I can appreciate the differences between option 1 and 3, and even 1 and 2,
although that one is a bit superfluous on a bare install.  I am left
wondering, though, what's with option 6.  How does it differ from option 1 or
option 2?

It seems there should only be four options at this point: 1, 3, 4, and 5.

If I choose option 4 try to compare 1 and 6, the way to exit from edit mode
for one boot menu item in order to go back and view the boot parameter for the
other choice seems to be to delete the entire line and hit enter.  (It would
be nice if hitting escape worked).  Hitting enter otherwise will boot with
be those parameters.  It's not even clear that's what's going to happen.  This
is edit mode.  One might think that pressing enter here would accept the
current value and put you back at the menu so that you could select the item
you may have just changed, or choose something else.  (NB: I'm not saying
that's what should happen or that the current behavior is not okay.  I'm only
saying it should be clear what's going to happen, even if that's only in the
form of documentation and not necessarily on-screen text.  PS: If this seems
like a stupid bikeshed quibble, realize that I don't really give much of a
shit about this.  This is basically stream-of-consciousness here, and I
understand that of all the things that could be worked on, this is way down on
the list.  The inexplicable difference between the six different boot options
is a real problem, though.)

A Word on Volunteerism
- As I said above, I hope this is an indicator of my commitment.
- AST mentions "the thing about volunteers is..."

ON BUILDING

It's the least interesting part and yet the biggest barrier.

BUG: When curl isn't installed fetch.sh ftp can drop to the interactive ftp
prompt on some systems where ftp doesn't support HTTP.  (E.g., netkit-ftp on
Ubuntu.)

BUG: Building on arch fails with texinfo.

BUG: Cross compile by building targets "tools", then "distribution".
releasetools/x86_hdimage.sh complains that minix isn't built.  It's because
the wiki suggests using ../build, but the script expects ../obj.i386

BUG: releasetools/x86_hdimage.sh mentions "/root" partition.  It should say "/
(root)".

BUG: Building on Minix fails.

I clone the repo into /usr/src.

I run "make build &amp;&amp; date"

I go out while the build runs, and when I come back the build has errored out.
Since the console has no scrollback, all I can see now is "make[3]: stopped in
/usr/src/gnu".  (I've run whoami, followed by pwd, followed by ls by the time
I'm writing this comment, so even more has scrolled off the screen than was
there when I first came back.  I think it was two lines in make[4] and
make[5], both in /usr/src/gnu/dist.)  I google to see if the NetBSD build
system produces a log file, but it doesn't look like it.

This is probably due to fetch.sh as above, BUT THIS ISN'T MENTIONED ANYWHERE.

ACCOUNTS

I shouldn't have to compile as root.  To install a newly built image?  Sure.
But not to compile.

MINIX AS A DRIVER DEVELOPMENT PLATFORM</text>
      <sha1>7w01nvunk4a3prkm10vi45slnwemg4m</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Garry Ricketson</title>
    <ns>3000</ns>
    <id>215</id>
    <revision>
      <id>310</id>
      <timestamp>2021-09-11T12:20:44Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:elchanate</comment>
      <origin>310</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="80" sha1="5t390twuvbfyvk3k4n1kgy09ylguncl" xml:space="preserve">My Name is Garry

I just now started this page, and will add more details later.</text>
      <sha1>5t390twuvbfyvk3k4n1kgy09ylguncl</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Ikutoki</title>
    <ns>3000</ns>
    <id>216</id>
    <revision>
      <id>311</id>
      <timestamp>2021-09-11T12:22:15Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:ikutoki</comment>
      <origin>311</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="47" sha1="pbbimgi44nmikzj8q7yviuk5xmb03cd" xml:space="preserve">== @IKUTOKI@ ==

Email: ikutoki0@gmail.com

...</text>
      <sha1>pbbimgi44nmikzj8q7yviuk5xmb03cd</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Jacob Adams</title>
    <ns>3000</ns>
    <id>217</id>
    <revision>
      <id>313</id>
      <parentid>312</parentid>
      <timestamp>2021-09-11T12:25:27Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Add missing line</comment>
      <origin>313</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="736" sha1="drt520lpd7n4cjivmwxwxbxtg4kpv59" xml:space="preserve">==== Who am I? ====
I am Tookmund on [https://github.com/Tookmund Github] and Freenode

==== Goals in MINIX ====

These are things I would like to see happen, not necessarily things I myself can do.

* Run MINIX on as many ARM chips as possible
** Create a simple way to port MiNIX
* Simpler network setup
** Create loopback device
** Add wifi support
* Better X.Org support
** add /dev/agpgart and other video interfaces
** Port more window managers
*** IceWM
*** XFCE4
*** GNOME
*** KDE
*** etc.
* More user-friendly configuration
** autonetconf
** alternate install disk that launches X11 on startup
* Develop MINIX on MINIX
** Port newer version of GIT
** Port Firefox, Midori, or other modern browser that can use Github and Gerrit</text>
      <sha1>drt520lpd7n4cjivmwxwxbxtg4kpv59</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Ivan Gualandri</title>
    <ns>3000</ns>
    <id>218</id>
    <revision>
      <id>314</id>
      <timestamp>2021-09-11T12:26:24Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:ivangualandri</comment>
      <origin>314</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="220" sha1="7ep8qg99b10f9qdd4wpuraurhu7a320" xml:space="preserve">Email: inuyasha AT SPAMFREE dreamos DOT org

I'm working on: 
* Fluxbox Porting (Done and merged)
* XV Porting (Done fore 3.1.9 - need to be checked and then merged)

I'm involved in the pkgsrc volunteer repository!!! :)</text>
      <sha1>7ep8qg99b10f9qdd4wpuraurhu7a320</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Jean-Baptiste Boric</title>
    <ns>3000</ns>
    <id>219</id>
    <revision>
      <id>316</id>
      <timestamp>2021-09-12T10:46:25Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:jeanbaptisteboric</comment>
      <origin>316</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="392" sha1="ske8ew9sxljiw03jniy40z8sgebgq6t" xml:space="preserve">''Insert punchline about tracking progress.''

== WIP ==

* Improve documentation state
* PXE booting (#94)

== Done ==

* &lt;del&gt;Rewrite isofs with Rock Ridge support&lt;/del&gt;
* &lt;del&gt;Rework installation CD (#63)&lt;/del&gt;
** &lt;del&gt;Import NetBSD's makefs&lt;/del&gt;
** &lt;del&gt;Modify isofs to make it suitable as a root filesystem&lt;/del&gt;
** &lt;del&gt;Use NetBSD's sets mechanism&lt;/del&gt;

== TODO ==

* Rewrite setup.sh</text>
      <sha1>ske8ew9sxljiw03jniy40z8sgebgq6t</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Metasansana</title>
    <ns>3000</ns>
    <id>220</id>
    <revision>
      <id>317</id>
      <timestamp>2021-09-12T10:47:48Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:metasansana</comment>
      <origin>317</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="132" sha1="gacamupl0fysev81fqjkjqkknuj0se9" xml:space="preserve">== About Me ==
I enjoy productive computing. Minix provides an oppurntunity to observe and learn about Operating System Development.</text>
      <sha1>gacamupl0fysev81fqjkjqkknuj0se9</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Pandez Gilbert</title>
    <ns>3000</ns>
    <id>221</id>
    <revision>
      <id>318</id>
      <timestamp>2021-09-12T10:49:03Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:pandezgilbert</comment>
      <origin>318</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="29" sha1="7i7y7nbdue50bfynf76fa4rpmfqjgkw" xml:space="preserve">Email: gpandez@yahoo.com

...</text>
      <sha1>7i7y7nbdue50bfynf76fa4rpmfqjgkw</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Mike Malakhov</title>
    <ns>3000</ns>
    <id>222</id>
    <revision>
      <id>319</id>
      <timestamp>2021-09-12T10:50:19Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:mikemalakhov</comment>
      <origin>319</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="216" sha1="gbpm75ktviax8ast6vk3565g4saf2kw" xml:space="preserve">== About Me ==

My name is Mike, and I'm a Minix 3 user. I am also a student, geek, programmer, and amateur photographer. I enjoy exploring new things in my spare time.
Email: developermisha AT SPAMFREE gmail DOT com</text>
      <sha1>gbpm75ktviax8ast6vk3565g4saf2kw</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Mike O'Sullivan</title>
    <ns>3000</ns>
    <id>223</id>
    <revision>
      <id>320</id>
      <timestamp>2021-09-12T10:51:27Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:mike-osullivan</comment>
      <origin>320</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="392" sha1="o6jrcvalxia6tedbrl3tb1d24dxuvqh" xml:space="preserve">Hi. I'm Mike!

I'm Small(ish), Agile, Intelligent, Friendly: but i don't eat bugs-yet! 

I think the MINIX racoon mascot should be named "Samm" - Samm-coon! Samm's A Minix Mascot! Also, Samm is a girl or a boy, and Samm is a: Small Agile Minix Mascot, you have to use minix to find out how Intelligent and Friendly it is, and it eats bugs! :)



Email: mikeaosu AT SPAMFREE gmail DOT com

...</text>
      <sha1>o6jrcvalxia6tedbrl3tb1d24dxuvqh</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Sernin van de Krol</title>
    <ns>3000</ns>
    <id>224</id>
    <revision>
      <id>322</id>
      <timestamp>2021-09-12T10:59:00Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:serninvandekrol</comment>
      <origin>322</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="624" sha1="tsw0wxtnv70qp86s1f2zi3o7qdwb2r8" xml:space="preserve">Email: serninpc AT SPAMFREE paneidos DOT net

My name is Sernin van de Krol, currently on my way to become Bachelor of Computer Science.
I study at the VU, Amsterdam, Netherlands.

== Minix Ports ==

You might have seen my GNU pth port at [https://www.few.vu.nl/~skl240/minix/].
I haven't tested it on the latest trunk, but will do so soon.

== Current Minix activities ==

* Trying to help out fix all those packages.
* Upgrading Minix PC to latest trunk.
* Test my GNU pth port on latest trunk.

== Long-term Minix projects ==

=== Port NSPR ===
Status: Compiles, but unit tests fail.

=== Port NSS ===
Status: Needs NSPR.</text>
      <sha1>tsw0wxtnv70qp86s1f2zi3o7qdwb2r8</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Salil Kapur</title>
    <ns>3000</ns>
    <id>225</id>
    <revision>
      <id>323</id>
      <timestamp>2021-09-12T11:00:39Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:salil-kapur</comment>
      <origin>323</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="290" sha1="r3772yim34eynyeyajovmnb8xjry5qn" xml:space="preserve">Email: salilkapur93 AT gmail DOT com

I am a Computer Science Undergraduate from BITS-Pilani, Goa Campus.

I am actively involved in the open source community with projects like [https://github.com/BinPy/BinPy BinPy], SimpleCV, Krita. Here is my [https://github.com/salil93 github] account.</text>
      <sha1>r3772yim34eynyeyajovmnb8xjry5qn</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Renê de Souza Pinto</title>
    <ns>3000</ns>
    <id>226</id>
    <revision>
      <id>324</id>
      <timestamp>2021-09-12T11:03:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:renepinto</comment>
      <origin>324</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="422" sha1="0g2n8uiwq2vid2owx6fvnnh4qwg19kb" xml:space="preserve">== Renê's info ==
Name: Renê de Souza Pinto

Email: rene AT renesp DOT com DOT br

== How I am? ==
I'm an brazilian computer engineer graduated at [https://www.usp.br University of São Paulo (USP)] and currently getting masters degree there.

You can see some of my pictures and other stuff (articles, presentations and my personal projects) in my  [https://renesp.com.br website], it is written in portuguese, sorry :(</text>
      <sha1>0g2n8uiwq2vid2owx6fvnnh4qwg19kb</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Rahmat M. Samik-Ibrahim</title>
    <ns>3000</ns>
    <id>227</id>
    <revision>
      <id>325</id>
      <timestamp>2021-09-12T11:10:35Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:rahmatmsamik-ibrahim</comment>
      <origin>325</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="388" sha1="al9jfyg1taduarwvhh8hnz4rqjn7a4y" xml:space="preserve">{| class="wikitable"
|  &lt;!-- * Email: Rahmat M. Samik-Ibrahim  AT  vLSM -dot- org --&gt;
|-
|  I am a real nowhere man, sitting in my nowhere land, making all my nowhere plans for nobody. I have no idea what to do here... Therefore, I give up. Long Live and Prosper. 
|-
|}

== Links ==

* [https://groups.google.com/group/minix3/browse_thread/thread/236cebb81f67ad30 SVN checkout] -- 100416</text>
      <sha1>al9jfyg1taduarwvhh8hnz4rqjn7a4y</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Patrick Przystolik</title>
    <ns>3000</ns>
    <id>228</id>
    <revision>
      <id>326</id>
      <timestamp>2021-09-12T11:16:13Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import user:patrickprzystolik</comment>
      <origin>326</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="186" sha1="ar4ev18ny94oj7xtxl70xa5pca0w4rk" xml:space="preserve">Email: derpat AT SPAMFREE gmail DOT com

Patrick Przystolik

27y old

from Bielefeld, Germany

004915771868843

jabber: beef@jabber.ccc.de

sometimes im in #minix-dev, freenode, as paprz</text>
      <sha1>ar4ev18ny94oj7xtxl70xa5pca0w4rk</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Wlf</title>
    <ns>3000</ns>
    <id>229</id>
    <revision>
      <id>327</id>
      <timestamp>2021-09-12T11:20:21Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:wlf</comment>
      <origin>327</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="571" sha1="0zryl1797mqkrkippflxqdvsms17ypj" xml:space="preserve">== wlf ==

Bio:

I am professionally a Banker, qualified in Computer Science (specializing in systems software).


Interests:

1. Compiler Design&lt;br/&gt;
2. Distributed Operating Systems&lt;br/&gt;
3. Virtual Machines


Current projects:

1. Development of a 'brainfuck' compiler for Minix 3.&lt;br/&gt;
2. Porting DOSBox 0.74 to Minix 3.


Current Literature:

1. Richard Blum - "Professional Assembly Language"&lt;br/&gt;
2. Erik van der Kouwe - "Virtual Machines: The State of the Art"


Contact:

1. Email: &lt;&lt;fabian.alwis@gmail.com&gt;&gt;&lt;br/&gt;
2. [https:www.facebook.com:fabian.alwis Facebook]</text>
      <sha1>0zryl1797mqkrkippflxqdvsms17ypj</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Vivek Prakash</title>
    <ns>3000</ns>
    <id>230</id>
    <revision>
      <id>328</id>
      <timestamp>2021-09-12T11:21:33Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:vivek-prakash</comment>
      <origin>328</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="543" sha1="kf54gi4j6n9aok3cwq9rd5bmo3ajkts" xml:space="preserve">== Vivek Prakash ==

Email: vivek.cs.iitr AT gmail DOT com

I am an undergraduate student at Indian Institute of Technology Roorkee, India majoring in Computer Science.

I love C and system programming, and i am familiar with UNIX environment.
Minix has greatly influenced me since I came to know about it :) 

I learnt a lot by just browsing the minix mailing list and idling at #minix. Planning to contribute largely to Minix in the future. :)


Current Involvement: Porting NetBSD userland to Minix(It's getting more &amp; more exciting !)

...</text>
      <sha1>kf54gi4j6n9aok3cwq9rd5bmo3ajkts</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Veith Risak</title>
    <ns>3000</ns>
    <id>231</id>
    <revision>
      <id>329</id>
      <timestamp>2021-09-12T11:22:52Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:veithrisak</comment>
      <origin>329</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="978" sha1="bfvjtr74oibyzjefb88mz44ojffe09m" xml:space="preserve">Meine aktuelle Home-page an der Universität Salzburg ist:

www.cosy.sbg.ac.at/~risak

(Der Text dieser Seite ist, wie auch die Texte auf meiner Salzburger Site, deutsch. Bei Bedarf kann ich von dieser Seite auch eine englische Version angeben.)

== Hauptinteressen ==
Ich interessiere mich für neue und alte Betriebssysteme, wie:

* PBS (Mainframe Siemens 4004
* DOS
* OS/2
* Oberon
* Windows ab Version 1 (2 Disketten!) ... WIN 7
* UNIX
* Linux
* Minix
* ...

Ich begann (1962) meine IT-Tätigkeit mit folgenden, tw. im Museum stehenden, Rechnern:

* IBM 650
* Siemens 2002, 3003, 4004, ...
* Siemens Prozessrechner Serie 303, 305, ...
* PC ab Intel 8086, ...
* Spezialrechner für CT

Mir geht es dabei eher um die Übersicht als um technische Details, sowie um die Entwicklung der Systeme auseinander (Stammbaum der Rechner und Betriebssysteme).

Derzeit nutze ich:

* Linux (SuSE und Ubuntu)
* Windows (XP, Vista und WIN 7, nur wenn nötig)



Email: v.risak AT aon DOT at</text>
      <sha1>bfvjtr74oibyzjefb88mz44ojffe09m</sha1>
    </revision>
  </page>
  <page>
    <title>Contributors:Sudhir Kumar Giri</title>
    <ns>3000</ns>
    <id>232</id>
    <revision>
      <id>330</id>
      <timestamp>2021-09-12T11:26:22Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import users:sudhir-kumar-giri</comment>
      <origin>330</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="57" sha1="40ml7hrk04mckn5kaf8yvr4edjq0cyu" xml:space="preserve">Email: sgsudhir@hotmail.com

C-Projects, Embedded Systems</text>
      <sha1>40ml7hrk04mckn5kaf8yvr4edjq0cyu</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC Project Ideas</title>
    <ns>0</ns>
    <id>233</id>
    <redirect title="GSOC 2018" />
    <revision>
      <id>331</id>
      <timestamp>2021-09-12T13:49:54Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Actually gsoc project ideas page is redirected to gsoc 2018</comment>
      <origin>331</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23" sha1="rgp00ll5bew8btsblukfgjaaj4xswug" xml:space="preserve">#REDIRECT [[GSOC 2018]]</text>
      <sha1>rgp00ll5bew8btsblukfgjaaj4xswug</sha1>
    </revision>
  </page>
  <page>
    <title>Memory Grants (GSoC project)</title>
    <ns>0</ns>
    <id>234</id>
    <revision>
      <id>334</id>
      <timestamp>2021-09-12T14:19:22Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2009:memorygrants (from site)</comment>
      <origin>334</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10823" sha1="6vnxaiy7rq0wswrafn54jbghe5wyzly" xml:space="preserve">== Title ==

Student: Bingzheng Wu

Mentor: Jorrit N. Herder

SVN branch name: [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=%2Fbranches%2Fsrc.20090525.r4372.wu%2F src.20090525.r4372.wu]

== Abstract ==

Extend MINIX 3's memory grant model in order to benefit from paging.

== Design ==

At this point, we have two subprojects in mind that we want to
complete by the mid-term evaluation. 

* First, you should complete the homework assignment, that is, continue implementing the copy-on-write page-mapping optimization for safe copies. 
* Second, we would like to use memory grants to set up a memory mapping based on shared pages. This should be very easy once you have completed the first part and know how to set up memory mappings. 

== Test Plan and Evaluation ==

Once the above infrastructure is in place, you should test it by using the memory mappings in the INET
server--ethernet driver and/or FS server--sata driver protocol, rather
than using safe copies all the time. Hopefully, you'll be able to find
performance (higher throughput or, more likely, better CPU
utilization) improvements.

== Schedule and Deliverables ==

We want to complete all this, including code cleanup and testing, etc.
by the mid-term evaluation point. I have some ideas for the second
half of GSOC (also dealing with VM extensions for MINIX), but I think
it's good to focus on this part of the work first.

== Weekly Status ==

=== Week 1 ===

''5.22 - 5.29''

Receive a homework during the application phase. It's to implement 
copy-on-write page-mapping optimization for safe copies, using VM. 
I only implemented part of that homework because I encountered a problem:

For the mapping, I want to make 2 phys_regions in source
and destiny process point to the same phys_block, to share it. 
However, the field which means the phys_block's offset
to the @vaddr in vir_region is in phys_block, as @offset, but not 
in phys_region. As a result, if 2 phys_regions point to the same
phys_block, the phys_block should has the same offset to the @vaddr.
It's almost impossible in this task!

I think it's better to move the @refcount from phys_block to phys_region.
But this is a huge change, which will cause changing much existing code.
So I have to wait Ben to make the decision to go on.

I only read code about VM this week to get more familiar with it.

=== Week 2 ===

''5.30 - 6.7''

Merge Ben's modification on the problem I mentioned in the report last week.

Adjust the code in homework phase, but have not finished.

=== Week 3 ===

''6.8 - 6.14''

Port the code in homework. But it still need debug.

I wrote the test program to test the safecopy.

=== Week 4 ===

''6.15 - 6.21''

The safe-copy works! This is the first task before mid-term evaluation.

# There was only 1 type of VM request, which is CHECK if the memory range has been mapped by physical memory. So first I added another type, MAP. [kernel/proc.h, lib/syslib/sys_vmctl.c:sys_vmctl_get_memreq()]
# In safecopy(), if the map conditions are all satisfied, call the MAP VM request. [kernel/system/do_safecopy.c]
# In page fault handler, check if the request is MAP: [servers/vm/map_mem.c]
#* Check whether the memory range in source process has been mapped by physical memory. This is the same demand with the CHECK VM request, so here we call its handler directly, map_handle_memory().
#* Do some prepare work for mapping. First, if there is a physical region which crosses the begin or end point in the request range, in source process, split it into 2 physical regions, by the begin or end point. For the destiny process, do the same thing. But what's more, since we will map the physical blocks, which belongs to source process, on to the destiny process later, so we need to delete the physical blocks in the demand range.
#* Now do the mapping. Map the physical blocks, which belongs to source process, on to the destiny process. Then update the page tables, both are READ-ONLY, for copy-on-write.

==== Week 5 ====

''6.22 - 6.28''

Refine the test program, and do a simple test on QEMU. The result maybe not precise, but it shows something.

The result is so bad, that using MAP to copy is more that 10 times than regular data copy.

* size: in byte, hex
* time: get by read_tsc, decimal
* The items marked by * uses mapping. Others uses regular data copy.

{| class="wikitable"
| size || 8      || 10     || 20     || 40     || 80     || 100    || 200    || 400    || 800    || 1000*   || 2000*   || 4000*
|-
| time || 104496 || 103272 || 103280 || 105432 || 104144 || 103992 || 106040 || 126296 || 112936 || 1887376 || 1394456 || 1376136
|}

According to the result, we can see that the key reason is not data
size. The time changes little from size 8 to size 800.

I think the reason is that, in most situations, the virtual range,
which will be copied data to, in source process, has been mapped by
physical memory. So the regular copy just data copy.
But if using mapping, it has to communicate with VM, which is a big overhead.

Another problem is that, if the virtual range in source process has
been mapped by physical memory (as mentioned before), using mapping
will first unmap these physical memory, and then map the destiny
process's memory.
But if later, one of the 2 processes(src or dest) writes the memory,
it will have to map memory again and copy the data (copy on write).
I think this will happen in all probability. At least more possible
than fork(), which is always followed by exec().
So, finally, we do the data copy. What's more, we did some needless
map and unmap.


So, my idea is that, using map to do the data copy is not good,
especially in Minix, in which the VM is an independent server, and
kernel has to communicate with it by messages.

But the shared memory using map based on grant table maybe a good idea.

=== Week 6 ===

''6.29 - 7.5''

Implemente the SAFEMAP.

It's very similar with using map to do datacopy. The only difference is that:

* MAP for datacopy, VM updates the PTEs in page tables of both source and destiny processes read-only(RO), for copy-on-write(COW).
* SAFEMAP, VM updates the PTEs by MAP flag, which maybe either read-write(RW) or RO. For the RO map, when a page fault(#PF) caused by writing a RO page, the #PF handler has to check whether is COW or RO MAP.

I am going to implement the revoke-map and un-map in the next week.


=== Week 7 ===

''7.6 - 7.10''

Implemented SAFEREVMAP and SAFEUNMAP.

==== 7.1 libsys ====

Wrap sys_safemap, sys_saferevmap and sys_safeunmap in library calls.

==== 7.2 kernel ====

'''SAFEMAP''', accepts arguments: grantor endpoint, grant_id and offset in grant table, requester's virtual address(segment+offset), and map type(RO or RW). After checking the permit and validity, send request to VM. The request is very same with the one used in copy-on-write(COW) mapping, a few weeks ago.  Besides, for supporting the revocation, keep the mapping information in a global table.

'''SAFEREVMAP''' and '''SAFEUNMAP''', both un-map the mapped memory. The difference is that, the former is invoked by grantor, by grant-id; while the later is invoked by requestor, by virtual address. When receiving these request, kernel searchs in mapping-information table, and sends un-map request to VM, if any.

==== 7.3 VM ====

'''MAP''', VM handles it almost the same with the COW mapping before.

'''UNMAP''', VM explicitly copies the shared memory, such that the both the grantor and requester have a private, non-shared copy of the physical pages. There's another way: setting the shared pages as COW-shared, so the explicit copy will be done when the pages are written. But this is ineffective for some reasons.

==== 7.4 #PF ====

By now, VM assumes that all pages in user space are writable. So if
there's a page read-only, it must be COW.

But now, the situation changes. Because the program may call safemap()
readonly, so there will be some pages readonly, but not for COW. So if
a #PF caused by a program writing a read-only page, VM has to check
whether it's COW or read-only MAP, before handle the page fault.

Unfortunately, since the mapping information(that global table, mentioned above) is saved in kernel (because it has
to contain the 'grant_id'), so we can't use this table to distinguish
the COW or read-only MAP.
A better way is that, add a member 'share_flag' in struct phys_block,
which show whether this phys_block is shared as COW or read-only MAP.

==== 7.5 MAP + COW ====

However, if we add 'share_flag', what should we do, if a page(or
phys_block) is shared by 2 processes as MAP, and also shared by other
2 processes as COW?
In fact, even if we don't add 'share_flag', we still have to face this problem.

Let PA, PB and PC denote for 3 processes.
The problem is that: if first, PA and PB share a page as MAP,
read-write; and then PB forks PC, so PC and PB share the same page as
COW. The page in PB's page table is read-only, for COW. But in PA's page
table, it's still read-write. So the PA can write this page, while PC
doesn't expect that and can't detect it.

There is also problem that if MAP a page which has been shared as COW already.

My solution is: avoid this case.

* If MAP a page which has been shared as COW already (detected by share_flag, mentioned above), first copy this page, and then do the MAP.
* When copy a process [servers/vm/regions.c : map_proc_copy()], which will cause COW-share, if a page has been shared as MAP already (by share_flag), then we do real copy, but not COW-share. Besides, when call map_writept() to update page table, if a phys_block is shared as SMAP, don't update it's PTEs in page table.


==== 7.6 Test ====

I tested all cases:

* SAFEMAP
* SAFEREVMAP
* SAFEUNMAP
* SAFEMAP a page which has been shared as COW
* COW a page which has been shared as SAFEMAP.


=== Week 8 ===

''7.13 - 7.19''

Did nothing.

=== Week 9 ===

''7.20 - 7.26''

From this week, I begin to the part III of GSoC, to extend data store(DS) server.

DS just store some memory range. What I am going to add is that, store some memory
range by mapping. As a result,
* we can get a real-time view of the change of memory;
* we can make snapshot anytime.

I re-wrote DS mostly, added some new APIs for mapping-store, and changed some old ones.
Fortunately, the old APIs that I changed was not used now in Minix3, so it doesn't
need to change other code.

I have not tested all of the new DS, which is the task in next week.

=== Week 10 ===

''7.27 - 7.31''

DS now supports 5 types: U32(unsigned int), STRING
(string that shorter that 16-chars), MEM(memory range), MAP(mapped
memory range), and LABEL(as name server).

Add new APIs for these 5 types.

TODO: test!


=== Week 11-12 ===

''8.3 - 8.16''

Holiday :)

=== Week 13 ===

''8.17 - 8.18''

Test the [[DataStore]] Server.

Document the GSoC.</text>
      <sha1>6vnxaiy7rq0wswrafn54jbghe5wyzly</sha1>
    </revision>
  </page>
  <page>
    <title>Shared Memory</title>
    <ns>0</ns>
    <id>235</id>
    <revision>
      <id>335</id>
      <timestamp>2021-09-13T07:50:55Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2009:sharedmemory</comment>
      <origin>335</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="10370" sha1="stsgd57bsyihv8s0a7445gs0shszc8j" xml:space="preserve">== Shared Memory Support in Minix ==
Student: Guanqun Lu

Mentor: BenGras

SVN branch name: [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=/branches/src.20090422.r4228.guanqun/ src.20090422.r4228.guanqun (Original)] and [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=%2Fbranches%2Fipc.rebase.beng/ ipc.rebase.beng (Newer: Rebase to Ben's branch)]

== Abstract ==
Minix 3 is on its way to be a fully POSIX-compliant system. The lack of the features of IPC hinders developers from porting useful programs which take advantage of IPC from other platforms.

Shared memory is a method of inter-process communication, it is a way of exchanging data with different processes. Unlike the widely message passing in Minix3, each process is able to access the block of shared memory simultaneously. The obvious advantage is that it is fast without sacrificing any inter-process overhead.  Posix shared memory is defined through a series of interface APIs, such as shm_open, shmget etc, although the internal implementation varies on different operating system.

== Design ==
''Note that the design is subject to change.''

Shared memory support is only a small part of POSIX inter-process
communication methods.  This design aims at not only the shared
memory support, but also trying to provide a generic IPC framework.
A new server will be introduced to accomplish this goal.  Based on
this framework, other IPC mechanisms are created, such as shared
memory, semaphore and message queues.  The figure below depicts such
relation.
&lt;pre&gt;
 +---+ +---+ +---+
 |SHM| |SEM| |MSG| ...
 +---+ +---+ +---+
  ^     ^     ^
  |     |     |
+----------------------+
|      IPC Server      |
+----------------------+
&lt;/pre&gt;
As a server, it is useless if it can not communicate with others.
And to work properly, IPC server has to send and receive messages
to different other servers or managers.  The below picture shows
that it interacts with
* virtual memory server
*: especially useful for the shared memory support.
* system library
*: be able to communicate directly with libraries.
* process manager
*: notify IPC about the fork()/exit() events, so that IPC server can handle it accordingly.
&lt;pre&gt;
+---+             +--+
|IPC| &lt;---------&gt; |VM|
+---+      ^      +--+
           |
           +----&gt; +---+
           |      |SYS|
           |      +---+
           |
           +----&gt; +--+
                  |PM|
                  +--+
&lt;/pre&gt;

== Test Plan and Evaluation ==
In order to make sure that the code functions well and it is POSIX-compliant,
Linux Test Project will be partially ported (only the shared memory portion),
through which I can test easily and find the potential regression at some bug-fixing patches.  Linux test project is more like a platform. When it has been successfully
ported, I myself will have to write more test cases to verify my own code.

Besides that, the code will be published and announced on mailinglist at some
specific milestone. Therefore the code is exposed under more testers, the chances of
living bugs is minor.

Last but not least, my code has to be reviewed by my mentor.

== Schedule and Deliverables ==
Deliverables before the mid term will be: shmat() and shmdt() functions well.
Deliverables before the final will be: make it function well and get merged into trunk.

== Weekly Status ==
I'm recording the whole precious experience involved in this GSoC event.
=== 03.23 - 03.30 ===
That's when the whole story begain...

I learn from BBS in my school that this years' Google Summer of Code is open.
(Technically speaking I heard of GSoC last year, unfortunately I missed it.)
I can't wait to search the potential project which suits my ability and interests,
soon after, Minix catches my eye. It's a micro-kernel system which I learnt on my first
operating system course. I joined the mailing list without hesitation and found that the shared memory support is a good idea to explore and it is also in my interests.

=== 03.31 - 04.06 ===
I spend some time on writing the proposal, trying to be nice and well written.
This project is the only one I'm applying for. :-)
In order to make my application convincing, I also made out a simple prototype
on how to communicate between different processes easily. As the code now upgrades
to 3.1.4, the basic virtual memory support is there. Such a prototype is simple with
the help of ''map_region'' function.

=== 04.07 - 04.13 ===
Wait anxiously for the result and any upcoming events.
Well, there is one piece of homework left for me,
which is about implementating a semaphore server.
The idea is simple, when DOWN operation is carried out, the counter is
decremented and if it's negative, put the calling process into an queue;
When UP operation is seen, the counter is incremented and wake up one process in case.
It's interesting to write the stuff in Minix,
because there's no big mass of code. Every part is a stand-alone server,
which is simple and elegant and of course easy to understand.
With the help of Ben, I worked out the prototype really quickly, in less than about three days.

=== 04.14 - 04.20 ===
Wait anxiously and start reading the code of VM server.

=== 04.21 - 04.27 ===
The final result is released and
I'm so happy that I'm becoming one member of this year's
Google Summer of Code, involving in Minix project.

=== 04.28 - 05.04 ===
The real work doesn't begin until 1st May. Before that, I'm busy with
the work at school, and I only have some leisure time to scan through the code
I'll be involved with.

The work in this week also includes the environment setup.
At first, I'm going to use my own repository so that the access will be trivial.
But Ben reminds me that the repository is better to be hosted at Vrije University.
And I spend some time setting all this up. The network is not so good at my school...

=== 05.05 - 05.11 ===
Settle down the detailed design issues, as you can see from the above,
the outline is listed. According to Ben's reply, there are lots of things
that need to sort out. For example:
* how to handle the fork()/exit() situation.
* what will happen when the IPC server crashes.
* ...

Anyway, the header files are ported so that Minix now can recognize these macroes.

=== 05.12 - 05.18 ===
Busy with reading the code and writing the code...
Work done is:
* shmat() works fine.
* shmdt() and shmctl() partially done.
* several bug fixes.

=== 05.19 - 05.25 ===
This is the week of the honor!
I'm working like an engine full of fresh gas(poor metaphor...),
checking in at most about 30 commits one day. Wow!
The frame work of ipc server is now finalized.
There is one thing that needs mentioning, the big change in the week
is to remove all the stuff in IPC server trying to catch every processes'
status, for example, whether it's alive or dead, and how many segments they have etc.
As the code goes on, it's found that such a design is not so good.
Since the idea of trying to store per-process information in IPC server is
and duplicate effort, as the VM server already handles the job well.
According to the KISS principle, let the IPC server be a consumer of the information
stored in VM server, that's why we come up with the lots of ''helper'' functions in
VM server.

Work done in this week:
* Linux test project partially ported.
* Framework of IPC server is done.
* It can pass all the test cases in Linux test project now.
* Some bug fixes and enhancement.
* Find out something needs porting or implementing (unmap, lrand48...)
* And more to find in the code :-) ...

=== 05.26 - 06.01 ===
I discussed with Ben that we should restrict the operation exposed
by VM server to those who really need and who explicitly specify
in the drivers.conf file.

Why would we do such a change? Because
currently, some additional VM operations such as ''getphys'', ''getrefcount'',
are exposed by c library interface, which means that any legal user applications
can invoke such operation, which implies a potential security leak.

To accomodate this problem, we decide to incorporate another token named ''VM''
in drivers.conf file.

During the process of implementation, several problems occurs:
* add new fields in the middle of a structure crashes the system on boot, the workaround is to add the new fields to the end of the structure. It at first haunted me for a while, later Ben reminds me that it may be caused by the stale compilation, //make clean// should work.
* printf() in service program fails. It's kind of black magic, you know what, the stdout is used by the later file system. Hence you have to use stderr to see what you're interested in.
* a weird initialization problem... still struggling to find the bug...

=== 06.02 - 07.13 ===
(This project is still going on. I just forgot to update this wiki in this period.)
During this period, a new token named ''VM'' in drivers.conf is implemented. And more parts of linux test project is ported to Minix to help my debugging.
Through this debugging, some of bugs relates to that I'm not coding per POSIX standard. After consulting the POSIX manual, such bugs are fixed.

=== 07.14 - 07.29 ===
As Ben and I think that SYSV semapohre operations are important and helpful for Minix platform, I start to take a look at the semaphore server and after sometime the basic functionality is OK. A simple program that implements dining philosophy is done.

=== 07.30 - 08.10 ===
* Out for a week for vocation.
* rebase my current branch on top of Ben's working tree.
* fix a bug of passing different sizes to pt_writemap() function. It will result in a serious shmdt() failure.
* discussed with Ben how to implement a mechanism to inform IPC server of the exits of processes. The way is to inform VM of the signals by PM, and then VM passes these signal information to IPC server. There's a subtle problem that the direction of passing message is not right. However, that's only easy and possible way to accomplish this goal.

=== 08.11 - 08.24 ===
This summer of code project is reaching an end, and happily to say that I've finished what I have promised. Postgresql is ported to Minix and it can be used basically, as the shared library isn't supported in Minix yet. Some functionalities are missing due to this problem. And Ben and I are rebasing the code to his latest branch. We hope that my code will be in trunk tree soon.</text>
      <sha1>stsgd57bsyihv8s0a7445gs0shszc8j</sha1>
    </revision>
  </page>
  <page>
    <title>Proc and Dev File Systems</title>
    <ns>0</ns>
    <id>236</id>
    <revision>
      <id>336</id>
      <timestamp>2021-09-13T08:01:55Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2009:procanddevfs</comment>
      <origin>336</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="8954" sha1="9bnl39vez201kjvixi51n4s6u88pxrl" xml:space="preserve">== Proc/Dev File Systems ==

Student: Alen Stojanov

Mentor: David van Moolenbroek

SVN branch name: [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=%2Fbranches%2Fsrc.20090525.r4372.astojanov%2F src.20090525.r4372.astojanov]

== Abstract ==

The goal of this project is to add /dev and /proc file systems to Minix3
* The purpose of the /dev file system is to provide a dynamically populated /dev directory. The high-level goal of this part of the project is to let device drivers dynamically register device nodes based on the hardware available in the system.
* The purpose of the /proc file system is to provide a /proc directory that offers information about the system and processes running on it. The high-level goal of this part of the project is to provide an interface cleaner than ''getsysinfo(2)'' for retrieval of system information by userland utilities like ''ps(1)'' and ''top(1)'', and to provide a more consistent and extensible way of exposing system information in general.

== Design ==

[[Proc and Dev File Systems (Design Document)|Design document (under construction)]]

== Test Plan and Evaluation ==

''TBD''

== Schedule and Deliverables ==

''TBD''

== Weekly Status ==

=== Week #1 [23.05.2009 - 29.05.2009] Getting Started ===

Familiarizing with the anticipated project work. Analysis and discussion with the mentor on the project design. Setting up the programming environment and the MINIX3 virtual box. Used programming enivronment – Eclipse with [https://tmober.blogspot.com/2006/11/remote-system-explorer-10-is-released.html Remote System Explorer] plug-in. The plug-in provides remote access to the MINIX3 file system, as well as remote compiling.

=== Week #2 [30.05.2009 - 06.06.2009] ===

Graduation 2009 at Jacobs University. No implementation provided, The time spent during this week will be compensated with work during the weekends.

==== VTreeFS ====

==== Accomplished ====

* Implemented the initial skeleton of software design.
* Full implementation of the VTreeFS tree structure (as specified in the design document). The implemented functions include (without specifying the function arguments):
** add_inode ()
** delete_inode ()
** get_inode_by_name ()
** get_inode_by_index ()
** get_inode_name ()
** get_inode_index ()
** get_inode_cbdata ();
** get_root_inode ()
** get_parent_inode ()
** get_first_inode ()
** get_next_inode ()
** get_inode_stat ()
** set_inode_stat ()
** start_vtreefs ()
* Provided tests files for the initial tree structure.

==== Highlights ====
 
Use of the [https://cpansearch.perl.org/src/NWCLARK/perl-5.8.9/ext/SDBM_File/sdbm/README SMDB algorithm] for creating the hash tables for (parent,name)-&gt;inode lookup. The method provides excellent distribution of the inodes in the hash-table.

ToDo

* Full implementation of the VTreeFS file server handling all the necessary requests.

==== VTreeFS ====

==== Accomplished ====

* Full implementation of the function handlers for all the necessary file system requests. Most of the code was written from scratch and some parts are implemented with revision of the current code of the MFS. The implemented requests include:
* REQ_PUTNODE
* REQ_STAT 
* REQ_FSTATFS 
* REQ_UNMOUNT 
* REQ_SYNC 
* REQ_NEW_DRIVER 
* REQ_READ_S 
* REQ_READSUPER_S 
* REQ_RDLINK_S 

==== VTreeFS ====

==== Accomplished ====

* Revised and improved the code of the following requests:
** REQ_GETDENTS
** REQ_LOOKUP_S
* Complete and detailed testing of the requests.

=== Week #6 [29.06.2009 - 05.07.2009] Initial /proc file system ===

==== Accomplished ====

* Design of the procfs server. Implementation of the hooks defined in the VTreeFS library:
** read_hook
** lookup_hook
** getdents_hook
** rdlink_hook
* Added init_hook in the VTreeFS library used for initalization of the Virtual Tree server, right after REQ_READSUPER_S request has been issued
* Implementation of the system calls getuname(), getloadavg(), getuptime() and sys_hz(). The following files are provided in the procfs:
** /proc/hz
** /proc/version
** /proc/uptime
** /proc/loadavg
* Design of an optimal structure able to represent all the available pids (still in the initial version): /proc/[pid#]/

=== Week #7 [06.07.2009 - 12.07.2009] Complete /proc/[pid] structure ===

==== Accomplished ====

* Complete implementation of an optimal structure to represent all the available processes.
* Small changes to the delete_inode and put_inode functions in the VTreeFS library. The delete_inode function uses INODE_DELETED flag to delete an inode which is being used by the VTreeFS server at the same moment. put_inode deletes the inode, after fs_putnode is being executed.
* Design of the /proc/[pid]/status and /proc/[pid]/psinfo.
* Full analysis of top.c and ps.c commands and implemented the necessary informations in /proc/[pid]/psinfo

=== Week #8 [13.07.2009 - 19.07.2009] Partial top and ps implementation ===

The most important part of the procfs is the /proc/[pid]/psinfo entry. All the informations concerning one process are presented in this file, and the data is very easy to be parsed. The current format of the psinfo has the following form (C programming language):

If the process is a kernel task:
&lt;pre&gt;
"%d %d %d %s %d %c %d %ld %ld %d %ld %ld %ld %ld %ld %ld %ld %ld %ld" 
&lt;/pre&gt;

Otherwise (a normal process):
&lt;pre&gt;
"%d %d %d %s %d %c %d %ld %ld %d %ld %ld %ld %ld %ld %ld %ld %ld %ld %d %d %d %d %d %d %d %d" 
&lt;/pre&gt;.

There is no difference between the two entries, except that a normal process has an extra data of 8 entries. The data represented by those entries is the following (given by the same order as in the control string):

&lt;pre&gt;
  %d 	(p_pid) 	- pid number
  %d 	(p_nr) 		- kernel slot number
  %d 	(p_endpoint)	- kernel endpoint number
  %s 	(p_name) 	- process name
  %d 	(p_rts_flags)	- process flags set by kernel
  %c 	(state)		- state of the process
  %d 	(p_priority)	- process priority
  %ld 	(p_user_time)	- process user time
  %ld 	(p_sys_time)	- process system time
  %d 	(p_getfrom_e)	- the endpoint of the p_getfrom_e - "recv" field
  %ld 	(t_mem_len)	- length of T process segment
  %ld 	(d_mem_len)	- length of D process segment
  %ld 	(s_mem_len)	- length of S process segment
  %ld 	(t_mem_vir)	- virtual address of segment T
  %ld 	(d_mem_vir)	- virtual address of segment D
  %ld 	(s_mem_vir)	- virtual address of segment S
  %ld 	(t_mem_phys)	- physical address of segment T
  %ld 	(d_mem_phys)	- physical address of segment D
  %ld 	(s_mem_phys)	- physical address of segment S
  %d 	(mp_nice)	- the process nice value
  %d 	(mp_flags)	- process PM flags
  %d 	(mp_ppid)	- PPID (parent PID)
  %d 	(mp_procgrp)	- PID of the process group
  %d 	(mp_realuid)	- REALUID
  %d 	(mp_effuid)	- EFFUID
  %d 	(fp_tty)	- the process tty
  %d 	(fp_task)	- print which task is proc suspended on
&lt;/pre&gt;

Having the entries above, partial implementation of top and ps is provided. Missing implementation of the methods to show the process arguments.

=== Week #9 [20.07.2009 - 26.07.2009] Complete ps and top implementation ===

I had some difficulties understanding the process frame of the individual processes. After couple of days of code analysis, I manged to get back on track.

==== Accomplished ====

* Full implementation of ps and top
* Implementation of other entries in the /proc/[pid]/:
** /proc/[pid]/environ
** /proc/[pid]/exe
** /proc/[pid]/cmdline
** /proc/[pid]/cwd

=== Week #10 [27.07.2009 - 02.08.2009] Testing /proc, top and ps ===

==== Accomplished ====

* Completed the full structure of the /proc file system
* Performed tests of the whole /proc tree, as well as top and ps and corrected some minor errors
* Starting with the implementation of the DevFS

=== Week #11 [03.08.2009 - 09.08.2009] Reading week ===

Reading week. The design document of David C. van Moolenbroek required knowledge of the other OS modules, including the RS and DS. No implementation provided this week.

=== Week #12 [10.08.2009 - 16.08.2009] Complete /proc/[pid] structure ===

==== Accomplished ====

* Added RS_REG_NODE to &lt;minix/com.h&gt; to support node registration in the RS
* Implemented rs_register_node in lib/syslib/rs.c
* Implemented the RS_REG_NODE request in the RS - do_register_node
* service.c was modfied such that the drivers are started with extra parameters: -devtype and -devnr. The parameter -dev was exclded.
* /etc/rc and /etc/usr/rc are changed to comply with the new "service" implementation
* Inital implementation of the DevFS.

===== DevFS =====

I lost couple of days of coding, since I was moving to Swtizerland.

==== Accomplished ====

* vtreefs.h was changed such that an extra hook was added - vfs_req_hook. This hook was necessary for mknod implementation of the DevFS. If the hook is defined as NULL, it won't be used by the VTreeFS.
* DevFS was completed
* Changing drivers. So far the following drivers are changed:
** floppy
** printer
** random
* Final evaluation submitted</text>
      <sha1>9bnl39vez201kjvixi51n4s6u88pxrl</sha1>
    </revision>
  </page>
  <page>
    <title>Proc and Dev File Systems (Design Document)</title>
    <ns>0</ns>
    <id>237</id>
    <revision>
      <id>337</id>
      <timestamp>2021-09-13T08:31:09Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2009:procanddevfs:designdocument</comment>
      <origin>337</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="33115" sha1="m6znhlad1d4emdzzv03qqrqhl4rbuge" xml:space="preserve">David C. van Moolenbroek

Dept. Computer Science, Vrije Universiteit Amsterdam, The Netherlands

dcvmoole AT cs DOT vu DOT nl

&lt;div round info&gt;
'''Warning'''

This document has gone stale. There is up-to-date [[VTreeFS|documentation of VTreeFS]].
&lt;/div&gt;

== Abstract ==

The Minix3 multiserver operating system is evolving rapidly.
Much effort is being put into expanding the operating system's dependable, secure and
flexible architecture to provide a modern UNIX-like operating environment on top.
As part of that effort, this project aims to introduce functionality that is common to other operating systems:
virtual /dev and /proc file systems.
* The goal of the virtual /dev file system is to provide a pool of device nodes that is populated dynamically by device drivers, rather than statically in advance. This allows drivers to add device nodes based on hardware available in the system.
* The goal of the virtual /proc file system is to provide a standard interface for providing information about the system. This obviates the need for utilities like &lt;code&gt;ps(1)&lt;/code&gt; and &lt;code&gt;top(1)&lt;/code&gt; to access internal system data structures directly.

== Overview ==

The current project plan is to cover the following points, preferably in the given order:

* A shared proc/dev file system library, managing virtual inodes and handling most of the VFS calls.
* A /dev file system, based on the file system library.
* Device node registration by existing device drivers.
* A /proc file system, based on the file system library.
* Modification of ''ps(1)'', ''top(1)'' and various other small utilities and library routines to make use of /proc.
* Support for mounting file systems using a "none" device, i.e. no particular block device.
* Changes to the Minix3 boot process to mount /dev and /proc upon boot.
* As much additional system information in /proc (from VM, Inet, RS etcetera) as time permits.

After each point there will be a (possibly short) testing phase to verify that the results are as required.

== VTreeFS ==

Both devfs and procfs will present a set of virtual files. From the user's point of view, both are read-only. As a result, both file systems will handle most requests from VFS in the exact same way. It therefore makes sense to put the common functionality into a library. This library should provide the functionality needed to create a virtual tree based read-only file system with ease. Specifically, the library is to provide the following:
# the main loop of the server;
# handlers for the requests from VFS;
# an interface to manipulate the virtual file system tree;
# callback hooks for refreshing of directories, and reading from regular files and symlinks.
While written to cover the demands of devfs/procfs, the library will be generic enough that new file systems that operate along the same lines can use it as well.

=== The concept ===

An application that uses the library, can add and remove directories and other files. All files (including directories) are represented using the primary object of the library: the **inode**. The library will essentially manage a fully connected tree of inodes.

The library hard links are not supported, so every inode except the root inode is also an entry into its parent directory. The entry is identified in that directory by name. To satisfy the requirements of ProcFS, an inode may also have an index associated with the entry into the directory. This optional index determines the inode's position when getting returned by a getdents() call.

''Incomplete''

=== VFS request handling ===

The library will provide a meaningful implementation for at least the following VFS requests:
* &lt;code&gt;REQ_PUTNODE&lt;/code&gt;
* &lt;code&gt;REQ_STAT&lt;/code&gt;
* &lt;code&gt;REQ_FSTATFS&lt;/code&gt;
* &lt;code&gt;REQ_UNMOUNT&lt;/code&gt;
* &lt;code&gt;REQ_SYNC&lt;/code&gt;
* &lt;code&gt;REQ_NEW_DRIVER&lt;/code&gt;
* &lt;code&gt;REQ_READ_S&lt;/code&gt;
* &lt;code&gt;REQ_LOOKUP_S&lt;/code&gt;
* &lt;code&gt;REQ_READSUPER_S&lt;/code&gt;
* &lt;code&gt;REQ_RDLINK_S&lt;/code&gt;
* &lt;code&gt;REQ_GETDENTS&lt;/code&gt;
The remaining calls may be implemented by returning &lt;code&gt;ENOSYS&lt;/code&gt;.

''Incomplete''

=== The API ===

Even though the library has to be written in C, its interface is close to object oriented: the inode is an opaque structure. The library's public header file should expose a "struct inode" declaration (so that the server using the library can make pointers) but ''not'' expose its internal fields. Creation, deletion, querying and manipulation of inodes and their properties takes place entirely through API calls. 

&lt;syntaxHighlight lang="c"&gt;
struct inode;
typedef int index_t;
typedef void *cbdata_t;

#define NIL_INODE ((struct inode *)0)
#define NO_INDEX (-1)

struct inode_stat {
  mode_t mode;
  uid_t uid;
  gid_t gid;
  size_t size;
  dev_t dev;
};

struct fs_hooks {
  int (*lookup_hook)(struct inode *inode, char *name, cbdata_t cbdata);
  int (*getdents_hook)(struct inode *inode, cbdata_t cbdata);
  int (*read_hook)(struct inode *inode, off_t offset, char **ptr, size_t *len, cbdata_t cbdata);
  int (*rdlink_hook)(struct inode *inode, char *ptr, size_t *len, cbdata_t cbdata);
  int (*message_hook)(message *m);
};

struct inode *add_inode(struct inode *parent, char *name, index_t index, struct inode_stat *stat,
                        index_t nr_indexed_entries, cbdata_t cbdata);
void delete_inode(struct inode *inode);

struct inode *get_inode_by_name(struct inode *parent, char *name);
struct inode *get_inode_by_index(struct inode *parent, index_t index);

char const *get_inode_name(struct inode *inode);
index_t get_inode_index(struct inode *inode);
cbdata_t get_inode_cbdata(struct inode *inode);

struct inode *get_root_inode(void);
struct inode *get_parent_inode(struct inode *inode);
struct inode *get_first_inode(struct inode *parent);
struct inode *get_next_inode(struct inode *previous);

void get_inode_stat(struct inode *inode, struct inode_stat *stat);
void set_inode_stat(struct inode *inode, struct inode_stat *stat);

void start_vtreefs(struct fs_hooks *hooks, struct inode_stat *stat, index_t nr_indexed_entries);
&lt;/syntaxHighlight&gt;

The suggested specification of the API is as follows:

'''add_inode''' adds an inode into a ''parent'' inode (which must be a directory), with the given ''name''. The ''index'' parameter indicates the index position for the inode in the parent directory, unless it's equal to &lt;code&gt;NO_INDEX&lt;/code&gt; (or negative in general). The ''stat'' parameter points to a filled structure of inode metadata. This structure's ''mode'' field determines the file type and the access permissions (see ''/usr/include/sys/stat.h''); at least directories (&lt;code&gt;S_IFDIR&lt;/code&gt;), regular files (&lt;code&gt;S_IFREG&lt;/code&gt;), character-special files (&lt;code&gt;S_IFCHR&lt;/code&gt;), block-special files  (&lt;code&gt;S_IFBLK&lt;/code&gt;), and symbolic links (&lt;code&gt;S_IFLNK&lt;/code&gt;) have to be supported. The ''uid'', ''gid'', ''size'' and ''dev'' fields specify the owning user and group ID, the size of the inode, and the device number (for block/char special files), respectively. The ''nr_indexed_entries'' parameter is only used for new directories (&lt;code&gt;S_IFDIR&lt;/code&gt;), and indicates the range (0 to nr_indexed_entries-1) reserved for inodes with index numbers; this value may be 0 (and/or negative?) for directories that do not care about index numbers. The ''cbdata'' parameter specifies a caller-defined value passed to hook calls affecting this inode.

'''delete_inode''' removes the given ''inode''. If the inode is a directory, all of its children will be removed recursively as well.

'''get_inode_by_name''' and '''get_inode_by_index''' return an inode given a directory and either a name or an index number. They may fail, and in that case return &lt;code&gt;NIL_INODE&lt;/code&gt; and &lt;code&gt;NO_INDEX&lt;/code&gt;, respectively.

'''get_inode_name''' and '''get_inode_index''' return the name and index (or &lt;code&gt;NO_INDEX&lt;/code&gt;) of a given inode, as assigned with the add_inode() call. The name pointer may simply point into the inode. '''get_inode_cbdata''' returns the cbdata value for an inode.

'''get_root_inode''', '''get_parent_inode''', '''get_first_inode''' and '''get_next_inode''' allow walking through the virtual tree of inodes, respectively retrieving the virtual tree's root inode, the parent inode of a given inode, the first child inode of a given parent, and the next inode in a series of children (given the previous result of get_first_inode() or get_next_inode()). The last three may return &lt;code&gt;NIL_INODE&lt;/code&gt; if the directory does not have a parent (only in the case of the root directory), has no children, or has no more children, respectively.

'''get_inode_stat''' and '''set_inode_stat''' retrieve and manipulate inode metadata.

'''start_vtreefs''' starts the main loop of the vtree file system library, accepting requests from VFS and possibly other sources (passing those on to the application), and making the appropriate callbacks to the application based on the hooks given by the application. This API call will return when the file server is instructed to shut down by VFS and/or PM. The ''hooks'' parameter specifies a structure of function pointers 
just like Minix3's libdriver does. Upon being started, the vtreefs library has to create a root inode; the ''stat'' and ''nr_indexed_entries'' parameters of start_vtreefs() determine the initial parameters of this root inode.

=== Callback hooks ===

'''lookup_hook''' is called every time a lookup for an entry other than "." and ".." is made on an inode that is a directory and is search-accessible by the caller of the &lt;code&gt;REQ_LOOKUP&lt;/code&gt; call. The hook call is made right before the library does the actual name lookup. The provided ''inode'' is the directory inode, and ''cbdata'' is the callback data of that inode. ''name'' is the path component being looked up. This hook should allow the application to do at least the following things safely:
* populate the given directory inode with inodes, leaving the precise lookup of the given ''name'' to the library;
* delete the directory inode.
In the latter case, the hook implementation should return an error (typically &lt;code&gt;ENOENT&lt;/code&gt;) to indicate that the lookup function should not continue. If &lt;code&gt;OK&lt;/code&gt; is returned from the lookup function, the library should continue the lookup.

'''getdents_hook''' is called everytime a &lt;code&gt;REQ_GETDENTS&lt;/code&gt; call is made on a directory inode. The hook call is made right before the library does the actual directory entry enumeration. The ''inode'' parameter is the inode of this directory, and ''cbdata'' is the callback data of this inode. The same semantics apply as for ''lookup_hook'' above.

'''read_hook''' is called when a user process reads from a regular (&lt;code&gt;S_IFREG&lt;/code&gt;) file inode. ''inode'' and ''cbdata'' are the inode and callback data of this regular file, respectively. ''offset'' is the zero-based offset into the file from which reading should start, and ''len'' points to the requested read length. The hook implementation may return an error indicating why the file cannot be read. If the hook returns &lt;code&gt;OK&lt;/code&gt;, then the library assumes that:
* ''ptr'' is filled with a ''char *'' pointer to a static array containing the data to return, and,
* ''len'' is filled with the length of the data (which may be less, but not more, than the original value of ''len'').
However, if EOF is reached for the file, then the hook must return &lt;code&gt;OK&lt;/code&gt;, and a length of 0 in ''len''. The ''ptr'' value is then unused.

''The return-pointer-to-array construction is there to avoid the overhead of memory copying the data from the application to the library on every read.''

'''rdlink_hook''' is called when a user process reads from a symbolic link (&lt;code&gt;S_IFLNK&lt;/code&gt;) inode. ''inode'' and ''cbdata'' are the inode and callback data of this symlink. ''ptr'' is a pointer to a memory area within the library, of a size pointed to by ''len''. The hook implementation can write up to ''len'' bytes of data into ''ptr'', and is expected to fill ''len'' with the number of bytes written (which may be less, but no more, than the original value of ''len''). The data written must not contain any '\0' bytes. Library implementation suggestion: the memory area should be at least &lt;code&gt;PATH_MAX&lt;/code&gt; bytes, but the given value of ''len'' may be less if the &lt;code&gt;REQ_RDLINK&lt;/code&gt; provided a smaller length.

'''message_hook''' is called whenever the library's main loop receives a message that is not a request from VFS and not a SIGTERM signal notification from PM. The ''message'' parameter points to the message received. It is up to the hook implementer what to do with the message; the library will not send a reply by itself.

All hook pointers given in the fs_hooks structure may be &lt;code&gt;NULL&lt;/code&gt;. If a hook pointer is &lt;code&gt;NULL&lt;/code&gt;, the library must not call it, and instead use sensible defaults: for the lookup and getdents hooks, simply nothing changes in the request handling; for the read hook, EOF may be returned to &lt;code&gt;REQ_READ&lt;/code&gt; calls; for the rdlink hook, the library may return an empty result; for the message hook, the message should simply be ignored.

=== Implementation requirements and hints ===

In random order.

* The naming used in the specification is just suggested. In fact, the entire specification is just based on likeliness to be suitable for the rest of the whole project, and may be changed later if we discover that a different API provides a more convenient model for devfs/procfs.
* The library '''must not''' perform any dynamic memory allocation. The inodes may just be stored in a statically sized array. This means that the number of inodes is a compile-time configuration option.
* The inode number of an inode (used in the VFS-FS protocol) may be a combination of its index into that array, and a per-inode generation number that gets increased every time an inode is reused for different purposes (just like Minix3's endpoints).
* The performance of the library is not the main concern (and must ''never'' come at the expense of code readability), but we would like to avoid quadratic (or worse) complexity. It seems sensible to have two hashtables: one for (parent,name) -&gt; inode lookups, and one for (parent,index) -&gt; inode lookups. Part of the testing phase may be gathering information about, and tuning, the used hashtable sizes and hashing algorithms.
* The parent can be a single pointer field in an inode; the set of children for an inode may be a linked list (doubly linked, for cheap deletion). In total there will be a lot of linked list manipulation; it may be a good idea to use operations from ''&lt;sys/queue.h&gt;'' wherever appropriate.
* In general, the library may assume that the caller knows what he's doing. However, it is highly recommended that debugging functionality be added (that can be turned on or off with a compile-time configuration option) to make sure that this is indeed the case. A simple example here is that in debugging mode, add_inode() may check whether the given parent already has a child inode with the given name, and delete_inode() may check whether the given inode is the root inode - or even a valid inode pointer at all. The existing assert() and panic() calls may be used in case of errors.
* The space to store names must be of size &lt;code&gt;NAME_MAX+1&lt;/code&gt;, that is, &lt;code&gt;NAME_MAX&lt;/code&gt; actual characters and a terminating '\0' character. In debugging mode, providing a longer name to add_inode() is an error, etcetera.
* For the &lt;code&gt;REQ_GETDENTS&lt;/code&gt; implementation, the position field may be used as follows: position 0 and 1 are for "." and "..", positions 2 to ''nr_indexed_entries+1'' are for indexed child inodes (typically not all of these are present, so many positions will be skipped here), and positions ''nr_indexed_entries+2'' and onwards are for child inodes without an index number.
* It is very important that the library is safe with regards to modifications made to the vtree by the application in the callback hook. In particular, if a callback returns an error, the library must not make any assumptions about the original inode still existing.
* VFS-referenced inodes may be deleted through the API though. It is up to the library to determine whether it will keep around an inode that has been deleted but is still referenced by VFS. The easiest solution would just be to always delete the inode and just throw errors when VFS makes a request for an invalid inode number; a nicer solution would be to keep around the inode until it is not referenced anymore, but this might potentially be forever (taking up an inode forever). Obviously this has an impact on applications using /proc.

=== Testing ===

To test the library, you'll have to write a simple meaningless file system implementation that uses the library and all its features, and perhaps a number of test programs/scripts that trigger all the VFS-&gt;FS calls on this file system. If done properly, that should be sufficient to determine whether the library works as intended.

Mounting a file system without specifying a block device is not possible yet (if time permits we'll look at that later in this project), so mounting a file system now requires a block device that you won't use anyway, e.g.:

&lt;pre&gt;
mount -t testfs /dev/fd0 /mnt
&lt;/pre&gt;

(this requires that you've installed the test file system to /sbin/testfs)

Note that because the block device thing is something that will go away, you don't have to implement &lt;code&gt;REQ_BREAD_S/REQ_BWRITE_S&lt;/code&gt; in the library.

''Incomplete''

----
== ProcFS ==

One major goal of the /proc part of the work is to be able to deny access to the &lt;code&gt;getsysinfo(2)&lt;/code&gt; call for userland programs. That means that all the information offered through &lt;code&gt;getsysinfo&lt;/code&gt; that is currently used by userland programs, has to be offered through /proc. Only procfs (and some other system servers, like IS) should use &lt;code&gt;getsysinfo&lt;/code&gt;. This is much cleaner than the current approach, where userland programs obtain and parse raw copies of various system servers' process table.

=== Files in /proc ===

At this moment, we anticipate that the /proc file system will provide at least the following files:

{| class="wikitable"
! File !! Type !! Priority !! Description
|-
| &lt;code&gt;/proc/hz&lt;/code&gt; || text ||  +++  || System clock frequency, in ticks per second
|-
| &lt;code&gt;/proc/loadavg&lt;/code&gt; || text ||  +++  || Load average, used by &lt;code&gt;getloadavg(3)&lt;/code&gt; et al
|-
| &lt;code&gt;/proc/uptime&lt;/code&gt; || text ||  +++  || Uptime information, used by &lt;code&gt;uptime(1)&lt;/code&gt; et al
|-
| &lt;code&gt;/proc/version&lt;/code&gt; || text ||  +  || System version information
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/psinfo&lt;/code&gt; || text ||  +++  || Process information for &lt;code&gt;ps(1)&lt;/code&gt;, &lt;code&gt;top(1)&lt;/code&gt;
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/status&lt;/code&gt; || text ||  +++  || Human-readable process key, value pairs
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/map&lt;/code&gt; || text ||  ++  || Memory map of the process
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/cmdline&lt;/code&gt; || text ||  ++  || Command line of the process
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/environ&lt;/code&gt; || text ||  ++  || Environment variables of the process
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/cwd&lt;/code&gt; || symlink ||  +  || Current working directory of the process
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/root&lt;/code&gt; || symlink ||  +  || Root directory of the process
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/exe&lt;/code&gt; || symlink ||  +  || Executable file for the process
|-
| &lt;code&gt;/proc/&lt;/code&gt;''pid''&lt;code&gt;/fd/&lt;/code&gt;''N'' || symlink ||  +  || Open file descriptors of the process
|-
| &lt;code&gt;/proc/net/tcp&lt;/code&gt; || text ||  ++  || List of TCP connections, for &lt;code&gt;tcpstat(1)&lt;/code&gt;
|-
| &lt;code&gt;/proc/net/udp&lt;/code&gt; || text ||  ++  || List of UDP connections, for &lt;code&gt;udpstat(1)&lt;/code&gt;
|}

== VTreeFS ==

* Generally, the number of forks and exits will outweigh the number of accesses to /proc by far. Unlike DevFS, ProcFS will therefore not be actively updated about changes to the system status that it's interested in: this would simply cause too much overhead in the common case.
* Updating of the directory structure for PIDs (&lt;code&gt;/proc/&lt;/code&gt;''&lt;code&gt;pid&lt;/code&gt;'') should therefore be "lazy". On every access, ProcFS' VTreeFS hooks can see if the information that it is about to send back to VFS, is still up-to-date.
* This information has to be be obtained from PM, VFS and the kernel (using &lt;code&gt;getsysinfo(2)&lt;/code&gt; calls to PM and VFS). This returns a table of process entries (an array of &lt;code&gt;slots&lt;/code&gt;, &lt;code&gt;NR_TASKS+NR_PROCS&lt;/code&gt; in total).
* The set of PIDs can easily change between subsequent getdents calls. To make sure that every PID is returned exactly once in a directory listing, ProcFS can use processes' slot numbers for the &lt;code&gt;index&lt;/code&gt; value of the inodes. The maximum number of indexed entries of the root directory is therefore &lt;code&gt;NR_TASKS+NR_PROCS&lt;/code&gt;.
* To make sure that a PID is not reused without ProcFS knowing about it, the //cbdata// value of the &lt;code&gt;/proc/&lt;/code&gt;''&lt;code&gt;pid&lt;/code&gt;'' directory inodes can be the endpoint for that PID.
* ProcFS can also create only the containing directory for each PID upon access of the root directory, and fill a specific PID's directory with inodes ('psinfo', 'status' etc) as that directory is accessed.

----

== DevFS ==

The file system side of devfs will use only a small subset of the vtreefs library, and should be very easy to implement. The /dev directory need not change compared to the way it is now: it may be completely flat and essentially offer only block-special and character-special files. The main chunk of this work is writing the infrastructure for letting device drivers add device nodes by making function calls.

=== General design ===

The general design of DevFS is as follows. A device driver requests the creation of a device node by making a call to RS. If this is allowed according to RS's policy, RS will publish (store) the information for the device node in DS, using a special key prefix. The devfs process subscribes to that special key prefix, and thereby gets a message when a new device node is published in DS. It will then retrieve the new entry (or entries), and update its virtual file system accordingly. Summarizing the process flow of creating a device node:

&lt;pre&gt;
Driver -&gt; RS -&gt; DS -&gt; DevFS
&lt;/pre&gt;

Device nodes have a number of properties:

* The name (e.g. "c0d3p1s0", "null")
* The type (character or block)
* The major device number
* The minor device number
* The file access mode (e.g. ''rw-r--r--'')
* The owning UID
* The owning GID

Remember that the goal of devfs is to let device drivers create device nodes dynamically. In terms of properties, that means a device driver must be able to specify the name and the minor device number at the very least. Theoretically, device drivers should not have anything to do with the other POSIX semantics. Practically speaking, however, the driver will have to specify the file mode and the owning UID and GID. This part can and hopefully will be improved at some later time, with a much more elaborate policy specification in /etc/drivers.conf. Unfortunately, that change is estimated to be too much work for this project.

If the device driver indeed specifies the device name, minor number, UID, GID and file mode for each device, this leaves the device type and major number. Those properties are always the same for all device nodes belonging to a single device driver. It therefore makes sense **not** to specify them on a per-node basis. Additionally, we want to introduce as little redundancy as possible in the whole MINIX3 system. Therefore, we store these two properties on a per-driver (= per-label) basis. 

=== Device nodes in RS ===

The 'service' (/bin/service) part of RS currently takes a "-dev &lt;device&gt;" parameter, where &lt;device&gt; is a file in /dev, to tell RS that it should use the major device taken from that device node. With the new DevFS infrastructure, it will be the driver itself that will create device nodes for it, so we cannot rely on the presence of a file in /dev for this anymore. Hence, 'service' needs to be changed in this respect, so that it specifies a major number directly, instead of using a file in /dev.

Additionally, the one single place that determines whether a device is a block or character special device, is currently the static /dev itself: based on the file type (block or character special), VFS determines how to talk to the device driver. With DevFS, this information will be put into /dev rather than taken from /dev, so now it becomes necessary to specify this somewhere. For now, the most logical place for that is the same place where the 'major' of the device is specified: the 'service' utility.

While retaining the '-dev' parameter for backwards compatibility, 'service' should take two new parameters: -devtype and -devnr. The first one would take 'block' or 'char' and the second would take a number. For example, given the following /dev/c0d0 file in the static /dev we have now:

&lt;pre&gt;
  brw------- 1 root  operator  3,   0 Dec 19  2007 /dev/c0d0
&lt;/pre&gt;

Instead of starting the first at_wini instance with this command (taken from /usr/src/drivers/memory/ramdisk/rc):

&lt;pre&gt;
  /bin/service -c up /bin/at_wini -dev /dev/c0d0 -config /etc/drivers.conf -label at_wini_0
&lt;/pre&gt;

..the starting command would become:

&lt;pre&gt;
  /bin/service -c up /bin/at_wini -devtype block -devnr 3 -config /etc/drivers.conf -label at_wini_0
&lt;/pre&gt;

This eliminates the need for /dev/c0d0 to be present before at_wini is actually started.

The major number is already communicated from 'service' to RS (in 'RS_DEV_MAJOR' and the 'rss_major' field of 'struct rs_start'), but a new field needs to be added in both cases to let 'service' pass the "devtype" value to RS as well. For example, call them 'RS_DEV_TYPE' and 'rss_devtype'. In RS itself, a field needs to be added to 'struct rproc' to save this value: eg 'r_dev_type'. The reason for all this will be explained in the next section.

=== Device node tuples in DS ===

DS can store key-value pairs. The key is always a string; the value may be a string or a number. We will use only strings, for both key and value. We use this notation for a mapping from the key "key" to the value "value":

&lt;pre&gt;
  "key" =&gt; "value"
&lt;/pre&gt;

Upon successfully spawning a device driver, RS will create a string entry in DS based on this device driver's label, device type and device major number:

&lt;pre&gt;
  "dev " &lt;label&gt; =&gt; &lt;type&gt; " " &lt;major&gt;
&lt;/pre&gt;

The &lt;type&gt; field is either a 'b' or a 'c' character (with obvious meanings), the &lt;major&gt; field is a decimal number in string form, and the two are separated by a space. In the future, more space-separated fields may be added at the end. For example, the first at_wini instance would have this entry:

&lt;pre&gt;
  "dev at_wini_0" =&gt; "b 3"
&lt;/pre&gt;

Such fields specify the global properties of all device nodes created (indirectly) by that device driver.

The device nodes themselves are stored as follows:

&lt;pre&gt;
  "node " &lt;label&gt; " " &lt;name&gt; =&gt; &lt;minor&gt; " " &lt;mode&gt; " " &lt;uid&gt; " " &lt;gid&gt;
&lt;/pre&gt;

The &lt;label&gt; field indicates the driver creating the node; the &lt;name&gt; field is the device name string; the &lt;minor&gt; field is the driver-assigned minor number of the device node. The &lt;mode&gt; field is the file mode to be used for the device node, but just the access permissions bits (i.e. NOT the block/char special type bits), in three-digit octal notation: basically, ranging from "000" (&lt;code&gt;%%---------%%&lt;/code&gt;) to "777" (&lt;code&gt;rwxrwxrwx&lt;/code&gt;). The &lt;uid&gt; and &lt;gid&gt; parts are decimal numbers, since currently no party is capable of doing user/group name to ID conversion safely - this too should be fixed using policy specifications later. As example, consider one of at_wini's device nodes:

&lt;pre&gt;
  "node at_wini_0 c0d0p0s0" =&gt; "128 600 0 0"
&lt;/pre&gt;

This indicates that at_wini_0 has device node with name "c0d0p0s0" (to end up as /dev/c0d0p0s0), with minor number 128, access mask 600 (&lt;code&gt;%%rw-------%%&lt;/code&gt;), UID 0 (root) and GID 0 (operator). The "dev" entry with a matching label name (see above) provides the remaining information about the device node (namely, the device type and the major device number).

=== RS call for device drivers ===

The following call should be specified in include/minix/rs.h, and implemented in lib/syslib/rs.c. Use include/minix/ds.h and lib/syslib/ds.c as reference examples of how to do this.

&lt;pre&gt;
  int rs_register_node(char *name, dev_t minor, _mnx_Mode_t mode, _mnx_Uid_t uid, _mnx_Gid_t gid);
&lt;/pre&gt;

The field types of the actual message sent to RS should be defined in include/minix/com.h; there already is a section on RS there. For example, define and use these names and message fields for the message request type and fields:

{| class="wikitable"
| message type || '''RS_REG_NODE''' || &lt;code&gt;(RS_RQ_BASE + 8)&lt;/code&gt; or so
|-
|rowspan="2"|name || RS_NAME_ADDR || &lt;code&gt;m2_p1&lt;/code&gt;
|-
| RS_NAME_LEN || &lt;code&gt;m2_i1&lt;/code&gt;
|-
| minor || RS_DEV_MINOR || &lt;code&gt;m2_l1&lt;/code&gt;
|-
| mode || RS_DEV_MODE || &lt;code&gt;m2_s1&lt;/code&gt;
|-
| uid || RS_DEV_UID || &lt;code&gt;m2_i2&lt;/code&gt;
|-
| gid || RS_DEV_GID || &lt;code&gt;m2_i3&lt;/code&gt;
|}

Upon getting such an RS_REG_NODE request, RS should verify that the caller is indeed a system process (and if not, return an error), obtain the label of the calling process, and based on the label and given information, create a key and value string, use ds_publish_str to publish that string in DS, and return whatever return value that call produced, back to the device driver.

=== Implementation in RS ===

To reiterate: RS must create a proper "dev &lt;label&gt;" entry in DS upon spawning a device driver, and create a "node &lt;label&gt; &lt;name&gt;" entry with each RS_REG_NODE request. DS currently does not offer an interface to delete published entries, so RS need not be concerned about removing entries when a device driver is taken down. A new comment in the RS code that indicates that that is left as future work, would be great, though..

In every case, things must be set up in such a way that RS will always have published the "dev &lt;label&gt;" entry of a driver before making "node &lt;label&gt; &lt;name&gt;" entries on behalf of that driver. This will probably be what happens in the most straightforward implementation anyway, though.

== DevFS ==

The basic idea for DevFS is that it uses ds_subscribe() on "'''&lt;code&gt;node .*&lt;/code&gt;'''", and repeatedly calls ds_check_str() to get entries that have been changed. Based on that it can create device nodes. Device nodes will never be deleted as DS entries can not be deleted either.

Note that the "dev &lt;label&gt;" entries are not subscribed to: DevFS will pull those in on demand. Caching these within DevFS is not required in the initial DevFS version (but see below). In other words, for each "node &lt;label&gt; &lt;name&gt;" entry that DevFS retrieves using ds_check_str(), it can simply make a ds_retrieve_str() call on the corresponding "dev &lt;label&gt;" entry, retrieving the rest of the information that it needs to create the device node. If the ds_retrieve_str() call on the "dev &lt;label&gt;" entry fails for some reason, then DevFS may print a warning and ignore the original "node &lt;label&gt; &lt;name&gt;" entry.

It may be that a device driver, as a result of being restarted (e.g. due to a crash), re-registers its device nodes. DevFS can detect this by seeing that that name is already registered, with the same major device number as the original (the minor '''may''' be different the next time though!). DevFS must silently update the entry to the new values in this case.

It may also be that two device drivers register the exact same name (eg "node foo mynode" and "node bar mynode"). DevFS can detect this by seeing that the name is already registered, with a different major device number from the original. DevFS must print a warning if it happens, and may (but need not) replace the original entry with the new one.

Getting notification messages from DS (as a result of the ds_subscribe() call) can be handled by the message hook in VTreeFS.

If time permits, caching of the "dev &lt;label&gt;" entries should be added to DevFS, so that it stores the &lt;label,type,major&gt; tuples locally (possibly in an array of 256 elements, one per major; accessed by label via a hashtable) and need not call ds_retrieve_str() every time a node gets added.

=== Changing drivers ===

The next step is to change all drivers to dynamically create their own device nodes. They do this with the new rs_register_node() call. Note that for example at_wini needs to generate a different name prefix depending in which instance it is ("c0" for the first instance, "c1" for the second).

''Incomplete''

=== Changing the boot process ===

''TBD''

== Planning ==

This is a very rough sketch.

* vtreefs: one month.
* procfs part 1: two weeks for the basic structure, the flat files, and most of the /proc/pid/ files.
* ''midterm''
* procfs part 2: two weeks for rewriting &lt;code&gt;ps(1)&lt;/code&gt; and &lt;code&gt;top(1)&lt;/code&gt; and adding support for /proc/pid/cmdline.
* devfs: two to three weeks.</text>
      <sha1>m6znhlad1d4emdzzv03qqrqhl4rbuge</sha1>
    </revision>
  </page>
  <page>
    <title>Performance Measuring using Hardware Performance Monitoring Counters</title>
    <ns>0</ns>
    <id>238</id>
    <revision>
      <id>338</id>
      <timestamp>2021-09-13T08:37:36Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2009:pmctools</comment>
      <origin>338</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13044" sha1="fmp5qc5hsm92fm7jswdz4a4d7kvzm7v" xml:space="preserve">Student: Alex Ray

Mentor: Arun Thomas

SVN branch name: [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=%2Fbranches%2Fsrc.20090525.r4372.alexray%2F src.20090525.r4372.alexray]

== Abstract ==
I'll be porting/implementing the PMCTools kit from FreeBSD to Minix.  This uses on-board hardware performance counters to track down and identify performance sinks. This can then be used to improve the speed/efficiency of Minix.

== Design ==
This project is broken up into three parts:
* The driver, which will interact between applications and the performance counters.  As much of this as possible is run in userspace, but the actual instructions must be executed by the kernel in Ring-0
* The library/API, a simple and clean interface to the driver that lets users add performance monitoring functionality to their programs.
* Analysis software, which takes data generated by the driver and library and turns it into useful statistics.

The first part will be a lot of assembly (and even some binary/hex for the instructions not in the assembler).  The rest should be mostly C.

Finer design points (I'll add to this as I get to the latter parts of the project)

=== hwpmc ===
hwpmc is a kernel-module, a set of hooks, functions, structures, and data, that gets shoved into the FreeBSD kernel and when the kernel catches a pmc call, it goes to hwpmc code.  My pmc server is going to be used as a surrogate kernel, and will catch (PMC) messages and use the appropriate hwpmc code.  Initially I'll cut out most of the functionality and just get a working model that implements system-wide counting functionality, and after I finish an end-to-end prototype, I'll expand functionality from there.

=== pmclib ===
This is a set of library procedures that make appropriate system calls to the FreeBSD kernel.  I'll have to modify these to make system calls to my surrogate kernel (my pmc server), and I'll have more news on that later.

== Test Plan and Evaluation ==
Test-driven development is the plan, so I'll try to put tested and proved features here.

== Schedule and Deliverables ==
=== Throughout the Summer: ===
(pre-Coding and through midterm and final exam periods and afterwards as well)

'''Deliverables:''' Create a [https://ajray.wordpress.com blog] for the purpose of day-to-day work tracking, so my mentor(s) and the community can keep tabs on where I am and what I'm doing.

Update the Wiki with information I find useful that may be of use to other users/developers.

==== Pre-Coding Period: ====
Become very familiar with the intel and AMD processor manuals (https://www.intel.com/products/processor/manuals/).  These are the references on which hwpmc is based. hwpmc is the hardware driver that actually touches the processor's performance monitor counters, so this is VERY architecture specific.  I will only be dealing with a subset of all of the architectures covered by hwpmc currently, as it already has the *86 architectures covered (as well as ARM and a bunch of others).

Contact the PMCTools developers to possibly collaborate with on some of this project.  One of the bigger ToDo's for PMCTools is find better ways of presenting and analysing the data, which is what I propose to do in the latter part of the summer.  It would be awesome to contribute to two Open Source projects with one summer project.

Thoroughly read through the PMCTools source code.  After final exams I will switch my primary workstation over to FreeBSD/Minix to facilitate development.  Here is something I can do that touches on the three main packages (hwpmc, libpmc, and pmcstat) without actual coding for my project:

Week 0: Install and use PMCTools under FreeBSD.  Write some simple unit tests that confirm that the hwpmc driver can successfully communicate with my processor.  Also write some unit tests that demonstrate functions in libpmc.  Finally use pmcstat to measure the performance of specific processes, multiple processes of the same program, and the system as a whole.

'''Deliverables:''' Demonstrated use of PMCTools (hwpmc, libpmc, pmcstat) in FreeBSD via simple unit tests.

=== Coding begins: ===
'''Week 1:''' Start Porting hwpmc for i686 (https://www.freebsd.org/cgi/cvsweb.cgi/src/sys/dev/hwpmc/)'''.'''

'''Method:'''

* Implement a pmc server that is the device driver for the PMCs.  Hopefully this will be very nearly a port of the functionality of hwpmc (organizing the use of PMCs).
* Kernel must execute WRMSR (Write MSR) and RDMSR (Read MSR) at Ring-0 to set and read PMCs and Events.
* pmc server must set and read PMCs, outputting data in a format compatible with FreeBSD's PMCTools.
* For per-process monitoring, add code to the scheduler that reads the PMC values (so we can compare before and after a process has run).

'''Deliverable:'''

* Demonstrate working PMCs: Activate, Set events, and monitor each PMC.  Unit tests that exercise this.
* pmc server that can signal the kernel to: Set events, and set PMCs.  Unit tests that exercise this, then read the values back to verify them.
* pmc server that can read PMC values and output with PMCTools' format.  Unit tests that exercise this; comparison output from FreeBSD-Current.

'''Accomplished:'''

* New server in boot image (for fixed endpoint). This server will handle the hwpmc functionality. (its just called pmc)
* New message types and PMC_* messages for the server to handle.  m10 has two 64-bit unsigned ints (because MSRs and counters are 40-64 bits long)
* PMC Server can signal the kernel with: SYS_WRMSR, SYS_RDMSR, SYS_SETPCE. Kernel functions to carry out these.

'''ToDo:'''

* DONE: level0(func, void*args), run functions (with arguements) at ring0 (Already mostly done with this, just finishing up)
* Unit tests for above functionality.  Create new organized directory for these to live in.

'''Week 2:'''

* Quick finish the ToDo above.
* Start directly porting hwpmc code.  The kernel calls implemented (wrmsr, rdmsr) match PMCTools kernel calls (FreeBSD calls of the same name and function).
* Build the rest of the framework on the pmc server so the hwpmc port is as close as possible to match the FreeBSD hwpmc
* Because the test bed machine is not working yet, implement a small PMC demo in the server to allow testing of functionality even without access to counters.
* Unit tests to demonstrate the above

'''Week 3-4:''' System-wide Counting

* Working development machine (Pentium 4, not the Core2 Duo in the proposal; thats still being worked on)
* Systemwide counting capabilities. P4 has 18 (0-17) performance counters that can be used concurrently.
* Started doing preliminary performance measurements. See 'currently counting' below.
* PM server handles WRMSR/RDMSR/SETPCE calls; all working w/ unit tests. (which by extension tests and verifies the new level() with arguments)
* New pmc driver statically assigns PMCs/events; has the advantage of not changing events every context switch
* Started porting libpmc; modifying to use statically assigned PMCs

Currently Counting: Branching (total branches versus mispredict branches).  I'd really love to hear what people want to have measured, so please let me know if you have ideas.
Testing Scenarios: Idle (just sitting there) and during my regular workflow.

Known Issues: (I'm not mentioning all of the C99 etc issues with the FreeBSD code here)
* WRMSR doesn't have any range checks implemented; Right now user programs can possibly misuse it. FIXED: now WRMSR can only write to PMC MSRs.
* 'Trust system' Right now I'm assuming that user programs will not actively circumvent the libpmc API to mess with other processes PMCs; for research/measurement purposes this works alright

'''Week 5''' Started Porting Libpmc
* Working simple pmc driver; counting/reading/assignment
* Utilizes some of the hwpmc macros/structures for building event assignments
* Event construction is still largely manual
* Started implementing libpmc-API functions via simple calls to pmc driver (the driver has a subset of hwpmc functionality so some API call are null functions)

'''Week 6:''' userland PMC allocation via libpmc API

Userland programs can now call the ''proc''_allocate_pmc functions for the 'p4' and 'iaf' processors (Pentium 4 and Intel Core/Core2 Fixed Function counters).

Explained in more detail at (Documentation): https://ajray.wordpress.com/2009/07/07/proc_allocate_pmc-functionality/

'''Week 7:''' more libpmc allocation functions (it goes without saying, but theres more detail at https://ajray.wordpress.com)
* Expanded to half of the Core(2) arch (the fixed function counters) and the AMD arch.  Syntax is the same as the p4_allocate_pmc() function.
* These aren't completely debugged; I don't have physical access to these machines, so I'm going back and forth with my mentor to try to get them working on his machine.
* All of the ported libpmc functions are now extremely verbose; on any kind of fatal error they should explain why they are failing (with a message thats both human readable and should help locate the point in the libpmc.c code where the failure occured).
* Added a small amount of verbosity to the system calls (WRMSR, SETPCE) which are printf statements in the system task.  You should get feedback (on tty0) from executing either one of those calls (and wrmsr should tell you what it wrote and where).
* Added some small commandline programs that can be used to manually control PMCs (and I'm using them for debugging). They are:
* A setpce program to enable userland RDPMC (and should trigger the system task to print a message about SETPCE on tty0)
* Some setevent programs that take command-line input and set the event registers/control registers for PMCs, also enabling them at the same time so (in theory) their respective counters should start counting.  There is one for each processor arch currently supported in libpmc (p4, iaf, amd)
* test_libpmc programs that use the libpmc() *_allocate_pmc() function to generate useful input for the setevent programs.  One for each arch and they each have a specific test event that has been manually checked against the event configuration I get by hand from the respective manual.
* rdpmc commandline program that prints the contents of the selected PMC to stdout.  Also acts as an implicit test for userland RDPMC (and by extension, SETPCE)

Last arch I'm going to port (libpmc-wise) for now is the other half of Core(2), called 'iap'.  These are the general-purpose counters on Core(2) procs (theres only two of them), and have one event register each, similar to the AMD procs.  After that I can start working on porting userland functions that do something useful with the output of libpmc functions (pmcstat, etc.).

'''Week 8''' 
* IAP Arch is in libpmc.  Some test scripts remain but the function (iap_allocate_pmc) is there.
* I still haven't gotten positive confirmation on counting on AMD/Core2 platforms, so I'll probably end up working on those some more (hopefully just minor fixes).
* From here I will start building the statistical/frontend of PMCTools to do actual analysis with the counters.

'''Week 9'''
* pmcstat porting - mostly done.  I thought I could get this done within a week, and its been a week and I'm nearly there.  Some quick notes on it
* System-wide counting mode only for now (process-virtual counting can be added, but the pmcstat code for that is too bsd-specific to be useful)
* Very much not-reentrant and not-multiprocess-safe for overlapping counters.  In no way can more than one of these be run simultaneously on the same counters (though you can have separate ones on separate counters).  For sane architectures (K8, Core(2) IAF/IAP) this is the counter number.  For Pentium 4's this is the row/index and event register multisets.

'''Week 10'''
* pmcstat() built.  more note on it:
* Logging is for now disabled (more interest on the actual hardware measurements than the formatted output), for now plain printing
* looking into callchain capture/mapping (in the kernel or otherwise) it is for now, disabled. that is however something i can focus on if that's desired
* Now to add architecture support to it (probably P4, K8, IAF, IAP, in that order)

'''Week 11'''
* pmcstat ready for testing on Core2/K8 machines (SC mode)
* accepts row_index and a spec string which contains the event and all additional information used to further define the event to be counted
* general events work as well as specific events (see the relevant freebsd man pages for full event listings)

== Updates ==
I'll be updating my branch constantly as I work on the code, and I'll be keeping track of my progress in my blog.  I'll also be haunting the IRC channel and the mailing list all summer, so feel free to contact me there as well (ajray on irc.freenode.net).

=== Weekly Status ===
Blog: https://ajray.wordpress.com/

=== Daily Status ===
Twitter: https://twitter.com/alexjray

== License Info ==
I will be keeping clear distinctions between the PMCTools and my personal code, and I'll be releasing my code under the BSD license.</text>
      <sha1>fmp5qc5hsm92fm7jswdz4a4d7kvzm7v</sha1>
    </revision>
  </page>
  <page>
    <title>Minix Firewall</title>
    <ns>0</ns>
    <id>239</id>
    <revision>
      <id>341</id>
      <timestamp>2021-09-14T11:23:45Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2010:firewall. Anchor links are broken</comment>
      <origin>341</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22298" sha1="t0vayn5clctmtp0wl9h53qehdg38y0m" xml:space="preserve">== About ==
This is the ээGSoC 2010 - Minix 3 Firewallээ project page. This page describes the design evolution and provides a documentation of the developed features.


Student: Stefano Cordio [ stefano (dot) cordio (at) gmail (dot) com ]

Mentors: Cristiano Giuffrida and Lorenzo Cavallaro

SVN branch name: [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=/branches/src.r7062.firewall/ src.r7062.firewall] ([[#fw_tracking_current|Tracking Current]])

Last compiled trunk: r9022

Last branch rebase: r9022

NetBSD version: 5.1 (GENERIC)

== Abstract ==
The goal of this project is to implement a firewall for Minix 3. It is preferable to port an existing firewall from another operating system or, alternatively, make a new one that has a similar approach to one that can not be ported.


== Project Idea ==
The NetBSD kernel provides a Packet Filter Interface called [https://www.netbsd.org/docs/internals/en/chap-networking-services.html#netserv-filters-pfil pfil] which supports the registration of callback functions to special hooks inside of the management logic of network packets.

This project can be divided in two steps:

* The first one is to port ''pfil'' on Minix, making appropriate links between it and the ''inet'' server and exporting functions that allow packet filters to register themselves.
* The second is to port the [https://www.netbsd.org/docs/internals/en/chap-networking-services.html#netserv-filters-pf pf] packet filter.

    
== Tracking Current ==

To follow the firewall development, the guidelines are similar to those described in the [[Tracking Current]] page. You only need a few attentions:

* Prepare a directory for the new ''/usr/src'' tree and move the current ''/usr/src'' tree to a safe place. For example, you can create a ''src.firewall'' directory and use symbolic links to choose the current tree:
&lt;pre&gt;
# cd /usr
# mv src src.trunk
# mkdir src.firewall
# chown bin src.firewall
# ln -s src.firewall src
&lt;/pre&gt;

* Do the SVN checkout of the branch of the source:
&lt;pre&gt;
$ svn --username anonymous checkout https://gforge.cs.vu.nl/svn/minix/branches/src.r7062.firewall src.firewall
&lt;/pre&gt;

* Follow the instructions in the next section before recompiling (in addition to those specified in docs/UPDATING).

=== "docs/UPDATING" addendum ===
''Revision 9591'':
* Create the folder for the new header files:
&lt;pre&gt;
mkdir /usr/include/pfil/opt
&lt;/pre&gt;

''Revision 9586'':
* Create the folder for the new header files:
&lt;pre&gt;
mkdir /usr/include/pfil/minix
&lt;/pre&gt;

''Revision 9071'':

* Create the folders for the new header files:
&lt;pre&gt;
mkdir /usr/include/pfil
mkdir /usr/include/pf
mkdir /usr/include/pf/minix
mkdir /usr/include/pf/net
mkdir /usr/include/pf/opt
&lt;/pre&gt;

* Copy the default configuration files:
&lt;pre&gt;
cp /usr/src/etc/pf.conf /etc/pf.conf
cp /usr/src/etc/pf.os /etc/pf.os
&lt;/pre&gt;

=== Does It Work? ===
Once the system is built and after a reboot, you can run the tests under the ''test/pf'' folder:
&lt;pre&gt;
# cd /usr/src/test/pf
# make run
&lt;/pre&gt;


== NetBSD ==
The ''pfil'' is a framework that offers two main capabilities:

* Placement of the head on which the hooks could be registered, capability used by the network side of the operating system.
* Registration of the hooks, capability used by the packet filter applications.

To understand how this framework works, its internals must be analyzed.

The NetBSD base system source code is in the directory ''/usr/src'' on a NetBSD box. The kernel is in the directory ''/usr/src/sys''. All paths in this chapter are relative to the kernel source directory. ''TAILQ_*'' and ''LIST_*'' macros are defined in the &lt;[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/sys/queue.h?rev=1.52 sys/queue.h]&gt; header file and refer to specific implementation of lists, so there is no need to deepen these now.

=== The Hook ===
A hook is an entity that allows applications to run their callback functions at special points of the networking code. It is defined as following:

&lt;syntaxHighlight lang="c"&gt;
struct packet_filter_hook {
   TAILQ_ENTRY(packet_filter_hook) pfil_link;
   int   (*pfil_func)(void *, struct mbuf **, struct ifnet *, int);
   void   *pfil_arg;
   int     pfil_flags;
};
&lt;/syntaxHighlight&gt;
The ''pfil_link'' field is used to insert the ''packet_filter_hook'' object in the functions list of the head to which it belongs (see [[#Pfil_lists|below]]).

The ''pfil_arg'' field is the pointer of the function argument.

The ''pfil_flags'' field determines when the function must be called, it may take the following values: &lt;&lt;Anchor(pfil_flags)&gt;&gt;

&lt;pre&gt;
PFIL_IN       call the function on incoming packets
PFIL_OUT      call the function on outgoing packets
PFIL_ALL      call the function on all of the above
PFIL_IFADDR   call the function on interface reconfiguration
PFIL_IFNET    call the function on interface attach/detach
PFIL_WAITOK   as reported in the pfil man page: "OK to call malloc with M_WAITOK" -- need more understanding here :)
&lt;/pre&gt;
The ''pfil_func'' field is the pointer of the associated function. A generic function is declared as following:

&lt;pre&gt;
int pfil_func(void *, struct mbuf **, struct ifnet *, int);
&lt;/pre&gt;

* The first is a generic parameter which the caller can pass to the function.
* The second is the entity which holds the data received from the network. This structure is defined in the &lt;[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/sys/mbuf.h?rev=1.144 sys/mbuf.h]&gt; header file.
* The third represents the network device on the system. This structure is defined in the &lt;[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/net/if.h?rev=1.146 net/if.h]&gt; header file and contains information like the interface name, the state of the interface, its capabilities and a group of function pointers.
* The last represents when the function was called, according to the //pfil_flag// [[#Pfil_flags|values]].

The return value should be 0 if the packet processing is to continue or an errno value if the processing is to stop.

=== The Head ===
A head is a filtering point where it is possible to attach a hook. It is defined as following:

&lt;syntaxHighlight lang="c"&gt;
typedef TAILQ_HEAD(pfil_list, packet_filter_hook) pfil_list_t;

struct pfil_head {
   pfil_list_t   ph_in;
   pfil_list_t   ph_out;
   pfil_list_t   ph_ifaddr;
   pfil_list_t   ph_ifnetevent;
   int           ph_type;
   union {
      u_long     phu_val;
      void      *phu_ptr;
   } ph_un;
   LIST_ENTRY(pfil_head) ph_list;
};
&lt;/pre&gt;

&lt;pre&gt;
PFIL_TYPE_AF      address family hook
PFIL_TYPE_IFNET   interface hook
&lt;/pre&gt;
Depending on the value assumed by the previous field, the ''ph_un'' union contains different values and the following macros simplify the access to it:

&lt;syntaxHighlight lang="c"&gt;
#define   ph_af      ph_un.phu_val   /* the ph_un field contains an AF_* type (e.g. IPv4 type is AF_INET, IPv6 type is AF_INET6) */
#define   ph_ifnet   ph_un.phu_ptr   /* the ph_un field contains an ifnet pointer */
&lt;/syntaxHighlight&gt;
Finally, the ''ph_list'' field is used to insert the ''pfil_head'' object in the global list of head objects named ''pfil_head_list'' and defined as follow:

&lt;pre&gt;
LIST_HEAD(, pfil_head) pfil_head_list = LIST_HEAD_INITIALIZER(&amp;pfil_head_list);
&lt;/pre&gt;
=== Placement of a Head ===
The framework offers two functions to place a new head:

&lt;pre&gt;
int pfil_head_register(struct pfil_head *ph);
int pfil_head_unregister(struct pfil_head *ph);
&lt;/pre&gt;
In both functions, the ''ph'' parameter is the object pointer to be register.

A network component can place a new head by setting the ''ph_type'' and ''ph_un'' fields and calling the ''pfil_head_register()'' function. In this way the new head is added to the global list of head and it is possible getting it to attach a new hook.

Instead, the call of the ''pfil_head_unregister()'' function causes the removal from the global list of the specified head .

=== Registration of a Hook ===
An application can register its callback function by registering a new hook with an existing head. The functions provided for this purpose by the framework are:

&lt;pre&gt;
struct pfil_head * pfil_head_get(int type, u_long val);
int pfil_add_hook(int (*func)(void *, struct mbuf **, struct ifnet *, int), void *arg, int flags, struct pfil_head *ph);
int pfil_remove_hook(int (*func)(void *, struct mbuf **, struct ifnet *, int), void *arg, int flags, struct pfil_head *ph);
&lt;/pre&gt;
At first, the app must identify the head that should be used by calling the ''pfil_head_get()'' function and specifying its type and value. Once the head is obtained, the recording of the new hook is done by calling the ''pfil_add_hook()'' function and passing as parameter the name of the target callback function.

Removing a registered hook is done by calling the ''pfil_remove_hook()'' function.

=== Execution of the Hooks ===
The framework provides the function ''pfil_run_hooks()'' to perform the callback functions registered to a head. It is the following:

&lt;pre&gt;
int pfil_run_hooks(struct pfil_head *ph, struct mbuf **mp, struct ifnet *ifp, int dir);
&lt;/pre&gt;
The ''ph'' parameter is the target head.

The ''mp'' parameter holds the data received from the network (refer to the second argument explained [[#Pfil_func_args|here]] for further informations).

The ''ifp'' parameter represents the network device logically connected with this head (refer to the third argument explained [[#pfil_func_args|here]] for further informations).

The ''dir'' parameter determines which list must be traversed (refer to the ''pfil_flags'' [[#Pfil_flags|values]] of the ''packet_filter_hook'' structure).

This function loads the head and runs through the list of hooks, launching the associated functions.

=== Example: IPv4 Head in the Kernel Networking Module ===
Part of the IPv4 networking logic is implemented in the "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/netinet/ip_input.c?rev=1.286 netinet/ip_input.c]]" and "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/netinet/ip_output.c?rev=1.205 netinet/ip_output.c]" source files. This file contains the steps that the kernel module crosses to ensure the support to the packet filters. The steps are:

* declaration of a module's new head:
&lt;pre&gt;
struct pfil_head inet_pfil_hook;
&lt;/pre&gt;

* insertion of the new head in ''pfil_head_list'':
&lt;pre&gt;
inet_pfil_hook.ph_type = PFIL_TYPE_AF;
inet_pfil_hook.ph_af   = AF_INET;
pfil_head_register(&amp;inet_pfil_hook);
&lt;/pre&gt;

* inclusion of the hook execution code in the ''ip_input.c::ip_input()'' function, performed at each incoming IP packet:
&lt;pre&gt;
if (pfil_run_hooks(&amp;inet_pfil_hook, &amp;m, m-&gt;m_pkthdr.rcvif, PFIL_IN) != 0)
   return;   /* stop processing the packet */
else
   /* continue processing the packet */
&lt;/pre&gt;

* inclusion of the hook execution code in the ''ip_output.c::ip_output()'' function, performed at each outgoing IP packet:
&lt;pre&gt;
if (pfil_run_hooks(&amp;inet_pfil_hook, &amp;m, ifp, PFIL_OUT) != 0)
   return;   /* stop processing the packet */
else
   /* continue processing the packet */
&lt;/pre&gt;


=== Example: Interface Head in the Kernel Networking Module ===
In the "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/net/if.c?rev=1.242 net/if.c]" source file there is part of the management of network interfaces. Here the kernel registers other heads with pfil, one for each active interface and a global one for all interfaces.

The global head is declared as follows:

&lt;pre&gt;
struct pfil_head if_pfil;
&lt;/pre&gt;
and registered as follows:

&lt;pre&gt;
if_pfil.ph_type = PFIL_TYPE_IFNET;
if_pfil.ph_ifnet = NULL;
pfil_head_register(&amp;if_pfil);
&lt;/pre&gt;
Note that the field ''ph_ifnet'' is ''NULL'' because that head is not associated with any specific interface.

The hook execution code of this head can be found in three places:

* the code management block of the ioctl operations in the "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/netinet/in.c?rev=1.137 netinet/in.c]" source file:
&lt;syntaxHighlight lang="c"&gt;
int in_control(struct socket *so, u_long cmd, void *data, struct ifnet *ifp, struct lwp *l)
{
   switch (cmd) {
            *..
      case SIOCSIFADDR:   /* set interface IP address */
         pfil_run_hooks(&amp;if_pfil, (struct mbuf **)SIOCSIFADDR, ifp, PFIL_IFADDR);
            *..
      case SIOCAIFADDR:   /* add interface IP address */
         pfil_run_hooks(&amp;if_pfil, (struct mbuf **)SIOCAIFADDR, ifp, PFIL_IFADDR);
            *..
      case SIOCDIFADDR:   /* delete interface IP address */
         pfil_run_hooks(&amp;if_pfil, (struct mbuf **)SIOCDIFADDR, ifp, PFIL_IFADDR);
            *..
   }
}
&lt;/syntaxHighlight&gt;

  * the Synchronous PPP/Cisco link level subroutines in the "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/net/if_spppsubr.c?rev=1.120 net/if_spppsubr.c]" source file:
&lt;pre&gt;
static void sppp_set_ip_addrs(struct sppp *sp, uint32_t myaddr, uint32_t hisaddr)
{
      *..
   pfil_run_hooks(&amp;if_pfil, (struct mbuf **)SIOCAIFADDR, ifp, PFIL_IFADDR);
      *..
}

static void sppp_clear_ip_addrs(struct sppp *sp)
{
      *..
   pfil_run_hooks(&amp;if_pfil, (struct mbuf **)SIOCDIFADDR, ifp, PFIL_IFADDR);
      *..
}
&lt;/pre&gt;

  * the attachment/detachment process of the interfaces (see below).

The "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/net/if.c?rev=1.242 net/if.c]" source file contains also the function ''if.c::if_attach()'' which is called to attach an interface to the list of the active interfaces. The definition is:

&lt;pre&gt;
void if_attach(struct ifnet *ifp);
&lt;/pre&gt;
The ''ifp'' argument represents the interface to be enabled.

The function initializes and registers one of the field in the ''struct ifnet'', i.e. the ''if_pfil'' field of type ''struct pfil_head'', as follows:

&lt;pre&gt;
ifp-&gt;if_pfil.ph_type = PFIL_TYPE_IFNET;
ifp-&gt;if_pfil.ph_ifnet = ifp;
pfil_head_register(&amp;ifp-&gt;if_pfil);
&lt;/pre&gt;
After the registration, there is the call to ''pfil_run_hooks()'' on the ''if_pfil'' because the hooks on this type of head should be invoked whenever the associated interface is attached/detached or reconfigured:

&lt;pre&gt;
pfil_run_hooks(&amp;if_pfil, (struct mbuf **)PFIL_IFNET_ATTACH, ifp, PFIL_IFNET);
&lt;/pre&gt;
=== Example: Registration of pf Hooks ===
The ''pf'' packet filter interacts with ''pfil'' in two ways:

* registers one callback function for incoming and outgoing packets.
* registers two additional callback functions, one for the reconfiguration of the interfaces and one for their attachment/detachment process.

The first type of recording is made in the "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/dist/pf/net/pf_ioctl.c?rev=1.42 dist/pf/net/pf_ioctl.c]" source file.

The ''pf_ioctl.c::pf_pfil_attach()'' function obtains the head pointer and then registers the ''pf_ioctl.c::pfil4_wrapper()'' function as a hook on it:

&lt;pre&gt;
struct pfil_head *ph_inet;
ph_inet = pfil_head_get(PFIL_TYPE_AF, AF_INET);
pfil_add_hook((void *)pfil4_wrapper, NULL, PFIL_IN|PFIL_OUT, ph_inet);
&lt;/pre&gt;
The other recording type is made in the "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/dist/pf/net/pf_if.c?rev=1.21 dist/pf/net/pf_if.c]]" source file by the ''pf_if.c::pfi_initialize()'' function. Unlike the previous one, there is not the research phase of the head pointer because this is visible through the &lt;[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/net/pfil.h?rev=1.29 net/pfil.h]&gt; header file which exports the object declared in the "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/net/if.c?rev=1.242 net/if.c]" source file. Therefore, it registers ''pf_if.c::pfil_ifnet_wrapper'' and ''pf_if.c::pfil_ifaddr_wrapper'' as hooks on the ''if_pfil'' head:

&lt;pre&gt;
pfil_add_hook(pfil_ifnet_wrapper, NULL, PFIL_IFNET, &amp;if_pfil);
pfil_add_hook(pfil_ifaddr_wrapper, NULL, PFIL_IFADDR, &amp;if_pfil);
&lt;/pre&gt;

== Packet Filter Interface and pf on Minix ==
Integrating ''pfil'' on Minix is achieved primarily by defining a new compile-time flag named ''PFIL_HOOKS'', which allows to enable/disable packet filtering module, and by the insertion of the "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/net/pfil.h?rev=1.29 net/pfil.h]" and "[https://cvsweb.netbsd.org/bsdweb.cgi/src/sys/net/pfil.c?rev=1.27 net/pfil.c]" source files in the inet source directory (''servers/inet''/). It is important to carefully choose where to initialize/register the interface/IPv4 heads and where to execute the hook callbacks in the networking flow. In order to reduce the changes to adapt ''pf'', the best approach that can be followed is to keep the interface offered to it by ''pfil'', using wrapper functions for any conversion between the interface and the real implementation.

The Minix3 base system source code is in the directory ''/usr/src'' on a Minix box, all paths in this chapter are relative to this source directory.

=== Where to Change (draft) ===
Work in progress...

=== Placement of the IPv4 Head ===
Referring to the [[#NetBSD_IPv4_head|previous example]], the positioning of the IPv4 head is achieved through the following steps:

* inclusion of the ''servers/inet/pfil.h'' header file and declaration of the head:

''servers/inet/generic/ip.c'':
&lt;pre&gt;
#ifdef PFIL_HOOKS
#include "pfil.h"
#endif
...
#ifdef PFIL_HOOKS
PUBLIC struct pfil_head inet_pfil_hook;
#endif
&lt;/pre&gt;

* initialization and registration at the end of the ''ip.c::ip_init()'' function:

''servers/inet/generic/ip.c'':
&lt;syntaxHighlight lang="c"&gt;
PUBLIC void ip_init()
{
   int i; /* this declaration already exists*/
      *..
#ifdef PFIL_HOOKS
   inet_pfil_hook.ph_type = PFIL_TYPE_IFNET;
   inet_pfil_hook.ph_ifnet = NULL;
   if ( (i = pfil_head_register(&amp;inet_pfil_hook)) != 0)
      printf("inet: ip_init: WARNING: unable to register pfil hook, error %d\n", i);
#endif
}
&lt;/syntaxHighlight&gt;

* placement of the execution code for incoming packets, just before the delivery decision in the ''ip_read.c::ip_arrived()'' function and before the ''ip_port_arrive()'' call in the ''ip_read.c::ip_arrived_broadcast()'' function:

''servers/inet/generic/ip_read.c'':
&lt;syntaxHighlight lang="c"&gt;
#ifdef PFIL_HOOKS
#include "pfil.h"
#endif

#ifdef PFIL_HOOKS
EXTERN struct pfil_head inet_pfil_hook;
#endif

PUBLIC void ip_arrived(ip_port, pack)
ip_port_t *ip_port;
acc_t *pack;
{
#ifdef PFIL_HOOKS
   struct mbuf *m;
#endif

      *..

#ifdef PFIL_HOOKS
   /* mapping the incoming packet and the interface info in the mbuf
        * structure */

   if (pfil_run_hooks(&amp;inet_pfil_hook, &amp;m, m-&gt;mb_pkthdr.rcvif,
       PFIL_IN) != 0)
      return;
   if (m == NULL)
      return;
#endif /* PFIL_HOOKS */

   dest= ip_hdr-&gt;ih_dst;
   if (dest == ip_port-&gt;ip_ipaddr) {
      *..
}

PUBLIC void ip_arrived_broadcast(ip_port, pack)
ip_port_t *ip_port;
acc_t *pack;
{
#ifdef PFIL_HOOKS
   struct mbuf *m;
#endif

      *..

#ifdef PFIL_HOOKS
   /* mapping the incoming packet and the interface info in the mbuf
        * structure */

   if (pfil_run_hooks(&amp;inet_pfil_hook, &amp;m, m-&gt;mb_pkthdr.rcvif,
       PFIL_IN) != 0)
      return;
   if (m == NULL)
      return;
#endif /* PFIL_HOOKS */

   ip_port_arrive (ip_port, pack, ip_hdr);
}
&lt;/syntaxHighlight&gt;

* placement of the execution code for outgoing packets, just before the checksum calculation in the ''ip_write.c::ip_send()'' function:
 
''servers/inet/generic/ip_write.c'':
&lt;syntaxHighlight lang="c"&gt;
#ifdef PFIL_HOOKS
#include "pfil.h"
#endif

#ifdef PFIL_HOOKS
EXTERN struct pfil_head inet_pfil_hook;
#endif

PUBLIC int ip_send(fd, data, data_len)
int fd;
acc_t *data;
size_t data_len;
{
   int r; /* this declaration already exists*/

#ifdef PFIL_HOOKS   
   struct mbuf *m;
   struct ifnet *ifp;
#endif /* PFIL_HOOKS */

      *..

#ifdef PFIL_HOOKS
   /* mapping the outgoing packet in the mbuf structure and the
        * interface info in the ifnet structure */

   /*
        * Run through list of hooks for output packets.
        */
   if ((r = pfil_run_hooks(&amp;inet_pfil_hook, &amp;m, ifp, PFIL_OUT)) != 0)
      return (r);
   if (m == NULL)
      return (r);
#endif /* PFIL_HOOKS */

   ip_hdr_chksum(ip_hdr, hdr_len);   /* this function call already exists*/

      *..
}
&lt;/syntaxHighlight&gt;

=== Placement of the Interface Head ===
Referring to the [[#Netbsd_if_head|previous example]], the positioning of the interface heads is achieved through the following steps:



== To Do on This Page ==
* [The NetBSD Packet Filter Interface] Insert a new subchapter to expand ifnet description - Depeen PFIL_WAITOK.
* [Packet Filter Interface and pf on Minix] Justify the choices of positioning.
* '''MASSIVE UPDATE!!!'''


== Weekly Status ==
=== Community Bonding Period (27.4.2010 - 23.5.2010) ===
This period is focused on the study of ''pfil'' (the NetBSD packet filter interface) and ''pf'' (the NetBSD packet filter), assessing their true portability on the Minix environment. This period is also focused on the analysis of the Minix networking framework, i.e. the ''inet'' server source code.

=== Week 1 ===
Completion of the wiki chapter: "The NetBSD Packet Filter Interface".

=== Week 2 ===
Branch rebased to r7148. Created the new ''gsoc_test'' folder in the branch as standalone environment. Analyzed the dependencies of the NetBSD ''mbuf'' structure and adapted its source files in the ''gsoc_test'' folder.

=== Week 3 ===
Completion of the porting of the ''pfil'' framework in the ''gsoc_test'' folder, resolving all data dependencies of the structures. Branch rebased to r7268.

=== Week 4 ===
Inactivity due to a medical intervention.

=== Week 5 ===
Depth study of the Minix ''ip_send()'' and the NetBSD ''ip_output()'' functions. Completion of the positioning of the ''pfil_run_hooks()'' calls in the IPv4 packet processing flow. Branch rebased to r7538.

=== Week 6 ===
Merged the changes in inet, adding comments to the ''inet::ip_arrive()'', ''inet::ip_arrive_broadcast()'' and ''inet::ip_send()'' functions. Branch rebased to r7657.

=== Week 7 ===
Planning of the mid-term project with the mentors: implementation of most of the functionality of the [httpS://groups.google.com/group/minix3/msg/f6313a448dfe2dd8?pli=1 firewall sheep/goat project], using the ''pfil'' infrastructure. Creation of a new device, ''/dev/simplepf'', with no functionality (i.e. no read(), no write(), no ioctl(), etc.).

=== Week 8 (Mid-term Evaluation) ===
Added open(), close and ioctl() support to the new ''simplepf'' device. Release of the sheep/goat project for the mid-term evaluation. Reorganization of the ''pf''-related file hierarchy. Branch rebased to r7778.

=== Week 9 ===</text>
      <sha1>t0vayn5clctmtp0wl9h53qehdg38y0m</sha1>
    </revision>
  </page>
  <page>
    <title>Pkgsrc (GSOC Project)</title>
    <ns>0</ns>
    <id>240</id>
    <revision>
      <id>387</id>
      <parentid>342</parentid>
      <timestamp>2022-02-07T14:14:29Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>387</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="2935" sha1="m0lppdlqdopx89wrwx3y5tvejzt6jtc" xml:space="preserve">This page is about the now-finished GSOC 2010 project. The living pkgsrc page is at [[Testing pkgsrc]].

== About the project ==
Student: Gautam  Tirumala [gautam (dot) bt (at) gmail (dot) com]

Mentors: Arun Thomas and Ben Gras

Branch Info: [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=/branches/src.r7062.pkgsrc src.r7062.pkgsrc]

== About this page ==
This is the project page for the GSoC project 'Porting pkgsrc to Minix'.
Following is a brief overview of the project and the roadmap. This
page will also describe any progress made on the project.

== Abstract ==
The current Minix package manager - packman - does not scale to managing the
growing number of packages being ported to Minix. There is a need for a new
package manager. Pkgsrc seems to be the favorite. Pkgsrc, the NetBSD package
manager, has already been ported to several other platforms. This project aims to
port pkgsrc to Minix.

== Notes ==
The project can be divided into two parts:

=== Bootstrapping pkgsrc on Minix ===

Bootstrapping pkgsrc is done by running bootstrap/bootstrap script.
Three things have to be done for this:

* Modify bootstrap/bootstrap to identify the right settings for Minix (architecture, sed, awk programs etc)
* Modify mk/* and pkgtools/bootstrap-mk-files to suit Minix
* Port pkgtools/libnbcompat, pkgtools/pkg_install, pkgtools/digest, devel/bmake, net/tnftp to Minix.
  
=== Moving packages into pkgsrc ===
For most packages this should only involve applying any Minix specific patches
to the code and modifying the Makefile. Since pkgsrc already has a mechanism to
apply patches, this should be straight forward for most packages. Also, for most
packages, the order of porting does not matter because all libraries are
currently statically linked. Note that the process cannot be automated as
on one hand build.minix is a shell script with no special requirements about various
build stages and pkgsrc Makefiles have specific targets for each build stage.

== Misc Tasks ==
* pkg_radd
* pkg_chk
* pkg_rolling-replace
* Bulk builds
* Create locally-hosted git tree that tracks NetBSD's pkgsrc git repo
* Submit changes upstream to pkgsrc

== Resources ==
* https://www.netbsd.org/docs/pkgsrc/
* https://www.netbsd.org/docs/software/pkgviews.pdf
* https://wiki.netbsd.se/How_to_use_pkgsrc
* https://pkgsrc.se
* [[Porting Guide]]
* https://mail-index.netbsd.org/tech-pkg/
* https://mail-index.netbsd.org/tech-pkg/2010/05/08/msg005423.html
* https://mail-index.netbsd.org/tech-pkg/2010/06/15/msg005620.html
* [https://gitweb.dragonflybsd.org/pkgsrc.git Dragonfly Git mirror of Pkgsrc]
* [https://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/?only_with_tag=MAIN Pkgsrc CVS]
* https://groups.google.com/group/minix3/browse_thread/thread/60458753059ed86/c336885c2194bdd6
* https://groups.google.com/group/minix3/browse_thread/thread/e064c2d22460966/60461501f895df0d
* https://wiki.netbsd.se/How_to_use_pkgsrc_on_MINIX</text>
      <sha1>m0lppdlqdopx89wrwx3y5tvejzt6jtc</sha1>
    </revision>
  </page>
  <page>
    <title>Template:T</title>
    <ns>10</ns>
    <id>241</id>
    <revision>
      <id>355</id>
      <parentid>343</parentid>
      <timestamp>2021-09-14T14:24:57Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>use consistent case</comment>
      <origin>355</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="439" sha1="1vui4e33ki49vaqivzprmzaro2ykzgr" xml:space="preserve">&amp;#123;&amp;#123;[[{{{2|Template}}}:{{{1}}}|{{{1}}}]]}}&lt;noinclude&gt;
=== Usage ===
*&lt;code&gt;&amp;#123;&amp;#123;t|template name to display}}&lt;/code&gt;
=== Examples ===
*&lt;code&gt;&amp;#123;&amp;#123;t|DONE}}&lt;/code&gt; ''returns'' {{t|DONE}}
To link to a namespace other than the Template namespace, add an extra pipe after the page name:
*&lt;code&gt;&amp;#123;&amp;#123;t|User:Stux/sig|}}&lt;/code&gt; ''returns'' {{t|User:Stux/sig|}}
[[Category:Formatting Templates|{{PAGENAME}}]]&lt;/noinclude&gt;</text>
      <sha1>1vui4e33ki49vaqivzprmzaro2ykzgr</sha1>
    </revision>
  </page>
  <page>
    <title>User:Stux/sig</title>
    <ns>2</ns>
    <id>242</id>
    <revision>
      <id>344</id>
      <timestamp>2021-09-14T14:16:35Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>new signature</comment>
      <origin>344</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="39" sha1="3zt3vdedhbwbiorsrwkc4k6sgjkhbow" xml:space="preserve">[[User:Stux]] ([[User talk:Stux|talk]])</text>
      <sha1>3zt3vdedhbwbiorsrwkc4k6sgjkhbow</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Formatting Templates</title>
    <ns>14</ns>
    <id>243</id>
    <revision>
      <id>353</id>
      <parentid>346</parentid>
      <timestamp>2021-09-14T14:22:21Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <minor/>
      <comment>Stux moved page [[Category:Formatting templates]] to [[Category:Formatting Templates]]: fix case </comment>
      <origin>346</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="22" sha1="0t5jiibdq6k1tam9oy4zt1yld5iz80u" xml:space="preserve">[[Category:Templates]]</text>
      <sha1>0t5jiibdq6k1tam9oy4zt1yld5iz80u</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Main</title>
    <ns>14</ns>
    <id>244</id>
    <revision>
      <id>347</id>
      <timestamp>2021-09-14T14:19:23Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>new category</comment>
      <origin>347</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="50" sha1="e8lcyq1zbovkj1sie0r66fw243dn7p7" xml:space="preserve">This is the Main Category for all Wiki Categories.</text>
      <sha1>e8lcyq1zbovkj1sie0r66fw243dn7p7</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Maintenance</title>
    <ns>14</ns>
    <id>245</id>
    <revision>
      <id>348</id>
      <timestamp>2021-09-14T14:19:24Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>new category</comment>
      <origin>348</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="17" sha1="sir97j6uzt9ev2uyhaz1aj4i3spogih" xml:space="preserve">[[Category:Main]]</text>
      <sha1>sir97j6uzt9ev2uyhaz1aj4i3spogih</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Templates</title>
    <ns>14</ns>
    <id>246</id>
    <revision>
      <id>349</id>
      <timestamp>2021-09-14T14:19:26Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>new category</comment>
      <origin>349</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="24" sha1="it59vo5whwexpgslnlv8id1urubvc0x" xml:space="preserve">[[Category:Maintenance]]</text>
      <sha1>it59vo5whwexpgslnlv8id1urubvc0x</sha1>
    </revision>
  </page>
  <page>
    <title>Template:TODO</title>
    <ns>10</ns>
    <id>247</id>
    <revision>
      <id>350</id>
      <timestamp>2021-09-14T14:21:27Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>new template</comment>
      <origin>350</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="247" sha1="h4hdvnsrp0xn3ylv0wzba6d1pcok650" xml:space="preserve">☐&lt;noinclude&gt;

Simple TODO marker.  ([http://www.howtogeek.com/howto/28947/use-a-unicode-text-trick-to-make-lists-with-checkboxes/?PageSpeed=noscript checkbox source])
See 
*{{t|DONE}}
*{{t|WONTDO}}

[[Category:Formatting Templates]]
&lt;/noinclude&gt;</text>
      <sha1>h4hdvnsrp0xn3ylv0wzba6d1pcok650</sha1>
    </revision>
  </page>
  <page>
    <title>Template:DONE</title>
    <ns>10</ns>
    <id>248</id>
    <revision>
      <id>351</id>
      <timestamp>2021-09-14T14:21:29Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>new template</comment>
      <origin>351</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="99" sha1="dco3mudt5b8tu9vwsuz8y5vz4bbcdn2" xml:space="preserve">☑&lt;noinclude&gt;

Simple DONE marker.  See {{t|TODO}}.
[[Category:Formatting Templates]]
&lt;/noinclude&gt;</text>
      <sha1>dco3mudt5b8tu9vwsuz8y5vz4bbcdn2</sha1>
    </revision>
  </page>
  <page>
    <title>Template:WONTDO</title>
    <ns>10</ns>
    <id>249</id>
    <revision>
      <id>352</id>
      <timestamp>2021-09-14T14:21:31Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>new template</comment>
      <origin>352</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="112" sha1="14j19hg3s8fvyiydjtj584eu3p0oacy" xml:space="preserve">☒&lt;noinclude&gt;

Simple "cancel" (WONTDO) marker.  See {{t|TODO}}.
[[Category:Formatting Templates]]
&lt;/noinclude&gt;</text>
      <sha1>14j19hg3s8fvyiydjtj584eu3p0oacy</sha1>
    </revision>
  </page>
  <page>
    <title>Category:Formatting templates</title>
    <ns>14</ns>
    <id>250</id>
    <redirect title="Category:Formatting Templates" />
    <revision>
      <id>354</id>
      <timestamp>2021-09-14T14:22:21Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>Stux moved page [[Category:Formatting templates]] to [[Category:Formatting Templates]]: fix case </comment>
      <origin>354</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="44" sha1="nzeox2zbowq58e17vw1vuih1tvonnt0" xml:space="preserve">#REDIRECT [[:Category:Formatting Templates]]</text>
      <sha1>nzeox2zbowq58e17vw1vuih1tvonnt0</sha1>
    </revision>
  </page>
  <page>
    <title>Unix Domain Sockets</title>
    <ns>0</ns>
    <id>251</id>
    <revision>
      <id>356</id>
      <timestamp>2021-09-14T17:26:53Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2010:unixdomainsockets</comment>
      <origin>356</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="19143" sha1="0tph2jw3rfm668q02cr4ekxicha50oa" xml:space="preserve">Student: Thomas Cort

Mentor: Thomas Veerman

SVN branch name: [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=/branches/src.r7042.uds/ src.r7042.uds]

== Abstract ==

The goal of this project is to implement [https://en.wikipedia.org/wiki/Unix_domain_socket Unix Domain Sockets] in [https://minix3.org Minix3].

== Overview ==

The basic implementation of unix domain sockets was merged into trunk on July 15, 2010. It includes updates to the header files, man pages, tests, pfs, vfs, rs, and libc. Unix domain sockets support these functions: accept(2), bind(2), close(2), connect(2), dup(2), dup2(2), getnucred(2), getpeereid(2), getpeername(2), getsockname(2), getsockopt(2), ioctl(2), listen(2), mknod(2), read(2), readv(2), recv(2), recvfrom(2), recvmsg(2), select(2), send(2), sendmsg(2), sendto(2), setsockopt(2), shutdown(2), socket(2), socketpair(2), write(2), writev(2). The following programs were also updated: fsck(1), fsck1(1), MAKEDEV(8), and DESCRIBE(8).

After the basic implementation of unix domain sockets was merged, some advanced features were implemented. Those advanced features are file descriptor passing (SCM_RIGHTS), credentials passing (SCM_CREDENTIALS), and adding permission checking and path canonicalization to VFS.

== Current Status ==

=== Advanced Features ===

{| class="wikitable"
! Done !! Item !! Percentage Complete !! Comments
|-
| {{DONE}} || file descriptor passing via msg_control || 100% ||
|-
| {{DONE}} || credentials passing via msg_control || 100% ||
|-
| {{DONE}} || permission checking and path canonicalization in VFS || 100% ||
|}

=== Testing / Porting Efforts ===

We want to test as many applications as possible that use Unix domain sockets. If you know of any not on the list, please add them.

{| class="wikitable"
! Done !! Item !! Percentage Complete !! Comments
|-
| {{DONE}}  || pure-ftpd || 100% || I ported pure-ftpd to minix3. It uses unix domain sockets to pass file descriptors between processes for privilege separation. I did some basic tests (login, upload a file, download a file, and log out), and it seems to be working just fine. I enabled the debugging messages in pfs and verified that it was indeed passing file descriptors successfully. The next step is to create some patches.
|-
| {{DONE}}  || rsync || 100% || rsync uses unix domain sockets instead of pipes when socketpair() is available "because of blocking issues on pipes" (util.c). I built rsync.6.7 from bigports, and I rsync'd with a Gentoo Linux mirror as a test. To confirm that rsync really was using unix domain sockets I enabled the debugging messages in pfs and watched the messages scroll by during the rsync.
|-
| {{TODO}}  || proftpd || 75% || I have proftpd running on minix. I can connect with ncftp from a linux box and transfer files to/from minix. mod_ctrls, a module that uses unix domain sockets, is failing. It appears that it tries to bind() and listen() twice on the same address (sun_path). I need to investigate if a change I made while porting proftpd is causing the problem, if there is a bug in proftpd, or if there is a bug in my UDS implementation.
|-
| {{TODO}}  || X11 || 42% || The goal is to compile a working version of X with unix domain sockets support. To configure this I edited xc/config/cf/minix3.cf, setting !ConnectionFlags to -DUNIXCONN. I ran into build failures [https://gforge.cs.vu.nl/gf/project/minix/tracker/?action=TrackerItemEdit&amp;tracker_item_id=516], [https://gforge.cs.vu.nl/gf/project/minix/tracker/?action=TrackerItemEdit&amp;tracker_item_id=517]. Eventually I got it to compile. X starts with a grey screen, data is being sent/recv via UDS, and I can move the mouse, but the login screen doesn't come up.
|-
| {{TODO}}  || postfix || 8% || The goal is to port postfix to minix3. This involves defining some preprocessor macros and compile options. postfix comes with a nice PORTING document. src/util/inet_addr_local.c requires either SIOCGLIF or SIOCGIFCONF socket ioctls.
|-
| {{TODO}}  || clamav || 5% || The goal is to port clamav to minix3. ./configure completed and it compiled a bunch of stuff with a few header fixes, but then I got assembler errors on libclamav/str.c saying "cannot represent relocation type" for types BFD_RELOC_386_GOT32, BFD_RELOC_386_PLT32, and BFD_RELOC_386_GOTOFF. There are a few things for me to look at, so this may not be a lost cause yet.
|-
| {{TODO}}  || vsftpd || 5% || The goal is to port vsftpd to minix3. The main use of unix domain sockets in vsftpd is file descriptor passing (see sysdeputil.c), so this is on hold until that's implemented.
|-
| {{TODO}}  || openssh || 0% || The goal is to enable the unix domain sockets code that's ripped out in the minix port. Not started yet.
|-
| {{TODO}}  || asterisk || 0% || On the Google group Tom Chandler reported that asterisk uses UDS. He experienced problems running asterisk on Minix 3.1.8-dev and will send another e-mail with more information.
|-
| &lt;:(  || syslog-ng || 0% || Requires glib2. There is no packman package for glib2, but I found one on [https://www.marcoslot.net/minix.htm Marco Slot]. The syslog-ng configure script gets a little further, but then I get this error: "Glib headers inconsistent with current compiler setting. You might be using 32 bit Glib with a 64 bit compiler". I tried using pkgsrc to compile glib2, but it too failed.
|}


== Status Reports ==

=== Report -1 (29-Mar-2010 to 9-Apr-2010) ===

This is the Google Summer of Code application period. During this time I developed a project proposal and completed the goat-sheep project. The goat-sheep project involved reading parts of the libc library, vfs server, pfs server, and inet server and answering questions. During this time I developed a test program on Linux to test the functionality and POSIX compliance of the unix domain sockets implementation. That program will eventually be used to test the implementation of unix domain sockets in minix.

=== Report 0 (26-Apr-2010 to 23-May-2010) ===

This is the Google Summer of Code [http://googlesummerofcode.blogspot.com/2007/04/so-what-is-this-community-bonding-all.html community bonding period]. During this time I created accounts on the [https://wiki.minix3.org/ wiki] and [https://gforge.cs.vu.nl/ gforge],  subscribed to the [https://groups.google.com/group/minix3 minix3] Google group and the Summer of Code Students Google group, began following [https://twitter.com/minix3 @minix3] on [https://twitter.com twitter], and started hanging out on the #minix IRC channel. I [[Running on Qemu (and KVM)|setup]] a [https://www.qemu.org/ QEMU] virtual machine and have it [[Tracking Current|updated]] to the latest SVN trunk revision. I also did some studying. I read [https://www.minix3.org/theses/veerman-dynamic-updates.pdf Dynamic Updates and Failure Resilience for the Minix File Server] and [[VFS-FS Protocol|VfsFsProtocol]]. I read and documented the [[PFS]] source code. I also [https://gforge.cs.vu.nl/gf/project/minix/tracker/?action=TrackerItemEdit&amp;tracker_item_id=471 reported] [https://gforge.cs.vu.nl/gf/project/minix/tracker/?action=TrackerItemEdit&amp;tracker_item_id=473 bugs]. I [https://lists.gnu.org/archive/html/bug-ed/2010/msg00000.html ported] [https://www.gnu.org/software/ed/ GNU ed] to minix to help familiarize myself with some of the differences between ACK &amp; minix and GCC &amp; Linux. I worked on improving my Unix Domain Sockets test program too. Specifically I added more comments, cleaned up some of the code, and made it integrate better with the existing test suite by using the functions defined in ''test/common.c''.

=== Report 1 (24-May-2010 to 30-May-2010) ===

I began the project by reading the specification / design document provided by my mentor. I implemented the header file changes and created stubs for sendmsg(2), recvmsg(2), and socketpair(2) in libc that I will fully implement later in the project. I implemented getpeereid(2) and getnucred(2) in libc and created man pages for the two functions. I also created skeleton man pages for the other socket functions that I will complete as go (for example, when I implement socket(2) for unix domain sockets I'll finish the socket(2) man page). Additionally, I imported my UDS test program. Then I spent some time reading about minix drivers and how to connect them to device files. I created /dev/uds and got it connected to PFS. I modified PFS to handle both file system messages and device messages. I modified socket(2) to open /dev/uds when a unix domain socket is needed. I added open and close functions in PFS to handle socket(2) and close(2). The open and close functions are partially complete and I will finish them by the next report. Also by the next report I hope to have several other socket functions implemented (bind(2), listen(2), accept(2), etc). 

=== Report 2 (31-May-2010 to 6-Jun-2010) ===

This week I finished implementing unix domain socket support for socket(2) and close(2). I implemented unix domain socket support for bind(2), listen(2), getpeername(2), and getsockname(2). I wrote documentation for those functions in the form of man pages. To support the implementation of those functions I made modifications which allow mknod(2) to create socket files. I also added an ioctl(2) handler to PFS. By the next report I hope to have connect(2) and accept(2) completed and begin work on read(2) and write(2).

=== Report 3 (7-Jun-2010 to 13-Jun-2010) ===

This week I implemented socketpair(2) and shutdown(2). I also implemented part of connect(2) and did a tiny bit of accept(2). I spent some time reading about how processes are suspended while waiting for I/O. I began working on read(2) and write(2) for unix domain sockets in PFS. By the next report I hope to have connect(2) and accept(2) completed. I also hope to have read(2) and write(2) working for SOCK_STREAM unix domain sockets.

=== Report 4 (14-Jun-2010 to 20-Jun-2010) ===

This week I spent my time working on accept(2)/connect(2) and read(2)/write(2). I had trouble getting the suspend and revive parts working properly. Revive didn't work as I expected, so I spent some time going down the wrong path. I'm back on track now and will hopefully have the four functions accept(2), connect(2), read(2), and write(2) completed by the next report. I also hope to start working on dup(2).

=== Report 5 (21-Jun-2010 to 27-Jun-2010) ===

This week I finished accept(2) and connect(2). I got read(2), write(2), sendto(2), and recvfrom(2) working for SOCK_STREAM and SOCK_SEQPACKET unix domain sockets. I also implemented send(2) and recv(2). After some testing I discovered that dup(2) and dup2(2) are handled in the VFS and just work. With this week's work I was able to enable several more tests. I hope to complete the read/write/send*/recv* functions by the next report. I'd also like to get started on setsockopt(2) and getsockopt(2).

=== Report 6 (28-Jun-2010 to 4-Jul-2010) ===

This week I finished read(2), write(2), sendto(2), recvfrom(2), setsockopt(2), and getsockopt(2). I updated the fsck and fsck1 commands to handle I_UNIX_SOCKET files so that they don't give "bad mode" errors on socket files. I also went through all of my code adding comments and cleaning up the rough spots. For next week I hope to finish select(2) and get a good start on sendmsg(2) and recvmsg(2). I will also look into compiling X11 with unix domain socket support.

=== Report 7 (5-Jul-2010 to 11-Jul-2010) ===

This week I finished select(2) and a basic implementation of sendmsg(2) and recvmsg(2). Currently sending/receiving control data is unsupported by sendmsg(2) and recvmsg(2). After the unix domain sockets code is merged into trunk the plan is to start working on advanced features that use the control data part of msghdr (example: socket descriptor passing, etc). I also finished writing man pages for the socket functions this week. My test program, test56, has tests for every socket function, and the tests pass.

Towards the end of the week I started looking into trying out real world applications that use unix domain sockets. I tried installing the X11 package on my system with packman to see if X worked before attempting to compile it from source with UDS support. It didn't work, and it took down the whole system when I ran startx. I also looked at re-compiling python since it has unix sockets support and some unit tests. I got a linker error when linking libpython due to a problem with Berkley DB. I then tried compiling Berkley DB and got a linker error there too. I also tried the latest fltk-2.0.x so that I could try building dillo. I extracted the patch from bigports in svn and applied it to the new sources. I tried to compiling fltk and got a compiler error. I didn't look deeply into any of the errors I got because I was hoping to just find something that worked out of the box.

By the next status report I will update the [[PFS]] document to describe how unix domain sockets are implemented in PFS. I will also look into some of the errors I encountered this week, and I will begin working on some advanced features.

P.S. For fun I threw together a little application called [https://tomcort.com/src/udspong.tar udspong]. It's an ncurses based 'screensaver' that features a bouncing ball. There is a process to draw the ball and a process to calculate the ball's next position. The two processes communicate over unix domain sockets.

=== Report 8 (12-Jul-2010 to 18-Jul-2010) ===

My unix domain sockets implementation was merged into trunk this week :-D

This week I tried troubleshooting my problems with X11. I couldn't get the built-in i810 video to work nor could I get a Trident PCI card to work. I tried both with their respective dirvers and the vesa driver. I assume it is either a bug or there was something it didn't like about my monitor / monitor settings. I didn't want to take away too much of my time from my minix development, so I gave up and installed minix inside a QEMU virtual machine on Linux with kvm enabled. I got X running and I'm ready to try re-compiling X with support for unix domain sockets next week.

This week I also updated my test program to be able to run as the 'bin' user. In addition, I changed the paths of the test files so that nothing outside the /usr/src/test directory is touched. It revealed a bug in the way credential passing was implemented. pfs was using the endpoint from the incoming device message (dev_m_in-&gt;IO_ENDPT) to identify the socket own. I found out that dev_m_in-&gt;IO_ENDPT isn't always the socket owner's endpoint. For example, the socket owner's endpoint is stored in dev_m_in-&gt;POSITION for IOCTLs.

By the next status report I will update the [[PFS]] document to describe how unix domain sockets are implemented in PFS, I will try compiling X with support for unix domain sockets, I will discuss the next steps with my mentor (implementing advanced features like passing file descriptors over unix domain sockets), and I will begin developing a test program in Linux to test the advanced features.

=== Report 9 (19-Jul-2010 to 25-Jul-2010) ===

This week I added some additional tests to test56 to ensure that things were working properly. I also updated documentation on the wiki ([[PFS]] and [[VFS-FS Protocol]]). I met with my mentor. The next steps for this project are testing packages that use unix domain sockets and implementing file descriptor passing.

I started testing applications that use unix domain sockets this week. A listing is at the top of the page. So far rsync works. Most of the other applications either use file descriptor passing or need features that minix doesn't have yet.  By the next status report I hope to have a few packages that use unix domain sockets ported to minix and working. I also hope to get started on file descriptor passing. I found a BSD licensed library [https://www.normalesup.org/~george/comp/libancillary/ libancillary] that implements file descriptor passing. It includes a nifty test program. I'll use it to test my implementation of file descriptor passing.

=== Report 10 (26-Jul-2010 to 1-Aug-2010) ===

This week I did a little more porting work. Because of the pkgsrc GSoC project, the C library has been getting some new functions, like poll(2), which make porting a lot easier. I've also been studying the VFS. I added 5 functions to VFS that will be used for file descriptor passing. By the next status report I will add support for PFS to call those VFS functions. There are a few other changes I still need to make to the VFS. The goal is to have file descriptor passing working by the next status report.

=== Report 11 (2-Aug-2010 to 8-Aug-2010) ===

This week I worked on PFS and VFS. I got the nested calling working so that PFS can call a predefined set of functions in VFS. The message protocol is documented above. The documentation will be moved to its own wiki page when code is merged into trunk. In check_perms() I have the permissions checking working, I got a start on canonicalizing the socket file path with the help of my mentor, and I made some updates to uds_bind() in pfs to call check_perms().

There is only a little over a week left in the Google Summer of Code program, and my goal is to finish the advanced UDS features. To finish I need to complete adding path canonicalization to VFS for check_perms(), add calls to check_perms() in a few places in pfs, make some libc changes, add functions in pfs to handle control data to implement file descriptor passing, add code to prevent an in-flight filp from being closed, and add some tests to test56.

=== Report 12 (9-Aug-2010 to 15-Aug-2010) ===

This week I finished adding path canonicalization to VFS for check_perms(), I added calls to check_perms() in a few places in pfs, I made some libc changes, I added functions in pfs to handle control data to implement file descriptor and credentials passing, I added code to prevent an in-flight filp from being closed, and I added an SCM_CREDENTIALS test to test56.

There's only one day left in Summer of Code; the official end time is 19:00 UTC on August 16. On my last day I plan on adding tests to test56 to test file descriptor passing. With the remaining time I'll port/test applications that uses file descriptor passing.

=== Report 12.1 (16-Aug-2010) ===

Since Report 12, I've added a file descriptor passing test to test56. In the test there are two processes A and B. A opens a file, A passes the file descriptor to B, B writes a message to the file using the file descriptor from A, B closes the file, B let's A know it's done writing to the file, A seeks to the start of the file and reads the message, A confirms that B wrote the right message, and finally A closes the file.

Today I also ported pure-ftpd to minix3. It uses unix domain sockets mainly for file descriptor passing. I did some work on the wiki too ([[PFS-VFS Protocol|The PFS-VFS protocol]]).

Post-GSoC I plan on doing some more porting work. During GSoC I only had time to get 2 packages working on minix3 (pure-ftpd and rsync). I'll be starting with X11, postfix, and proftpd. I also plan on preparing and submitting patches for pure-ftpd.</text>
      <sha1>0tph2jw3rfm668q02cr4ekxicha50oa</sha1>
    </revision>
  </page>
  <page>
    <title>Multiboot Compliance</title>
    <ns>0</ns>
    <id>252</id>
    <revision>
      <id>360</id>
      <parentid>359</parentid>
      <timestamp>2021-09-14T17:47:39Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* Week #1 */ fix formatting</comment>
      <origin>360</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="9780" sha1="rxmmt5jwqgn5loh7pugpj735k29v417" xml:space="preserve">Student: Feiran Zheng

Mentor: Erik van der Kouwe

SVN branch name: [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=%2Fbranches%2Fsrc.r7906.fam%2F src.r7906.fam]

== Contents ==

== Abstract ==

This page is for GSoC-2010 project "Making MINIX Multiboot Compliant". It it to be updated during the following several months for tracking the work progress and also for documentation.

== Project Idea ==

Currently, MINIX 3 has its own boot loader (Boot Monitor, BM for abbreviation) , but it is quite old and has some serious limitations. We are going to change the booting structure to use a modern boot loader such as GRUB 2 (without chainloading).

== A Comparison between Boot Monitor and GRUB ==

A document comparing current boot monitor and GRUB is made, trying to specify the main differences, and giving a brief introduction to how to make the image compatible in the last section. Follow the link below to check details.

[[From Boot Monitor To GRUB (Multiboot Compliance Project)|FromBootMonitorToGRUB]]

== Boot Parameters when Using GRUB ==

The Multiboot support of MINIX automatically determines all the necessary parameters such as &lt;code&gt;rootdev&lt;/code&gt;, &lt;code&gt;memory&lt;/code&gt; and others those are listed with &lt;code&gt;sysenv&lt;/code&gt;. An exception is &lt;code&gt;image&lt;/code&gt;, since from the boot information that GRUB provides, the loaded image file name can't be retrieved. As a result GRUB users should better specify the value of &lt;code&gt;image=&lt;/code&gt; with GRUB command line, if they are booting an image file other than &lt;code&gt;/boot/image_latest&lt;/code&gt;. If not, this file name is given by default. On the other hand, any parameter value can also be overridden in the same way.

To set boot parameter values in GRUB, simply append parameters to the &lt;code&gt;multiboot&lt;/code&gt; command line when booting MINIX. For example to designate the value of &lt;code&gt;image&lt;/code&gt; with &lt;code&gt;/boot/image_latest&lt;/code&gt;, and value of &lt;code&gt;rootdev&lt;/code&gt; with 896, modify the &lt;code&gt;multiboot&lt;/code&gt; command as follows:

&lt;code&gt;multiboot /boot/image_latest image=/boot/image_latest rootdev=896&lt;/code&gt;

(Refer to [[Multiboot Howto (Multiboot Compliance Project)|Multiboot Howto]] for more context.)

No parameter is required for a normal boot of MINIX, but it is sometimes helpful to specify values such as cttyline and rootdev for test purpose. So only do this when you need to.

== Status ==

Basic multiboot support has been merged into the MINIX trunk. When using MINIX trunk (since r7906), you can boot newly created images in /boot/image using a multi-boot compliant bootloader that supports the MINIX 3 filesystem and MINIX-style subpartitions. To boot the newest image, specify /boot/image_latest. This file is a hard link to the newest image and is updated automatically when a new image is installed. 

There currently are no multi-boot compliant bootloaders that support the MINIX 3 filesystem and MINIX-style subpartitions. We are working on getting a patch in GRUB 2. The patch can already be used if you compile GRUB yourself, and is found here: [https://www.cs.vu.nl/~vdkouwe/minix/multiboot/grub_minix.patch Minix 3 subpartition/filesystem patch].

Here's a brief introduction to the steps to compile and configure GRUB to test the Multiboot kernel: [[Multiboot Howto (Multiboot Compliance Project)|Multiboot Howto]]

== Progress reports ==

=== Preparing and Applying Period (2010-3-1 to 2010-4-15) ===
Since a month earlier before the application period of GSoC 2010 began, I started preparing for applying GSoC. By reading the book, following posts in group list and testing MINIX in VM I learned much about it and finally completed the application successfully on 26th April. 

=== Community Bonding Period (2010-4-26 to 2010-5-24) ===
Period for students to get familiar with the project and organization.
After several times of discussion with Erik, the basic ideas have become clearer. The comparison between BM and GRUB and a brief to how to carry out the change have been documented as the link above points. A branch in SVN repository has been set up for the project, a development environment with virtual machine softwares under Linux is ready too.

=== Week #1 ===
The mid term goals are roughly two:
*The multi-boot implementation must support passing boot configuration parameters to MINIX as it does with the boot monitor;
*The primary focus is on GRUB 2, which must be capable of booting a default MINIX installation (for now that probably means sub-partitioned MFS) without chainloading;

Consequently, we have four things to do to reach that, they are orderly as following:
# setup GDT
# setup stack
# save parameters to a global variable, so that latter kernel may read it
# extract and initialize program segments in image_mb

The first two of these have been done in this week. The third one is on his way: about half of the parameters which MINIX needs are now available, the rest are to be done.

Besides the MINIX SVN repository branch, I've created a ''github'' page at 
[https://github.com/famousz/multiboot/ GithubPage]
to track developing, building and testing configurations and scripts as well as modified source code. Changes are commited regularly there.

=== Week #2 ===
This week I continue on previous work with boot parameters parsing. Now All the typical parameters in 'sysenv' are present in a buffer, which can be later passed to kernel. The var 'bus', 'video' and 'chrome' are hard coded to 'at', 'ega' and 'color', as other options of them are very unlikely possible or valid. 

It seems we can't get image filename to set 'image=' from multiboot specification, as a result, it's a dummy value now, unless assigned by grub cmdline parameter (e.g. grub&gt;multiboot /boot/image_mb image=/boot/image_mb ).

=== Week #3 ===
In this week all four subtasks are done and the system can now be booted by GRUB Multiboot. The remaining problem concerns system shutdown. Reboot/poweroff command cannot perform correctly for the non-presence of Boot Monitor, so these functionalities have to be implemented in kernel code, which involves returning to real mode and do some BIOS calls.

=== Week #4,#5 ===
When testing the compiled kernel, a few problems were encountered, such as cannot detecting the rootdev automatically and not parsing the parameters denoted with GRUB command line correctly. By now these two bugs have been tested and fixed, but there is another remaining problem with kvm on QEMU: it doesn't boot normally, but resets the VM very quickly instead. My following work will be solving this and write a detailed guide on how to setup a VM to compile and test the Multiboot compliant MINIX kernel.

=== Week #6 ===
Debug on a new machine that supports KVM, a bug that prevents KVM to Multiboot the kernel correctly is fixed, so we can boot up KVM now.

=== Week #7,#8 ===
There were several library functions such as strlen, strncmp, strcpy etc. that didn't work with Multiboot pre_init code, and those were all re-implemented locally. Lately I debugged the library functions and found the reason, it was where they use registers such as EDI that address in ES segment by default, the library makes assumption that ES addresses the same segment as DS, but our ES here are set to 4GB plain segment. However the difference will not result in any exception so the library function call will return, after R/W unexpected memory. 

To make the library functions work, we set ES equal to DS in asm before entering pre_init, and restore it after pre_init returns. This is OK because only phys_copy needs plain memory access and this function itself takes care of ES (saving, loading and restoring).

The library function itoa uses two global variables that are in BSS, which is not initialized yet here, so we mustn't call this. As a result mb_itoa comes up.

Formerly, poweroff was a functionality of boot monitor, which returns to real mode and do BIOS call to shutdown the power. Boot monitor is no longer available for our Multiboot kernel, so the poweroff function is now implemented in kernel. The procedure is similar, except copying a small piece of code into below 1MB which will be jumped to after switch back to real mode and executed for BIOS calls. It works perfectly in QEMU without KVM, but in some cases can't close the VM when KVM enabled, which needs further debugging.

A patch for GRUB to support Minix subpartition and MFSv3 was sent to GRUB mailing list recently, although no response yet. A wiki page that describes how to test Multiboot feature of MINIX is being prepared too.

=== Week #9, #10 ===
Continue improving the GRUB patch as suggested by its developer. Was asked to send a copyright assignment for making contribution to the GRUB file system modules. When I completed the request they have acquired, a document to sign was emailed to me, which I'm supposed to fill, before the contribution is accepted.

The previous branch for Multiboot was merged into trunk earlier, so there's a new branch now. Most of the new features are in trunk and ready to use at the moment. Erik and I have made some wiki pages (see above) as a guide to install and test Multiboot of MINIX, including how to compile a patched GRUB 2 to read MINIX subpartitions. If the patch is accepted by GRUB and released in a future version, it'll be easier to do this.

The command &lt;code&gt;reboot&lt;/code&gt; was mapped to poweroff earlier, but now it's changed to soft reset of CPU. &lt;code&gt;Shutdown&lt;/code&gt; performs a returning to Boot Monitor if booted from it, but for Multiboot it's not possible. So it's mapped to poweroff. Similarly, the parameter of reboot code for &lt;code&gt;reboot&lt;/code&gt; command is ignored unless when the parameter contains substring "boot", in which case it's mapped to soft reset (the same strategy with reboot).</text>
      <sha1>rxmmt5jwqgn5loh7pugpj735k29v417</sha1>
    </revision>
  </page>
  <page>
    <title>From Boot Monitor To GRUB (Multiboot Compliance Project)</title>
    <ns>0</ns>
    <id>253</id>
    <revision>
      <id>361</id>
      <timestamp>2021-09-14T17:50:50Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2010:multiboot:frombootmonitortogrub</comment>
      <origin>361</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="6654" sha1="so90l3tp4botqbf17btf5hukfeh7z7e" xml:space="preserve">== Abstract ==
In order to get the project of Multiboot Compliance easier, this document will demonstrate the differences between current Minix Boot Monitor (BM) and GRUB2 (as a main representative of Multiboot loaders), followed by a brief to the idea of how to change the kernel to a Multiboot compliant one.

== Comparison between Minix Boot Loader and GRUB 2 ==
As a reference for the work of making Minix Multiboot compliant, this page is focusing on two things. One is the comparison of states of the kernel loaded by each loader, such as the memory layout and register values. The other is about the differences of the initializing operation taken by the kernel start up code. We will not specify much about the comparison of commands and features of both loaders, as long as they have no affect on the above two things. Either we won't talk about the commons of two loaders.

This section will discuss the differences in these aspects:
* Memory layout
* Initial register values
* Stack
* GDT
* Boot parameters

=== Memory layout ===
With the addresses and length designated in Multiboot header in image, GRUB can load a continuous part or the whole file into given place. (Except for ELF images, multiple sections can be loaded into separate addresses, which Minix doesn't support and we don't consider for now.)
BM accepts a special tar-style kernel image that is made of multiple a.out files, and loads each segment of the programs according to its a.out header(also initializes bss and stack segments). Now we have more than ten programs in kernel image, which are loaded independently. More precisely, kernel is loaded at address 0x800 and the others above 1MB. The memory layout is incontinuous. One more thing to notice is that BSS and STACK segments are not directly present in an executable image, but must be properly initialized together with the other segments. That's what GRUB doesn't do.
So here's our first obstacle: GRUB intact copy image file into continuous address. While BM loads programs separately and initializes segments for each.

=== Initial register values ===
We compare by matches of conditions.

*MINIX kernel has no assumption on GP register from BM, but saves EBP, ESI and EDI for possible returning to monitor. 
*GRUB puts magic value '0x2BADB002' in EAX and the address of Multiboot information structure in EBX. Other GP registers are undefined.

* For BM the stack pointer ESP is pointing to a stack containing specific boot parameters.
* ESP is not valid for GRUB.

* GDTR is set up by BM, which kernel saves for copying GDT. 
* GDTR is not valid for GRUB.
 
* States of segment selectors are a bit more complicated, DS points to the data segment of kernel, but ES is a flat 4GB selector, which is necessary to copy GDT. Other selectors are not used before initialized.
* All segment registers are flat 4GB segments (code segment for CS and data segments for others), but exact values are undefined. And we can't use any of their values since GDT isn't defined either.

=== Stack ===
BM passes his stack to Minix kernel, which contains return address and boot parameters. More precisely, top down items on the stack are:
* monitor return address
* boot parameters offset
* boot parameters length
* address of a.out headers

GRUB doesn't provide any stack for kernel.

=== GDT ===
Kernel copies the GDT to its own table and further initializes it. Entries are in fixed order (indices can be found in /usr/src/kernel/arch/i386/include/archconst.h), some of them are flat 4G segments and others are limited and related to kernel location.

According to the specification, GRUB doesn't provide an available GDT.

=== Boot parameters ===
Though in different format, both loaders provide boot information parameters to kernel. As discussed above, BM puts the parameters on stack while GRUB put the parameter structure's address in EBX.
Typical BM parameter names are listed below
* rootdev - Root device
* ramimagedev - Device to use as RAM disk image
* ramsize - RAM disk size (if no image device)
* hz - Clock frequency, it's a constant of 60 for IBM-PC
* processor - Processor family
* bus - System bus type, options are "xt", "at" and "mca"
* video - Video mode, options are "mda", "cga", "ega" and "vga"
* chrome - Color mode, can be "Mono" or "color"
* memory - Available memory regions for kernel.
* image - Name of the boot image to use

Multiboot information structure from GRUB has three most useful values:
* memory
* boot device
* kernel cmdline (e.g. the 'root=XXX vga=YYY' parameter when booting Linux)
The first two can be easily converted into BM parameters "memory" and "rootdev".

== Making Minix kernel Multiboot compliant ==

We want to make current Minix kernel image Multiboot compliant, and on the other hand make no big influence on the functions of existing boot programs (bootblock and boot monitor). I.e. with minor changes of the kernel image, both GRUB and current BM can load and execute Minix image, without chainloading.

For doing this, we must first make the kernel image recognized and accepted by GRUB as a Multiboot kernel. It's an easy job, all we have to do is inserting a defined header which contains a magic number and some address fields. 

With the header near the beginning of file, the image can be loaded into memory by GRUB, as a whole and a continuous piece. Since the kernel needs each program placed in proper location and its segments initialized, and as GRUB won't do this for us, we have to write a short piece of code (we call it pre-init code here) right after the entry of image: When GRUB starts the execution of our kernel, there must be an extraction of programs and initialization of segments (which should already be done if booted by BM).
But before that, we must have something else done. GDT and selectors are freshly initialized here, otherwise kernel cannot access its data. This is essential so that it's good to go first.

Besides, we need everything else in expected state too. One of the most important is the boot parameters, which is passed by GRUB. We should ensure they are properly saved in a safe place before writing memory so as not to overwrite them, and they are eventually converted to the format that kernel likes. This may also involve initializing a temporary stack, which is not provided by GRUB.
After all of these work, a jump to the real entry of kernel comes, from when almost no change is needed. Except that kernel must be informed not to try to return to BM if it's loaded by GRUB. 

Of course, above pre-init things won't happen at all if BM is the loader, which is quite easy to detect by the magic number passed in EAX.</text>
      <sha1>so90l3tp4botqbf17btf5hukfeh7z7e</sha1>
    </revision>
  </page>
  <page>
    <title>Multiboot Howto (Multiboot Compliance Project)</title>
    <ns>0</ns>
    <id>254</id>
    <revision>
      <id>362</id>
      <timestamp>2021-09-14T17:59:31Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2010:multiboot:howto</comment>
      <origin>362</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4248" sha1="hebzxgnti62gthl8b230aoecd1xovuo" xml:space="preserve">&lt;!&gt; When following the instructions in this manual you will install a bootloader, which may leave some or all of the operating systems installed on your computer unbootable if done incorrectly. Only continue if you know what you are doing, be sure to back up important data first.

There currently are no multi-boot compliant bootloaders that support the MINIX 3 filesystem and MINIX-style subpartitions. To Multiboot load MINIX kernel we need a patched version of GRUB. This page describes how to compile and install GRUB and Multiboot MINIX 3 with it. This procedure was tested on Ubuntu 10.4 (Lucid Lynx) 32-bit desktop edition; commands to install packages may be different on other distributions and GRUB 2 may not be installed on old versions (9.10/Karmic Koala should be ok though).

&lt;ol&gt;
&lt;li&gt; Prepare your machine (or VM). Install both MINIX 3 and Linux (for example Ubuntu), late versions are better. GRUB 2 is supposed to be installed along with your Linux. When they are properly installed, you should be able to chainload MINIX bootloader with GRUB, and access internet to get MINIX and GRUB source for compile.
If your MINIX is older than revision 7906, checkout the latest trunk code and &lt;code&gt;make world&lt;/code&gt; (see [[Tracking Current]]). Or you can download and install the "current development" image, which already supports Multiboot itself. It's found here: https://www.minix3.org/download/ &lt;/li&gt;
&lt;li&gt;Get GRUB source: Install bzr in Linux (Ubuntu: &lt;code&gt;sudo apt-get install bzr&lt;/code&gt;) and type
&lt;pre&gt;
bzr branch -r 2547 https://bzr.savannah.gnu.org/r/grub/trunk/grub/
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Download the patch ([https://www.cs.vu.nl/~vdkouwe/minix/multiboot/grub_minix.patch grub_minix.patch]) for MINIX support, apply it on the source tree (patch is a command that may need to be installed in your Linux manually, for Ubuntu: sudo apt-get install patch):
&lt;pre&gt;
cd grub &amp;&amp; wget -O - https://www.cs.vu.nl/~vdkouwe/minix/multiboot/grub_minix.patch | patch -p0
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt; Compile and install GRUB (some tools are needed to compile it, read &lt;code&gt;./INSTALL&lt;/code&gt; in GRUB source; on Ubuntu the following should be enough to get all dependencies:
&lt;pre&gt;
sudo apt-get install gcc make bison gettext binutils flex libdevmapper-dev libncurses5-dev libusb-dev libsdl1.2-dev ruby python autoconf automake

./autogen.sh
./configure
make
sudo make install
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt; Install GRUB on your harddisk (this assumes the first harddisk, change the &lt;code&gt;a&lt;/code&gt; into &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;c&lt;/code&gt;, &lt;code&gt;d&lt;/code&gt;, ... for other disks; you may need to replace the &lt;code&gt;s&lt;/code&gt; with &lt;code&gt;h&lt;/code&gt; on some systems):
&lt;pre&gt;
sudo grub-install /dev/sda
&lt;/pre&gt;
You can see the message "''Installation finished. No error reported''" if it's successful.&lt;/li&gt;
&lt;li&gt; To make it a bit easier, add a menu entry to GRUB.

The root command must be adjusted according to the value printed with &lt;code&gt;rootdev&lt;/code&gt; in MINIX. For example if your installed MINIX in /dev/c0d0p1, the command is root (hd0,msdos2,msdos1). There are two potential pitfalls here: (1) GRUB 2 counts partitions starting at one, while MINIX and previous versions of GRUB counted from zero and (2) if the partition sequence in the partition table does not correspond with the on-disk sequence or if partion table slots are skipped, partition numbering differs between operating systems and bootloaders and may be hard to predict.

If you have difficulty in determining the &lt;code&gt;root&lt;/code&gt; command parameter, you can also try to press 'c' in GRUB menu to get a prompt, and type &lt;code&gt;ls -l&lt;/code&gt; to list all recognized partitions. The MINIX partitions will look like &lt;code&gt;(hdY,msdosX,msdos1)&lt;/code&gt;, &lt;code&gt;(hdY,msdosX,msdos2)&lt;/code&gt; and &lt;code&gt;(hdY,msdosX,msdos3)&lt;/code&gt;, where &lt;code&gt;X&lt;/code&gt; and &lt;code&gt;Y&lt;/code&gt; are arbitrary numbers and types of all three are &lt;code&gt;minix3&lt;/code&gt;. If you see partitions in this style, the listed &lt;code&gt;(hdY,msdosX,msdos1)&lt;/code&gt; should be the right parameter, try with it.
&lt;pre&gt;
sudo tee -a /usr/local/etc/grub.d/40_custom &gt; /dev/null
menuentry 'Multiboot kernel' {
 	  root (hd0,msdos1,msdos1)
 	  multiboot /boot/image_latest
}
   
&lt;CTRL-D&gt;
   
sudo update-grub
&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Now reboot and you can use GRUB to load MINIX directly!&lt;/li&gt;
&lt;/ol&gt;</text>
      <sha1>hebzxgnti62gthl8b230aoecd1xovuo</sha1>
    </revision>
  </page>
  <page>
    <title>Debugger Support</title>
    <ns>0</ns>
    <id>255</id>
    <revision>
      <id>364</id>
      <timestamp>2021-09-19T12:19:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2011:debugger</comment>
      <origin>364</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12605" sha1="1061ke6lchywf7t6lfhfs8ln9teq4fi" xml:space="preserve">Student: Adriana Szekeres

Mentor: Arun Thomas

git repository: [https://git.minix3.org/?p=minix-debugger.git;a=log;h=refs/heads/debugger minix-debugger] and [https://git.minix3.org/?p=pkgsrc.git;a=log;h=refs/heads/minix-master pkgsrc]

== Abstract ==
The project involves porting GNU Debugger to MINIX 3 and implementing core dumping support for MINIX 3.

== Current Status ==

=== GDB's functionality ===

{| class="wikitable"
! Done !! Functionality !! Comments
|-
| {{DONE}} || backtrace || Had just a problem: it tried to read from I, instead of D (even though I&amp;D are not separate, reading the stack with I doesn't work, because the stack is not executable: safety measure!)
|-
| {{DONE}} || breakpoint || Had some problems with signaling - it received SIGEMT instead of SIGTRAP
|-
| {{DONE}} || next/step || Had some problems when setting the step - it receives signal 28 instead of SIGTRAP - I made a hack to make it work, but I still must investigate
|-
| {{DONE}} || print || It displays correctly the value of variables
|-
| {{DONE}} || x || The x commands work correctly
|-
| {{DONE}} || info/list/etc. || Simple commands
|-
| {{DONE}} || attaching to a running process || gdb attach works correclty, however gdb&gt; attach (the attach command from inside GDB) has some issues wich I am not sure are related to the port
|-
| {{TODO}} || hardware watchpoints || Needs access to debug registers (for MINIX they are currently not accesible in userspace)
|-
| {{DONE}} || gcore || ported
|-
| {{TODO}} || testsuite || I tried to port dejagnu, but it needs the setpgrp (or setpgid) funtion, which is not available in the current port of nbsd libc
|-
| {{TODO}} || gdbserver || Started porting it; seems to use tcsetpgrp, but we'll see the outcome
|}

GDB is mostly functional, however there still remain the following issues that need to be fixed:
# Function tcsetpgrp is broken, therefore GDB cannot be put in the background process group =&gt; SIGINT (generated by Ctrl+C) is delivered also to GDB (not as a captured signal, but as an actual signal)

==== Reported problems ====

{| class="wikitable"
! Solved !! Problem !! Comments
|-
| {{DONE}} || Interactively entered commands aren't visible while typing || (usability) Example: Run gdb and type "help." Only "(gdb) _" will be seen, instead of "(gdb) help_."
|-
| {{DONE}} || Command results begin on the same line as the input || (usability) Example: Run gdb, type "help," and press enter. The first two lines returned are "(gdb) List of classes of commands: \n," but should be "(gdb) help \n List of commands:."
|-
| {{TODO}} || ||
|}


=== Core dump support ===

{| class="wikitable"
! Done !! Item !! Percentage Complete !! Comments
|-
| {{DONE}} || ELF core files support || 90% ||
|}


The logic for deciding when a core dump is to be performed (which signals trigger this, etc.), has already been done in PM. When a core dump is triggered, an ELF core file named "core.pid" is created into the working dir (from where the executable was loaded). The ELF file contains the program segments plus a NOTE segment which contains specific information, interpreted by GDB (e.g.the registers). To interpret the core file, you can use gdb (gdb executable core_file). The MINIX elf core format (the NOTE segment) is documented in src/common/include/sys/elf_core.h

TODOs

# stack is too big, 64 MB, even though it is not all used - Ben suggested to change the VM code that reports the segment size
# limit the size of the core file somehow?
# option to turn the core dump on (linux uses ulimit, but we don't have that on MINIX)?
# modify in readelf to recognize MINIX specific NOTE types
# &lt;del&gt;re-port gcore GDB command for the new elf core format&lt;/del&gt; done
# &lt;del&gt;implemented a new command in MINIX, gcore, that dumps the core for a given pid, in the same elf format as used for core dumping support. It uses the T_DUMPCORE flag with ptrace, inspired from netbsd, [3]&lt;/del&gt;  done
# ...

== Status Reports ==

''Week 1:''

# GDB 7.2 not compatible with binutils 2.17 (GDB's 7.2 BFD supports elf with a different symbol - TODO: post some details) 
# Started porting GDB 6.8 (the most recent with the same BFD as binutils 2.17) 
# reading an interesting guide to porting GDB [1] (but it is just for porting architectures), also GDB Internals [2]. 


''Week 2:''

# GDB 6.8 compiles, except for one error (defs.h and curses.h both define the function **fatal**) - for now, just rename curses.h in /usr/pkg/gcc44/../include-fixed/curses.h and /usr/include/curses.h before configuring GDB
# I made three patches to compile GDB with ./configure --disable-tui &amp;&amp; make. 

''Week 3:''

# I fixed the reading from registers and stack. Backtrace now works (it also reads the function arguments correctly from the stack). I must do though more testing. I noticed some problems in reading the symbols which I have to solve. 

''Week 4 &amp; 5:''

I fixed the signal handling (MINIX sends a SIGEMT instead of a SIGTRAP when executing an int 3 instruction; also, during a next/step command, it sends signal 28, instead of SIGTRAP - for now I put a hack there until I understand the reason and it works). What still needs to be fixed: 
# the signal hack (still have to check in infrun.c) 
# reading from memory (x commands)

''Week 6:''

GDB is mostly functional, with some remaining issues that need to be fixed. The problem with the stack is GDB's itself problem (maybe some lack of symbol information), not the porting problem (I get the same ??, with the same example on my Ubuntu). 

I tried to make a new pkgsrc package for GDB-6.8 but I am facing some compilation errors with pkgsrc. I will try to push the package as soon as possible. Until now, it can be taken from the git repository (the kernel must also be recompiled as there are two new syscalls).

''Week 7:''

I made a package for GDB to be integrated with pkgsrc. There are still some issues to be fixed, like conflicts between libraries. I also checked the gcore functionality for GDB, but it doesn't work as it is target specific and I must look into it. I also tried to port dejagnu to run the testsuite, but it needs tcl-expect which needs function setpgrp (which is a bit difficult to implement as MINIX lacks job control). So I will focus on making the package work cleanly and then  will switch to gcore functionality. 

''Week 8:''

Started working on the gcore functionality inside GDB. Basically it required the implementation of a function that returns the mapping of the program segments in memory. I studied a bit the ELF format (not that complicated as I thought). The function basically reads from /proc/pid/map. However, there is the same problem with reading from I or D. To solve the stack issue, I made GDB read only from D space, because I didn't see when would it read from I, but now it seems this is not longer valid so we have to modify some things in GDB. I will ask on the GDB developers forum, in case I missed something with "GDB on separate I&amp;D systems".

''Week 9:''

The gcore command is ported. However, there is an issue. It reads the whole 64MB of stack and it takes much to dump a core. I will switch to core dump in MINIX (I added a header in include/sys, procfs.h, it is an interface between the core dumps generated by the OS and GDB).

''Week 10:''

I implemented the core dumping support. There are still some minor issues to be solved. After I fix them, I will return to the stack issue (although, it takes only several seconds to dump the core - as I vircopy CLICKSIZE bytes at a time, but for the gcore command in GDB it takes almost an hour, as it uses sys_trace without the T_GETRANGE optimization, so copies sizeof(long) bytes at a time, hence lots of calls to sys_trace are needed).

''Week 11:''

Using "procfs.h" header was not acceptable, so I had to teach BFD to parse correctly the core file. (The default parsing functions in BFD required the procfs.h header). Mostly, the file that needed to be modified was bfd/elf.c and I implemented something similar to NETBSD. However, I kept to minimum the information that we put into the NOTE segment of the core file. This information could be enriched with information about, for example, threads (when MINIX will support them).

== Design ==
The project consists of two parts: porting GDB to MINIX and implementing core dumping support for MINIX.  

The first part should be in principle straight-forward (try to compile and fix the incompatibilities on the fly) as MINIX already has GCC, the ptrace system call, BFD (read/write various object formats), which are needed by GDB. I’ve looked a bit on the ptrace call implementation (part in PM – trace.c – part in kernel, system task – do_trace.c) and it seems that it supports a fair amount of the functionality of the ptrace system call (even ATTACH and DETACH). Porting GDB doesn’t need much of a design, except for the cases when OS-specific functionality is needed or must be implemented. One example could have been the ''ptrace ''system call. I don’t know now if there are more major impediments to a straight-forward port of GDB. A good reference for this part is [0] in which there are explained many problems that can appear when porting code to MINIX.

To get an idea on how to implement the second part, dumping support for MINIX, I’ve looked in the previous versions of MINIX, %%&lt;=%% 3.1.2, which had core dumping functionality implemented in the PM server, where the signaling mechanisms are implemented (signal.c). There, they used kernel calls to the system task to acquire the relevant information about the process (ex. stack pointer). After 3.1.2, the core dumping was planned to be moved to the VFS, in pm_dumpcore() function. I am not much familiar with the core dumping file format but I assume it must be the same as an executable and must contain all the process’s memory segments, as listed by the dumpcore command implemented in MINIX (commands/simple/dumpcore.c), plus the registries values (to know what was the state of the process). I looked a bit into GDB’s ''gcore'' command implementation which makes extensive use of BDF. Basically, ''gcore''’s functionality must also be implemented in pm_dumpcore().The plan would be first to port GDB, and get familiar with its implementation, especially the ''gcore'' command, as this would help for the second part of the project. I expect that much of the GDB’s functionality to be ported until the first mid-term evaluation (15 July). Some code that doesn’t compile and is not critical (ex**. **gdb thread debugging facility) could be skipped/commented at first to get the important part working as soon as possible.

== Schedule ==
Include the timeline from your proposal here and all deliverables and milestones.

=== Pre-Coding Period (Apr 25 - May 22) ===
=== Week 1 (May 23 - May 29): ===
=== Week 2 (May 30 - Jun 5): ===
study GDB’s internals and make a tentative to port it and identify the major drawbacks (e.g. if it needs more functionality to be implemented in MINIX). Also, identify the critical parts that must be ported right away and which parts could be skipped for the moment.

=== Week 3 (Jun 6 - Jun 12): ===
=== Week 4 (Jun 13 - Jun 19): ===
=== Week 5 (Jun 20 - Jun 26): ===
=== Week 6 (Jun 27 - Jul 3): ===
* '''Milestone for working GDB port in pkgsrc'''
* Send out call for testers
=== Week 7 (Jul 4 - Jul 10) - MIDTERM: ===
work on porting GDB, solve the problems that appear. (At the end of week 7 we should have a functional GDB port)

=== Week 8 (Jul 11 - Jul 17): ===
study the core dump file format (this will be needed for the core dump functionality)

=== Week 9 (Jul 18 - Jul 24): ===
make a design for the core dump functionality for MINIX. (e.g. which signals will trigger the core-dump; where should it be implemented (vfs or fs), the format of the file; etc.)

=== Week 10 (Jul 25 - Jul 31): ===
=== Week 11 (Aug 1 - Aug 7): ===
=== Week 12 (Aug 8 - Aug 14): ===
implement and test the new functionality

=== Week 13 (Aug 15 - Aug 21) - FINAL: ===
finish the testing and documentation

== Resources ==
* [0] Porting QEMU to MINIX [https://www.minix3.org/doc/kouwe_thesis.pdf www.minix3.org/doc/kouwe_thesis.pdf]
* [https://groups.google.com/group/minix3/msg/f6594b9a5f1d4fca Initial GDB ELF work by Antoine]
* [https://gforge.cs.vu.nl/gf/project/minix/scmsvn/?action=browse&amp;path=/trunk/bigports/gdb-6.3/ Bigports gdb a.out port (Partially working)]
* [1] https://www.embecosm.com/download/ean3.html
* [2] https://sourceware.org/gdb/onlinedocs/gdbint/
* [3] https://github.com/jsonn/src/blob/trunk/usr.bin/gcore/gcore.c</text>
      <sha1>1061ke6lchywf7t6lfhfs8ln9teq4fi</sha1>
    </revision>
  </page>
  <page>
    <title>File:Puffs.png</title>
    <ns>6</ns>
    <id>256</id>
    <revision>
      <id>365</id>
      <timestamp>2021-09-19T12:20:32Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>365</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-19T12:20:32Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Puffs.png</filename>
      <src>https://wiki.iberty.cf/images/b/bf/Puffs.png</src>
      <size>11253</size>
      <sha1base36>ppdzvbnv63z6qm5meoeyfs72rqvzib8</sha1base36>
      <rel>b/bf/Puffs.png</rel>
      <contents encoding="base64">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
UDknAIDKOQEAVM4JAKByTgAAlXMCAKicEwBA5ZwAACrnBABQOScAgMo5AQBUzgkAoHJOAACVcwIA
qJwTAEDlnAAAKucEAFA5JwCAyjkBAFTOCQCgck4AAJVzAgConBMAQOWcAAAq5wQAUDknAIDKOQEA
VM4JAKByTgAAlXMCAKicEwBA5ZwAACrnBABQOScAgMo5AQBUzgkAoHJOAACVcwIAqJwTAEDlnAAA
KucEAFA5JwCAyjkBAFTOCQCgck4AAJVzAgConBMAQOWcAAAq5wQAUDknAIDKOQEAVM4JAKByTgAA
lXMCAKicEwBA5ZwAACrnBABQOScAgMo5AQBUzgkAoHJOAACVcwIAqJwTAEDlnAAAKucEAFA5JwCA
yjkBAFTOCQCgck4AAJVzAgConBMAQOWcAAAq5wQAUDknAIDKOQEAVM4JAKByTgAAlXMCAKicEwBA
5ZwAACrnBABQOScAgMo5AQBUzgkAoHJOAACVcwIAqJwTAEDlnAAAKucEAFA5JwCAyjkBAFTOCQCg
ck4AAJVzAgConBMAQOWcAAAq5wQAUDknAIDKOQEAVM4JAKByTgAAlXMCAKicEwBA5ZwAACrnBABQ
OScAgMo5AQBUzgkAoHJOAACVcwIAqJwTAEDlnAAAKucEAFA5JwCAyjkBAFTOCQCgck4AAJVzAgCo
nBMAQOWcAAAq5wQAUDknAIDKOQEAVM4JAKByTgAAlXMCAKicEwBA5ZwAACrnBABQOScAgMo5AQBU
zgkAoHJOAACVcwIAqJwTAEDlnAAAKucEAFA5JwCAyjkBAFTOCQCgck4AAJVzAgConBMAQOWcAAAq
5wQAUDknAIDKOQEAVM4JAKByTgAAlXMCAKicEwBA5ZwAACrnBABQOScAgMo5AQBUzgkAoHJOAACV
cwIAqJwTAEDlnAAAKucEAFA5JwCAyjkBAFTOCQCgck4AAJVzAgConBMAQOWcAAAq5wQAUDknAIDK
OQEAVM4JAKByTgAAlXMCAKicEwBA5ZwAACrnBABQOScAgMo5AQBUzgkAoHJOAACVcwIAqJwTAEDl
nAAAKucEAFA5JwCAyjkBAFTOCQCgck4AAJVzAgConBMAQOWcAAAq5wQAUDknAIDKOQEAVM4JAKBy
TgAAlXMCAKicEwBA5ZwAACrnBABQOScAgMo5AQBUzgkAoHJOAACVcwIAqJwTAEDlnAAAKucEAFA5
JwCAyjkBAFTOCQCgck4AAJVzAgConBMAQOWcAAAq5wQAUDknAIDKOQEAVM4JAKByTgAAlXMCAKic
EwBA5ZwAACrnBABQOScAgMo5AQBUzgkAoHJOAACVcwIAqJwTAEDlnAAAKucEAFA5JwCAyjkBAFTO
CQCgck4AAJVzAgConBMAQOWcAAAq5wQAUDknAIDKOQEAVM4JAKByTgAAlXMCAKicEwBA5ZwAACrn
BABQOScAgMo5AQBUzgkAoHJOAACVcwIAqJwTAEDlnAAAKucEAFA5JwCAyjkBAFTOCQCgck4AAJVz
AgConBMAQOWcAAAq5wQAUDknAIDKOQEAVM4JAKByTgAAlXMCAKicEwBA5ZwAACrnBABQOScAgMo5
AQBUF0/lBkHAWBQbAAAAAElFTkSuQmCC
      </contents>
    </upload>
  </page>
  <page>
    <title>FUSE Support</title>
    <ns>0</ns>
    <id>257</id>
    <revision>
      <id>420</id>
      <parentid>366</parentid>
      <timestamp>2022-02-08T17:57:59Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>420</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13735" sha1="9a1i3s0tpmriyqdgtg9vv4o6djd9l49" xml:space="preserve">Student: Evgeniy Ivanov

Mentor: Thomas Veerman

git repository: [https://git.minix3.org/?p=minix-fuse.git;a=log;h=refs/heads/fuse minix-fuse] and [https://git.minix3.org/?p=pkgsrc.git;a=log;h=refs/heads/minix-master pkgsrc]

== Abstract ==

There are many filesystems implementing FUSE API: ntfs-3g, fuse-unionfs, fuse-cddfs, etc. Main goal of this project is to make these filesystems available in MINIX 3 without any changes or at least with very minor changes (which can be sent to the upstream).

Deliverables:

* A glue server to be compiled with any fuse filesysem server (e.g. fuse-ntfs-3g). libpuffs + librefuse can be a base part of this glue server.
* Packages with FUSE filesystems (fuse-ntfs-3g, fuse-unionfs, fuse-cddfs and some others depending on time).
* All required documentation.

== Current Status ==

{| class="wikitable"
! Done !! Item !! Percentage Complete !! Comments
|-
| {{DONE}} || libpuffs     || 100% ||
|-
| {{DONE}} || librefuse    || 100% ||
|-
| {{DONE}} || fuse-ntfsg   || 100% ||
|-
| {{TODO}} || fuse-unionfs || 90%  ||
|-
| {{TODO}} || fuse-cddfs   || 0%   ||
|}

== Status Reports ==

'''''Week 1 (May 23 - May 29)'''''

Checked ucontext implementation in MINIX. [https://en.wikipedia.org/wiki/Setcontext Example] compiled with ACK segfaults because of bug in ACK (volatile is ignored). Since we decided to use gcc and later clang it's OK.
Call context framework works fine with very minor changes (to be gone, when we switch to libc/lib* from NetBSD).

Framebuf stuff widely uses kevent(), which is currently unavailable. It is moved (discussed with Thomas) to the end of summer, because we will not use it in VFS-libpuffs messaging and it's not used in FUSE (PUFFS filesystems only).

Working on mounting (SEF initialization and READ_SUPER) I've decided to use function wrapper for main(). Argc and argv are unavaible in libpuffs, but they're required for env_setargs(). Also it should be a good idea to initialize SEF ASAP. Wrappers are supported by both gcc and clang. Kind of a hack, but in this case should be OK.

'''''Week 2 (May 30 - Jun 5)'''''

Done with mounting and control loop. Ported required components and cleaned unnecessary stuff. Like planed I will work on VFS&lt;-&gt;PUFFS during next week.
Unfortunately lost half of week because of unexpected deals at university. To be compensated during next week (or 2 weeks).
  
'''''Week 3 (Jun 6 - Jun 12)'''''

Fixed a bug in original libpuffs (caused submount failures in pnullfs tree) and sent a report/patch to NetBSD gnats. Also after rebuilding something in NetBSD I fall into serious troubles with pnullfs (several assertions failures), failed to found the reason and reverted to an old VM snapshot. But with that snapshot seems to work fine.

Worked on VFS&lt;-&gt;PUFFS stuff. Mostly on lookup, stat, getdents. Started to test our libpuffs using pnullfs: it uses filesystem calls and current VFS doesn't allow nested fs calls except getsysinfo. To be discussed with Thomas.

'''''Week 4 (Jun 13 - Jun 19)'''''

Worked on VFS&lt;-&gt;PUFFS stuff. Pnullfs (r/w) works fine and it is almost full functional. Should finish VFS&lt;-&gt;PUFFS and pnullfs next week.

'''''Week 5 (Jun 20 - Jun 26)'''''

Basic VFS&lt;--&gt;PUFFS glue is done (except bread/writes and flush, which to be added later, when we design caching). Pnullfs is tested and works fine except several bugs causing MINIX framework to fail.

Refuse is ported except very small piece of code.

'''''Week 6 (Jun 27 - Jul 3)'''''

Worked on testing and fixing libpuffs bugs. Also triaged several bugs in original libpuffs (patches to be submitted), mfs/ext2 glitch and small VFS glitch.

Started to work on new stat(). Almost done: changes are backward and forward compatible. There're few bugs to fix: test43 loops forever when "new_libc + new_vfs", some tests linked with old libc have a strange issue with st_ctime (when run with new VFS). Also stat.h from gcc package has to be updated and nbsd_libc to be cleaned up (no xxx_stat simulation/conversion).

'''''Week 7 (Jul 4 - Jul 10)'''''

I have implemented new stat syscall. It is well tested, debugged and has initial review. Though Ben wants me to investigate if we can minimize minix-port.patch (nbsd_libc).

Also I separated minimal libc from libsys into libminc. Now drivers and servers can use libsys + libminc or libsys + libc (required for PUFFS/FUSE servers).

All code is rebased against recent master branch. fuse branch contains PUFFS/FUSE stuff only, my_base contains independent changes required for my project (new stat, libminc, fix for MFS/ext2 and "unlocked" nested calls support in VFS).

Libpuffs still requires some debugging and cleanup. With new stat librefuse works without any serious modifications (probably even vanilla with nbsd_libc). I'll update schedule according current state.  

'''''Week 8 (Jul 11 - Jul 17)'''''

Worked on fixing libpuffs bugs (refuse is just fine). Now pnullfs passes most of /usr/src/test/*
Though there're still some failed tests (some related to AVFS absence and pnullfs origins).

Next week I'll fix minor issues and start to work on ntfs-3g as planed.


'''''Week 9 (Jul 18 - Jul 24)'''''

Fixed several bugs in libpuffs (related to librefuse). Librefuse works fine now. Started to work on ntfs-3g. Did additional tests in NetBSD: just noticed they link with libfuse, libperfuse and libpuffs (and not libpuffs + librefuse). Though everything still works when linked with librefuse, so hopefully we didn't get into trouble...

ntfs-3g compiles almost from scratch. I stalled on a deadlock() between fs and vfs (reading from device).


'''''Week 10 (Jul 25 - Jul 31)'''''

ntfs-3g package is available. Though it doesn't work with current VFS and there are problems with preliminary version of AVFS. Also this week I did some fixes in libpuffs related to ntfs-3g and basic code cleanup. Code is pushed to the public repository.

'''''Week 11 (Aug 1 - Aug 7)'''''

Failed to make AVFS preview working with libpuffs. There're some issues with no obvious workarounds. Cache work is frozen until we finish discussing some new drawbacks.

'''''Week 12 (Aug 8 - Aug 14)'''''

No changes. Cache is either postponed or will not be implemented (depends on what will be decided).

'''''Week 13 (Aug 15 - Aug 21) - FINAL'''''

Started to test ntfs-3g on AVFS. Works with minor issue (creating new files), to be fixed next week.
Unionfs (2 lines in the code) requires few small MINIX changes, after that only Makefile has to be modified.

Note that "FINAL" statement. It's about status reports only :-)


== Design  ==

=== FUSE overview ===
FUSE is a filesystem in userspace, thus it’s a natural fit for MINIX 3. It consists of
* Kernel module (mainly VFS and page cache integration): fuse in linux or puffs in NetBSD.
* Messaging interface used in communications between file server and kernel.
* User level library: libfuse in Linux or libpuffs in NetBSD (includes librefuse to support fuse based filesystems).
* User level filesystem implementation (file server).

From developer’s point of view FUSE can be spitted into two logical parts:
* A set of callbacks provided by user level fileserver to handle requests from the kernel.
* A set of control flow routines (like fuse_main() from libfuse which takes full control over filesystem server).

There are two callback interfaces:
* A standard (high-level). It’s close to system calls and most file servers implement this interface. It mostly operates with file paths rather than inodes.
* A low-level interface which is close to the kernel’s VFS. Just few file servers implement this interface.

Libfuse has multi-thread support, but can work without threads (“single thread” mode). Developers of libpuffs avoid threads [1] and use continuations which has some advantages over threads (it’s much like threads but with explicit scheduling points).

=== NetBSD ===
It consists of
* Kernel module (puffs).
* ''libpuffs'' which is significantly different from FUSE and according its description is more flexible. Also there are some filesystems implemented on top of libpuffs, e.g. psshfs (puffs sshfs), dtfs (fully functional filesystem), puffs nullfs, sysctl.
* ''librefuse'' on top of libpuffs as translation layer between FUSE file server and libpuffs. librefuse implements puffs callback interface. It supports FUSE high-level interface and uses it in its implementation. Librefuse has support for all revisions of FUSE (special translation layer with runtime decisions), thus fileservers written for both FUSE 24 and FUSE 26 can be compiled with librefuse. According to the experience of NetBSD folks there’re no common changes in FUSE filesystem servers to work with librefuse.

Control flow is implemented by libpuffs. It supports both single threaded model (in this case it uses continuations) and multiple threads. librefuse initializes puffs callbacks structure with own functions (they use FUSE opts provided by fileserver) and then everything is handled by libpuffs code.

[[File:Puffs.png]]

=== MINIX implementation discussion (design) ===
Most part of FUSE project just provides infrastructure to create an interface to the user-level filesystem server. It’s available in minix for free!
Experiment with hello_fuse fileserver shows that FUSE file servers can be compiled with some minix library (I call it a glue server or a glue library) to be executed as MINIX 3 file servers. Current [[VFS-FS Protocol]] fits very well, but probably minor changes (additions) will be required.
Main differences between fuse file server (the glue library) and MFS/ext2:
* Inode-&gt;path conversion will be required, since most part of FUSE API is about paths and VFS in MINIX operates on inodes. Dictionary or some f(inode) will do its job.
* More internal function calls (e.g. stat() in fs_lookup()).
* Probably some extra care when check for enter/leave mount during path parsing.
* Support for different versions of FUSE API.
* With single thread there is a chance of deadlocking. According to [2] umount call done from fileserver can trigger some handlers of the same fileserver which is already blocked on this syscall.

I feel that this design is much better than “VFS -&gt;Own FUSE server-&gt;fileserver”. A good candidate to solve problems listed above is ''libpuffs'' + ''librefuse''. We can port (partly reimplement) ''libpuffs'', and use ''librefuse'' + ''filesystem'' servers without any modifications (or at least with very minor modifications). It has both advantages and disadvantages.

''Advantages'':
* Continuations and threads support.
* No fear about deadlocks (according to paper describing puffs, solution for single thread model is not clean, but it works and nothing better can be provided).
* We will not maintain compatibility with FUSE API (and different versions of this API).
* Integration with pkgsrc: librefuse, fuse-afpfs-ng, fuse-archivemount, fuse-bindfs, fuse-cddfs, fuse-chironfs, fuse-cryptofs, fuse-curlftpfs, fuse-djmount, fuse-encfs, fuse-gmailfs, fuse-gphotofs, fuse-gstfs, fuse-httpfs, fuse-loggedfs, fuse-lzofs, fuse-mp3fs, fuse-ntfs-3g, fuse-obexfs, fuse-pod, fuse-svnfs, fuse-unionfs, fuse-wdfs, fuse-wikipediafs.
* BSD license.

''Disadvantages'':
* Translation layer (librefuse) is not just pretty abstraction, but also a CPU (mainly) and memory consumer (shouldn’t be much). For almost every VFS operation librefuse tranlates data from the FUSE format to the PUFFS format. It’s significant for operations with metadata, but not for reading/writing, when we operate on buffers and possibly just on some small control structures.  

Libpuffs, librefuse and FUSE fileservers are written in C99, which is unsupported by ACK. Thus we will have to use gcc or clang (if it’s available) to have less (or no) changes in their code.

== Schedule ==
Below is an approximate schedule, especially the part after first deadline.

=== Pre-Coding Period (Apr 25 - May 22) ===
learn puffs code and understand what can be ported and what should be reimplemented (now I can recall just obvious part: communication with kernel -&gt; comminication with MINIX’ VFS).
If in time, start coding.


=== Week 1 (May 23 - May 29) ===
* Fix ucontext (required by CC framework) issue.
* Port continuations (CC - call context) framework. Do some handy tests.
* Port (minor changes) framebuf framework. 

=== Week 2 (May 30 - Jun 5) ===
* Make everything else compiling.
* Work on VFS-FS-PUFFS stuff.

=== Week 3 (Jun 6 - Jun 12) ===
Work on VFS-FS-PUFFS stuff.

=== Week 4 (Jun 13 - Jun 19) ===
Work on VFS-FS-PUFFS stuff.

=== Week 5 (Jun 20 - Jun 26) ===
Try libpuffs using pnullfs and work on issues.

=== Week 6 (Jun 27 - Jul 3) ===
Port librefuse.

pkgsrc for libpuffs and librefuse.

=== Week 7 (Jul 4 - Jul 10) - MIDTERM ===
Reserved for issues.

At this point we should have almost fully functional libpuffs and librefuse. To check implementation I’ll use hello_world and fusexmp fileservers.

=== Week 8 (Jul 11 - Jul 17) ===
Test libpuffs and fix remaining bugs. Test librefuse.

=== Week 9 (Jul 18 - Jul 24) ===
fuse-ntfs-3g

=== Week 10 (Jul 25 - Jul 31) ===
fuse-ntfs-3g

=== Week 11 (Aug 1 - Aug 7) ===
Cache for libpuffs.

=== Week 12 (Aug 8 - Aug 14) ===
Cache for libpuffs.

=== Week 13 (Aug 15 - Aug 21) - FINAL ===
Yet another "issues" week or fuse-unionfs and fuse-cddfs.

libpuffs is properly working, fuse file servers can be used almost without modifications. fuse-ntfs-3g is well tested.

== Resources ==

* [1] [https://2007.asiabsdcon.org/papers/P04-paper.pdf "puffs - Pass-to-Userspace Framework File System" presented at AsiaBSDCon 2007].
* [2] [https://www.netbsd.org/docs/puffs/refuse.pdf "ReFUSE: Userspace FUSE Reimplementation Using puffs" presented at EuroBSDCon 2007].</text>
      <sha1>9a1i3s0tpmriyqdgtg9vv4o6djd9l49</sha1>
    </revision>
  </page>
  <page>
    <title>NetBSD Userland (GSOC Project)</title>
    <ns>0</ns>
    <id>258</id>
    <revision>
      <id>408</id>
      <parentid>367</parentid>
      <timestamp>2022-02-07T18:12:50Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>408</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="23649" sha1="n8yqpxhccvmhwh4ujjtebxqsc1ltcc5" xml:space="preserve">Student: Vivek Prakash

Mentor: Gianluca Guida

git repository: [https://git.minix3.org/?p=minix-userland.git;a=log;h=refs/heads/userland minix-userland]

== Abstract ==
The goal of the project is to expand the MINIX userland by porting the userland utilities from NetBSD and replace the old and obsolete userland part of MINIX with that of NetBSD’s, while conforming to newer POSIX revisions. Minimizing the changes in the NetBSD sources themselves will also be a high priority in this project.

== Current Status ==
{|class="wikitable"
! Done     !! Item                                                    !! Percentage Complete !! Comments !! Status
|-
| {{DONE}} || Switch to ELF based system                              || 100%                ||          ||
|-
| {{DONE}} || Setup userland reference source system                  || 100%                ||          ||
|-
| {{DONE}} || Port initially suggested utilities                      || 80%                 ||          || In progress
|-
| {{DONE}} || List utilities whose dependencies are minimal           || 80%                 ||          || In progress
|-
| {{DONE}} || Port utilities listed above                             || 70%                 ||          || In progress
|-
| {{DONE}} || List utilities whose dependencies are high              || 50%                 ||          ||
|-
| {{DONE}} || Port required libraries and implement missing functions || 60%                 ||          || In progress
|-
| {{DONE}} || Migrate to NetBSD passwd format                         || 95%                 ||          ||
|}

== Status Reports ==
=== Pre-Coding Period ===
* I have got familiar with the git repository structure of Minix. Now, i also have a good idea of the workflows and various commands mentioned on the wiki page [[Using Git|UsingGit]].

=== Coding Period ===
==== Possible userland tasks ====
(''Please add here any NetBSD utility that you would love to see in Minix.'')
* file
* sh - ''Depends on libterminfo, libedit, libl, test, printf, kill, sysctl''
* ping
* netstat - ''In progress''
* traceroute - ''In progress''
* sort (the current /usr/bin/sort utility doesn't work with a 20MB test file I got from the gnulib team ~ tcort)

==== Week 1 ====

{| class="wikitable"
! Utilites    !! Dependencies* !! Remarks                                                          !! Porting status !! Testing status
|-
| uniq        || none          || Required trivial changes to Makefile                             || Done           || Done
|-
| m4          || libutil, libl || Overrode compilation with Minix libutil and libl libraries       || Done           || -
|-
| mkdep       || vfork()       || Used fork() instead of vfork(), as it was appropriate in context || Done           || -
|-
| indent      || none          || Changes to Makefile                                              || Done           || Done
|-
| stat        || struct stat   || Enabled Minix Emulated NetBSD stat                               || Done           || -
|-
| libterminfo || stat utility  || Removed shlib dependency; forced static linking                  || Done           || -
|-
| libedit     || libterminfo   || Changes to Makefile                                              || Done           || -
|-
| printf      || none          || ,,                                                               || Done           || Done
|-
| kill        || none          || ,,                                                               || Done           || Done
|-
| test        || csh           || Modified testing script for 'test' to also satisfy 'sh'          || Done           || Done
|}


==== Week 2 ====

{|class="wikitable"
! Utilites !! Dependencies* !! Remarks !! Porting status !! Testing status
|-
| du || struct stat, st_flags || Functionality given by st_flags disabled. Enabled Minix Emulated NetBSD stat. Testing failed with major switches : debugging the failures. || Done || Failed
|-
| netstat || netiso, pf, libkvm || Integrating pf port from last year GSoC project. Tried to port libkvm : failed due to absence of many headers in sys/, hence researching workaround if possible || Pending || -
|-
| traceroute || headers in netinet || Many headers in netinet missing, and hence the corresponding control codes and functions used in traceroute. Their port is yet to be analysed, if not possible to port those headers i can always port traceroute with very minimal functionality that suit Minix. || Pending || -
|-
| cat || st_blksize || Enabled Minix Emulated NetBSD stat. || Done || Done
|-
| chmod || lchmod system call || hflag disabled to avoid any call of lchmod() || Done || Done
|-
| echo || none || Changes In Makefile. || Done || Done
|-
| mkdir || none || Changes In Makefile. || Done || Done
|-
| pwd || none || Changes In Makefile. || Done || Done
|-
| sleep || SIGINFO || Related variables and code altered in sleep.c to avoid use of SIGINFO, as it is not supported in Minix || Done || Done
|-
| banner || none || Changes In Makefile. || Done || Done
|-
| basename || none || Changes In Makefile. || Done || Done
|-
| bdes || libcrypt || Ported libcrypt and disabled USE_FORT || Done || -
|-
| libcrypt|libc || Created static library || Done || -
|-
| column || libutil || Linked with Minix libutil. Implemented estrndup() in column.c || Done || -
|-
| csplit || libutil || Linked with Minix libutil. raise_default_signal() not present in Minix libutil, hence that function call has been disabled in csplit.c without affecting the behaviour of the program. || Done || -
|-
| libutil ||  ||  To many compilation errors and dependencies. I will give a thorough look again. || In progress || 
|}


==== Week 3 ====
{|class="wikitable"
! Utilites !! Dependencies* !! Remarks !! Porting status !! Testing status
|-
| ctags || none || Makefile modified || Done || Done
|-
| vis || none || Makefile modified || Done || Done
|-
| what || none || Makefile modified || Done || Done
|-
| whois || none || Changes in Makefile. Disabled USE_FORT to turn off substitute functions. || Done || -
|-
| xstr || none || Changes in Makefile || Done || Done
|-
| yes || none || Changes in Makefile || Done || Done
|-
| libtelnet || none || Disabled USE_KERBEROS, USE_PAM, MKCRYPTO and USE_FORT. Didn't rename it to nbsd_libtelnet to prevent breaking of telnet utility. || Done || -
|}

* Ported netinet/in_system.h . Tried to port netinet/ip.h as it is required for telnet, and studied it's dependencies and consequences. NetBSD ip.h depends on it's own fully-fledged TCP/IP stack, and hence it would require changes in the source of telnet to make it compatible with the TCP/IP stack of Minix.
* Examined request types supported in ioctl() system call in Minix in more detail.  
* Fixed _MINIX conditional in termios.h.


==== Week 4 ====
{|class="wikitable"
! Utilites !! Dependencies* !! Remarks !! Porting status !! Testing status
|-
| libutil || - || Disabled the compilation of unsupported calls. Linked utilities, earlier linked with Minix libutil, to NetBSD libutil to prevent cross-compilation. To be tested more thoroughly. || Done || -
|-
| dd || libutil || Disabled SIGINFO inovacation. Compiled with flag SMALLPROG, reducing a few switches in the way. || Done || Done
|-
| telnet || libtelnet || Disabled compilation with USE_INET6, USE_KERBEROS, USE_PAM, USE_FORT. Removed sa_len, a few message pointers, vfork(), SIGINGO, and hostnames beginning in ['@', '!'] . Used sizeof(struct sockaddr_in) in place of sa_len. There is no way to send urgent data in Minix TCP/IP stack and perform non-blocking I/O, hence that had to be disabled too. || Done || Bugs
|-
| cp || - || Defined MAXPHYS to (64*1024). MAXBSIZE is defined to be MAXPHYS, but latter's value was missing in netbsd headers. Used utime() in place of unsupported lutimes(), and changed struct timeval to struct utimbuf for doing that. Used MAP_SHARED in place of MAP_FILE. Disabled unsupported madvise() which may affect the performance. Used chown() and chmod() in place of lchown() &amp; lchmod() but handling the symbolic links will be tricky. Disabled st_flags and all operation concerning it too. || Done || Done
|-
| xinstall || - || Disabled futimes() and everything related to st_flags. Used utime() in place of utimes() by converting struct timeval to struct utimbuf. Used MAP_SHARED and fork() inplace of MAP_FILE and vfork(). || Done || Done
|}

* Worked on porting df. It is heavily dependent on NetBSD statvfs and corresponding syscalls and functions e.g. getmntinfo(). Mount related headers and control codes e.g. MNT_WAIT, MNT_NOWAIT, etc. are not supported in Minix, and the mount structure is different too, which makes it even harder to port. I am giving a good and thorough look at all the dependencies and trying to determine minimum changes with many functionality reduced in the process. 

==== Week 5 ====
{| class="wikitable"
! Utilites !! Dependencies* !! Remarks !! Porting status !! Testing status
|-
| date || adjtime() || Disabled '-a' flag to disable adjtime() call, which correct the time to synchronize the system clock. I have been reading about system time, clock and how the latter is synchronized in BSD adjtime() implementation. I will find a workaround for Minix too. || Done || Done
|-
| ls || struct stat || Defined Macro to use netbsd stat. Disabled '-o' flag and ST_FLAGS. Removed S_IFWHT case in printtype() call. || Done || Done
|-
| ln || - || Trivial changes to Makefile || Done || Done
|}
 
* In the first half of week, i mainly worked on updating the hier(7) man page which is now available at the tip of the master branch in my github repository : git@github.com:vivekp/minix-nbsd . Along with, i examined ''df'' , ''tracerout'', ''sh'' and their dependencies in more detail and will be working ahead on porting them. I lost some time in the second half of the week due to illness and will try hard to compensate for the lost time in this week itself.

==== Week 6 ====
This week i mostly worked on submitting the changes upstream. I cleaned up the code for all the previous utilities ported, refined their commits and rebased them on master. I tested for 'make world' and native tests after installing each of the NetBSD utility. I also compared the NetBSD utilities with the corresponding Minix utility and looked for missing flags which are required.

I had ported mkdep earlier, but i didn't test it thoroughly that time. After switching to ELF, i tested it again, but it is giving errors while generating the .depend file. I am looking into it.
I also tested xinstall, but it is giving errors for root user. I need to look into it too. I have ported cksum, and it is giving consistent results with all the hashes. I cleaned up the NetBSD libutil code, to submit it upstream next week. 

I have prioritized the submission of these utilities to upstream next week: printf, chmod, mkdir, pwd, banner, basename, ctags, xstr, yes, ln, ls, cp, dd, column, kill, cksum, libutil

I have prioritized the porting/testing of these utilities next week: mkdep, xinstall, ping, telnet

==== Week 7 ====
Over the past week, i worked on cleaning up more code and submitting more utilities for integrating in upstream. I submitted the patches of ls, stat, uniq, sleep and cat for review. I completed the port of xinstall, and worked on porting ping and telnet. ping works fine, except for the statistics printed. I also worked on mkdep, but during dependency file generation it is picking up not-supposed-to arguments causing it to fail.

I ported mtree, mknod and tested them successfully. mtree can now replace the mtree.sh script. 

I was able to build the whole system using NetBSD xinstall and create a bootable image without any error. For that i needed to replace all the INSTALLFLAGS with -S by chmem and equivalent stack size. I also enabled stripping of symbol table from the ack compiled executable, as the /usr/pkg/bin/strip only works with elf and other formats. One problem that emerged during the port was that NetBSD functions uid_from_user(), user_from_uid(), etc. in nbsd_libc don't work in Minix mainly due to non netbsd style passwd file. I got them working in xinstall using local tweaks, but they aren't nice.

So, in the next week, my goal is to submit the remaining ported utilities for review. And, i will work next on migration to native NetBSD passwd format.(xinstall also relies on it.) For that, i will first port the corresponding utilities e.g. passwd, useradd, userdel, usermod, chpass, vipw, pwd_mkdb . Then, i will migrate the /etc/passwd file to NetBSD format, while ensuring backward compatibility.

==== Week 8 ====
This week i completed the port of mkdep, and refined the patches of ls and stat after new changes to struct stat. I also ported libterminfo and terminfo database this week.

Then, i worked on migration to the NetBSD style passwd format. I ported ''passwd'', ''pwd_mkdb'', and nbsd_libutil for this purpose. Then, i switched to NetBSD format ''passwd'' and ''master.passwd file''. ''master.passwd'' file makes the ''/etc/shadow'' file obsolete. Now that, i had ''master.passwd'' file, i created ''pwd.db'' and ''spwd.db'' (password databases) using ''pwd_mkdb''. Then, i removed the related functions in nbsd_libcompat_minix and used nbsd_libc functions . Now, the uid/guid&lt;=&gt; name functions are working properly as password databases are present. 

The work left ahead is to get Minix' login to work with new format, or port NetBSD login. I will also work ahead on ensuring compatibility with old binaries and testing that the system doesn't break after the complete migration.

==== Week 9 ====
This week i ported the NetBSD login. I got stalled a few days in it- trying to make sockaddr_snprintf() in libutil work, and partially in examining the problem in Minix login. I also lost some time in moving to college.

''login'' works with the new NetBSD passwd format at the end of the week, but old utilities in base system are broken.

==== Week 10 ====
This week i was able to produce an initial version of steps for migrating to NetBSD passwd format. In addition, i added fallback functions to nbsd_libc getpw*() functions to ensure that  somebody doesn't get locked out of the system if he doesn't switch to new passwd format after ''make world; reboot''. I also identified all users of pwdauth and crypt() from old libc, and removed pwdauth and crypt(). After much testing, i found out that keeping NetBSD login, new libc, fallback functions in new libc, and retaining getpw*() functions in old libc keeps everything intact.

==== Week 11 ====
This week i mainly worked over fixing problems in the initial version of commit for switching to NetBSD passwd format. I ported NetBSD su and newgrp. I fixed user* and group* utilities for flock() error. I came to know that a process can only hold exclusive lock over a file only if it's open in write mode. I also wrote a shell script that fixes the clobbering of existing accounts. 

==== Week 12 ====
This week i came to know of more problems in the passwd branch, and spent most of the time fixing them. I got Minix su working with new libc. Also, i ported ctags, spell, spellprog and deroff. They are available in the ctags and spell branch in the repository.

==== Week 13 ====
Over past week, i imported most of the utilities suggested by others. I imported bzip2, libbz2, hexdump, od, tput, tset, col, hostname, domainname, infocmp, col, du, and cksum. I also imported NetBSD sort, but it is failing the pipeline test with the error ENOTTY. Gdb helped in tracking the problem to tcsetpgrp, and i hope to fix it soon.

== Design ==
Userland refers to all application software that runs in user space. Userland usually refers to the various programs and libraries that the operating system uses to interact with the kernel: software that performs input/output, manipulates file system objects, etc.  (Adapted from Wikipedia).

=== Implementation Plan ===
I have planned to complete the project in four phases :

* Identifying the trivial and MINIX independent/supported userland utilities, and porting them first.
* Then, grouping the utilities according to libraries needed, which are either not present in MINIX or not supported by MINIX currently.
* Then, porting the needed library. This is an iterative process, since one library may depend on other in turn, which needs to be ported first. Porting the library may not be the end, as many syscalls and functions are not supported in MINIX which may need to be implemented as well.
* Then, porting all the userland utilities dependent on the libraries and missing functions in the previous step.

==== Directory structure of the userland source in MINIX ====
All the userland utilities are currently present in /usr/src/commands in MINIX. Following the current directory structure and the modular approach used to design the whole MINIX operating system, the directory structure of the ported userland component of the NetBSD source tree should be imitated from the NetBSD source tree itself with a few modifications.

The userland part of the MINIX source tree should be organized as following:

* /usr/src/commands: This directory has currently all the sources for the utilities present in MINIX, without any groupings. The utilities in it would be removed whenever the corresponding utilities from NetBSD are ported.
* Now, there would be four more directories in /usr/src , namely bin, sbin, usr.bin, usr.sbin taken directly from the NetBSD userland source tree.
* /usr/src/bin: Similar to NetBSD’s /usr/src/bin .
* /usr/src/sbin: Similar to NetBSD’s /usr/src/sbin .
* /usr/src/usr.bin: Similar to NetBSD’s /usr/src/usr.bin .
* /usr/src/usr.sbin: Similar to NetBSD’s /usr/src/usr.sbin .
* GNU-licensed utilities from NetBSD’s /usr/src/gnu can be replaced with utilities from other userland which are licensed under BSD. If this is not possible at all, making packages out of them is an option.

''Advantage'' : This directory structure for MINIX offers the advantage that it separates the MINIX userland utilities from those ported from NetBSD, and thus offers clarity in the structure. Moreover, the MINIX utilities may coexist with NetBSD utilities, while the compilation for former may be disabled if the NetBSD’s are newer and superior.

The plan is to checkout the userland source from a stable release of NetBSD and port utilities contained in that source. A minix-port.patch file would be present in the top level directory of a NetBSD component that contains the changes done to that component when porting to MINIX.

A system has been set up by Gianluca Guida so that one can easily track the version of NetBSD's libc currently being used. It would be convenient for the developers to modify the nbsd sources in the minix tree and update the minix-port patches accordingly. He has also automated the minix-port.patch creation. On the same lines, the userland source version will be tracked and minix-port.patch file will be generated in each of the directories: bin, sbin, usr.bin, usr.sbin .

Initially, empty directories /usr/src/bin, /usr/src/sbin, /usr/src/usr.bin, /usr/src/usr.sbin will be created. As soon as a utility from NetBSD userland is ported to MINIX , it would be added to the corresponding directory. The changes would be pushed upstream after a few utilities have been ported and minix-port.patch has been modified accordingly in each of the four directories.

Also, I would maintain a list of all the NetBSD userland utilities that have been ported in the /usr/src/commands/ directory, so that one knows where to look for the source of missing utilities in commands.

* The separate system for tracking the the userland source version will be same as that for tracking the nbsd_libc version. A separate reference source tree system need to be set up because the userland may need to be updated to newer release, which may have fixed bugs in few utilities while the older nbsd_libc is absolutely compatible with the newer release, or the nbsd_libc hasn’t changed at all in the newer release.
* This implies that whenever a newer release of NetBSD comes, we would have to deal with merge conflicts, fix them, and check all the utilities affected by merge whether they compile now or not. If they don’t compile, fix them and send all the changes upstream.
* Related Tasks :
*# Switch to ELF based system
*# Set up the system for tracking the userland source version analogous to that for nbsd_libc

== Schedule ==
Here is an approximate schedule of how i will work on the project:

=== Pre-Coding Period (Apr 25 - May 22) ===
* I will take a deep and thorough look at minix-nbsd git repository.
* I will be active on MINIX mailing list and IRC channels - #minix, #minix-gsoc and discuss any doubts that i may have.
* I will set up a new machine, install MINIX on it and update it to the trunk before the start of the Coding Period.
* I will discuss with my mentor about the modifications needed in existing design and planning for the project.
* In between, i will identify easy to port utilities, and port them if i get enough time.

=== Week 1 (May 23 - May 29) ===
Complete the dependency table of all the important userland utilities, which will list missing references to functions, missing control codes and NetBSD libraries to port.

=== Week 2 (May 30 - Jun 5) ===
Port all the userland utilities, whose dependencies are trivial or minimal.

=== Week 3 (Jun 6 - Jun 12) ===
Port as many NetBSD libraries as possible which are listed in the dependency table.

=== Week 4 (Jun 13 - Jun 19) ===
Learn about implementing the missing functions and control codes and implement them. Or, find the workarounds of doing the same if implementing the function is not feasible/supported in MINIX.

=== Week 5 (Jun 20 - Jun 26) ===
Continue porting the required NetBSD libraries, if there are any.

Port the userland utilities whose dependencies have been resolved.

=== Week 6 (Jun 27 - Jul 3) ===
Port more userland utilities.

=== Week 7 (Jul 4 - Jul 10) - MIDTERM ===
Test all the userland utilities ported till now, and fixing any bugs encountered in the process.

=== Week 8 (Jul 11 - Jul 17) ===
Complete the mid-term evaluation.

Check if the MINIX base utilities compile with the new ported libraries. Discuss with the mentor if there are issues in it.

=== Week 9 (Jul 18 - Jul 24) ===
Release the ported utilities to the MINIX community for testing.

Complete the implementation of missing functions and control codes, or find their alternatives and code them.

=== Week 10 (Jul 25 - Jul 31) ===
Port more userland utilities in which references to missing functions and Macros have been fixed.

=== Week 11 (Aug 1 - Aug 7) ===
Documenting all the work done till now.

Port more utilities.

=== Week 12 (Aug 8 - Aug 14) ===
Port more utilities and test them.

=== Week 13 (Aug 15 - Aug 21) - FINAL ===
Test all the ported userland utilities and releasing them to the community to get feedbacks.

Clean the code, and improve the documentation.

== Resources ==
* [ftp://ftp.netbsd.org/pub/NetBSD/ Sources of NetBSD release versions]
* [https://cvsweb.netbsd.org/bsdweb.cgi/~checkout~/src/share/mk/bsd.README?rev=HEAD NetBSD's src/share/mk/bsd.README]
* [ftp://ftp.netbsd.org/pub/NetBSD/NetBSD-current/ Source of NetBSD-current development branch]
* [[Porting Guide]]
* [https://www.feyrer.de/NetBSD/tour-de-source-1userland.html NetBSD userland tour]
* https://www.opengroup.org/onlinepubs/000095399
* https://www.gnu.org/prep/standards/standards.html
* [http://www.gnu.org/prep/standards/html_node/Makefile-Conventions.html Makefile Conventions]</text>
      <sha1>n8yqpxhccvmhwh4ujjtebxqsc1ltcc5</sha1>
    </revision>
  </page>
  <page>
    <title>Pkgsrc Upstreaming (GSOC Project)</title>
    <ns>0</ns>
    <id>259</id>
    <revision>
      <id>369</id>
      <parentid>368</parentid>
      <timestamp>2021-09-20T10:41:40Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>/* = Report 10 (July 25 - July 31) */ remove redundant =</comment>
      <origin>369</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="39561" sha1="4p0zl8oyn3sjv0qwroteqcw11yme4nl" xml:space="preserve">Student: Thomas Cort

Mentor: Ben Gras and Gautam Tirumala

git repository: [https://git.minix3.org/?p=minix-pkgsrc.git;a=log;h=refs/heads/pkgsrc minix-pkgsrc] and [https://git.minix3.org/?p=pkgsrc.git;a=log;h=refs/heads/minix-master pkgsrc]

== Abstract ==

The primary goals of this project are to complete any remaining tasks for the minix pkgsrc port, send the changes upstream, and port more software applications to minix. Along the way, the minix pkgsrc tree will be resynced with the upstream tree, and changes will be made to ease the transition from the classic Minix libc to the Minix port of NetBSD's libc.

== Current Status ==

{| class="wikitable"
! Done !! Item !! Percentage Complete !! Comments
|-
| {{TODO}} || pbulk style bulk builds || 80% || Bulk building on a single machine works well. Parallel bulk builds still needs some work. Documented in the [[Minix and pkgsrc|Minix Bulk Building Guide]]
|-
| {{DONE}} {{DONE}} {{DONE}} || resync the minix pkgsrc tree with upstream || 100% | Completed 3 times and documented in [[Syncing Pkgsrc|Syncing the Minix pkgsrc Repository with Upstream]]. Latest pull from upstream was August 10, 2011.
|-
| {{TODO}} || prepare and submit changes upstream || 50% || In progress. See upstreaming status table below for details.
|-
| {{DONE}} || feature to mark a pkg as must compile with minix libc || 100% || This feature is gone now. Everything uses NetBSD libc.
|-
| {{DONE}} || fix packages that don't compile against NetBSD libc || 100% || All of the packages that compiled and worked with Minix libc now compile with NetBSD libc.
|-
| {{TODO}} || port remaining packman packages to minix || 10% || Some just worked with NetBSD libc, I fixed a few, and users submitted patches. In each case, the package was added to the bulk build system's build list.
|-
| {{TODO}} || port new software applications to minix || 10% || In my free time I tried building a lot of packages. There were a lot that built with little or no changes after the NetBSD libc switch. I also ported a few. Our bulk build list more than doubled, from 101 packages in May 2011.
|}

== Upstreaming Status ==

The table below lists packages with changes to be upstreamed. The following packages have been upstreamed or the patches have been eliminated (for example, by switching to NetBSD libc): archivers/bsdtar, archivers/gtar-base, devel/cscope, devel/gmp, devel/gtexinfo, devel/ncurses, devel/patch, devel/pcre, devel/scmgit, devel/scmgit-base, editors/zile, games/cmatrix, games/ninvaders, games/sex, graphics/tiff, ham/locator, lang/gawk, misc/figlet, net/rsync, pkgtools/pkgin, textproc/gsed, textproc/wdiff, wip/ppl.

{| class="wikitable"
! Package !! Patches Prepared !! Submitted !! Accepted !! Patch !! Comments
|-
| archivers/libarchive || {{DONE}} || {{DONE}} || {{TODO}} || [https://www.tomcort.com/minix/libarchive.patch patch] || Rewrote the patch to just display a warning since I'm not able to reproduce the segfaults. Problem Report: [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45044 pkg/45044] Issue: [https://code.google.com/p/libarchive/issues/detail?id=158 158]
|-
| archivers/pax || {{DONE}} || {{DONE}} || {{TODO}} || [https://www.tomcort.com/minix/pax.patch patch] || Submitted again after NetBSD libc Changes. Problem Report: [http://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45065 pkg/45065]
|-
| archivers/unzip || {{DONE}} || {{DONE}} || {{TODO}} || [https://tomcort.com/minix/unzip.patch patch] || Submitted. I'll have a link once it gets through the moderator approval queue. Need to redo patch after NetBSD libc changes.
|-
| bootstrap || {{DONE}} || {{DONE}} || {{TODO}} || [https://www.tomcort.com/minix/bootstrap.patch patch] || Submitted again after NetBSD libc Changes. Problem Report: [http://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45041|pkg/45041]
|-
| databases/db4 || {{DONE}} || {{DONE}} || {{TODO}} || [https://www.tomcort.com/minix/db4.patch patch] || Submitted. Problem Report: [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45087 pkg/45087]
|-
| databases/sqlite3 || {{TODO}} || {{TODO}} || {{TODO}} || || Has just a couple of small patches.
|-
| devel/apr || {{TODO}} || {{TODO}} || {{TODO}} || || A few obvious changes.
|-
| devel/autoconf || {{DONE}} || {{TODO}} || {{TODO}} || [https://www.tomcort.com/minix/autoconf.patch patch] || The only patch left changes the package's Makefile. Waiting until core pkgsrc changes are upstream before submitting this patch.
|-
| devel/binutils || {{TODO}} || {{TODO}} || {{TODO}} || || In progress. I'm Currently forward porting the patches to the latest release.
|-
| devel/bison || {{DONE}} || {{DONE}} || {{TODO}} || || Submitted spawni.c change request to gnulib.
|-
| devel/bmake || {{DONE}} || {{DONE}} || {{TODO}} || [https://www.tomcort.com/minix/bmake.patch patch] || Received some questions and submitted a response. Problem Report: [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45042 pkg/45042] No changes since the switch to NetBSD libc.
|-
| devel/cmake || {{TODO}} || {{TODO}} || {{TODO}} || ||
|-
| devel/flex || {{TODO}} || {{TODO}} || {{TODO}} || || We disable the PIC library by removing the code. This will need to be reworked before upstreaming.
|-
| devel/gettext || {{DONE}} {{TODO}} || {{DONE}} {{TODO}} || {{TODO}} {{TODO}} || || Submitted spawni.c change request to gnulib. IPv6 change can go upstream to gettext.
|-
| devel/m4 || {{DONE}} {{TODO}} || {{DONE}} {{TODO}} || {{TODO}} {{TODO}} || || Submitted spawni.c change request to gnulib. Need to prepare stdio-impl.h change.
|-
| devel/pth || {{TODO}} || {{TODO}} || {{TODO}} || || Most changes are due to a lack of wait4(). It looks like the new libc has that function. I'll do some testing. The other change is MSG_PEEK related. After testing with the new libc, I'll prepare and upstream the MSG_PEEK change.
|-
| devel/subversion-base || {{TODO}} || {{TODO}} || {{TODO}} || || Patch only changes the package's Makefile. Waiting until core pkgsrc changes are upstream before submitting this patch.
|-
| editors/mg || {{TODO}} || {{TODO}} || {{TODO}} || || Some changes might be taken care of by NetBSD libc, others will definitely be taken care of by NetBSD libc. I'll hold off on upstreaming these changes until I can test with NetBSD libc.
|-
| editors/vim-share || {{TODO}} || {{TODO}} || {{TODO}} || || Only patch is for statfs(). Should work out of the box with NetBSD libc.
|-
| games/gnugo || {{TODO}} || {{TODO}} || {{TODO}} || || The changes only include a simple header fix which shouldn't be needed once we switch to NetBSD libc.
|-
| graphics/netpbm || {{TODO}} || {{TODO}} || {{TODO}} || || nameEntry.sin_zero #ifdef should use autoconf. Other changes look good for upstreaming. I'll fix the sin_zero thing and prepare patches.
|-
| lang/gcc44 || {{TODO}} || {{TODO}} || {{TODO}} || || In progress. I'm Currently forward porting the patches to the latest release (gcc.7.x). || ||
|-
| lang/perl5 || {{DONE}} {{TODO}} || {{TODO}} {{TODO}} || {{TODO}} {{TODO}} || [https://git.minix3.org/?p=pkgsrc.git;a=blob;f=lang/perl5/patches/patch-ae;h=f7686452633e93df9ce248fbe0faa647dc65831a;hb=refs/heads/minix-master patch] || Thanks to the new C library, we're down to 1 minix specific code patch. Will submit soon. / The other changes are in the package's Makefile. Waiting until core pkgsrc changes are upstream before submitting the other changes.
|-
| misc/getopt || {{DONE}} || {{TODO}} || {{TODO}} || [https://www.tomcort.com/minix/getopt.patch patch] || Simple fix to add "-liconv". Will send upstream soon.
|-
| mk || {{DONE}} || {{DONE}} || {{TODO}} {{TODO}} || [https://www.tomcort.com/minix/mk-minix.patch patch] [https://www.tomcort.com/minix/mk-destdir.patch patch] || Submitted again after NetBSD libc Changes. Problem Reports: [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45046 pkg/45046]  [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45079 pkg/45079]
|-
| net/libfetch || {{DONE}} || {{DONE}} || {{TODO}} || [https://www.tomcort.com/minix/libfetch.patch patch] || Submitted. Problem Report: [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45039 pkg/45039] No changes since the switch to NetBSD libc.
|-
| pkgtools/bootstrap-mk-files || {{DONE}} || {{DONE}} || {{TODO}} {{DONE}} || [https://www.tomcort.com/minix/bootstrap-mk-files.patch patch] [https://www.tomcort.com/minix/bootstrap-mk-files_bootstrap.sh.patch patch] || Received some questions and submitted a response. bootstrap.sh patch accepted. Problem Reports: [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45045 pkg/45045], [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45061 pkg/45061]. Commits: [https://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/pkgtools/bootstrap-mk-files/files/bootstrap.sh?rev=1.2&amp;content-type=text/x-cvsweb-markup&amp;only_with_tag=MAIN commit] No changes since the switch to NetBSD libc.
|-
| pkgtools/libnbcompat || {{DONE}} || {{DONE}} || {{TODO}} || [https://www.tomcort.com/minix/libnbcompat.patch patch] || Submitted again after NetBSD libc Changes. Problem Report: [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45043 pkg/45043]
|-
| pkgtools/pbulk || {{TODO}} || {{TODO}} || {{TODO}} || || Changes are parallel bulk build related. Holding off on upstreaming the changes until it's working.
|-
| pkgtools/pbulk-base || {{TODO}} || {{TODO}} || {{TODO}} || ||  Changes are parallel bulk build related. Holding off on upstreaming the changes until it's working.
|-
| pkgtools/pkg_install || {{DONE}} || {{DONE}} || {{TODO}} {{TODO}} {{TODO}} || [https://www.tomcort.com/minix/pkg_install-destdir.patch patch] [https://www.tomcort.com/minix/pkg_install-infrec.patch patch] [https://www.tomcort.com/minix/pkg_install-minix.patch patch] || Submitted again after NetBSD libc Changes. Problem Reports: [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45047 pkg/45047] [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45077 pkg/45077] [https://gnats.netbsd.org/cgi-bin/query-pr-single.pl?number=45078 pkg/45078]
|-
| print/ghostscript || {{DONE}} || {{TODO}} || {{TODO}} || [https://www.tomcort.com/minix/ghostscript.patch patch] || Patch only changes the package's Makefile. Waiting until core pkgsrc changes are upstream before submitting this patch.
|-
| security/openssh || {{TODO}} || {{TODO}} || {{TODO}} || || Lots of header related changes. Hopefully NetBSD libc will eliminate some of those.
|-
| security/openssl || {{TODO}} || {{TODO}} || {{TODO}} || || Only a few source code and configuration changes. Patch coming soon.
|-
| security/sudo || {{TODO}} || {{TODO}} || {{TODO}} || || Got this one ported after the version bump broken the package on Minix. It currently doesn't work right due to the conflict between the password format used by NetBSD libc and the Minix password format. It should fix itself with when the NetBSD password format is in use. Waiting to submit patches until it works.
|-
| shells/bash || {{DONE}} {{DONE}} || {{DONE}} {{TODO}} || {{DONE}} {{TODO}} || [https://www.tomcort.com/minix/bash.patch patch] || Submitted job_control patch to bash mailing list, and I got a thank you so I assume it's in (I can't find a public source repository for bash-current). The only patch left changes configure args in the package's Makefile. Waiting until core pkgsrc changes are upstream before submitting this patch.
|-
| shells/bash2 || {{DONE}} || {{TODO}} || {{TODO}} || [https://www.tomcort.com/minix/bash2.patch patch] || The only patch left changes configure args in the package's Makefile. Waiting until core pkgsrc changes are upstream before submitting this patch.
|-
| shells/zsh || {{DONE}} || {{TODO}} || {{TODO}} || [https://www.tomcort.com/minix/zsh.patch patch] || Cleaned up the patch a bit (use HAVE_SETRLIMIT, HAVE_SETPGRP, etc). It doesn't apply cleanly to the latest trunk. I'll try patching zsh-current.
|-
| textproc/xmlrpc-c || {{TODO}} || {{TODO}} || {{TODO}} || || Currently broken.
|-
| wip/cloog || {{DONE}} || {{DONE}} || {{TODO}} || [https://www.tomcort.com/minix/cloog.patch patch] || [https://groups.google.com/group/cloog development/browse_thread/thread/d64e3a1b170b600f# Patch Submitted]. A second patch has been created to limit the file names to 60 characters (NAME_MAX). That will need to be submitted too.
|-
| wm/fluxbox || {{TODO}} || {{TODO}} || {{TODO}} || || Currently broken.
|-
| www/neon || {{DONE}} || {{TODO}} || {{TODO}} || [https://www.tomcort.com/minix/neon.patch patch] || Patch only changes configure args in the package's Makefile. Waiting until core pkgsrc changes are upstream before submitting this patch.
|}

== Status Reports ==

=== Report 1 (May 23 - May 29) ===

This week I spent most of my time focused on pbulk. I completed the pbulk.sh script in order to automate the bulk building process and to make it easier to get consistent results. I was able to successfully complete several bulk builds. Along the way I did several minor fixes: update LD and AR in bootstrap-mk-files, fix the cmake dependency in compiler-rt, and set the proper permissions on /usr.

I created a limited_list file (/usr/pkgsrc/minix/limited_list.pbulk) to tell pbulk which packages to build. The list contains every package that is expected to work on minix. I ran a full build of all of those packages. There were some packages that failed to build. Most of the errors seemed to be related to minor changes in the base system. I will investigate the problems more deeply in the next week or two after I update the minix pkgsrc repository with the upstream changes. I want to avoid fixing the same package twice.

I also worked on parallel bulk building. The documentation says to use NFS when running pbulk across several machines. Since minix doesn't have NFS, I added rysnc commands to push packages and logs between the clients and the master. I can start the build, but when it builds the initial dependency tree I get messages about select() failing. Then when the build starts, it halts with an error about circular dependencies. The upstream pkgsrc repository has a version of pbulk that is several revisions newer than what I've been working with. When I update the minix pkgsrc repository with the upstream changes, I'll come back to this.

Hours worked: 44

=== Report 2 (May 30 - June 5) ===

This week I merged the upstream pkgsrc changes into the minix pkgsrc repository. I fixed a few breakages, did some light porting, adjusted a couple of patches, did some bulk building, and some testing. The updates/changes have been pushed out to the minix pkgsrc repository.

There were a few bumps along the way. I ran into a problem building perl module packages. This is caused by files in binary packages having bad timestamps (year 2038). I'm still looking into this, but it was a problem that was happening before I started the merge. security/sudo needs some more porting work. It too was broken before the merge. I wasn't able to test everything because some packages have been ported to elf and I was using an a.out system. I did test some packages where it was easy to temporarily back out the ELF changes, like openssl.

In the coming week I will work on fixing the file timestamp problem mentioned above, and I will work on upstreaming minix changes.

Hours worked: 48

=== Report 3 (June 6 - June 12) ===

This week I tracked down and fixed the libarchive timestamp problem mentioned in my previous report. I also installed Minix 3.2.0 (elf), and I did a bulk build of pkgsrc packages with decent results. My main focus this week was upstreaming minix changes.

The Upstreaming Status table above was generated by git diffstat master minix-master and some command line magic. It lists all of the packages with minix changes and where I'm at in terms of getting those changes upstream. As of June 12, I've submitted 10 patches and 2 have been accepted.

In the coming week I will continue preparing and submitting patches as well as responding to feedback from upstream.

Hours worked: 42

=== Report 4 (June 13 - June 19) ===

Over the past week I've been working on upstreaming Minix changes to pkgsrc. That involved responding to feedback, asking questions, re-writing patches, submitting problem reports, investigating issues, and doing testing and building. I also began adding a feature to mark a package as must compile with minix libc.

In the coming week I'll be responding to feedback on the Minix pkgsrc patches, I'll finish off the feature to mark a package as must compile with minix libc, I'll do some builds against the new NetBSD-based libc, and I'll submit more patches upstream.

Hours worked: 40

=== Report 5 (June 20 - June 26) ===

Over the past week I finished implementing the feature to mark a package as must compile with minix libc. I'll be writing up a guide for users interested in helping build/test software with the new C library. Also during the week, I continued my effort to prepare and submit patches upstream. See the status table above for details. Additionally, I updated the minix pkgsrc tree with changes from upstream, and I tested the new version of bmake.

In the coming week I'll be responding to feedback on the Minix pkgsrc patches, documenting how to help with moving packages to NetBSD libc, and I'll submit more patches upstream.

Hours worked: 40

=== Report 6 (June 27 - July 3) ===

Over the past week I worked on converting packages to work with NetBSD libc. I wrote a guide on the wiki ([[http://wiki.minix3.org/en/DevelopersGuide/PkgSrcNetBSDlibcConversion|here]]) and asked for people to help. I tracked down a bug in Minix libc's opendir() that caused the new version of git to fail. I worked on upstreaming some patches as well.

In the coming week I'll be converting more packages to use NetBSD libc, and I will continue my upstreaming work.

Hours worked: 40

=== Report 7 (July 4 - July 10) ===

Over the past week I worked on converting packages to work with NetBSD libc. I've got bootstrap working, and next week I'll be working on pbulk and it's dependencies. While doing the conversion I discovered a few small glitches. I patched namespace.h (for shutdown()), I developed a workaround for a problem I ran into with uid_from_user() / user_from_uid(), and I discovered a problem with the way hostnames are resolved when using dhcp.

In the coming week I'll be getting pbulk working, start some bulk builds, and fix what's broken. I'll also continue upstreaming patches.

Hours worked: 42

=== Report 8 (July 11 - July 17) ===

Over the past week I worked on converting packages to work with NetBSD libc. I got pbulk working, and I did some bulk builds. With the help of Ben, pikpik, Antoine, Ivan, and others, most of the major packages are compiling now. Some packages that were broken before, work now (example: zsh). Though, some are broken in new ways; sudo, for example, doesn't work because of the password file format differences between NetBSD and Minix. It looks like Vivek will be working on that issue. Also during the week I submitted changes to gnulib.

In the coming week I'll be upstreaming new patch sets (they changed due to the switch to NetBSD libc) and finishing up the NetBSD libc conversion.

Hours worked: 43

=== Report 9 (July 18 - July 24) ===

During the beginning of last week I worked on converting packages to work with NetBSD libc. Pretty much all of the really important stuff is compiling with NetBSD libc. There are just a few minor packages left.

I spent most of the week doing upstreaming work. Many Minix specific patches were no longer needed because of NetBSD libc and the new struct stat. All of the core pkgsrc patches that needed to be redone after the switch to NetBSD libc were re-created and re-submitted. Several other patches that are still needed were submitted upstream, and some were accepted (rsync in only 1 day!), some were queued (the git patch has made it into the "pu" branch), and other are awaiting upstream developer action (acceptance, rejection, questions, feedback, etc).

Towards the end of the week I began working on gcc and binutils upstreaming. gcc is only accepting new code in the 4.7.x branch (we're currently on the 4.4.x branch), so some forward porting is needed as well as porting new dependencies (cloog, ppl, libelf, ...). I'm still working on the gcc dependencies. The binutils patches are mostly ported to the newest version 2.21 from 2.17. There are still a couple of issues to resolve for binutils to build.

Last but not least, over the weekend I looked into creating a way to install all of the packages with one command. I came up with a target in /usr/Makefile, but the old way was with a package and users seem to like the old way. I changed course and worked on a meta package. The meta package idea is nice in theory, but to make the actual package (bmake package) you need to install all of the software -- this takes a long time and a lot of disk space. I'm going to try another approach to creating a meta package this week.

In the coming week I'll be focusing on gcc and binutils upstreaming. During my downtime (i.e. when my VM is compiling gcc or binutils) I'll look into the minix-all package more.

Hours worked: 45

=== Report 10 (July 25 - July 31) ===

During the past week I've been working on a forward porting binutils-2.17 and gcc-4.4.5 patches to binutils-2.21 and gcc-4.7 snapshot. In order to share my work without messing up the current binutils and gcc packages, I created a wip (work-in-progress) category. The binutils package came from devel/binutils and the gcc47 package came from the pkgsrc-wip project as did wip/cloog and wip/ppl.

During the week I discovered that the pkgsrc-wip project is pretty active and manually merging the changes was a pain, so I created a repository on github ([https://github.com/tcort/pkgsrc-wip]) that has the pkgsrc-wip repository (master branch) and the pkgsrc-wip repository with minix changes (minix-master branch). It's not a full cvs2git conversion; I just have a script to import the daily snapshots, but it makes staying current much easier.

During the week I forward ported the patches for binutils. I ended up getting stuck -- binutils compiled but didn't work. As I was debugging the issue, I got a much appreciated e-mail from Antoine with a patch that fixed the issue. During the week I tested/ported some dependencies for gcc47. There were two packages requiring patches... ppl and cloog. The ppl patches have been accepted upstream. I have submitted a patch to cloog, and I am working on another to shorten file names. Minix's NAME_MAX is 60 and some are file names are longer than 60 characters.

Also during the week a pkg_install bug was discovered by Jan Wieck. My re-write of the circular dependency checking didn't work as it needed to work. Jan Wieck tracked down the bug and sent me a patch which I've applied. So far I haven't had any issues with pkg_install. I'm going to submit the patch upstream soon.

On Friday afternoon and Saturday I worked on bulk building. The current pbulk.sh script has the system /usr/pkg in the PATH as /usr/pkg.sav. At least one package (gzip) is picking up things from this path (/usr/pkg.sav/bin/bash). I'm trying to come up with a way to bulk build without /usr/pkg.sav (which currently has gcc) and without installing gcc in the base system. I tried adding the gcc package to bootstrap, but it refused to build in bootstrap mode. I tried adding the gcc package to the binary kit, but when running bulkbuild I get a circular dependency error (even though pkg_info reports that gcc and gmp are installed). There is one more thing I want to try that I saw on the mailing list. If all else fails, I write a script to grep each package for the offending PATHs and fix the packages (mostly autoconf configure scripts).

In between everything else this week I added a "minix-all" package. The package will install every package that is known to work on Minix.

The plan for next week and beyond:
* refresh pkg_install patches on the upstream tracker
* fix cloog filenames
* forward port gcc47 patches
* pbulk without packages picking up dependencies that they shouldn't (gzip picks up /usr/pkg.sav/bin/bash but bash isn't a dependency)
* resync pkgsrc repository with upstream
* get parallel bulk build working
* port GNU emacs

Hours worked: 48

=== Report 11 (August 1 - August 7) ===

This week past week I created a new patch set for pkg_install with the updated circular dependency checking, and I submitted it to the upstream problem report system. I also fixed an issue with wip/cloog's use of filenames that are longer than 60 characters. Additionally, I did some package maintenance (reviewed and applied tk patches, patched links, etc).

I did get further with gcc47 porting. It gets to stage 2 of the build. While working on gcc I ran into a problem with binutils-2.21.1 where a specific autoconf test results in an object file that causes VM to panic. That will have to be fixed at some point, but the good news is that gcc47 doesn't seem to need such a new version of binutils (i.e. the bug won't stop me from working on gcc47).

In between my other tasks I'm still working on upstreaming changes. Recently, the git patches were merged into git's master branch. Also, some of the pkgsrc patches got more feedback. Specifically, the way we handle X11_TYPE (using "native" for a package installed with pkgsrc with some OPSYS=Minix checkes) isn't as elegant as adding a new X11_TYPE, so I'll be working on that. Thankfully, Jan Wieck got X11 going with NetBSD libc, so I can focus on just the pkgsrc changes.

The plan for next week and beyond:
* forward port gcc47 patches
* create an X11_TYPE
* pbulk without packages picking up dependencies that they shouldn't (gzip picks up /usr/pkg.sav/bin/bash but bash isn't a dependency)
* resync pkgsrc repository with upstream
* get parallel bulk build working (try distbb?)
* port GNU emacs

Hours worked: 40

=== Status Report 12 (August 8 - August 14) ===

This week I did another pull from dragonflybsd's git mirror of pkgsrc, and I brought our pkgsrc tree up to date with upstream. We're current as of 10 August 2011. After some minor changes to get things working again, I did a bulk build to ensure that I hadn't broken anything important. That turned out well.

Also during the week, I fixed an issue with gzip where it was picking up bash from /usr/pkg.sav/bin/bash during bulk builds and inserting "#!/usr/pkg.sav/bin/bash" at the top of the scripts. I grepped the packages after a bulk build to ensure the /usr/pkg.sav wasn't getting put in any other scripts or configuration files.

The big accomplishment this week was getting gcc47 working (C, C++, fortran). I pulled in some changes from pkgsrc-wip to use a newer snapshot, added some patches to deal with big_off_t in struct stat, and I dealt with a few other issues. I found a bug in mkdir and wrote a patch. I also tested Vivek's NetBSD mkdir port.

The coming week is the last week of Google's Summer of Code. I'll be trying to finish up some remaining tasks.

The plan for next week:
* create X11_TYPE
* fix out of memory bug when doing a git clone of pkgsrc.git
* get parallel bulk build working (try distbb?)
* try to get a few more patches upstream
* documentation clean-up 
* port GNU emacs

Hours worked: 52

=== Status Report 13 (August 15 - August 22) ===

This week I worked on the x11 build infrastructure in pkgsrc. I added an X11_TYPE called "monolithic" for our minix/x11 package. I incorporated Jan Weick's pkgsrc changes and made additional changes to a few packages. Now building X applications seems to be working. I was able to build and run games/xbill. That package wasn't working before. I also did some light porting work to get nethack and the Atmel AVR cross compiling toolchain working on Minix. Additionally, I did some documentation clean-up on the wiki. During the week, I did a lot of debugging of the git out of memory issue. Ultimately Ben tracked it down to an issue with malloc() itself. Lastly, I did some testing of NetBSD userland utilities that I suggested be ported to Minix.

This will be my final report here as Summer of Code is coming to a close on Monday August 22, 2011. I very much enjoyed my time working for the Minix project this summer. I thank Ben Gras and Gautam Tirumala for their great support and mentorship throughout the term. I will be continuing my pkgsrc and porting work as a volunteer.

Hours worked: 45

== Design ==

This project doesn't have one all encompassing design. Rather, it has several small designs which are enumerated below.

=== Bulk Builds Design ===

For building packages, we will be using [https://www.netbsd.org/docs/pkgsrc/bulk.html#bulk.pbulk pbulk] (additional documentation [https://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/doc/HOWTO-pbulk?rev=1.7&amp;content-type=text/x-cvsweb-markup&amp;only_with_tag=MAIN here]). This feature is partially complete, but it still needs a little more work. A script, [https://git.minix3.org/?p=pkgsrc.git;a=blob;f=minix/pbulk.sh;h=1fc684ab597c6e57f7d1696df1c8472f6290f533;hb=refs/heads/minix-master pbulk.sh], has some of the preliminaries.

Tasks left to complete:

* Finish the pbulk.sh script
** pbulk tools installation (line 58 may need the correct PATH -- see HOWTO-pbulk)
** binary kit bootstrap
** kick off the build
* Attempt building pbulk (my first attempt at building failed with Cannot find gld)
* Create a limited_list file to tell pbulk which packages to build. Initially this list will contain a list of the packages currently on the FTP server.
* Testing
** Run pbulk on a single host with limited_list containing just figlet
** Run pbulk on multiple hosts
** Try a full build
* Documentation
** Write a user guide on the wiki

=== pkgsrc repo sync Design ===

The Minix project maintains it's own copy of the pkgsrc repository with minix specific changes in a git repo named [https://git.minix3.org/?p=pkgsrc.git;a=shortlog;h=refs/heads/minix-master pkgsrc.git]. Currently, there doesn't exist an automated way of synchronizing the minix pkgsrc repo with the NetBSD pkgsrc repo, so that task is done manually.

DragonFlyBSD does a CVS-&gt;git conversion of the official NetBSD pkgsrc repository. They maintain a git branch with a pristine copy of the NetBSD pkgsrc repo. I will be merging the the DragonFlyBSD pkgsrc repo into the 'master' branch of the minix repository. That will bring the master branch up to date. From there, I will merge the changes into the minix-master branch and fix what breaks.

Tasks:
* Merge the DragonFlyBSD pkgsrc repository in the minix pkgsrc repository (master branch).
* Merge the changes from the master branch into the minix-master branch.
* Deal with the merge conflicts.
* Regenerate the digests
* Run a bulk build
* Fix build failures
* Test the software

=== Prepare and Send Changes Upstream Design ===

The Minix port of pkgsrc currently lives in the minix pkgsrc repository. We want to get the minix port integrated into the mainline (NetBSD) pkgsrc. Another goal is to send patches to package source code upstream to the software maintainers.

Tasks (pkgsrc changes):
* diff master and minix-master branches to find the changes
* review the changes and look at feedback from last year.
* clean up where needed
* create patches
* send patches to tech-pkg for feedback
* respond to feedback
* submit a "Problem Report"

Tasks (other changes):
* diff master and minix-master branches to find the changes
* clean up where needed
* create patches
* send patches to the software author

=== Must Compile with Minix libc Design ===

To ease the transition from the classic minix libc to the minix port of NetBSD's libc, we will add a feature in pkgsrc that will mark a package as "must compile with minix libc instead of netbsd libc". The flag will cause the compiler invocation to compile the package against minix libc instead of netbsd libc. Initially, all packages will be marked as 'must compile with minix libc'. Around week 10 of GSoC, I will begin making changes to the packages to compile with the netbsd libc and removing individual packages from the list of "must compile with minix libc" packages.

I will be adding a list of packages to a file like mk.conf, and in there I will add the code to set the proper compiler invocation for those packages. Since the compile command will change when netbsd libc becomes the default, an environment variable with the proper flags (supplied by the base system) will be helpful to ease the transition.

Tasks:
* Add environment variables MINIX_LIBC_LINK="" and NETBSD_LIBC_LINK="-nostdlib -lnbsd_libc" to a file in the base system that will get sourced by pkgsrc.
* determine the correct compiler invocations for minix libc and netbsd libc
* add the compiler invocation code and package list of ''mk.conf''
* test

=== Port remaining packman packages to Minix Design ===

Packman is the former minix package manager. We want to make sure that all of the packages that packman enabled a user to install can be installed via pkgsrc. I made a list of remaining packages by diff'ing the packman package list and the binary package list from pkgsrc. These are the packman packages I found without corresponding pkgsrc packages: apache, bc, cvs, dungeon, ede, efltk, emacs, exim, fb, flawfinder, fltk, ghostscript, glib, gnu-coreutils, gv, !ImageMagick, irssi, jpeg, kermit, less, libpng, lynx, ncftp, nethack, nvi, pine, python, rcs, screen, simh, slrn, tiff, unrtf, vile, wget, Xaw3d, xv. Note, the list may get smaller. There are a few packages already created that are waiting for testing/review ( see [[https://github.com/pikpik/minix-pkgsrc/issues]] ), some packages may not be worth spending summer of code time porting (dungeon, nethack, etc), and some packages may not be worth porting at all (glib-2.10 is so old).

Tasks:
** go through the list above and determine which packman packages should be ported to pkgsrc.
** attempt to compile them
** if success, then add to pbulk's limited_list
** if failure
*** extract the minix fixes from the packman package
*** apply the changes to the pkgsrc package
*** do anything else required to get the package working on minix
*** send the patches upstream

== NetBSD ==

As described above, we want to transition to the point where all pkgsrc packages compile against the netbsd libc. I will go through all of the packages, remove the 'must compile with minix libc' flag, and fix what breaks.

Tasks:
* Try building every package that compiles on minix with the 'must compile with minix libc' flag turned off. The list of packages can be taken from the pbulk limited_list file.
** If a package works with netbsd libc, the option will be removed.
** If a package doesn't work with netbsd libc, the option will stay.
* Fix any packages that don't compile with netbsd libc, removing the option as I go.

=== Port new software applications to Minix Design ===

The final part of the project is to port new software applications to minix. The list of applications has yet to be determined, but it will probably include applications listed on the [[Wishlist]] and applications suggested by the community.

Tasks:
* Determine the software to be ported
* Port the software
* Submit patches upstream
* Add the package name to pbulk's limited_list file.
* Repeat

== Schedule ==

This schedule provides a general outline for how I will proceed this summer.

=== Pre-Coding Period (Apr 25 - May 22) ===

Community Bonding
* I'll join the pkgsrc mailing list and send an e-mail about the GSoC project and its goals. I'll ask about how to proceed with getting the minix changes upstream.
* I'm already on the minix3 google group and I'll be on IRC in #minix-pkgsrc, #minix-gsoc, #minix, and #pkgsrc

Learning
* I'll finish reading the pkgsrc documentation and experiment in my own little sandbox.
* I'll read through Gautam's changes from last summer.

Other Stuff
* I'll create a wiki page to report my progress and write up a design.
* In the days leading up to the start of Summer of Code I'll do a fresh install of Minix and update it to trunk.

=== Week 1 (May 23 - May 29) ===

Finish bulk building.

=== Week 2 (May 30 - Jun 5) ===

Sync the Minix pkgsrc repository with the upstream repository. Use some git magic to merge the changes, deal with the merge conflicts, regenerate the digests, run a bulk build, fix build failures, test the software, etc.

=== Week 3 (Jun 6 - Jun 12) ===

Continue fixing things that were broken as part of the sync with the upstream repository.

=== Week 4 (Jun 13 - Jun 19) ===

Prepare patches for pkgsrc upstream, submit them for review, and respond to feedback. Along with submitting patches to pkgsrc I will also submit minix-specific patches to the upstream software projects.

=== Week 5 (Jun 20 - Jun 26) ===

Continue working with upstream to get our changes accepted.

=== Week 6 (Jun 27 - Jul 3) ===

Add a feature to mark a package as "must compile with minix libc". Then I'll run a bulk build to find out which packages compile with netbsd libc and which packages only compile with minix libc.

=== Week 7 (Jul 4 - Jul 10) - MIDTERM ===

Port remaining packman packages.

=== Week 8 (Jul 11 - Jul 17) ===

Port remaining packman packages.

=== Week 9 (Jul 18 - Jul 24) ===

Port remaining packman packages.

=== Week 10 (Jul 25 - Jul 31) ===

Fix packages that don't compile against netbsd libc.

=== Week 11 (Aug 1 - Aug 7) ===

Fix packages that don't compile against netbsd libc.

=== Week 12 (Aug 8 - Aug 14) ===

Port new software.

=== Week 13 (Aug 15 - Aug 21) - FINAL ===

Port new software.

== Resources ==

pkgsrc docs
* [https://www.netbsd.org/docs/pkgsrc/ The pkgsrc guide]

Bulk Building
* [[Minix and pkgsrc|Minix Bulk Building Guide]]
* [https://www.netbsd.org/docs/pkgsrc/bulk.html#bulk.pbulk pbulk section in the pkgsrc guide]
* [https://www.dragonflybsd.org/docs/developer/PbulkBuilding/ DragonFlyBSD pBulk Building Guide]
* [https://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/doc/HOWTO-pbulk?rev=1.7&amp;content-type=text/x-cvsweb-markup&amp;only_with_tag=MAIN pbulk HOWTO]

Minix pkgsrc docs
* [[:releases:3.2.0:DevelopersGuide:TestingPkgsrc|Testing pkgsrc]]
* [[:releases:3.2.0:DevelopersGuide:VolunteerPkgsrc|Volunteering to help with pkgsrc]]
* [[:releases:3.2.0:DevelopersGuide:PkgSrcNetBSDlibcConversion|Guide to Converting Packages to use NetBSD libc]]
* [[:releases:3.2.0:UsersGuide:InstallingBinaryPackages|Installing Binary Packages]]
* [[:releases:3.2.0:DevelopersGuide:PortingGuide|Porting Guide]]
* [[:releases:3.2.0:DevelopersGuide:SyncPkgsrc|Syncing the Minix pkgsrc Repository with Upstream]]
* [[Pkgsrc (GSOC Project)|Google Summer of Code Project 2010 - Porting Pkgsrc to Minix]]

Mailing Lists
* [https://mail-index.netbsd.org/tech-pkg/ tech-pkg mailing list]
* Message to tech-pkg: [https://mail-index.netbsd.org/tech-pkg/2010/05/08/msg005423.html Porting Pkgsrc to Minix]
* Message to tech-pkg: [https://mail-index.netbsd.org/tech-pkg/2010/06/15/msg005620.html Progress on Minix port of pkgsrc]
* Message to tech-pkg: [https://mail-index.netbsd.org/tech-pkg/2011/04/26/msg007068.html pkgsrc on Minix - Google Summer of Code Project]

pkgsrc repos
* [https://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/?only_with_tag=MAIN Official pkgsrc Repository (CVS)]
* [https://gitweb.dragonflybsd.org/pkgsrcv2.git DragonFlyBSD pkgsrc Repository (git)]
* [https://git.minix3.org/?p=pkgsrc.git;a=shortlog;h=refs/heads/minix-master Minix3 pkgsrc Repository (git)]

Other
* [https://pkgsrc.se/ pkgsrc.se Web-based Package Viewer]</text>
      <sha1>4p0zl8oyn3sjv0qwroteqcw11yme4nl</sha1>
    </revision>
  </page>
  <page>
    <title>File:Sig.jpg</title>
    <ns>6</ns>
    <id>260</id>
    <revision>
      <id>370</id>
      <timestamp>2021-09-20T10:49:56Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <origin>370</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="0" sha1="phoiac9h4m842xq45sp7s6u21eteeq1" xml:space="preserve" />
      <sha1>phoiac9h4m842xq45sp7s6u21eteeq1</sha1>
    </revision>
    <upload>
      <timestamp>2021-09-20T10:49:56Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment />
      <filename>Sig.jpg</filename>
      <src>https://wiki.iberty.cf/images/e/ef/Sig.jpg</src>
      <size>35177</size>
      <sha1base36>byqu774ub8o7sjivo9u6cf1yaig3aau</sha1base36>
      <rel>e/ef/Sig.jpg</rel>
      <contents encoding="base64">/9j/4AAQSkZJRgABAgEAYABgAAD/4QgxRXhpZgAATU0AKgAAAAgABwESAAMAAAABAAEAAAEaAAUA
AAABAAAAYgEbAAUAAAABAAAAagEoAAMAAAABAAIAAAExAAIAAAAcAAAAcgEyAAIAAAAUAAAAjodp
AAQAAAABAAAApAAAANAADqZ4AAAnEAAOpngAACcQQWRvYmUgUGhvdG9zaG9wIENTMiBXaW5kb3dz
ADIwMDg6MDM6MDYgMjM6NDc6NTAAAAAAA6ABAAMAAAABAAEAAKACAAQAAAABAAABlqADAAQAAAAB
AAAAIAAAAAAAAAAGAQMAAwAAAAEABgAAARoABQAAAAEAAAEeARsABQAAAAEAAAEmASgAAwAAAAEA
AgAAAgEABAAAAAEAAAEuAgIABAAAAAEAAAb7AAAAAAAAAEgAAAABAAAASAAAAAH/2P/gABBKRklG
AAECAABIAEgAAP/tAAxBZG9iZV9DTQAB/+4ADkFkb2JlAGSAAAAAAf/bAIQADAgICAkIDAkJDBEL
CgsRFQ8MDA8VGBMTFRMTGBEMDAwMDAwRDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAENCwsN
Dg0QDg4QFA4ODhQUDg4ODhQRDAwMDAwREQwMDAwMDBEMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
DAwM/8AAEQgADQCgAwEiAAIRAQMRAf/dAAQACv/EAT8AAAEFAQEBAQEBAAAAAAAAAAMAAQIEBQYH
CAkKCwEAAQUBAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAABBAEDAgQCBQcGCAUDDDMBAAIRAwQh
EjEFQVFhEyJxgTIGFJGhsUIjJBVSwWIzNHKC0UMHJZJT8OHxY3M1FqKygyZEk1RkRcKjdDYX0lXi
ZfKzhMPTdePzRieUpIW0lcTU5PSltcXV5fVWZnaGlqa2xtbm9jdHV2d3h5ent8fX5/cRAAICAQIE
BAMEBQYHBwYFNQEAAhEDITESBEFRYXEiEwUygZEUobFCI8FS0fAzJGLhcoKSQ1MVY3M08SUGFqKy
gwcmNcLSRJNUoxdkRVU2dGXi8rOEw9N14/NGlKSFtJXE1OT0pbXF1eX1VmZ2hpamtsbW5vYnN0dX
Z3eHl6e3x//aAAwDAQACEQMRAD8A7uz6xdNpzcrEuc6t2L6YLtpfvfYaq/Roqp9S6yyp+bgMf+j+
nmUoT/rX0ZtlbG2PsY9jrH2tqs2sAayz03/o9zsp3rUs+xV/rlfq/pKFVP8AzP8Atlcbftv2t87P
U9b1/tNW/wC1+n+l9D9pfY/S+0/qv9E9H9X9JCo/5o/ah6Pr/SGzb9p9L191O76Ps+2/0Tf6n6T0
f+vqj+r8VzqH6y9Ca6xrstrTTO/c144f9mlu5n6Rv2jdTur/AMLXd/obVHqP1hxsKvHtYwXVZJft
tdYyis+m5tfo13ZRrpfl37/1Kh76mZTKb7PX2VrOH/M+bN+/0/tLtk+t6Xqbc/1Ps3p/o/S/5V/t
/wDB/s5E6l/zb/ZeF6v2n9nfY3+n6Hr7fsHp0/aPtuz3fZ/Q9Df9o/Wv9D/hkhwX1U6nVOo5GDZj
MpxftRyrPRafUbXteWusZu9QfQ2VWfRQW/WbojzU0ZBDr3mtjXVWtIcDQz9O19Tfs3vzcTY/I9Jj
/tNP76nkfsv0cf7V6mz7TZ9n3+ru9WMndt2+/wBD0PtP2b/Aeh6P2f8AwCxsD/mb6LfS9XZNP896
8fS6b6O7d+j27/2R6v8Ag/8AS/8AaxIcHW1OrX9aeg2uqazK3G5wawenb3NAZY/9H+ios+3YfpZF
v6C37RV6dibC+tHSczFxsjdZScr0Wiuyq0Fr8gVnHba709jWWuvrqqyd32a63+ZuWdh/80PSp9P1
dm0eh6nr/wA16nTfQ2/8Bv8A2R6X8j1PV/7XoFH/ADO/VPT+1bpq+y7/ALRv9Pdifs6PW9/2X7R9
h+x/8L9o3/8Aeol+r8UO3Z9ZOi1sre7IJbbWy9myq1/6KwNNdzhXW/06/wBJX77Pob0R3W8EVY9z
C6yvI9UyGuDmNobY/KdbQ5v2hrqH1fZ7KPS9f7S/0fTWNh/80Nj/AE/Xj0Rt9T7TH2bfj/Zvs272
/Zd32T7N6P8Ag/8A0IR+ojoP2Vm42DG3dS+0bA8k1/rP7aD9xbkNq+1/Q+ze/wC0fZfQ/V0vR4pb
d31o6PXRZc19t3o1PvfXXTaXhlbraX+o11bfRs9bFyavTv8AS99Nid/1hob1EYQotfX6wxnZLRLB
cYHpu02t9ztnuf6v/Aeh+mWPkf8AM/0h632j09uXE+vHqTmftD0Y/wC1O/8AaX9G/R/zX/mqV3/s
X/5zN/8ALff23bfW9P8Ak+z1fs/87t/Qfzfr/rPoJfq/FTfo+sPSMiyqqm5735BPogU2+9o9P9YY
TV/RHevT6eb/AES31P0dyI7rXS22NqdeBY51rA3a6d1Ae7Ia72+za2m17N388xn6H1Fg1f8ANX0c
KPtv2X1a/sPqfafS5p/Z/wBl9X2elu+zfYvsv6X+d9T9H9vRM7/mn6uR632n7Zvx/tHp/avX3fZb
/RjZ7937K+2/afQ9/wDPep+tpfq/FTq5n1h6XiV7nPdY51H2qtjGPO6twcaN1u30KPtL2ejj/abK
vVv/AEX84rWHmV5bbC0Fj6bDVYw8ggNsZx/paLab2fyLVj3/APNf7Lb6/qfZ/Qo3z6/8x6z/ALD6
e33el9o9T0fT/wAH/wACtHpAxw3L9EuL/tLvXLgAZ2VfZx7S72N6f9j9P8/0/wCe/TeogeGtLU30
kkk1SkkkklP/2f/tDQBQaG90b3Nob3AgMy4wADhCSU0EJQAAAAAAEAAAAAAAAAAAAAAAAAAAAAA4
QklNA+0AAAAAABAAYAMSAAEAAQBgAxIAAQABOEJJTQQmAAAAAAAOAAAAAAAAAAAAAD+AAAA4QklN
BA0AAAAAAAQAAAB4OEJJTQQZAAAAAAAEAAAAHjhCSU0D8wAAAAAACQAAAAAAAAAAAQA4QklNBAoA
AAAAAAEAADhCSU0nEAAAAAAACgABAAAAAAAAAAI4QklNA/UAAAAAAEgAL2ZmAAEAbGZmAAYAAAAA
AAEAL2ZmAAEAoZmaAAYAAAAAAAEAMgAAAAEAWgAAAAYAAAAAAAEANQAAAAEALQAAAAYAAAAAAAE4
QklNA/gAAAAAAHAAAP////////////////////////////8D6AAAAAD/////////////////////
////////A+gAAAAA/////////////////////////////wPoAAAAAP//////////////////////
//////8D6AAAOEJJTQQAAAAAAAACAAE4QklNBAIAAAAAAAQAAAAAOEJJTQQwAAAAAAACAQE4QklN
BC0AAAAAAAYAAQAAAAU4QklNBAgAAAAAABAAAAABAAACQAAAAkAAAAAAOEJJTQQeAAAAAAAEAAAA
ADhCSU0EGgAAAAADOwAAAAYAAAAAAAAAAAAAACAAAAGWAAAAAwBzAGkAZwAAAAEAAAAAAAAAAAAA
AAAAAAAAAAAAAQAAAAAAAAAAAAABlgAAACAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAA
AAAAAAAQAAAAAQAAAAAAAG51bGwAAAACAAAABmJvdW5kc09iamMAAAABAAAAAAAAUmN0MQAAAAQA
AAAAVG9wIGxvbmcAAAAAAAAAAExlZnRsb25nAAAAAAAAAABCdG9tbG9uZwAAACAAAAAAUmdodGxv
bmcAAAGWAAAABnNsaWNlc1ZsTHMAAAABT2JqYwAAAAEAAAAAAAVzbGljZQAAABIAAAAHc2xpY2VJ
RGxvbmcAAAAAAAAAB2dyb3VwSURsb25nAAAAAAAAAAZvcmlnaW5lbnVtAAAADEVTbGljZU9yaWdp
bgAAAA1hdXRvR2VuZXJhdGVkAAAAAFR5cGVlbnVtAAAACkVTbGljZVR5cGUAAAAASW1nIAAAAAZi
b3VuZHNPYmpjAAAAAQAAAAAAAFJjdDEAAAAEAAAAAFRvcCBsb25nAAAAAAAAAABMZWZ0bG9uZwAA
AAAAAAAAQnRvbWxvbmcAAAAgAAAAAFJnaHRsb25nAAABlgAAAAN1cmxURVhUAAAAAQAAAAAAAG51
bGxURVhUAAAAAQAAAAAAAE1zZ2VURVhUAAAAAQAAAAAABmFsdFRhZ1RFWFQAAAABAAAAAAAOY2Vs
bFRleHRJc0hUTUxib29sAQAAAAhjZWxsVGV4dFRFWFQAAAABAAAAAAAJaG9yekFsaWduZW51bQAA
AA9FU2xpY2VIb3J6QWxpZ24AAAAHZGVmYXVsdAAAAAl2ZXJ0QWxpZ25lbnVtAAAAD0VTbGljZVZl
cnRBbGlnbgAAAAdkZWZhdWx0AAAAC2JnQ29sb3JUeXBlZW51bQAAABFFU2xpY2VCR0NvbG9yVHlw
ZQAAAABOb25lAAAACXRvcE91dHNldGxvbmcAAAAAAAAACmxlZnRPdXRzZXRsb25nAAAAAAAAAAxi
b3R0b21PdXRzZXRsb25nAAAAAAAAAAtyaWdodE91dHNldGxvbmcAAAAAADhCSU0EKAAAAAAADAAA
AAE/8AAAAAAAADhCSU0EFAAAAAAABAAAAAU4QklNBAwAAAAABxcAAAABAAAAoAAAAA0AAAHgAAAY
YAAABvsAGAAB/9j/4AAQSkZJRgABAgAASABIAAD/7QAMQWRvYmVfQ00AAf/uAA5BZG9iZQBkgAAA
AAH/2wCEAAwICAgJCAwJCQwRCwoLERUPDAwPFRgTExUTExgRDAwMDAwMEQwMDAwMDAwMDAwMDAwM
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
L3hhcC8xLjAvADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3pr
YzlkIj8+Cjx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IjMuMS4x
LTExMiI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8y
Mi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAg
ICAgICAgICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyI+CiAg
ICAgICAgIDxkYzpmb3JtYXQ+aW1hZ2UvanBlZzwvZGM6Zm9ybWF0PgogICAgICA8L3JkZjpEZXNj
cmlwdGlvbj4KICAgICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAg
eG1sbnM6eGFwPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIj4KICAgICAgICAgPHhhcDpD
cmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ1MyIFdpbmRvd3M8L3hhcDpDcmVhdG9yVG9vbD4K
ICAgICAgICAgPHhhcDpDcmVhdGVEYXRlPjIwMDgtMDMtMDZUMjM6NDc6NTArMDE6MDA8L3hhcDpD
cmVhdGVEYXRlPgogICAgICAgICA8eGFwOk1vZGlmeURhdGU+MjAwOC0wMy0wNlQyMzo0Nzo1MCsw
MTowMDwveGFwOk1vZGlmeURhdGU+CiAgICAgICAgIDx4YXA6TWV0YWRhdGFEYXRlPjIwMDgtMDMt
MDZUMjM6NDc6NTArMDE6MDA8L3hhcDpNZXRhZGF0YURhdGU+CiAgICAgIDwvcmRmOkRlc2NyaXB0
aW9uPgogICAgICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgICAgICAgICB4bWxu
czp4YXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1s
bnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMi
PgogICAgICAgICA8eGFwTU06RG9jdW1lbnRJRD51dWlkOjBFNzMzOUMyQ0VFQkRDMTFCRDhDRUI0
QkM4M0YxNTU1PC94YXBNTTpEb2N1bWVudElEPgogICAgICAgICA8eGFwTU06SW5zdGFuY2VJRD51
dWlkOjBGNzMzOUMyQ0VFQkRDMTFCRDhDRUI0QkM4M0YxNTU1PC94YXBNTTpJbnN0YW5jZUlEPgog
ICAgICAgICA8eGFwTU06RGVyaXZlZEZyb20gcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAg
ICAgICAgICA8c3RSZWY6aW5zdGFuY2VJRD51dWlkOkQ2M0Q0NUU3Q0RFQkRDMTFCRDhDRUI0QkM4
M0YxNTU1PC9zdFJlZjppbnN0YW5jZUlEPgogICAgICAgICAgICA8c3RSZWY6ZG9jdW1lbnRJRD51
dWlkOkQ2M0Q0NUU3Q0RFQkRDMTFCRDhDRUI0QkM4M0YxNTU1PC9zdFJlZjpkb2N1bWVudElEPgog
ICAgICAgICA8L3hhcE1NOkRlcml2ZWRGcm9tPgogICAgICA8L3JkZjpEZXNjcmlwdGlvbj4KICAg
ICAgPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIKICAgICAgICAgICAgeG1sbnM6dGlmZj0i
aHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iPgogICAgICAgICA8dGlmZjpPcmllbnRhdGlv
bj4xPC90aWZmOk9yaWVudGF0aW9uPgogICAgICAgICA8dGlmZjpYUmVzb2x1dGlvbj45NjAxMjAv
MTAwMDA8L3RpZmY6WFJlc29sdXRpb24+CiAgICAgICAgIDx0aWZmOllSZXNvbHV0aW9uPjk2MDEy
MC8xMDAwMDwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+
MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPHRpZmY6TmF0aXZlRGlnZXN0PjI1Niwy
NTcsMjU4LDI1OSwyNjIsMjc0LDI3NywyODQsNTMwLDUzMSwyODIsMjgzLDI5NiwzMDEsMzE4LDMx
OSw1MjksNTMyLDMwNiwyNzAsMjcxLDI3MiwzMDUsMzE1LDMzNDMyO0QwNDEwMEM1M0RGRjcyREIz
ODczNDcxRDRBMDZBQkRDPC90aWZmOk5hdGl2ZURpZ2VzdD4KICAgICAgPC9yZGY6RGVzY3JpcHRp
b24+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5z
OmV4aWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20vZXhpZi8xLjAvIj4KICAgICAgICAgPGV4aWY6UGl4
ZWxYRGltZW5zaW9uPjQwNjwvZXhpZjpQaXhlbFhEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOlBp
eGVsWURpbWVuc2lvbj4zMjwvZXhpZjpQaXhlbFlEaW1lbnNpb24+CiAgICAgICAgIDxleGlmOkNv
bG9yU3BhY2U+MTwvZXhpZjpDb2xvclNwYWNlPgogICAgICAgICA8ZXhpZjpOYXRpdmVEaWdlc3Q+
MzY4NjQsNDA5NjAsNDA5NjEsMzcxMjEsMzcxMjIsNDA5NjIsNDA5NjMsMzc1MTAsNDA5NjQsMzY4
NjcsMzY4NjgsMzM0MzQsMzM0MzcsMzQ4NTAsMzQ4NTIsMzQ4NTUsMzQ4NTYsMzczNzcsMzczNzgs
MzczNzksMzczODAsMzczODEsMzczODIsMzczODMsMzczODQsMzczODUsMzczODYsMzczOTYsNDE0
ODMsNDE0ODQsNDE0ODYsNDE0ODcsNDE0ODgsNDE0OTIsNDE0OTMsNDE0OTUsNDE3MjgsNDE3Mjks
NDE3MzAsNDE5ODUsNDE5ODYsNDE5ODcsNDE5ODgsNDE5ODksNDE5OTAsNDE5OTEsNDE5OTIsNDE5
OTMsNDE5OTQsNDE5OTUsNDE5OTYsNDIwMTYsMCwyLDQsNSw2LDcsOCw5LDEwLDExLDEyLDEzLDE0
LDE1LDE2LDE3LDE4LDIwLDIyLDIzLDI0LDI1LDI2LDI3LDI4LDMwOzMwQjU2QkY4MzQ4Nzc0QkE2
RDY4NkNGNkFCOUFEMjU4PC9leGlmOk5hdGl2ZURpZ2VzdD4KICAgICAgPC9yZGY6RGVzY3JpcHRp
b24+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5z
OnBob3Rvc2hvcD0iaHR0cDovL25zLmFkb2JlLmNvbS9waG90b3Nob3AvMS4wLyI+CiAgICAgICAg
IDxwaG90b3Nob3A6SGlzdG9yeS8+CiAgICAgICAgIDxwaG90b3Nob3A6Q29sb3JNb2RlPjM8L3Bo
b3Rvc2hvcDpDb2xvck1vZGU+CiAgICAgICAgIDxwaG90b3Nob3A6SUNDUHJvZmlsZT5zUkdCIElF
QzYxOTY2LTIuMTwvcGhvdG9zaG9wOklDQ1Byb2ZpbGU+CiAgICAgIDwvcmRmOkRlc2NyaXB0aW9u
PgogICA8L3JkZjpSREY+CjwveDp4bXBtZXRhPgogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAK
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
IAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAog
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAo8P3hwYWNr
ZXQgZW5kPSJ3Ij8+/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84A
AgAJAAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAEAAPbWAAEAAAAA0y1IUCAg
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAA
AAAzZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAA
AiwAAAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmll
dwAAA9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgM
Z1RSQwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0
dC1QYWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAA
AAASc1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVog
AAAAAAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9k
ZXNjAAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3
dy5pZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVz
YwAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAA
AAAAAAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlv
biBpbiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24g
aW4gSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8u
ABDPFAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAA
AAAAAAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAe
ACMAKAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkA
rgCyALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFM
AVIBWQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYC
LwI4AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNP
A1oDZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYE
xATTBOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7
BowGnQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIII
lgiqCL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3Arz
CwsLIgs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakN
ww3eDfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDX
EPURExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkU
ahSLFK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhA
GGUYihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHsc
oxzMHPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFI
IXUhoSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcm
hya3JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwF
LDksbiyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIy
KjJjMpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiM
OMg5BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/
oj/iQCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bw
RzVHe0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdP
AE9JT5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dE
V5JX4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVg
V2CqYPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2ma
afFqSGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11z
uHQUdHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4B
fmJ+wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6J
M4mZif6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSK
lPSVX5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg
2KFHobaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1E
rbiuLa6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6
tbsuu6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9
yLzJOsm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW
2Ndc1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE
5g3mlucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1
UPXe9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGRAAAAAAf/b
AIQAAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQEBAQICAgICAgICAgIC
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
KU8Up4pX/9k=
      </contents>
    </upload>
  </page>
  <page>
    <title>GSOC 2011 Projects</title>
    <ns>0</ns>
    <id>261</id>
    <revision>
      <id>371</id>
      <timestamp>2021-09-20T10:51:07Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2011:projects</comment>
      <origin>371</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11598" sha1="k9a0kltpft174htyqqayrs85gkqw8am" xml:space="preserve">== Introduction ==

Every summer, Google sponsors the [https://www.google-melange.com/ Summer of Code] program in which students are paid to work on open source projects. MINIX 3 participated in 2008, 2009, and 2010, and we are applying again this year to be a mentoring organization. If you are interested in working on our project, read on.

[https://www.minix3.org MINIX 3] is a small, modular, multiserver operating system aimed at being highly reliable, fault tolerant and self healing. Only about 6000 lines of code run in kernel mode. The rest runs as a collection of user processes, mostly separate processes for each device driver and server. If a driver fails, it is automatically replaced by a fresh copy, without user intervention (or even knowledge) and without affecting running programs. Few other systems can survive fatal errors in some critical system components without even missing a beat. The goal of reliable systems will have been achieved when no computer has a RESET button and no user has ever experienced a crash and does not know anyone personally who has ever experienced a crash.

MINIX 3 supports the POSIX interface and about 500 of the standard UNIX programs have been ported to it, including X11, gcc, perl, python, ghostview, mplayer, the GNU core utilities, and many more. Nevertheless there is much more to do.

We would like to continue the development to demonstrate that building a system out of small replaceable components leads to a highly robust design that is far easier to understand and maintain than systems with millions of lines of kernel code. While good performance is important, it is hardly the overriding criteria it once was. If most ordinary users were given a choice between the fastest possible system and one that was 20% slower but never crashed, we believe a large number of users would choose the latter. For many companies (e.g., banks, e-commerce sites), having their systems run 24/7 with no failures ever is a top priority.

Embedded systems are another area where high reliability is important. People do not expect their TV sets, digital cameras, and camcorders to exhibit blue screens, except when images of the sky are being shown.

In short, we are trying to build a modular, reliable (and secure) operating system out of small components that can be replaced on the fly and we would like you to help. Here is a [https://www.cs.vu.nl/~ast/publications/acsac-2006.pdf paper] describing MINIX 3 and its architecture in more detail. More papers are listed on the [[Publications|Publications page]]. You might also watch the [https://www.youtube.com/watch?v=bx3KuE7UjGA FOSDEM 2010 talk] on MINIX 3.

As an aside, MINIX 3 is not your grandfather's MINIX. It started out as an educational system but has evolved greatly since then into a tight system with a focus on high reliability (and security). As open-source projects go, it is quite popular. We have had over [https://www.sitemeter.com/?a=stats&amp;s=s17minix3 1.6 million visitors] to the new Website (which has been up about 4 years). Currently about 12,000 people a month download the CD-ROM image file to install it.

== About You ==

The project ideas below range from straightforward to challenging. All require you to be an experienced C programmer. For some of them it would be helpful if you have already read the [https://www.amazon.com/Operating-Systems-Implementation-Prentice-Software/dp/0131429388/ref=pd_bbs_sr_4?ie=UTF8&amp;s=books&amp;qid=1204884702&amp;sr=8-4 MINIX book] for example, in a course you took at your university. Given the difficulty of these projects, we expect you to work full time all summer on them. That means not having a job and not going to school.

Since this is an open-source project, many other people will study the code later. It is therefore essential that you are someone who takes pride in his or her work and wants to produce code that is clean, efficient, elegant, and well documented so that other people will marvel at its beauty. Just hacking it together quickly so it mostly works some of the time doesn't cut it. We want people to admire the code, even to envy your ability to write truly great code.

If you are an experienced C programmer who knows something about operating systems and can write clear, well-documented code check out the ideas below and then our [[GSOC 2011 Application Template|application template]]. Please answer all these questions in your application. If you don't we will conclude you aren't very good at following simple directions.

Every year we receive many project proposals. To stand out in the crowd, you are going to have to do something more than fill in our template. Here's our handy-dandy sheep-goat separator. Download and install MINIX 3. Then, try to do some useful subtask of your proposed project. If you're porting the NetBSD userland, for instance, try to port some userland utilities to MINIX 3. Or do something else that shows you have some skills and you have backed your application with some real effort. We like people who put their keyboards where their mouth is. Students who do that will be considered "sheep" and have a good chance. Students who think this is too much trouble will be considered "goats," and are unlikely to be picked.

You are encouraged to interact with us before applying via the Google Newsgroup. This will help your application and help you pick some small project to do in advance to show us you are serious, as mentioned above.

During the project we want you to interact with our community via the Google Newsgroup. Also, you will get your own page on the Wiki and will be expected to use it as a blog posting your progress, at least weekly, but also when you reach a milestone.

Although Minix currently uses SVN, we are in the middle of migrating to Git. We expect to have switched before GSOC coding starts, so you will be expected to do your work in your own Git repository; familiarity with git branching, merging, and rebasing will be important to be optimally productive.

=== Ideas ===

Here are some ideas, but we are open to suggestions for other projects. Accepted students get $500 right off the bat. If you pass the "midterm" you get $2250 from Google. Upon successful completion of the project, you get another $2250 from Google and a rare MINIX 3 T-shirt from us.

MINIX 3 is open source and uses the BSD license. By applying, you agree that we can distribute your code under this license. However, you also retain your right to reuse it as you wish.

== Possible Projects ==

* '''Porting the NetBSD userland.''' We would like to have the NetBSD userland utilities as they are more capable than the current MINIX utilities. Additionally, having these utilities would make it easier for MINIX to conform to newer POSIX revisions. Your job, if you choose to accept it, is to replace the MINIX userland with NetBSD's. Since we already have the NetBSD C library, build infrastructure, and some utilities, you will have a head start. Candidates for this project should be very familiar with C programming and the UNIX environment.
* '''Debugger Support.''' We would like to have a fully-functional GDB port for MINIX. We currently have mdb, the MINIX debugger, but it is not quite as capable as GDB and it doesn't support debugging of ELF executables. Also, as part of this project, we would like you to add core dumping support. This will make it easier to debug programs that have crashed. The core dumping feature will require careful design.
* '''FUSE support.''' We would like to have support for more filesystems, and the FUSE (Filesystem in Userspace) project supports many filesystems. Since our filesystem servers already run in user space, FUSE is a natural fit for MINIX.
* '''Cross-compiler support.''' It would be convenient to have the ability to build MINIX on platforms other than MINIX itself. Additionally, we would like to target architectures other than i386. MINIX has adopted much of the NetBSD build infrastructure, but we would like to add support for NetBSD's build.sh to seamlessly build cross-toolchains and host/target tools. As a part of this project, you would also add support for release building (using release.sh) on non-native platforms. If you apply for this project, you should be familiar with building cross-toolchains and the BSD Makefile infrastructure.
* '''Porting application programs to MINIX 3.''' Thanks to GSoC 2010 and the great work of Gautam, MINIX 3 supports the pkgsrc package management infrastructure. Unfortunately, not all packages have been migrated over from packman, our old package manager. Your job would be to add these packages to pkgsrc.

Additionally, you would also work on porting more software to MINIX. Pkgsrc has several thousand packages, and MINIX supports only a fraction of them. It is important to note that some programs are easier to port than others. Porting Linux or FreeBSD software takes some effort because although we have cc and gcc and are POSIX conformant, we don't support all the Linux or FreeBSD system calls and the header tree is organized differently, etc. The only caveat is that we already have all the easy stuff. The things left are bigger and more complicated. Functionally useful programs that are small and lightweight are especially valued, particularly for (mobile) resource-constrained environments, but good desktop programs, frameworks, and libraries are also useful. Note: we don't currently have kernel threads so if you want to port something, make sure it does not require them.
* '''Porting or writing device drivers.''' We need all kinds of device drivers. Almost anything you can think of would be useful. It might be possible to port drivers from other operating systems, but our experience is that it is extremely difficult because each of our drivers runs as a separate user process, outside the kernel. It is usually best to study an existing driver to see how it works, but then write a new one from scratch. We are open to proposals about which driver. In order to be selected for this project, you must have past experience with writing drivers and you must own any required hardware.

We are open to suggestions for alternative projects. You might first look at the [[Wishlist]] on the [[Main Page|MINIX 3 Wiki]].
=== Resources ===

There are several pages available with helpful information. These include:

* [http://www.google-melange.com/ Google Summer of Code main page]
* [http://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for Students]
* [http://www.google-melange.com/document/show/gsoc_program/google/gsoc2011/faqs GSoC FAQ]
* [http://www.google-melange.com/document/show/gsoc_program/google/gsoc2011/timeline GSoC Timeline]
* [[GSOC|MINIX GSoC wiki]]

Keep in mind that the deadline for applications is **April 8**. No exceptions.
Conclusion

Thanks for your interest. But even if you do not want to participate in the Google Summer of Code, give MINIX 3 a try. You might be surprised. For example, it can compile itself, kernel, all servers, drivers, etc.--125 compilations--in about 6 seconds on a modern PC. And if you want to help on the project outside the framework of the Google Summer of Code, you are most welcome. We have a Google newsgroup: [https://groups.google.com/group/minix3 Google newsgroup] where your input is welcomed. We also have a [[Main Page|MINIX 3 Wiki]] so users can help document the system.

Thanks for reading so far. We hope you will apply to GSoC to help us. Again, here is our [[GSOC 2011 Application Template|application template]].

[[File:Sig.jpg]]</text>
      <sha1>k9a0kltpft174htyqqayrs85gkqw8am</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2011 Application Template</title>
    <ns>0</ns>
    <id>262</id>
    <revision>
      <id>372</id>
      <timestamp>2021-09-20T10:54:14Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>import soc:2011:application</comment>
      <origin>372</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4372" sha1="2q4j6vy7x2q6jj49krtx3ejkuqnrgjy" xml:space="preserve">Your application should contain the following information. Keep it focused on MINIX 3 and make sure it indicates you have given it some thought. Try to convince us that you will be able to carry your ideas to a successful completion. Remember: you are applying for a job, competing against candidates that want the same position. Your application is your salespitch that ''makes the case'' for why we should pick you. '''Treat your GSOC application as you would a job application.'''

A generic proposal sent to many organizations will be stored in /dev/null. If at all possible, please send an email with an attachment containing a scanned image of your official transcript of grades to info@minix3.org. As mentioned on the [[GSOC 2011 Projects|ideas page]], your chances of being accepted are hugely improved by demonstrating that you have installed MINIX 3 and made some contribution, such as accomplishing some subtask of your proposed project.

Also, please read the [https://www.booki.cc/gsocstudentguide/ GSoC Student Guide] page before applying. It will help you create a high quality proposal and thereby increase your chance of being selected.

== 1. Personal Information ==
Name
Address
Phone number(s)
E-mail address
Web page (if you have one)
IRC nickname (if you have one)

== 2. Education ==

Name of each educational institution you have attended in reverse chronological order going back to high school, listing the years in attendance, the majors (if any) and the degrees earned (with dates). Also list the degree you expect from your current school and when. List any prizes, awards, or merit scholarships you won based on your abilities. Class rank and similar information is also useful if available.

== 3. Work and Open Source Experience ==

Relevant jobs you have held in reverse chronological order, giving employer name, job title, period you worked there, and your job duties. If it was a programming job, make this a brief description like: "I had a summer job working for company X writing a program to do inventory management in a pet store." Also, include experiences contributing to open source software (OSS) projects here.

== 4. C Programming Experience ==

Here is your chance to describe why you are a great C programmer. How long have been programming in C? The experience can relate to one of the above jobs, to a course you took, to your hobby, or anything else.

== 5. Operating System Experience ==

Tell which operating systems you are familiar with, how familiar, kernel programming you have done, and so on. If you have any previous experience with MINIX, tell us about it here.

=== 6. Which Project(s) Do You Want to Work On? ==

List your first choice, second choice, etc. After each one, give a weight of how much you want to work on this one. For example

# Porting the NetBSD Userland (50)
# Debugger Support (40)
# FUSE support (10)

This means you prefer porting the NetBSD userland or improving debugger support with a small preference for the former project and would also be willing to work on FUSE support. The sum of the weights must be 100. Saying you will do anything doesn't show much enthusiasm and will not impress us. Putting all your eggs in one basket (listing only one project with weight 100) increases your chance of getting it but means if you are not our first choice, you get nothing.

== 7. How Will You Successfully Complete Your Project? ==

For your first choice, make a week-by-week timeline with milestones, that is, what will be delivered on what date. Think about design, various phases of coding, your testing, release to the community for testing, optimization, and documentation. If you need any special hardware or software, include its acquisition in the timeline. Also, discuss any topics you will need to learn in order to complete the project.

Your proposal should convince us that you will successfully complete your project. You should put some serious thought into this question.

== 8. Motivation ==

Why do you want to work on MINIX 3 as opposed to the many other interesting open-source projects? Can you work full time this summer or do you have any time conflicts (courses, exams, work) this summer?

== 9. Application Procedure ==

To apply, go to Google's [https://www.google-melange.com/ application page].

[[GSOC 2011 Projects|Back to MINIX 3 Summer of Code Ideas Page]]</text>
      <sha1>2q4j6vy7x2q6jj49krtx3ejkuqnrgjy</sha1>
    </revision>
  </page>
  <page>
    <title>Fault Injection Tool</title>
    <ns>0</ns>
    <id>263</id>
    <revision>
      <id>375</id>
      <timestamp>2022-02-07T10:12:04Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add soc:2012:faultinjection</comment>
      <origin>375</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12322" sha1="i0909kv626quubgg71qkvc75xiokjxs" xml:space="preserve">Student: Anton Kuijsten

Mentors: Cristiano Giuffrida, Arun Thomas

git repository: [https://github.com/Stichting-MINIX-Research-Foundation/gsoc/tree/2012-fault minix-fault]

== Abstract ==

The goal of this project is to implement a new compiler-based fault injection tool which can be used for reliability testing on MINIX 3 . This should improve the existing Software Implemented Fault Injection (SWIFI) tool included in the MINIX distribution, which is based on tracing and can only be used for a limited number of OS components. The tool will be implemented as an LLVM transformation pass. At link time, it will be able to inject various fault types, each with its own probability. Fault injection can be limited to a selection of functions. At run time, a probability can be set to manage global fault occurence, and statistics on fault occurences can be dumped.

== Current Status ==

{| class="wikitable"
! Done !! Item !! Percentage Complete !! Comments
|-
| {{TODO}} || basic fault injection functionality (midterm) || 0% ||
|-
| {{TODO}} || added statistics and dynamically adjustable fault occurence probabilities || 0% ||
|}

== Status Reports ==

'''''Week 1 (30-05)''''' Loading of a pass in llvm-2.9 works, when installed from pkgsrc. Binary packages for llvm-2.9 and llvm-3.1 can't load passes dynamically, probably because they're not built with dynamic library support. Also, llvm-3.1 from pkgsrc produces an error during the build process. A simple hello world pass can be compiled in isolation from the llvm source code. Only the llvm headers need to be available. In the future, it might be a good idea to include these in the installation of a binary llvm package.

I'll look into a fast way to integrate pass usage into the buildsystem (compiler driver or changes to makefiles). Later this summer, the llvm gold linker might become available on Minix, after which a better and more permanent solution can be applied.

'''''Week 2 - 3 (10-06)'''''

Llvm pass loading is integrated into the buildsystem of the minix-fault git repository. A compiler driver from another llvm project is added to the source tree in commands/llvmdrv. Passes are added to lib/libllvm. Make rules are added to share/mk/minix.llvm.mk.

A basic block cloning function is added in the fault injector pass. The cloned blocks are not yet reachable (there is no branch instruction from the first basic block to the first cloned block), but branch instructions between basic blocks seem to be mapped correctly. This pass is not tested much, but the llvm assembly output looks good at first glance.

By setting environment variables when calling make, the passes can be activated. LLVM_CONFIG=TEST for the hello world pass, LLVM_CONFIG=FAULT for the fault injector pass, and LLVM_DEBUG=info for more information on the commands that are executed by the llvm compiler driver (llvmdrv).

For compiling the passes, you need to install clang 2.9 from pkgsrc (not from pkgin). Also, the llvm header files from pkgsrc need to be copied to the source tree. See lib/libllvm/README for instructions.

As of now, some subdirectories of /usr/src don't build correctly when a pass is used. Therefore, only build servers/, drivers/ and lib/ with LLVM_CONFIG=[...]. Also, servers/inet, servers/vm, drivers/acpi and drivers/random get build errors that are not yet solved. Use these commands to build and install the libraries and the working servers and drivers with the hello world pass:

* make world
* LLVM_CONF=TEST LLVM_DEBUG=info make -C lib clean all install
* LLVM_CONF=TEST LLVM_DEBUG=info make -C drivers clean
* LLVM_CONF=TEST LLVM_DEBUG=info make -C servers clean
* make -C drivers/random all install
* make -C drivers/acpi all install
* LLVM_CONF=TEST LLVM_DEBUG=info make -C drivers all install
* make -C servers/inet all install
* make -C servers/vm all install
* LLVM_CONF=TEST LLVM_DEBUG=info make -C servers all install
* make -C tools/ hdboot

The bytecode input and output from a pass can be converted into readable llvm assembly with: llvm-dis /usr/src/servers/vfs/main.bcc -o /usr/src/servers/vfs/main.bcc.ll &amp;&amp; llvm-dis /usr/src/servers/vfs/main.BCC -o /usr/src/servers/vfs/main.BCC.ll

'''''Week 4'''''

The pass is now better integrated into the build system. Now, everything can be built with:

* LLVM_CONF=FAULT make world

If lib/, servers/, and drivers/ were already build, they have to be cleaned first. Otherwise, they will be skipped, because the targets seem to be up to date.

'''''Week 5'''''

A library is added to lib/libllvm/faultlib (the other subdirectories of lib/libllvm are llvm passes). This library is linked into the instrumented binaries of services. It contains code and variable to disable/enable fault execution, and (in the future) print out statistics.

Also, a command line tool is added to commands/faultinjector. The tool can be used to disable/enable fault execution, and to run a test function in faultlib.

A command line argument is added to the pass, so that a comma separated list of functions that have to be instrumented can be specified.

Currently, no fault is injected. Instead, a printf("cloned\n") statement is added to each cloned basic block.

To test all new features:

* make includes mkfiles
* LLVM_CONF=FAULT make -C lib/ clean
* repeat make clean command for servers/ and drivers/
* LLVM_CONF=FAULT make -C lib/libllvm clean all install  # it is important the the passes are installed before the libraries and services are built
* LLVM_CONF=FAULT make world
* (restart)
* run: faultinjector &lt;label&gt; (on|off|test)      for example, to turn on fault execution for vm: faultinjector 1 on
* in order to instrument only a selection of functions, add FAULT_FUNCTIONS=&lt;function1&gt;,&lt;function2&gt;,&lt;...&gt; to the start of the build commands.

'''''Week 6'''''

All calls to control fault execution are now routed through PM, because the userspace tool can't send messages directly to e.g. MFS.

Also, the command line tool now accepts service names (labels) instead of endpoint numbers. Usage is now: faultinjector &lt;label&gt; (on|off|test) 

'''''Week 8'''''

We will start with implementing the fault types from the swifi tools (overview will follow).

Swifi tries to emulate programming errors by binary rewriting and modifying data. The injected faults often resemble errors in assembly code, such as forgetting to load data into a register. This should emulate C source errors, such as initializing function arguments.

Faults that are injected by llvm will resemble C source errors more directly. For example, we will be able to simply modify function arguments, instead of removing register load instructions.

'''''Week 9'''''

Working on instrumentation with different fault types.

'''''Week 10-11'''''

Break to finish thesis and go to conference

== Design ==

The pass will be executed at link time. The pass can be configured with the set of functions that have to be instrumented (by name). For each selected function, the instructions are duplicated, and faults are injected into the duplicate set of instructions. At the entry point of the function, a single global probability decides whether the original or fault-injected set of instructions is executed. This probability is initialized to 0, and can be changed at run time. Furthermore, the fault type can be configured with a set of probabilities. These probabilities determine the link time injection of each fault type for each individual instruction.
 
Instructions are duplicated by cloning all basic blocks in a function, and the branch instructions connecting those blocks. A new first basic block is created, which has to decide if execution is branched to the original first basic block, or the fault injected first basic block, based on probability. This decision can be made by a C function in the system library, which the pass can inline into the first basic block.
 
A source file will be added to the system library. This file contains the probability variable and function described above. Also, it contains functions that implement the system calls that change the probability variable and print out statistics.

=== Supported fault types ===

* swapping operands
* changing operators in assignments and branching conditions
* swapping branches
* Other faults from the swifi tool and literature. These will be determined together with the mentor after a study.
 
 
=== User-interface ===

Compilation will be configured and executed by calling a script. This is the most convenient way to pass configuration parameters. Probability changes are passed to a running service with a new system call and user tool. The output of Statistics can be triggered by a signal or a system call, and will be printed to standard output by the service.


=== Minix integration ===

Dynamic Library support will probably be working for Clang when GSoC starts. That will be needed to load the link time pass as a module. Clang does not have good support for applying passes with a simple command line argument. Therefore, we can have to modify the build system makefiles to apply passes between compiler commands. If that proves to be to complex, we can use a script that acts a compiler driver, so that the makefiles don't need much changes. Alternatively, a pass is available that gives Clang the ability to load passes with command line arguments (But the downside is that the patch will have to be maintained in the minix clang package).
 
This is an example of how the build script would be called to inject faults into vfs, for the functions do_link,dev_io and map_driver, with an operand swapping probability of 0.2, a branch swapping probability of 0.6, and an unspecified operator swapping probability which will be set to a default value:
 
build-fault-injection.sh   servers/vfs   -functions do_link,dev_io,map_driver   -p 0.4   -p_swap_operands 0.2  -p_swap_branches 0.6

=== Testing ===

Most of the faults can be tested by setting the fault probability to 1, and printing debug output. For example, the printed outcome of a mathematical operation can indicate swapped operands. Debug output that indicates which branches are executed indicate swapped branches. Fault probability can be tested by looping a function many times, and check if the actual fault ratio approaches the configured probability. Different test scenario's can be implemented in the hello driver.

== Schedule ==
 
=== Pre-Coding Period (Apr 23 - May 20) ===

=== Week 1 (May 21 - May 27) ===

Get a dummy pass working on Clang in Minix. Get the build system to use the pass, possibly by using a compiler driver script, or a patch to Clang.

=== Week 2 (May 28 - Jun 3) ===

study basic block cloning. All basic blocks of a function have to be cloned, so that each basic block gets a fault-injected clone. At the start of the function, it is decided if the original or fault-injected set of basic blocks is executed.

=== Week 3 (Jun 4 - Jun 10) ===

implement basic block cloning.

=== Week 4 (Jun 11 - Jun 17) ===

study fault types that are supported by the swifi tool, and look into literature. With mentor, determine set of fault types that will be implemented.

=== Week 5 (Jun 18 - Jun 24) ===

study fault types that are supported by the swifi tool, and look into literature. With mentor, determine set of fault types that will be implemented.

=== Week 6 (Jun 25 - Jul 1) ===

implement instrumentation for fault types

=== Week 7 (Jul 2 - Jul 8) - MIDTERM ===

implement instrumentation for fault types
Not all fault types are supported yet, but basic fault injection with a few fault types is working.

=== Week 8 (Jul 9 - Jul 15) ===

implement instrumentation for fault types

=== Week 9 (Jul 16 - Jul 22) ===

add pass option to select which functions to instrument.

=== Week 10 (Jul 23 - Jul 29) ===

implement compile-time adjustment of probabilities for each fault type per basic block

=== Week 11 (Jul 30 - Aug 5) ===

implement fault counters to dump statistics and dynamically adjust probability of execution for each fault type.

=== Week 12 (Aug 6 - Aug 12) ===

implement fault counters to dump statistics and dynamically adjust probability of execution for each fault type.

=== Week 13 (Aug 13 - Aug 19) - FINAL ===

finish everything. submit to Google

== Resources ==

* Relevant link 1
* Relevant link 2</text>
      <sha1>i0909kv626quubgg71qkvc75xiokjxs</sha1>
    </revision>
  </page>
  <page>
    <title>GNU Toolchain (GSOC Project)</title>
    <ns>0</ns>
    <id>264</id>
    <revision>
      <id>376</id>
      <timestamp>2022-02-07T10:57:31Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add soc:2012:gnutoolchain</comment>
      <origin>376</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="13085" sha1="nirsynwry1itjsf3jnxbelcs4bfbydb" xml:space="preserve">Student: Ping Huang

Mentors: Arun Thomas, Ben Gras

git repository: [https://git.minix3.org/?p=pkgsrc.git;a=log;h=refs/heads/minix-master pkgsrc]

== Abstract ==

The primary goals of this project are porting GCC 4.7.0, binutils 2.22, and GDB 7.4.1 to MINIX 3, and sending the changes upstream.

== Current Status ==

{| class="wikitable"
! Done !! Item !! Percentage Complete !! Comments
|-
| {{DONE}} || Porting Binutils 2.22 || 100% || testsuite result: 3 fails in gas, 21 fails in binutils
|-
| {{DONE}} || Porting dejagnu.4.4/expect-5.43 || 100% || Only root can run it successfully
|-
| {{DONE}} || Porting GCC 4.7.0 || 100% || Only support C and C++ currently
|-
| {{DONE}} || Porting GDB 7.4.1 || 100% || not stable
|}

== Status Reports ==

=== Week 1 (May 21 - May 27) ===

Since I have built binutils-2.22 on minix3 successfully when I appled for the GSoC project, This week I tried to test it with DejaGnu framework. DejaGnu framework is dependent on expect. So this week the main work is porting expect and then DejaGnu to minix3. Work in detail are shown below.
* Porting expect-5.43 to minix3. I have built it on minix3, as well as dejagnu-1.4.4. However, when I make check in binuitls-2.17, it failed, with the error message showing '''"The system has no more ptys. Ask your system administrator to create more."'''
* Trying to build gcc44 on minix3 with pkgsrc. Although it succeed, the building process costed about 10 hours! Thanks to Arun and Ben, I found the cause is some wrong setting on VMware. After I resetted and reinstalled the system, the process of building gcc44 needed about 2 hours, and the setting is as follow:
** CPU:  Intel vt-x/ept, 1 processor
** MEM:  512MB
** DISK: 20GB

=== Week 2 (May 28 - Jun 3) ===

This week I have been taking effort to make dejagnu/expect work well on minix3. According to the "no more ptys" message, firstly, I tried to increase the number of ptys by setting NR_PTYS to 64 in include/minix/config.h. Due to my ignorance to docs/UPDATE, I encountered some problems when rebuilding system. Finally, following docs/UPDATE, I have succeeded to rebuild it. However, with no change to MAKEDEV (later I learned from Ben), there are still 32 ptys in /dev. 

But the situation is not so bad, the funny thing I found is that: I can make check successfully as root, then if I switch to other users, it will fail. More oddly, if I first make check as other users, then root will also fail with "no more ptys" message. So does it in the system which NR_PTYS is 32. So I think the "no more ptys" error is not caused with the number of ptys, instead, it has something to do with the authority. I suspect this phenomenon is relataed to the system call "setpgrp" I have commmented away in the source code of expect (since minix3 doesn't support it).  

Anyway, DejaGnu works well on minix3 now, although only as root. I have tested binuitls-2.17 existing in pkgsrc and binuitls-2.22 I ported. The result is shown in the table below. 

{|class="wikitable"
|rowspan="2"| ||colspan="3"|binutils-2.17 ||colspan="3"|binutils-2.22
|-
| gas || ld || binutils || gas || ld || binutils
|-
| PASS || 104 || 27 || 4 || 257 || 55 || 13
|-
| UNEXPECTED FAIL || 2 || 6 || 17 || 3 || 0 || 21
|-
| EXPECTED FAIL || 0 || 1 || 0 || 0 || 5 || 0
|-
| UNRESOLVED || 0 || 2 || 1 || 0 || 0 || 1
|-
| UNSUPPORTED || 0 || 3 || 0 || 0 || 4 || 1
|}

I glance over the UNEXPECTED FAILs in gas(3 fails) and binutils(21 fails), and don't find something that is dangerous. So Maybe binuitls-2.22 is ready for use on minix3. 

=== Week 3 (Jun 4 - Jun 10) ===

This week, first, I ruled out the possibility that the commentted "setpgrp" causes "no more ptys" error, because the "setpgrp" is never called when I preprocessed it. The cause mustbe has something to do with the authority of minix. After that I begin to move on porting gcc-4.7.0 to minix3.

Since gcc-4.7-20110716 is available in pkgsrc, I built it on minix3 successfully after add a configure argument "--enable-initfini-array" in Makefile, otherwise, the system would crash when checking whether "--enable-initfini-array" was given. Then I make check it, dejagnu ran smoothly, and the result seems not bad. I just make check with the execute directory in testsuite, the result shows below.

{| class="wikitable"
| || gcc || g++ || gfortran
|-
| PASS || 19956 || Error: Couldn't determine version of g++ || 4005
|-
| UNEXPECTED FAIL || 45 || Error: Couldn't determine version of g++ || 9
|-
| UNRESOLVED || 11 || Error: Couldn't determine version of g++ || 0
|}

Next week, I will focus on porting the release version of gcc-4.7.0.

=== Week 4 (Jun 11 - Jun 17) ===

This week, I'm taking an effort to port gcc-4.7.0. Firstly, I enabled the language of c, c++ and fortran, when building gcc-4.7.0/libgfortran/intrinsics/chmod.c, it failed with the error message "S_IFMT undeclared". The reason is the options when compiling that file is not include -D_NETBSD_SOURSE. After that, the building process went on well. However, when I tried to bmake install, it failed again, complaining that some files about gfortran are not exsiting.

Then I decided to disable fortran, and only enable c and c++ to build a version. This time the building process went smoothly. However, the install process failed again. Then I tried to directly type "make install" in work/obj directory, instead of "bmake install" in pkgsrc/gcc47-release directory, and it succeeded. 

Next, I make check in obj/gcc, and the whole testsuite ran smoothly at the beginning, however, when it had run about 40000 testsuite, the make check process seemed suspending. until now, I don't know the reason. Then I ran some simple program, such as helloworld, and they all passed.

Now, I tried to build the system with gcc-4.7.0. First, I make some userland utils, such as ls, cat, cp, the tests passed too. and the whole commands are built successfully, however, then make install, it failed when installing MAKEDEV with error message :assertion "inited" failed: file "/usr/src/lib/libc/stdlib/_env.c", line 179, function &lt;u&gt;"allocenvvar", which I'm trying to fix&lt;/u&gt;.

=== Week 5 (Jun 18 - Jun 24) ===

Continuing to the work in last week, I tried to build the system with gcc-4.7.0. I firstly tried to build minix 3.2.0, with three main errors. I posted a thread on googlegroup.

After the meeting with Arun and Ben, I switched my system to 3.2.1. Until now, I have built gcc-4.7.0 on minix 3.2.1 successfully. And I'm trying to rebuild the system. I have encountered two problems:

* When build libraries in xz, it failed when building shared library liblzma.so.0.0, with the errors: "undefined reference to memcpy, __assert13, SHA256_INIT".
* In order to continue the building, I commented away the libraries in external. The next problem I came across is when building in commands/ash. as building mknode, it failed with "/lib/libc.so: undefined reference to &lt;nowiki&gt;''_localtime_r''&lt;/nowiki&gt;"

I will fix the problems next week.

=== Week 6 (Jun 25 - Jul 1) ===

Thanks to Ben's effort, the two problems at last week have been solved. Now, the system can be built with gcc-4.7.0. But there are still some strange problems.

* It cann't reboot. the system built with gcc-4.7.0 works well except that it cann't reboot and shutdown. With a reboot command, the error message is: "VM: pagefault: SIGSEGV 73140 bad addr 0x926f (dataseg); err 0x4 nopage read devman 73140 0x8048200 0x8048170 (hbp 83fc4c ?)". I have tried with gcc44, it works well, doesn't have this problem.
* When make in drivers/memory, sometimes it will hang as in a dead loop. I digged into it and found that "mkfs.mfs image proto.gen" doesn't exit, and it actually can generate image rightly, but cann't exit.

=== Week 7 (Jul 2 - Jul 8) ===

This week I tried to fix the reboot problem. With many times' rebuilding, I found that the culprints are lib/csu and lib/libminc(both, not combination). If building the system in this way: with binuitls 2.17, compiling the two libraries with clang, and all the others with gcc47, then the system works well, without the reboot problem. Otherwise, reboot problem would occur.

I have tried to build the system with gcc 4.7 and binutils 2.22 in the way above, but use gcc44 instead of clang (it seems that ld 2.22 cannot link the object generated by clang), the system can be built but still have the reboot problem.

I have made clean packages of expect 5.43, binutils 2.22 and gcc 4.7, and have committed them to minix-master in pkgsrc.

=== Week 8, 9 (Jul 9 - Jul 22) ===

These two weeks I tried to fix the issues Ben encountered:

* I have fixed the fixincludes problem with disable libssp and applying Arun's gcc44 patches.
* For the depedency on gcc44, It seems that the current compiler is added to the depedencies. If I use gcc47 to compiler itself, then there's neither dependency on gcc44 nor gcc47.
* For the "Unsupported long double format" error, I have fixed it with remove the ginclude/float.h in gcc/Makefile.in.
* I didn't encounter neither the conflict libiberty PLIST entry problem nor iconv problem. 

I have committed the new gcc47 package to minix-master branch. With it and binutils 2.22, I can build world successful, the system works well except for the reboot problem.

=== Week 9 - 12 (Jul 23 - Aug 19) ===

This month I have finished these work:

* Porting gdb-7.4.1 to minix. Until now, gdb-7.4.1 can be built successful on minix. I have make a simple test, it works well.
* Wrapping the package of binutils-2.22 up based on the one in NetBSD pkgsrc repository. Unitl now, I have got a much clean package.
* Trying to wrap the package of gcc-4.7.0 based on the one in NetBSD pkgsrc repository. Since I ported gcc47 based on minix-master branch at first, which is very different with the one in NetBSD, I think I need to port based on the NetBSD one. Now I'm trying to do this port, it will cost several days.
* Wrapping the package of gdb-7.4.1 up based on the one in minix-master branch. Since the latest gdb package in NetBSD repository is gdb-6.2.1, while in minix-master branch it is gdb-6.8, so I based my work on gdb-6.8. Unitl now, I have got a much clean package.



== Design  ==

Since This is a porting project, there is no a panoramic design. The project mainly consists of three parts which are listed below.

=== Porting Binutils 2.22 ===

=== Porting GCC 4.7.0 ===

=== Porting GDB 7.4.1 ===


== Schedule ==

The following is my week-by-week timeline with milestones.

=== Pre-Coding Period (Apr 23 - May 20) ===

* Read the OSDI book and related paper and getting a further use of MINIX 3 to familiarize with it.
* Familiarize with the MINIX 3 community, including documentation, version control system, coding style, test system, etc.
* Understanding the interaction between the toolchain and MINIX 3. 
* Finish the FSF paperwork.

=== Week 1 (May 21 - May 27) ===

Port binutils 2.22 to MINIX.

This work mainly need to add Minix target description, the BFD backend for i386 Minix and the new depandencies in building, such as adding the description of bfd_elf32_i386_minix_vec, and the new elf-ifunc.o relied on.

=== Week 2 (May 28 - Jun 3) ===

Test binutils and write document of the binutils porting.

It may include porting dejagnu.

'''''Milestone 1: Binutils are completed.'''''

=== Week 3 (Jun 4 - Jun 10) ===

=== Week 4 (Jun 11 - Jun 17) ===

=== Week 5 (Jun 18 - Jun 24) ===

Port gcc 4.7.0 to MINIX.

This work includes adding Minix configure files and descriptions of Minix with ELF format, etc.

Key files involved are shown as following:

* minix.h
* minix-spec.h
* i386-minix.h
* t-minix
* gcov-minix-fs-wrapper.h
* gcov.c
* libgcov.c
* libjava
* libstdg++-v3
* other configure files

=== Week 6 (Jun 25 - Jul 1) ===

=== Week 7 (Jul 2 - Jul 8) - MIDTERM ===

Test gcc and and write document of the gcc porting.

This test will also test binutils and may be involved with some large applicaiton. So it needs two weeks.

'''''Milestone 2: GCC is completed.'''''

=== Week 8 (Jul 9 - Jul 15) ===

=== Week 9 (Jul 16 - Jul 22) ===

Port gdb 7.4 to MINIX.

This work mainly including adding the description of backend for Minix and the file involved with ptrace.

Key files involved are shown as following:

* i386minix.c
* i386minix-nat.c
* i386minix-tdep.c
* minix.mh
* minix-nat.c
* nm-minix.h
* other configure files

=== Week 10 (Jul 23 - Jul 29) ===

Test gdb and writing document of the gdb porting.

Since gdb relys on the system call "ptrace" in Linux. To my knowledge, "ptrace" in MINIX is some different from it in Linux. So maybe I need a little more time to port and test gdb. 

'''''Milestone 3: GDB is completed.'''''

=== Week 11 (Jul 30 - Aug 5) ===

=== Week 12 (Aug 6 - Aug 12) ===

Scrub all of the code. Improve the documentation. And send the MINIX toolchain changes upstream.

'''''Milestone 4: Send the changes upstream.'''''

=== Week 13 (Aug 13 - Aug 19) - FINAL ===

Further refine the documentation of the whole toolchain.

== Resources ==

* https://www.gnu.org/software/binutils/
* https://gcc.gnu.org/
* https://www.gnu.org/software/gdb/</text>
      <sha1>nirsynwry1itjsf3jnxbelcs4bfbydb</sha1>
    </revision>
  </page>
  <page>
    <title>Lwip Integration</title>
    <ns>0</ns>
    <id>265</id>
    <revision>
      <id>377</id>
      <timestamp>2022-02-07T11:54:31Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add soc:2012:lwipintegration</comment>
      <origin>377</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="11538" sha1="8isfqubyxx1ux78zel6cu7yd3pxfz0k" xml:space="preserve">Student: Ambarisha Bhatlapenumarthi

Mentors: Tomas Hruby, Dirk Vogt

git repository: [https://github.com/Stichting-MINIX-Research-Foundation/gsoc/tree/2012-lwipgsoc minix-lwipgsoc]

== Abstract ==

The project aims to complete LwIP integration into MINIX 3. Basic support has already been added but it isn't complete and hasn't been tested properly yet. This project will be about completing that work and then adding new features like IP routing, forwarding, IPv6 support, NPF support. There are also some secondary goals like developing core LwIP for the benefit of both MINIX 3 and LwIP communities.

== Current Status ==

{|class="wikitable"
! Done !! Item !! Percentage Complete !! Comments
|-
| {{DONE}} || Complete lwIP integration || 95% || Testing named remains
|-
| {{DONE}} || Improve routing in lwIP, IP Forwarding || 100% ||
|-
| {{TODO}} || Improve IPv6 functionality || 80% || Testing IPv6 connections and support for raw ip sockets remain
|-
| {{TODO}} || Add support for NPF || 0% ||
|-
| {{TODO}} || Secondary goals || 0% ||
|}
== Status Reports ==

=== Week 1(May 28th - June 3rd) ===

Imported LwIP-trunk codebase. LwIP is currently in 1.4.1rc1. LwIP-trunk contains alot of major IPv6 patches which will be coming out in 1.5.0.\\
After a few changes to the Makefiles everything compiles.\\
Noticed a couple of random glitches after installing LwIP-trunk. Otherwise lwip server runs fine.\\
Looked into DHCP client. Need to consider ISC's dhclient vs Roy Marvels' dhcpcd(being used by netbsd).\\

=== Week 2, 3(June 4th - June 17th) ===

I worked on porting ISC's dhclient to MINIX. dhclient comes with bind which is a DNS software. Support for IPv6 is also available. So once it works, most of the basic functionality will be available. For now all the code compiles. I still need to fix a few things(mentioned below) and then test the client. I defined a couple of dummy functions to make the IPv6 code compile. Once IPv6 module is completed these dummy functions can be replaced.

==== int utimes(const char *path, const struct timeval times[2]) ====

bind maintains a journal file for IXFR zone transfers. It uses utimes() for timestamping each time it accesses this journal file. utimes() is not available in MINIX, so instead of using the utimes we maintain a timestamp variable for the journal file.

==== IP_HDRINCL ====

There are three Network API available. BPF, LPF and raw sockets. For raw sockets, they are trying to use a handcrafted IP header by setting the IP_HDRINCL socket option. But IP_HDRINCL isn't available in /usr/include. Also I am not sure why handcrafted IP header is necessary. For BPF, LPF it has to handcrafted anyway. So, probably this is so for reusing that code.

==== Broadcast sockets ====
dhclient requires SO_BROADCAST which is a socket option for broadcasting. But SO_BROADCAST isn't available in MINIX.

=== Week 4(June 18th - June 24th) ===

This week I first fixed the problems from last week:
* Escaped IP_HDRINCL problem by defining a NO_IPHDRINCL macro for minix. When NO_IPHDRINCL is defined we let the kernel craft the ip header, but make sure that the network interface is initialized with 0.0.0.0 IP address. Then we use 255.255.255.255 with the sendto() call.
* LwIP defines a macro IP_SOF_BROADCAST for enabling broadcasting on a network interface. I modified MINIX's lwip/opt.h file to enable this. I modified setsockopt() to allow setting this socket option. Then modified lwip server to set this flag on the pcb.

I got the NetBSD's dhclient-script and modified it to work with MINIX as our ifconfig command is very restricted. Also typecasts between struct sockaddr_in and struct sockaddr aren't working as expected. Currently working on fixing this. (Edit: It was just because of a mistake, I was including the wrong file)

=== Week 5(June 25th - July 1st) ===

This week I worked DNS and IP forwarding.
* BIND included in dhclient only builds the export libraries required by dhclient. After some work, it now builds, successfully, the dns client daemon, nsupdate and couple of other binaries that come in the BIND package.
* I have also switched on IP forwarding, but I had some trouble configuring a second network interface and am still working on this.
* I also looked at the status of routing in lwip. After discussing with Tomas, decided that extensive routing work should be left out. For now, we can route between 'n' immediate networks on 'n' interfaces.

=== Week 6, 7(July 2nd - July 15th) ===

I have been working on integrating dhclient and bind into minix src tree. I also successfully tested IP forwarding. 
* dhclient and bind tools available in netbsd are from an older version than the one I worked on.
* The newer version of dhcp supports IPv6, and hence there is quite a bit of difference in the code
* I am following netbsd's directory structure of dhclient and bind, so that I can use their makefiles (after modifications)

=== Week 8(July 16th - July 22nd) ===

I laid out the makefiles and modified them for minix. I found out that bind has 2 sets of libraries BIND9 libraries and bind export libraries. Bind export libraries separate code which is closely tied to bind binaries (especially named). Since we are porting both dhclient and named, I figured we could merge both libraries. After building everything and running, I learnt that the libraries are not compatible with each other internally. I got this confirmed on bind-workers mailing list. So, now we have two sets of bind libraries which are somewhat different. I have placed the export libraries under libbindexport in src/lib. I am finally finished with integrating dhclient into minix src tree. Though there still seems to be a problem with broadcast receive messages. I am now working to fix this.

I have also setup IPv6 lan with my host for starting work on IPv6. I looked at liblwip, lwip server from IPv6 perspective. liblwip has a LWIP_IPV6 option which turns on IPv6 in lwip. We first turn that on, then modify lwip server to handle ioctls on ipv6 sockets. Perhaps this might become more clear after discussing with Tomas and Dirk today.

=== Week 9 &amp; 10 (July 23rd - August 5th) ===

Last week I couldn't get much work done except implementing NWIOGIP6CONF ioctl and IPv6 changes at IP layer because I had problems with setting up a serial console and implemented NWIOSIP6CONF the wrong way(fixed now). Here are the changes from this week :
* Added IPv6 TCP &amp; IPv6 UDP functionality to lwip server. (Still to test)
* Modified the userland libraries to recognize and work with IPv6 sockets (Still to test)
* Built libc with IPv6 support by enabling USE_INET6 in lib/libc/minix-config.inc
* Fixed some problems with dhclient and made changes to install dhclient replacing dhcpd

I have pushed most of the changes to the repository. Any remaining changes will appear by tommorrow.

=== Week 11 &amp; 12 (August 6th - August 19th) ===

These last couple of weeks, I continued the work on IPv6:
* I finished work on some of leftover the userland socket calls.
* Modified LwIP server adding nd6(neighbour discovery) and mld6 (multicast listener discovery) over IPv6.
* Then I tested TCPv6 client and server mode connections.
* I am still having problems with UDPv6 connections. I have spotted the source of the problem and have yet to write a patch for it.

== Design  ==

=== Module 1: Making lwIP a complete replacement of inet ===
 
LwIP is not yet a complete substitute for inet. It has to be improved and tested before it can replace inet.Firstly, DHCP has to be fixed. dhcpd currently doesn't work so well with lwIP. There are two approaches to fix this:
* Make changes to the current dhcpd to work with lwIP. I was informed that there are already a few quick fixes for this. These need to be looked at and incorported into dhcpd.
* Use the DHCP functionality being offered by lwIP

The interface between lwIP and VFS also requires some polishing. The socket interface is provided with the help of VFS. It seems there are some problems with the raw socket functionality. Also, lwIP has to be tested further. Sometimes, I experience the system going into infinite loop with ftp listings and such. There are other little things like displaying error messages about ioctl when an ftp port command fails. These need to be put down formally, reproduced and then patched. All that testing will be included in this module.   

=== Module 2: Adding routing and IP forwarding support ===
 
Currently lwIP doesn't support extensive routing or IP forwarding. Looking at ip_route()  in liblwip/src/core/ipv4/ip.c, we see that, as of now, a packet is checked for match on the subnets of all the available network interfaces . If it doesn't match the packet is sent on a default interface. This needs to be improved. The state information required to decide the route has to be acquired and the route calculated. I have also looked through inet codebase. Perhaps, src/servers/inet/ipr.c could be a starting point.

(EDIT : Confirmed that improving routing support in lwip is out of the scope of the project. It seems, the lwIP community is also not so interested bringing in extensive routing in "lw"IP )

=== Module 3: Adding IPv6 support ===

lwIP has IPv6 support, but it is not at all complete. A lot of patches were added after the 1.4.0 release according to lwIP mailing list discussion and they haven't been tested thoroughly as yet. Testing IPv6 would also be a major task of this module. LwIP currently supports the dual stack. I have a decent understanding of IPv6. But it is not profound. I will have to study this a little more. So, this module is perhaps the largest.

== NetBSD ==
 
This would involve adding hooks to let NPF know when a packet arrives and passing the packet to NPF after stripping the datalink headers.

=== Module 5: Secondary goals ===

There are also some secondary goals like adding features to LwIP and upstreamed. 
* TCP Segmentation offloading
* Advanced congestion control algorithms
* TCP Window scaling option (DONE sheep/goat project)

== Schedule ==

=== Pre-Coding Period (Apr 23 - May 20) ===

* Investigate the status of IPv6 in LwIP
* Study the communication protocol between VFS and LwIP
* Set up a meeting with Tomas and Dirk before coding period starts

=== Week 1, 2, 3 (May 21 - Jun 10) ===

* Import lwIP 1.4.1
* Test all the basic functionality of lwIP. Improve lwIP accordingly.

=== Week 4 (Jun 11 - Jun 17) ===

* Study the routing codebase of inet
* Add the same functionality to lwIP

=== Week 5 (Jun 18 - Jun 24) ===

Buffer

==== MIDTERM milestones : Complete lwIP replacement for Inet ====

=== Week 6-9 (Jun 25 - Jul 22) ===

* Study IPv6 further, if necessary
* Import lwIP IPv6 into branch
* Test and evaluate what lwIP IPv6 gives out of the box
* Discuss what all features should be supported
* Improve lwIP IPv6
* Communicate any improvements upstream

=== Week 10 (Jul 23 - Jul 29) ===

* Study how NPF hooks work,  perhaps a callback which is called on each arriving packet.
* Add the hooks to LwIP
* Test NPF

=== Week 11, 12(Jul 30 - Aug 12) ===

* Finish any testing and debugging leftover from Module 3 or 4
* Ensure all the primary goals of the project are met
* If there is time left, start with secondary goals after a green signal from mentor.

=== Week 13 (Aug 13 - Aug 19) - FINAL ===

* Improve comments in the code for the benefit of testers
* Complete documentation on how to set up IPv6
* Make sure all the work is merged with the master branch

== Resources ==

* Relevant link 1
* Relevant link 2</text>
      <sha1>8isfqubyxx1ux78zel6cu7yd3pxfz0k</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2012 Projects</title>
    <ns>0</ns>
    <id>266</id>
    <revision>
      <id>378</id>
      <timestamp>2022-02-07T12:13:54Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add soc:2012:projects</comment>
      <origin>378</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="12723" sha1="rt21cf9i7hdugkqkqs6tu6b0kigm03i" xml:space="preserve">== Introduction ==

Every summer, Google sponsors the [https://www.google-melange.com/ Summer of Code] program in which students are paid to work on open source projects. MINIX 3 participated in 2008, 2009, 2010, and 2011. We had some great students and are hoping for great students again this year if we are accepted by Google. If you are interested in working on our project, read on.

[https://www.minix3.org/ MINIX 3] is a small, modular, multiserver operating system aimed at being highly reliable, fault tolerant and self healing. We are particularly interested in embedded systems. Only about 9000 lines of code run in kernel mode. The rest runs as a collection of user processes, e.g., for each device driver and server. If a driver fails, it is automatically replaced by a fresh copy, without user intervention (or even knowledge) and without affecting running programs. Few other systems can survive fatal errors in some critical system components without even missing a beat. The goal of reliable systems will have been achieved when no computer has a RESET button and no user has ever experienced a crash and does not know anyone personally who has ever experienced a crash.

MINIX 3 supports the POSIX interface and has a userland orientation towards NetBSD, including the NetBSD headers, libraries, pkgsrc, etc. The default compiler is clang/LLVM, although gcc is also available. Hundreds of UNIX programs are available, including X11, perl, python, mplayer, and many more. Nevertheless there is much more to do.

We would like to continue the development to demonstrate that building a system out of small replaceable components leads to a highly robust design that is far easier to understand and maintain than systems with millions of lines of kernel code. While good performance is important, it is hardly the overriding criteria it once was. If most ordinary users were given a choice between the fastest possible system and one that was 20% slower but never crashed, we believe a large number of users would choose the latter. For many companies (e.g., banks, e-commerce sites), having their systems run 24/7 with no failures ever is a top priority.

Embedded systems are another area where high reliability is important. People do not expect their TV sets, digital cameras, and camcorders to exhibit blue screens, except when images of the sky are being shown.

In short, we are trying to build a modular, reliable (and secure) operating system out of small components that can be replaced on the fly and we would like you to help. Here is a [https://www.cs.vu.nl/~ast/publications/acsac-2006.pdf paper] describing MINIX 3 and its architecture in more detail. More papers are listed on the [[Publications|Publications page]]. You might also watch Andrew Tanenbaum's talk at [https://www.youtube.com/watch?v=bx3KuE7UjGA FOSDEM 2010] on MINIX 3.

As an aside, MINIX 3 is not your grandfather's MINIX. It started out as an educational system but has evolved greatly since then into a tight system with a focus on high reliability (and security). As open-source projects go, it is quite popular. We have had over [https://www.sitemeter.com/?a=stats&amp;s=s17minix3 2.3 million visitors] to the Website (which has been up about 5 years). Currently about 12,000 people a month download the CD-ROM image file to install it.

== About You ==

The project ideas below range from straightforward to challenging. All require you to be an experienced C programmer. For some of them it would be helpful if you have already read the [http://www.amazon.com/Operating-Systems-Implementation-Prentice-Software/dp/0131429388/ref=pd_bbs_sr_4?ie=UTF8&amp;s=books&amp;qid=1204884702&amp;sr=8-4 MINIX book] for example, in a course you took at your university. Given the difficulty of these projects, we expect you to work full time all summer on them. That means not having a job and not taking classes.

Since this is an open-source project, many other people will study the code later. It is therefore essential that you are someone who takes pride in his or her work and wants to produce code that is clean, efficient, elegant, and well documented so that other people will marvel at its beauty. Just hacking it together quickly so it mostly works some of the time doesn't cut it. We want people to admire the code, even to envy your ability to write truly great code.

If you are an experienced C programmer who knows something about operating systems and can write clear, well-documented code check out the ideas below and then our [[GSOC 2012 Application Template|application template]]. Please answer all these questions in your application. If you don't we will conclude you aren't very good at following simple directions.

== Sheep-Goat Separation ==

Every year we receive many project proposals. To stand out in the crowd, you are going to have to do something more than fill in our template. Here's our handy-dandy sheep-goat separator. [https://www.minix3.org/download Download] and install MINIX 3. Then, try to do some useful subtask of your proposed project. If you're applying for the "Porting Application Programs to MINIX 3" project, you should try to port an application to MINIX 3.

Or do something else that shows you have some skills and you have backed your application with some real effort. If doing part of your most-desired project is not feasible, then look for a NetBSD package that we don't currently have and port it to MINIX 3. A list of packages known to work is in the current minix/limited_list.pbulk file in the Minix pkgsrc repository (see [releases:3.2.0:DevelopersGuide:TestingPkgsrc|this guide] to set up the pkgsrc source environment). Try any of the other ones. If you can get it to build and work, make a git commit out of it, put it into a publically accessible git repo and point us to it to take a look at.

We like people who put their keyboards where their mouths are. Students who do that will be considered "sheep" and have a good chance. Students who think this is too much trouble will be considered "goats," and are unlikely to be picked.

You are encouraged to interact with us before applying via the [https://groups.google.com/group/minix3 Google Newsgroup]. This will help your application and help you pick some small project to do in advance to show us you are serious, as mentioned above.

During the project we want you to interact with our community via the [https://groups.google.com/group/minix3 Google Newsgroup]. Also, you will get your own page on the Wiki and will be expected to use it as a blog posting your progress, at least weekly, but also when you reach a milestone.

MINIX uses [https://git.minix3.org git] as its version control system, so you will be expected to do your work in your own Git repository. Familiarity with git branching, merging, and rebasing will be important to be optimally productive.

== Ideas ==

Here are some ideas, but we are open to suggestions for other projects. Accepted students get $500 right off the bat. If you pass the "midterm" you get $2250 from Google. Upon successful completion of the project, you get another $2250 from Google and a rare MINIX 3 T-shirt from us.

MINIX 3 is open source and uses the BSD license. By applying, you agree that we can distribute your code under this license. However, you also retain your right to reuse it as you wish.

* '''Fault injection tool.''' We would like you to implement a new compiler-based fault injection tool which can be used for reliability testing on MINIX 3 . This should improve the existing Software Implemented Fault Injection (SWIFI) tool included in the MINIX distribution, which is based on tracing and can only be used for a limited number of OS components. We would like the new tool to be implemented as an [https://www.llvm.org/ LLVM] transformation pass, to inject faults in predetermined program locations at compile- or link-time. Candidates for this project should be familiar with static program instrumentation techniques. Experience with the LLVM compiler framework is recommended. A successful project can lead to a publication in an international conference, which can be very helpful if you want to apply to a graduate school later this year.
* '''GCC, binutils, and GDB.''' Although we use clang/LLVM as our default toolchain, we also support the GNU toolchain. We would like to have newer versions of GCC, binutils, and GDB for MINIX. Your initial goal is to port GCC 4.7.0, binutils 2.22, and GDB 7.4 to MINIX. After that, we would like you to work on upstreaming your MINIX toolchain changes to GNU. Candidates should have some familiarity with toolchains and experience building gcc, binutils, and gdb.
* '''lwIP support.''' MINIX has basic support for the [https://savannah.nongnu.org/projects/lwip/ lwIP TCP/IP stack]. We would like you to port a newer version of lwIP (1.4.0) and integrate it into our system, so that it's possible to make lwIP our default network stack. We will want both IPv4 and IPv6 support. Candidates for this project should be strong C programmers with a good understanding of TCP/IP and network stacks.
* '''Port NetBSD userland utiltities.''' We have ported many NetBSD userland utilities to MINIX, but we would like to have more as they are more capable than the current MINIX utilities. Your job, if you choose to accept it, is to replace more of the MINIX userland with NetBSD's. Since we already have the NetBSD C library, build infrastructure, and many utilities, you will have a head start. In some cases, you may be required to extend MINIX functionality, so you can make a cleaner port. Candidates for this project should be very familiar with C programming and the UNIX environment. You will find the [[Porting NetBSD Userland|Porting NetBSD Userland status page]] useful.
A high-level goal of this project might be to replace as many as possible of the current utilities in the commands/ directory by NetBSD equivalents.
Part of this project can also be to update the version of the NetBSD code we are currently based on.
* '''Porting Pkgsrc packages.''' On this project, you would work on porting software to MINIX. Pkgsrc has several thousand packages, and MINIX supports only a fraction of them. It is important to note that some programs are easier to port than others. For example, MINIX does not support kernel threads, shared libraries or mapped files, so applications that require these might be difficult to port. You might take a look at the [[Wishlist]] for some candidate packages, but feel free to propose your own.
A part of this project would be to clean up our pkgsrc repository, by
** sending package-specific patches upstream to the package maintainers so that future versions won't need minix-specific patches in the pkgsrc database
** updating the pkgsrc database version that our repository is based on, forward-porting patches as necessary 
* '''Automated Test Framework.''' For this project, you will port the [https://code.google.com/p/kyua/ kyua] and [https://code.google.com/p/kyua/wiki/ATF ATF] automated testing frameworks from NetBSD. You will port applicable tests from NetBSD, and you will also write new tests to verify the functionality of MINIX system components. Candidates for this project should be comfortable with C and C++ and they should love breaking code.

We are open to suggestions for alternative projects. You might first look at the [[Wishlist|wishlist]] on the [[Main Page|MINIX 3 Wiki]].

== Resources ==

There are several pages available with helpful information. These include:

* [https://www.google-melange.com/ Google Summer of Code main page]
* [https://en.flossmanuals.net/GSoCStudentGuide/ GSoC Student Guide]
* [https://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for Students]
* [https://www.google-melange.com/document/show/gsoc_program/google/gsoc2012/faqs GSoC FAQ]
* [https://www.google-melange.com/gsoc/events/google/gsoc2012 GSoC Timeline]
* [[GSOC|MINIX GSoC wiki]]

Keep in mind that the deadline for applications is '''April 6 19:00 UTC'''. No exceptions.

== Conclusion ==

Thanks for your interest. But even if you do not want to participate in the Google Summer of Code, give MINIX 3 a try. And if you want to help on the project outside the framework of the Google Summer of Code, you are most welcome. We have a Google newsgroup: [https://groups.google.com/group/minix3 Google newsgroup] where your input is welcomed. We also have a [[Main Page|MINIX 3 Wiki]] so users can help document the system.

Thanks for reading so far. We hope you will apply to GSoC to help us. Again, here is our [[GSOC 2012 Application Template|application template]].

Andrew S. Tanenbaum ( ast "at" cs "period" vu "period" nl)</text>
      <sha1>rt21cf9i7hdugkqkqs6tu6b0kigm03i</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2012 Application Template</title>
    <ns>0</ns>
    <id>267</id>
    <revision>
      <id>379</id>
      <timestamp>2022-02-07T12:18:57Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add soc:2012:application</comment>
      <origin>379</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4580" sha1="cypdnqwwhvy5stnmvsdpjt9xyrufro1" xml:space="preserve">&lt;div center round important&gt;
If you haven't visited our [[GSOC 2012 Projects|ideas page]] yet, please do that before reading this page.
&lt;/div&gt;

Your application should contain the following information. Keep it focused on MINIX 3 and make sure it indicates you have given it some thought. Try to convince us that you will be able to carry your ideas to a successful completion. Remember: you are applying for a job, competing against candidates that want the same position. Your application is your salespitch that ''makes the case'' for why we should pick you. '''Treat your GSOC application as you would a job application.'''

A generic proposal sent to many organizations will be stored in /dev/null. If at all possible, please send an email with an attachment containing a scanned image of your official transcript of grades to info@minix3.org. As mentioned on the [[GSOC 2012 Projects|ideas page]], your chances of being accepted are hugely improved by demonstrating that you have installed MINIX 3 and made some contribution, such as accomplishing some subtask of your proposed project.

Also, please read the [https://en.flossmanuals.net/GSoCStudentGuide/ GSoC Student Guide] page before applying. It will help you create a high quality proposal and thereby increase your chance of being selected.

=== 1. Personal Information ===
Name
Address
Phone number(s)
E-mail address
Web page (if you have one)
IRC nickname (if you have one)

=== 2. Education ===

Name of each educational institution you have attended in reverse chronological order going back to high school, listing the years in attendance, the majors (if any) and the degrees earned (with dates). Also list the degree you expect from your current school and when. List any prizes, awards, or merit scholarships you won based on your abilities. Class rank and similar information is also useful if available.

=== 3. Work and Open Source Experience ===

Relevant jobs you have held in reverse chronological order, giving employer name, job title, period you worked there, and your job duties. If it was a programming job, make this a brief description like: "I had a summer job working for company X writing a program to do inventory management in a pet store." Also, include experiences contributing to open source software (OSS) projects here.

=== 4. C Programming Experience ===

Here is your chance to describe why you are a great C programmer. How long have been programming in C? The experience can relate to one of the above jobs, to a course you took, to your hobby, or anything else.

=== 5. Operating System Experience ===

Tell which operating systems you are familiar with, how familiar, kernel programming you have done, and so on. If you have any previous experience with MINIX, tell us about it here.

=== 6. Which Project(s) Do You Want to Work On? ===

List your first choice, second choice, etc. After each one, give a weight of how much you want to work on this one. For example

* Porting Pkgsrc Programs (50)
* lwIP (40)
* Automated Test Framework (10)

This means you prefer porting application programs or lwIP support with a small preference for the former project and would also be willing to work on the automated test framework. The sum of the weights must be 100. Saying you will do anything doesn't show much enthusiasm and will not impress us. Putting all your eggs in one basket (listing only one project with weight 100) increases your chance of getting it but means if you are not our first choice, you get nothing.

=== 7. How Will You Successfully Complete Your Project? ===

For your first choice, create a high-level design and make a week-by-week timeline with milestones, that is, what will be delivered on what date. Think about design tradeoffs, various phases of coding, your testing, release to the community for testing, optimization, and documentation. If you need any special hardware or software, include its acquisition in the timeline. Also, discuss any topics you will need to learn in order to complete the project.

Your proposal should convince us that you will successfully complete your project. You should put some serious thought into this question.

=== 8. Motivation ===

Why do you want to work on MINIX 3 as opposed to the many other interesting open-source projects? Can you work full time this summer or do you have any time conflicts (courses, exams, work) this summer?

=== 9. Application Procedure ===

To apply, go to Google's [https://www.google-melange.com/ application page].

[[GSOC 2012 Projects|Back to MINIX 3 Summer of Code Ideas Page]]</text>
      <sha1>cypdnqwwhvy5stnmvsdpjt9xyrufro1</sha1>
    </revision>
  </page>
  <page>
    <title>GSOC 2013 Projects</title>
    <ns>0</ns>
    <id>268</id>
    <revision>
      <id>414</id>
      <parentid>384</parentid>
      <timestamp>2022-02-08T17:16:14Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <minor/>
      <comment>Fix link</comment>
      <origin>414</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="14542" sha1="9wl311ef15epux080h347a9mwao36w1" xml:space="preserve">== Introduction ==

Every summer, Google sponsors the [https://www.google-melange.com/ Summer of Code] program in which students are paid to work on open source projects. MINIX 3 has participated every year since 2008, and we are applying to be a mentoring organization for GSoC 2013. In past years we've had excellent students who have made major contributions to MINIX, and we are hoping for more great students this year (if we are accepted by Google). If you are interested in working on our project, read on.

[https://www.minix3.org/ MINIX 3] is a small, modular, multiserver operating system aimed at being highly reliable, fault tolerant and self healing. We are particularly interested in embedded systems. Only about 9000 lines of code run in kernel mode. The rest runs as a collection of user processes, e.g., for each device driver and server. If a driver fails, it is automatically replaced by a fresh copy, without user intervention (or even knowledge) and without affecting running programs. Few other systems can survive fatal errors in some critical system components without even missing a beat. The goal of reliable systems will have been achieved when no computer has a RESET button and no user has ever experienced a crash and does not know anyone personally who has ever experienced a crash.

MINIX 3 supports the POSIX interface and has a userland orientation towards NetBSD, including the NetBSD headers, libraries, pkgsrc, etc. The default compiler is clang/LLVM, although gcc is also available. Hundreds of UNIX programs are available, including X11, perl, python, mplayer, and many more. Nevertheless there is much more to do.

We would like to continue the development to demonstrate that building a system out of small replaceable components leads to a highly robust design that is far easier to understand and maintain than systems with millions of lines of kernel code. While good performance is important, it is hardly the overriding criteria it once was. If most ordinary users were given a choice between the fastest possible system and one that was 20% slower but never crashed, we believe a large number of users would choose the latter. For many companies (e.g., banks, e-commerce sites), having their systems run 24/7 with no failures ever is a top priority.

Embedded systems are another area where high reliability is important. People do not expect their TV sets, digital cameras, and camcorders to exhibit blue screens, except when images of the sky are being shown.

In short, we are trying to build a modular, reliable (and secure) operating system out of small components that can be replaced on the fly and we would like you to help. Here is a [https://www.cs.vu.nl/~ast/publications/acsac-2006.pdf paper] describing MINIX 3 and its architecture in more detail. More papers are listed on the [[Publications|publications]] page. You might also watch Andrew Tanenbaum's talk at [https://www.youtube.com/watch?v=bx3KuE7UjGA FOSDEM 2010] on MINIX 3.

As an aside, MINIX 3 is not your grandfather's MINIX. It started out as an educational system but has evolved greatly since then into a tight system with a focus on high reliability (and security). As open-source projects go, it is quite popular. We have had over [https://www.sitemeter.com/?a=stats&amp;s=s17minix3 2.5 million visitors] to the Website (which has been up about 6 years). Currently about 12,000 people a month download the CD-ROM image file to install it.

== About You ==

The project ideas below range from straightforward to challenging. All require you to be an experienced C programmer. For some of them it would be helpful if you have already read the [https://www.amazon.com/Operating-Systems-Implementation-Prentice-Software/dp/0131429388/ref=pd_bbs_sr_4?ie=UTF8&amp;s=books&amp;qid=1204884702&amp;sr=8-4 MINIX book] for example, in a course you took at your university. Given the difficulty of these projects, we expect you to work full time all summer on them. That means that you will not be working another job.

Since this is an open-source project, many other people will study the code later. It is therefore essential that you are someone who takes pride in his or her work and wants to produce code that is clean, efficient, elegant, and well documented so that other people will marvel at its beauty. Just hacking it together quickly so it mostly works some of the time doesn't cut it. We want people to admire the code, even to envy your ability to write truly great code.

If you are an experienced C programmer who knows something about operating systems and can write clear, well-documented code check out the ideas below and then our [[GSOC Application|application template]]. Please answer all these questions in your application. If you don't we will conclude you aren't very good at following simple directions.

== Sheep-Goat Separation ==

Every year we receive many project proposals. To stand out in the crowd, you are going to have to do something more than fill in our template. Here's our handy-dandy sheep-goat separator. [https://wiki.minix3.org/doku.php?id=www:download:start Download] and install MINIX 3. Then, try to do some useful subtask of your proposed project. If you're applying for the "Porting Application Programs to MINIX 3" project, you should try to port an application to MINIX 3.

Or do something else that shows you have some skills and you have backed your application with some real effort. If doing part of your most-desired project is not feasible, then look for a NetBSD package that we don't currently have and port it to MINIX 3. A list of packages known to work is in the current minix/limited_list.pbulk file in the Minix pkgsrc repository (see [[:releases:3.2.0:developersguide:testingpkgsrc|this guide]] to set up the pkgsrc source environment). Try any of the other ones. If you can get it to build and work, make a git commit out of it, put it into a publically accessible git repo and point us to it to take a look at.

We like people who put their keyboards where their mouths are. Students who do that will be considered "sheep" and have a good chance. Students who think this is too much trouble will be considered "goats," and are unlikely to be picked.

'''You are encouraged to interact with us before applying via the [https://groups.google.com/group/minix3 Google Newsgroup].''' All the prospective GSoC mentors will be reading the Google Group and fielding questions. This will help your application and help you pick some small project to do in advance to show us you are serious, as mentioned above.

We want you to write great code this summer, but we also want you to become part of the MINIX community. You'll find that our community is friendly, knowledgeable, and eager to help. Over the summer, you'll rely on the community to help answer your questions and to help test your code. You will interact with the community primarily via the [https://groups.google.com/group/minix3 Google Newsgroup], but you can also chat on Freenode at #minix. Also, you will get your own page on the Wiki; you will use it to update the community and your mentors on your status weekly.

MINIX uses [https://git.minix3.org git] as its version control system, so you will be expected to do your work in your own Git repository. Familiarity with git branching, merging, and rebasing will be important to be optimally productive.

== Ideas ==

Here are some ideas, but we are open to suggestions for other projects. Accepted students get $500 right off the bat. If you pass the "midterm" you get $2250 from Google. Upon successful completion of the project, you get another $2250 from Google and a rare MINIX 3 T-shirt from us.

MINIX 3 is open source and uses the BSD license. By applying, you agree that we can distribute your code under this license. However, you also retain your right to reuse it as you wish.

* '''I2C support for ARM.'''
*: MINIX 3 currently can't make use of some of the onboard devices of the Beagleboard-xM. Many of them require I2C access. Your job is to write a generic I2C bus driver that runs on the Beagleboard-xM. Next, you will write two drivers using the i2c bus:
*: Driver 1: The TPS65950 is the power management companion chip for the the Beagleboard-xM. You will make its functionality available and make the following accessible: Controlling the GPIOs on the PMIC, controlling the LEDs, and controlling the different power rails (especially the MMC one).
*: Driver 2: The Display Data Channel or DDC (sometimes referred to as EDID Enhanced Display ID) is a digital connection between a computer display and the processor that allows the display specifications to be read by the processor. Your job is to read out the EDID data and configure the framebuffer driver to make good use of the screen real estate.
* '''Improve MMC support for ARM.'''
*: The MMC driver of MINIX 3 is still in a rudimentary state. It currently only support SDHC based devices and reads/writes single blocks at once. Your task is to improve the driver to support SDSC, implement multi-block write operations, and generally speed up the driver to make better use of the available features and data line.
* '''Pkgsrc cross-compilation support for ARM.'''
*: Now that MINIX has ARM support, we would like you to help bootstrap pkgsrc for the ARM platform. Pkgsrc is the package manager that MINIX uses to install third-party software such as Git and Perl. We would like you to add cross-compilation support for pkgsrc targeting MINIX/ARM, and we would like you to help us port more applications to MINIX/ARM. You do not need kernel experience for this project, but you should be very comfortable using and building software for UNIX-like operating systems.
* '''Porting Pkgsrc packages.'''
*: On this project, you would work on porting software to MINIX. Pkgsrc has several thousand packages, and MINIX supports only a fraction of them. It is important to note that some programs are easier to port than others. For example, MINIX does not support kernel threads, so applications that require them might be difficult to port. You might take a look at the [[Wishlist|wishlist]] for some candidate packages, but feel free to propose your own.
*: A part of this project would be to clean up our pkgsrc repository, by
** implementing missing system calls
** sending package-specific patches upstream to the package maintainers so that future versions won't need minix-specific patches in the pkgsrc database
** updating the pkgsrc database version that our repository is based on, forward-porting patches as necessary
** You do not need kernel experience, but you should be very comfortable writing and building software for UNIX-like operating systems.
* '''Implement job control support.'''
*: The TTY subsystem is central to the design of UNIX in general. Your job is to implement tty job control. MINIX has a basic form of job control (putting jobs in the background), but this is not good enough for many programs we would like to run on MINIX. You can read up on job control [https://www.linusakesson.net/programming/tty/ here].
* '''Code coverage for our POSIX tests.'''
*: Getting good code coverage statistics for the kernel and its servers is not as easy as getting code coverage for an application program. Your goal is to use the qemu trace functionality to implement code coverage of our POSIX tests. This will require inserting trace points in the kernel and servers so as to provide a holistic view of what the system is doing. You might want to have a look at [https://www.open-do.org/projects/couverture/ couverture]. We are also open to proposals based on LLVM using [https://llvm.org/pubs/2010-12-Preuss-PathProfiling.pdf path profiling].
* '''Enhance lwIP support.'''
*: We are in the process of switching to lwIP as our default network stack. We would like you to help standardize our networking code by:
** Porting standard network utilities from NetBSD: netstat, route, ifconfig, dhclient, ping, traceroute, bind for named and libc resolver code
** Exposing more lwIP features to userland to help applications build cleanly, e.g. SO_LINGER
** Switching to using the NetBSD libc code for networking instead of the legacy Minix libc networking code
* '''Haskell for OS Development.'''
*: MINIX 3 has a multiserver architecture in which the vast majority of the OS runs as a collection of user-mode processes, including drivers and system services. Since drivers and system services are normal user-mode processes, we can implement them in any language. Haskell is a purely functional language with a powerful static typing system. Haskell has also been used in recent research into the formal verification of OS kernels. As such, Haskell has some interesting properties for OS development. For this project, you will port the Glasgow Haskell Compiler (GHC) runtime to MINIX and you you will implement a MINIX component of your choice in Haskell. Applicants for this project should be comfortable with Haskell and low-level systems programming.
* '''Your creative idea here.'''
*: We encourage suggestions for alternative projects, but we recommend you discuss your ideas with us before applying. You might first look at the [[Wishlist|wishlist]] on the [[Main Page|MINIX 3 Wiki]] for inspiration.

== Resources ==

There are several pages available with helpful information. These include:

* [https://www.google-melange.com/ Google Summer of Code main page]
* [https://en.flossmanuals.net/GSoCStudentGuide/ GSoC Student Guide]
* [https://code.google.com/p/google-summer-of-code/wiki/AdviceforStudents Advice for Students]
* [https://www.google-melange.com/gsoc/document/show/gsoc_program/google/gsoc2013/help_page GSoC FAQ]
* [https://www.google-melange.com/gsoc/events/google/gsoc2013 GSoC Timeline]
* [[GSOC|MINIX GSoC wiki]]

Keep in mind that the deadline for applications is '''May 3 19:00 UTC'''. No exceptions.

== Conclusion ==

Thanks for your interest. But even if you do not want to participate in the Google Summer of Code, give MINIX 3 a try. And if you want to help on the project outside the framework of the Google Summer of Code, you are most welcome. We have a Google newsgroup: [https://groups.google.com/group/minix3 Google newsgroup] where your input is welcomed. We also have a [[Main Page|MINIX 3 Wiki]] so users can help document the system.

Thanks for reading so far. We hope you will apply to GSoC to help us. Again, here is our [[GSOC Application|application template]].

Andrew S. Tanenbaum ( ast "at" cs "period" vu "period" nl)</text>
      <sha1>9wl311ef15epux080h347a9mwao36w1</sha1>
    </revision>
  </page>
  <page>
    <title>Minix on Linaro QEMU ARM</title>
    <ns>0</ns>
    <id>269</id>
    <revision>
      <id>386</id>
      <timestamp>2022-02-07T14:13:15Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add developersguide:minixonlinaroqemuarm</comment>
      <origin>386</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1443" sha1="h4yrdhqyixy59lgf5i4juo1oenrmc0f" xml:space="preserve">== Building Linaro Qemu ==

[https://www.linaro.org/ Linaro] provides open source software for ARM SoCs. Linaro Qemu is a custom version of Qemu that supports the '''BeagleBoard-xM'''. Linaro Qemu currently only supports python 2. If you have both python 2 and 3 installed, you may have to specify the path to python by adding the &lt;code&gt;configure&lt;/code&gt; argument &lt;code&gt;--python=/usr/bin/python2&lt;/code&gt;.

 $ cd $HOME
 $ git clone git://git.linaro.org/qemu/qemu-linaro.git linaro
 $ cd linaro
 $ sudo apt-get build-dep qemu # to install the build dependencies of qemu
 $ ./configure --target-list=arm-softmmu --prefix=$HOME/qemu
 $ make
 $ make install

Now you have a QEMU in ''$HOME/qemu/bin/qemu-system-arm'' and can test a BeagleBoard-xM build on qemu by running:

 # $HOME/qemu/bin/qemu-system-arm  -M beaglexm -drive if=sd,cache=writeback,file=minix_arm_sd.img -clock unix -serial stdio -device usb-kbd -device usb-mouse -usb

If you run into problems booting Minix with Linaro Qemu current, try [https://launchpad.net/qemu-linaro/+milestone/2012.12 QEMU emulator version 1.3.0 (qemu-linaro 2012.12)]. It is known to work with Minix current.

For reference: this page used to advise checking out an older version of qemu-linaro. This is no longer necessary; in fact, building the older version now no longer works on modern system. The qemu-linaro commit we previously recommended checking out was 72f7eb07b611766298fe2dc140533a0a6256b054.</text>
      <sha1>h4yrdhqyixy59lgf5i4juo1oenrmc0f</sha1>
    </revision>
  </page>
  <page>
    <title>LLVM Bitcode</title>
    <ns>0</ns>
    <id>270</id>
    <revision>
      <id>396</id>
      <timestamp>2022-02-07T17:52:09Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add developersguide:llvmbitcode</comment>
      <origin>396</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1919" sha1="t2zv0bmtg57q29ntknkoz9yb1rvfycv" xml:space="preserve">This page will contain information on how to compile minix in LLVM with bitcode-based linking. 

This allows LTO and instrumentation/analysis of the system.

== Quick start ==
# git clone git@git.minix3.org:minix
# cd minix
# git remote add minix-llvm git@git.minix3.org:minix-llvm
# git fetch minix-llvm
# git checkout -t minix-llvm/master-llvm
# [JOBS=1] ./minix/llvm/generate_gold_plugin.sh
# [JOBS=1] BUILDVARS='-V MKBITCODE=yes' ./releasetools/x86_hdimage.sh

=== The "llvm-apps way" (requires llvm-apps repository separately checked out) ===
Replace 6,7 above with:
 a. cd minix/llvm
 b. ./configure.llvm
 c. [C=modules] ./relink.llvm [args]
 d. [C=modules] ./build.llvm [args]
 e. ./clientctl buildimage
 f. ./clientctl run

== Running Minix LLVM passes on Minix bitcode files  ==
After building the sources, we may wish to run some LLVM passes on the Minix bitcode files. There are a few LLVM passes available under minix/llvm/passes and they get installed into minix/llvm/bin directory.
Following is how they could be used:
 cd minix/llvm
 [C=modules] [LLVM_PASS_ARGS=&lt;arguments to llvm pass(es)&gt;] ./build.llvm [&lt;llvm-pass(es)&gt;]
  example:
    C=pm ./build.llvm hello
    C=servers ./build.llvm hello weak-alias-module-override
 ./clientctl buildimage
 ./clientctl run

== Documentation Generated from the Sources ==

The following documentation has been generated from the LLVM sources available in the git repository. As such it should be more pertinent than the latest documentation available on the official LLVM website.

* [https://www.few.vu.nl/~lsc300/LLVM/clang/html/index.html clang index]
* [https://www.few.vu.nl/~lsc300/LLVM/llvm/html/index.html LLVM index]
* [https://www.few.vu.nl/~lsc300/LLVM/doxygen/index.html LLVM Doxygen documentation]

&lt;div round info&gt;
The documentation contains links to the official web site, so be sure to always check you did not lend on the official LLVM site.
&lt;/div&gt;</text>
      <sha1>t2zv0bmtg57q29ntknkoz9yb1rvfycv</sha1>
    </revision>
  </page>
  <page>
    <title>Reliability</title>
    <ns>0</ns>
    <id>271</id>
    <revision>
      <id>397</id>
      <timestamp>2022-02-07T17:55:28Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add www:documentation:reliability</comment>
      <origin>397</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5062" sha1="r2orh4bydfj5fcyjn1n3ppdo1dgusng" xml:space="preserve">One of the main goals of MINIX 3 is reliability. Below we discuss some of the more important principles that enhance MINIX 3's reliability. These principles also enhance security, since most security flaws are due to attackers exploiting bugs in the code, so greater reliability will also improve security. Some of the ideas discussed are in the current release, but a few are scheduled for the next release. As this is a research project, we often make changes as we think of new ways to improve reliability.

== Reduce kernel size ==

Monolithic operating systems (e.g., Windows, Linux, BSD) have millions of lines of kernel code. There is no way so much code can ever be made correct. In contrast, MINIX 3 has about 4000 lines of executable kernel code. We believe this code can eventually be made fairly close to bug free.

== Cage the bugs ==

In monolithic operating systems, device drivers reside in the kernel. This means that when a new peripheral is installed, unknown, untrusted code is inserted in the kernel. A single bad line of code in a driver can bring down the system. This design is fundamentally flawed. In MINIX 3, each device driver is a separate user-mode process. Drivers cannot execute privileged instructions, change the page tables, perform I/O, or write to absolute memory. They have to make kernel calls for these services and the kernel checks each call for authority.

== Limit drivers' memory access ==

In monolithic operating systems, a driver can write to any word of memory and thus accidentally trash user programs. In MINIX 3, when a user expects data from, for example, the file system, it builds a descriptor telling who has access and at what addresses. It then passes an index to this descriptor to the file system, which may pass it to a driver. The file system or driver then asks the kernel to write via the descriptor, making it impossible for them to write to addresses outside the buffer.

== Survive bad pointers ==

Dereferencing a bad pointer within a driver will crash the driver process, but will have no effect on the system as a whole. The reincarnation server will restart the crashed driver automatically. For some drivers (e.g., disk and network) recovery is transparent to user processes. For others (e.g., audio and printer), the user may notice. In monolithic systems, dereferencing a bad pointer in a (kernel) driver normally leads to a system crash.

== Tame infinite loops ==

If a driver gets into an infinite loop, the scheduler will gradually lower its priority until it becomes the idle process. Eventually the reincarnation server will see that it is not responding to status requests, so it will kill and restart the looping driver. In a monolithic system, a looping driver hangs the system.

== Limit damage from buffer overruns ==

MINIX 3 uses fixed-length messages for internal communication, which eliminates certain buffer overruns and buffer management problems. Also, many exploits work by overrunning a buffer to trick the program into returning from a function call using an overwritten stacked return address pointing into the overrun buffer. In MINIX 3, this attack does not work because instruction and data space are split and only code in (read-only) instruction space can be executed.

== Restrict access to kernel functions ==

Device drivers obtain kernel services (such as copying data to users' address spaces) by making kernel calls. The MINIX 3 kernel has a bit map for each driver specifying which calls it is authorized to make. In monolithic systems every driver can call every kernel function, authorized or not.

== Restrict access to I/O ports ==

The kernel also maintains a table telling which I/O ports each driver may access. As a result, a driver can only touch its own I/O ports. In monolithic systems, a buggy driver can access I/O ports belonging to another device.

== Restrict communication with OS components ==

Not every driver and server needs to communicate with every other driver and server. Accordingly, a per-process bit map determines which destinations each process may send to.

== Reincarnate dead or sick drivers ==

A special process, called the reincarnation server, periodically pings each device driver. If the driver dies or fails to respond correctly to pings, the reincarnation server automatically replaces it by a fresh copy. The detection and replacement of nonfunctioning drivers is automatic, without any user action required. This feature does not work for disk drivers at present, but in the next release the system will be able to recover even disk drivers, which will be shadowed in RAM. Driver recovery does not affect running processes.

== Integrate interrupts and messages ==

When a interrupt occurs, it is converted at a low level to a notification sent to the appropriate driver. If the driver is waiting for a message, it gets the interrupt immediately; otherwise it gets the notification the next time it does a RECEIVE to get a message. This scheme eliminates nested interrupts and makes driver programming easier.</text>
      <sha1>r2orh4bydfj5fcyjn1n3ppdo1dgusng</sha1>
    </revision>
  </page>
  <page>
    <title>Obsolete Tools</title>
    <ns>0</ns>
    <id>272</id>
    <revision>
      <id>417</id>
      <timestamp>2022-02-08T17:46:59Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add developersguide:obsoletetools</comment>
      <origin>417</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="5952" sha1="szzzrpydz4jl7yjgq3ttx4zqzp3t0b7" xml:space="preserve">In addition to a [[Useful Tools|number of still useful tools]], MINIX also comes
with several tools that were created to ease configuration 
and development on MINIX without being part of any standard and are therefore
unlikely to be known to people familiar with other POSIX systems. Such tools
are now obsolete, but you may encounter them, perhaps when browsing history.
This page describes these tools. For more in-depth information consult their man pages.

== binsizes, bigmake ==

In the remote times, MINIX's processes needed to know the stack allocation beforehand.
This was done using the [https://www.minix3.org/manpages/man1/chmem.1.html chmem(1)]
utility. Sometimes one wanted to increase several utilities for a small period of time.
''binsizes'' did that, with some templates (normal, big, xxl) found in the ''/etc'' directory.
''bigmake'' is a wrapper around make using the big template.

== unstack ==

''unstack'' was a debugging tool which converts a stack trace with addresses, such as the one printed
to the console when a segmentation fault occurs, into a one with names. It obtains
symbols from the symbol table of the binary from which the stack trace originated.

It has been superseded by addr2line, now that all binaries are in ELF format and we rely (for now) on binutils for linking and such anyway.

== packman, binpackage(s), packit ==

''packman'' used to be the MINIX package manager. It allows one to install binary and source
packages. It has been phased out starting from MINIX 3.1.8.

''binpackage'' and ''binpackages'' automated the building process of packages;
''packit'' was used at installation time. There was also a guide to
[[:releases:3.2.0:developersguide:makingpackmanpackage|making packman packages]].

== ACK assembly languages ==

MINIX spawns a long timeframe; and while the C language is a firmly-established
standard, not such are the assembly language syntaxes. So there is a long history
of difficulties because of the various syntaxes which has been used with MINIX.
Fortunately most of this material is now obsolete, and the move is almost completed
toward the ATT syntax used with the GNU assembler.

==  Is there a Minix assembly language programming manual?  ==

No, not as such '''(but see below)'''.  Minix assembly language'''s''' (yes, in plural form), and Unix
systems' assemblers in general, use syntaxes that are tailored to serve as compiler back ends, and as such look strange at first to those who are used to Microsoft MASM and similar assemblers.  There are several
documents about Minix assembly languages which may be helpful here:

* [https://minix1.woodhull.com/pub/info/pc-ix-assem.txt Pc-ix-assem.txt] is the closest thing we have to a manual. It describes 16-bit Minix assembly language, as used in the first releases of Minix. The 32-bit language has additional instructions, but the description of syntax and pseudo-ops makes this a useful reference.
* The page titled [[Assembly Language Programming]] has various general informations about assembly programming.
* The page titled [[Learning Assembly Language]] expands about learning assembly programming.
* The page titled [[Minix ACK Assembly Language|MINIX 3 ACK Assembly Language]], derived from [https://www.minix3.org/doc/pseudoops.html Minix assembly pseudo-ops, sections, and comments], has answers from Kees Bot to questions that were asked on the comp.os.minix newsgroup years ago about these aspects of Minix assembly programming.
* [https://minix1.woodhull.com/pub/info/pc-ack-assem.txt Pc-ack-assem.txt] a brief discussion by Kees Bot of the evolution of Minix's assembly language through different versions of Minix.
* [https://minix1.woodhull.com/pub/info/assm_example.txt Assm_example.txt] is a simple assembly language "Hello World" illustrating how an assembly program can be assembled and linked. This demo was written for Minix 1.5, a modern version would be slightly different.
* ''Mini-manual:'' Soon after I answered the question above, "Is there a Minix assembly language programming manual?" in the negative, somebody posted a pointer to a nice document entitled [https://www.users.csbsju.edu/~cburch/cs/350/handouts/x86.html Introduction to Intel x86 Assembly Language in Minix] on the comp.os.minix newsgroup. (The above link is to an html document, there is also a [https://www.users.csbsju.edu/%7Ecburch/cs/portfolio/x86.pdf PDF version] available). The author is Carl Burch of St John's University (Minnesota, USA). This document describes the language recognized by the open-source assembler [https://nasm.sourceforge.net/ NASM], which is somewhat similar to the assembly language of Minix.
* [https://www.minix3.org/doc/intelman.html Intel and AMD Architecture and Programming Manuals] are available on the web. These companies want people to program for their products, of course, and they provide lots of information. 
* There is a  [https://my.execpc.com/%7Egeezer/os/pm.htm Protected Mode Tutorial]  [https://my.execpc.com/~geezer/os/pm.htm here], a site maintained by Chris Giese. The page is oriented toward programming MS-DOS applications, but it offers a good brief overview of how protected mode works.
* Wangzhi (quakewang@mail.whut.edu.cn) provided a translation into English of a [https://www.woodhull.com/newfaq/faq/MinixAsMn.html Minix Assembly Language Manual], originally written in Chinese by Mao Yao and Yang Songhua. It includes a number of examples written by Wangzhi. The previous link is to an HTML version. He also provided a [https://www.woodhull.com/newfaq/faq/MinixAsMn.pdf PDF version].

==  Do you know of any tutorials on assembly language programming?  ==
Randall Hyde's [https://webster.cs.ucr.edu/AoA.html The Art of Assembly Language Programming website]
site offers downloads of versions of his assembly programming text in three 
flavors: for 16-bit DOS, for 32-bit Windows, and for 32-bit Linux. There's a 
lot of other interesting stuff on this site.</text>
      <sha1>szzzrpydz4jl7yjgq3ttx4zqzp3t0b7</sha1>
    </revision>
  </page>
  <page>
    <title>Learning Assembly Language</title>
    <ns>0</ns>
    <id>273</id>
    <revision>
      <id>419</id>
      <timestamp>2022-02-08T17:55:25Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add developersguide:learningassemblyinminix</comment>
      <origin>419</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4286" sha1="bhs6wh039hdmviyi0ijw4kezpk3u9gj" xml:space="preserve">These are resources to aid users in learning assembler as it relates to Minix.  Note: the prerequisite for this is knowing C. If you do not already know C, you'll save yourself many headaches by doing this first.

=== Use the compiler ===
This is the single best resource for learning assembler.  You can see exactly what the compiler would to to create assembly programs (or functions etc.).  The best reccomendation would be to write (small) simple programs in C, then convert them to assembly, and try to go through them using the other guides as a reference.  This is good for hands-on learners.

Write a simple C program that demonstrates what you want to do, then translate it to assembly with:

&lt;code&gt;$ cc -S myprogram.c&lt;/code&gt;

=== Dr. Paul Carter’s Assembly Tutorial ===
https://drpaulcarter.com/pcasm/

While not Minix-specific, this was the best manual for 80×86 assembly I found, and if you would rather read a manual first (before you start mucking around in code) then I would reccomend this.  It is concise and well organized with plenty of examples, and covers everything you need to get started wirting assembly for 80×86.  Bonus! It’s available in multiple languages. I used this as a reference, but fully intend to go back and read through the entire thing once classes end for the spring.

=== Appendix B from OSDI ===
https://www.minix3.org/doc/AppendixB.html

There are a good deal of assembly (*.s) files in the Minix source code.  The two (big) files of note are: kernel/mpx386.s (line 06300, page 707) and kernel/klib386.s (line 08800, page 742).  These are good references as they span a wide range of tasks.  They are also minix-specific examples and if you end up writing assembly routines on your own it would be a good idea to base your conventions on these.

=== Examples from Minix SVN ===
https://gforge.cs.vu.nl/gf/project/minix/

This is the current source for 3.1.4, and is newer than the source published with the book.  There are plenty of assembly files here to reference, but I’ll point out the two I used.  Saturn|VU pointed me to read_tsc.s on the IRC channel.  What makes this different is that it uses an operation (opcode) thats not supported by the assembler.  Now while incorporating this into a high level language would be dreadfully complex, with assembly we just write in the opcode by hand and it will run just fine.

=== Intel 64 and IA-32 Architectures Software Developer’s Manuals ===
https://www.intel.com/products/processor/manuals/

While not actually an assembly reference, they contain a complete reference to anything and everything the processor can do at an assembly/machine-code level.  If you're going to do anything 'exotic' or nonstandard (such as [https://ajray.wordpress.com/2009/04/06/query-the-processor-for-pmcs/ query built in performance counters]) you will probably end up using these.

=== Other Resources ===
The items here are still worth a glance, but are more noise than use.  As I develop my assembly skillset further I’ll do what I can to incorporate useful information from these into this wiki.

* [https://ozark.hendrix.edu/~burch/csbsju/cs/350/handouts/x86.html Intel x86 Assembly Language in Minix]: This is a very good tutorial for assembly and is entirely Minix-applicable.  It’s only lacking one thing: commuicating between C and Assembly programs, and since that is often vital to integrating assembly routines, it is included here.
* English translation of a [https://www.woodhull.com/newfaq/faq/MinixAsMn.html Minix Assembly Language Manual], originally written in Chinese by Mao Yao and Yang Songhua.  This does explain some Minix-specific assembler, but did not do so very clearly.
* [https://wiki.minix3.org/wikis/minix3/AssemblyLanguage Minix assembly pseudo-ops, sections, and comments] has some minix-specific information for those that already know assembly language, but doesn’t give enough for it to be of use for someone who doesn’t already know assembler.
* A few others are listed in [https://www.minix3.org/doc/environ.html Programming in the Minix 3 Environment], but those are outdated (for versions 1 or 2) old newsgoup posts. I haven’t even gone through all of them, and I’ll probably scan through them when I’m working on the wiki pages for assembler.</text>
      <sha1>bhs6wh039hdmviyi0ijw4kezpk3u9gj</sha1>
    </revision>
  </page>
  <page>
    <title>Pkgsrc upstreaming</title>
    <ns>0</ns>
    <id>274</id>
    <redirect title="Pkgsrc Upstreaming" />
    <revision>
      <id>423</id>
      <timestamp>2022-02-08T18:03:15Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Peter moved page [[Pkgsrc upstreaming]] to [[Pkgsrc Upstreaming]]: Fix typo</comment>
      <origin>423</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="32" sha1="mky6hky2zr13qhe8r7nno458g3c2103" xml:space="preserve">#REDIRECT [[Pkgsrc Upstreaming]]</text>
      <sha1>mky6hky2zr13qhe8r7nno458g3c2103</sha1>
    </revision>
  </page>
  <page>
    <title>Serial Out</title>
    <ns>0</ns>
    <id>275</id>
    <revision>
      <id>425</id>
      <timestamp>2022-02-08T18:09:51Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Add developersguide:serialout</comment>
      <origin>425</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="4903" sha1="scmlwu28glscnrj6rftkq1uzbdeeaow" xml:space="preserve">== Introduction ==

It's sometimes useful to add debugging prints to servers or drivers and have the output not show up on your screen, but redirected to serial. This way, you can log the prints to a text file or terminal on another box.

== Things you can do with serial ==

===== Output =====

As stated, all kernel, drivers and servers (-lsys processes) output goes to serial when enabled with ''cttyline=0''. This makes it convenient to log, search, analyze etc. such output.

==== IS ====

IS is the information server that interrogates others / makes them print output. In serial mode, the result goes to serial instead of the screen. Press shift+F5 to see an overview of the various available debug dumps. Each is an F-key. Press the F-key to see the output on serial.

=== Input ===

The Minix kernel also listens to input from serial in this mode. Keys that do things:
* '1' print a list of all processes and their state (flags, whether they are blocking, if so on which process, whether they are signalled, and so on), and stacktraces per process. very useful to deduce, if the system is hanging, on which process processes are blocking (dependency lines are printed for each process too). also for each process a stacktrace is printed so you can see exactly what the process (hanging or not) is doing right now.
* '2' print a list of all runnable processes. nice to get a rough idea of what's going on (and that the system is alive at all) when pressed repeatedly.
* '4' in SMP mode, print SMP cpu info
* '5' print a stacktrace of all VFS threads

== Enable serial on your Minix box ==

First you have to tell Minix to redirect &lt;code&gt;printf&lt;/code&gt;'s from system processes to serial out. You do this by providing the &lt;code&gt;cttyline&lt;/code&gt; and &lt;code&gt;cttybaud&lt;/code&gt; parameters to the kernel upon boot up. These days, the boot menu should have an "Edit boot menu" option which allows you to do this **temporarily** and without modifying any files. In the boot menu, select the "Edit boot menu" option. Then, for "Option (edit):", just press Enter to select the default. Then add &lt;code&gt;cttyline=0 cttybaud=115200&lt;/code&gt; at the end of the shown line. Press Enter once more to boot with the options.

To modify the boot menu '''permanently''', add the following to ''/etc/boot.cfg.local'' (create the file if it doesn't exist; it is only a single line, do not insert newlines in between):
 menu=Start latest serial MINIX 3:load_mods /boot/minix_latest/mod*;multiboot /boot/minix_latest/kernel rootdevname=c0d0p0s0 cttyline=0 cttybaud=115200
After you've created that, run
 # update_bootcfg
to update the boot configuration. If you also want the boot menu to be sent over serial instead of showing up on the screen, add
 consdev=com0
to ''/etc/boot.cfg.local'' as well. Note that if add this line but you don't attach a null modem or terminal to your serial port, you won't see and be able to pick an option from the boot menu.

== Setting up the receivers end ==

We can use serial out on real hardware and on VMs.

=== Qemu ===

To log the serial output to a file add the following option
 -serial file:/path/to/file
If you want to be able to pick an option from the boot menu over serial, use
 -serial stdio
If you want both, use ''tee'' to multiplex the output and ''sed'' to sanitize the output:
 -serial stdio | sed -u 's/^M//g' | tee /path/to/file

=== VMware ===

Before you run a VM, edit the VM settings and add a Serial Port device. There you have a number of options such as redirecting to a physical device or a file.

It takes a little setting up, but the most pleasant resulting usage is to redirect it to a pipe and then connect to the pipe using e.g. a telnet client.

=== VMware under Windows ===

To do that under windows, redirect the serial output to a named pipe, and call it "\\.\pipe\com_1". Then download, install and run "Named Pipe TCP proxy." Make
a new connection and set Pipe name to "\\.\pipe\com_1", description "vmware." Start it. Set TCP port to e.g. 1001. Then configure a telnet client (e.g. putty works
well) to connect to localhost port 1001. If your vmware is running, you should see it connected and you have access to your serial console.

=== Real hardware ===

Connect your Minix box to a receiving box using a [[http://en.wikipedia.org/wiki/Nullmodem|null modem]] . Then start a terminal client on the receiving box such as kermit:
 $ kermit -l /dev/ttyS0
However, this way kermit will stop working upon every reboot. You can use following script to prevent that (save as a file and make it executable):

 #!/usr/bin/kermit +
 kermit -E -l /dev/ttyS0
 set speed 115200
 set reliable
 fast
 set carrier-watch off
 set flow-control none
 set prefixing all
 connect

=== FreeBSD ===

In the FreeBSD base system you can use tip. Edit /etc/remote to set the right parameters, e.g.:
 uart0|com1:dv=/dev/cuau0:br#115200:pa=none:
Then:
 # tip uart0
and you're in.</text>
      <sha1>scmlwu28glscnrj6rftkq1uzbdeeaow</sha1>
    </revision>
  </page>
  <page>
    <title>Minix 3.4.0 Showstoppers</title>
    <ns>0</ns>
    <id>276</id>
    <revision>
      <id>441</id>
      <parentid>440</parentid>
      <timestamp>2022-02-14T18:20:39Z</timestamp>
      <contributor>
        <username>Stux</username>
        <id>7</id>
      </contributor>
      <comment>/* Documentation */ add details for wiki licensing steps</comment>
      <origin>441</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="1471" sha1="8vwr3reiojtnucw8amrw8ctvs8ujet6" xml:space="preserve">This page contains list of stuff which needs to be done before we can consider Minix 3.4.0 ready for release. The list is WIP, so new entries may appear.

== Development ==

* Fix Linux Cross-compilation Issues: https://github.com/Stichting-MINIX-Research-Foundation/minix/issues/316
** The current solution removes x86 and x64 entries.  It would be prudent to understand why that works.
* Merge other pending pull requests:
** https://github.com/Stichting-MINIX-Research-Foundation/minix/pull/290 ([https://iandouglasscott.com/2019/02/18/cross-compiling-rust-code-to-minix/ source])
** {{TODO}} Check [https://github.com/Stichting-MINIX-Research-Foundation/minix/pulls old pull requests] to see which ones can be merged without issue (and add them to this list)

== Infrastructure ==

* '''Repository'''. We need to know which packages are still buildable with current Minix revision. Requires beefy build server.
* '''Being able to send patches'''. For now, we need to be able to do as much as possible without using *.minix3.org. As part of this goal, we can fork minix repository.

== Testing ==

* '''[[Live Update]]'''. This is new feature and a sale point of Minix 3.4.0, so it should be polished.

== Documentation ==

* '''Wiki content licensing status?'''
** {{TODO}} Select appropriate license 
** {{TODO}} Send appropriately worded notice requesting permission to relicense
** {{TODO}} Update [[Minix Backup Wiki:Copyrights]] with appropriate copyright notice</text>
      <sha1>8vwr3reiojtnucw8amrw8ctvs8ujet6</sha1>
    </revision>
  </page>
  <page>
    <title>Wishlist for 3.4.0</title>
    <ns>0</ns>
    <id>277</id>
    <redirect title="Minix 3.4.0 Showstoppers" />
    <revision>
      <id>430</id>
      <timestamp>2022-02-14T15:24:43Z</timestamp>
      <contributor>
        <username>Peter</username>
        <id>1</id>
      </contributor>
      <comment>Peter moved page [[Wishlist for 3.4.0]] to [[Minix 3.4.0 Showstoppers]]: Better name</comment>
      <origin>430</origin>
      <model>wikitext</model>
      <format>text/x-wiki</format>
      <text bytes="38" sha1="7qsjqoko87a9zd08gq2o8awj90mw4yq" xml:space="preserve">#REDIRECT [[Minix 3.4.0 Showstoppers]]</text>
      <sha1>7qsjqoko87a9zd08gq2o8awj90mw4yq</sha1>
    </revision>
  </page>
</mediawiki>
